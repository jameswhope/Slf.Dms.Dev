 USE [WOOLERY]
GO
/****** Object:  StoredProcedure [dbo].[stp_getRuledMultiDeposits]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_getRuledMultiDeposits]
@RuleAchId int
AS
select u.ruleachid, r.ACHMonth, r.ACHYear, r.transactiondate as LastDateUsed from tbldepositruleach u
inner join tblregister r on r.clientdepositid = u.clientdepositid 
where  cast(convert(varchar,r.transactiondate,111) as datetime) between u.startdate and isnull(u.enddate,getdate())
and r.entrytypeid = 3
--and r.amount = u.depositamount
and r.ACHMonth is not null
and r.ACHYear is not null  
and u.ruleachid = @RuleAchId
order by  r.ACHYear desc, r.ACHMonth desc
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationPaging]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
[stp_NegotiationPaging_Test] 'TEST','[AccountID],[ClientID], [ApplicantFullName],[ApplicantLastName],[ApplicantFirstName],[currentcreditoraccountnumber] , [FundsAvailable], [CurrentCreditor], [AccountStatus], [CurrentAmount], LastOffer, OfferDirection','( (RTrim(LTrim(CurrentCreditor)) = ''Arrow Financial Service LLC'')) AND ( ( LTRIM(CurrentCreditor) LIKE  ''[A-J]%'' )) AND ((((((((((( (FundsAvailable >= (0.1 * CurrentAmount))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Capital One'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Chase'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''First Premier Bank'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Jefferson Capital'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Mann Bracken, LLC'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Merrick Bank'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Midland Credit Management, Inc.'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Washington Mutual'') or (((CurrentCreditor = ''Providan'' )  OR (CurrentCreditor = ''Providian'' ) ))))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''World Financial Network National Bank''))))) and (substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''Y'') OR not( ( LTRIM(CurrentCreditor) LIKE  ''[A-Z]%'' )) AND ((((((((((( (FundsAvailable >= (0.1 * CurrentAmount))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Capital One'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Chase'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''First Premier Bank'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Jefferson Capital'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Mann Bracken, LLC'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Merrick Bank'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Midland Credit Management, Inc.'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Washington Mutual'') or (((CurrentCreditor = ''Providan'' )  OR (CurrentCreditor = ''Providian'' ) ))))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''World Financial Network National Bank''))))) and (substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''Y'')','lastoffer desc',1,500

*/


CREATE procedure [dbo].[stp_NegotiationPaging]
@TableName varchar(max), @DisplayColumns varchar(max),@Where varchar(max), @OrderBy varchar(max), @PageNum int, @PageSize int
as
--declare @where nvarchar(max) set @where = '(substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''Y'') AND (( (((CurrentCreditor LIKE ''%Attorney at Law Hosto and Buchan PLLC%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchan%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchan, P.L.L.C.%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchan, P.L.L.C. Attorneys at Law%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchan, PLLC%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchan%'' )  OR (CurrentCreditor LIKE ''%Hosto & BuchanT.L.L.C. Attornety at Law%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchman PLLC%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchan, P.L.L.C. Attorneys at Law%'' )  OR (CurrentCreditor LIKE ''%Hosto and Buchan, P.L.L.C. Attorneys at Law%'' )  OR (CurrentCreditor LIKE ''%Hosto Buchan and Lawrence%'' )  OR (CurrentCreditor LIKE ''%Hosto Buchan Prater and Lawrence%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater & Lawrence, P.L.L.C.%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater and Lawrence%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater and Lawrence P.L.L.C.%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater and Lawrence,  P.L.L.C.%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater and Lawrence, P.L.L. C.%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater and Lawrence, P.L.L.C%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater and lawrence, P.L.L.C.%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater, and Lawrence, P.L.L.C.%'' )  OR (CurrentCreditor LIKE ''%Hosto,Buchan,Prater and Lawrence, P.L.L.C%'' ) )))) AND ((substring(ApplicantLastName, 1, 1) = '' '' OR substring(ApplicantLastName, 1, 1) = ''"'' OR substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''Q'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''X'' OR substring(ApplicantLastName, 1, 1) = ''Y'' OR substring(ApplicantLastName, 1, 1) = ''Z'') AND (( ( LTRIM(CurrentCreditor) LIKE  ''[A-J]%'' ))) AND ((substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''Y'') AND (not( ( LTRIM(CurrentCreditor) LIKE  ''[A-Z]%'' ))) AND (((( (CurrentAmount >= (0.1 * CurrentAmount))) and not ( (((CurrentCreditor = ''Cap One'' )  OR (CurrentCreditor = ''Cap. One'' )  OR (CurrentCreditor = ''Cap.One'' )  OR (CurrentCreditor = ''Capial One'' )  OR (CurrentCreditor = ''Capita One'' )  OR (CurrentCreditor = ''Capital  One'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital One (Pre Charge off)'' )  OR (CurrentCreditor = ''Capital One Auto Finance'' )  OR (CurrentCreditor = ''Capital One Bank'' )  OR (CurrentCreditor = ''Capital One Card Ctr'' )  OR (CurrentCreditor = ''Capital One Credit Cards'' )  OR (CurrentCreditor = ''Capital One Installment Loans'' )  OR (CurrentCreditor = ''Capital One Recovery'' )  OR (CurrentCreditor = ''Capital One Services'' )  OR (CurrentCreditor = ''Capital One Services Inc.'' )  OR (CurrentCreditor = ''Capital One Services, Inc'' )  OR (CurrentCreditor = ''Capital One(settled)'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital Recovery Service'' )  OR (CurrentCreditor = ''Capital Recovery Service, LLC'' )  OR (CurrentCreditor = ''Capital Recovery Services'' )  OR (CurrentCreditor = ''Capitol One'' )  OR (CurrentCreditor = ''Captial One'' )  OR (CurrentCreditor = ''Captial One Bank'' ) )) or (((CurrentCreditor = ''Capital  One'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital One (Pre Charge off)'' )  OR (CurrentCreditor = ''Capital One Auto Finance'' )  OR (CurrentCreditor = ''Capital One Bank'' )  OR (CurrentCreditor = ''Capital One Card Ctr'' )  OR (CurrentCreditor = ''Capital One Credit Cards'' )  OR (CurrentCreditor = ''Capital One Installment Loans'' )  OR (CurrentCreditor = ''Capital One Recovery'' )  OR (CurrentCreditor = ''Capital One Services'' )  OR (CurrentCreditor = ''Capital One Services Inc.'' )  OR (CurrentCreditor = ''Capital One Services, Inc'' )  OR (CurrentCreditor = ''Capital One'' ) ))) and not ( (((CurrentCreditor = ''Bank One/ Chase'' )  OR (CurrentCreditor = ''Bank One/Chase'' )  OR (CurrentCreditor = ''BP (Chase)'' )  OR (CurrentCreditor = ''Chase'' )  OR (CurrentCreditor = ''Chase / Bank One'' )  OR (CurrentCreditor = ''Chase / First USA'' )  OR (CurrentCreditor = ''Chase / mann bracken'' )  OR (CurrentCreditor = ''Chase Bank'' )  OR (CurrentCreditor = ''Chase Bank USA, N.A.'' )  OR (CurrentCreditor = ''Chase card services'' )  OR (CurrentCreditor = ''Chase Cardmember Services'' )  OR (CurrentCreditor = ''Chase County Community Hospital'' )  OR (CurrentCreditor = ''Chase Credit Card'' )  OR (CurrentCreditor = ''Chase First USA'' )  OR (CurrentCreditor = ''Chase Legal Department'' )  OR (CurrentCreditor = ''Chase Litigation dept'' )  OR (CurrentCreditor = ''Chase Manhattan Bank'' )  OR (CurrentCreditor = ''Chase Receivables'' )  OR (CurrentCreditor = ''Chase Recievables'' )  OR (CurrentCreditor = ''Chase Recovery'' )  OR (CurrentCreditor = ''Chase Student Loan Servicing, LLC'' )  OR (CurrentCreditor = ''Chase Visa'' )  OR (CurrentCreditor = ''Chase-Disney'' )  OR (CurrentCreditor = ''Chase'' )  OR (CurrentCreditor = ''Circuit City/Chase'' )  OR (CurrentCreditor = ''Disney Rewards (Chase)'' )  OR (CurrentCreditor = ''JP Morgan Chase'' )  OR (CurrentCreditor = ''JP Morgan Chase Bank'' )  OR (CurrentCreditor = ''JP Morgan Chase Legal Department'' )  OR (CurrentCreditor = ''JP MORGAN CHASE LEGAL DEPT'' )  OR (CurrentCreditor = ''JP Morgan Chase Legal Dept.'' )  OR (CurrentCreditor = ''JPMorgan Chase Legal  Dept.'' )  OR (CurrentCreditor = ''JPMorgan Chase Legal Department'' )  OR (CurrentCreditor = ''New York Life chase'' )  OR (CurrentCreditor = ''United Mileage Plus / Chase'' ) ))) and not ( (((CurrentCreditor = ''First  Premier'' )  OR (CurrentCreditor = ''First Premeir Bank'' )  OR (CurrentCreditor = ''First Premier'' )  OR (CurrentCreditor = ''First Premier'' )  OR (CurrentCreditor = ''First Premier Bank'' )  OR (CurrentCreditor = ''First Premier Bank.'' )  OR (CurrentCreditor = ''First Premier Bank'' )  OR (CurrentCreditor = ''First Premiere Bank'' ) ))) and not ( (((CurrentCreditor = ''Jefferson Capital'' )  OR (CurrentCreditor = ''Jefferson Capital Systems'' )  OR (CurrentCreditor = ''Jefferson Capital Systems, LLC'' ) ))) and not ( (((CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Chase / mann bracken'' )  OR (CurrentCreditor = ''Mann  Bracken'' )  OR (CurrentCreditor = ''Mann  Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann  Bracken LLC'' )  OR (CurrentCreditor = ''Mann  Bracken, LLC'' )  OR (CurrentCreditor = ''Mann &  Bracken LLC'' )  OR (CurrentCreditor = ''Mann &  Bracken LLC'' )  OR (CurrentCreditor = ''Mann & Bracken'' )  OR (CurrentCreditor = ''Mann & Bracken LLC'' )  OR (CurrentCreditor = ''Mann & Braken'' )  OR (CurrentCreditor = ''Mann and Bracken'' )  OR (CurrentCreditor = ''Mann Backen, LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Bracken  LLC'' )  OR (CurrentCreditor = ''Mann Bracken , LLC'' )  OR (CurrentCreditor = ''Mann Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Bracken Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken L.L.C.'' )  OR (CurrentCreditor = ''Mann Bracken LLC'' )  OR (CurrentCreditor = ''Mann Bracken,  LLC'' )  OR (CurrentCreditor = ''Mann Bracken, L.L.C.'' )  OR (CurrentCreditor = ''Mann Bracken, LCC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC, Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken, LLC.'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Braken'' )  OR (CurrentCreditor = ''Mann Braken,LLC'' )  OR (CurrentCreditor = ''Mann Brocken'' )  OR (CurrentCreditor = ''Mann, Bracken, Layng & Knezo, Attorneys at Law'' )  OR (CurrentCreditor = ''Mannbracken'' ) ))) and not ( (((CurrentCreditor = ''Merrick   Bank'' )  OR (CurrentCreditor = ''Merrick  Bank'' )  OR (CurrentCreditor = ''Merrick Bank'' )  OR (CurrentCreditor = ''Merrick Bank Card'' )  OR (CurrentCreditor = ''Merrick Bank.'' )  OR (CurrentCreditor = ''Merrick Bank'' ) ))) and not ( (RTrim(LTrim(CurrentCreditor)) = ''WAMU'') or (((CurrentCreditor = ''Washington  Mutual'' )  OR (CurrentCreditor = ''Washington Mutal'' )  OR (CurrentCreditor = ''Washington Mutal Bank'' )  OR (CurrentCreditor = ''Washington Mutua'' )  OR (CurrentCreditor = ''Washington Mutual'' )  OR (CurrentCreditor = ''Washington Mutual'' ) )) or (((CurrentCreditor = ''Providian'' )  OR (CurrentCreditor = ''Providian Bancorp'' )  OR (CurrentCreditor = ''Providian Financial'' )  OR (CurrentCreditor = ''Providian National Bank'' ) ))) and not ( (((CurrentCreditor = ''MCM  Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''Midland'' )  OR (CurrentCreditor = ''Midland Credit'' )  OR (CurrentCreditor = ''Midland Credit Agency'' )  OR (CurrentCreditor = ''Midland Credit Management'' )  OR (CurrentCreditor = ''Midland Credit Management Inc.'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc.'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc.'' )  OR (CurrentCreditor = ''Midland Credit MGMT Inc.'' )  OR (CurrentCreditor = ''Midland Funding LLC'' )  OR (CurrentCreditor = ''Midland Marketing'' ) ))) and not ( (((CurrentCreditor LIKE ''%Chadwicks-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Chadwicks/WFNNB%'' )  OR (CurrentCreditor LIKE ''%Express-WFNNB%'' )  OR (CurrentCreditor LIKE ''%King Size/WFNNB%'' )  OR (CurrentCreditor LIKE ''%La Redoute-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Maurices-WFNNB%'' )  OR (CurrentCreditor LIKE ''%New York and Company-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Peebles-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Sports Authority WFNNB%'' )  OR (CurrentCreditor LIKE ''%Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Dress Barn%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Express%'' )  OR (CurrentCreditor LIKE ''%WFNNB - J. Crew%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Jessica London%'' )  OR (CurrentCreditor LIKE ''%WFNNB - King Size%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Lane Bryant%'' )  OR (CurrentCreditor LIKE ''%WFNNB - My World Mastercard%'' )  OR (CurrentCreditor LIKE ''%WFNNB - New York and Company%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Peebles%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Roamans%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB Brylane Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB Friedmans%'' )  OR (CurrentCreditor LIKE ''%WFNNB Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB Victorias Secret%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Avenue%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Dressbarn%'' )  OR (CurrentCreditor LIKE ''%WFNNB- King Size%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Spiegel%'' )  OR (CurrentCreditor LIKE ''%WFNNB-American%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Avenue%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Brylane Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Dress Barn%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Express%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Fina%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Goody%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Gordmans%'' )  OR (CurrentCreditor LIKE ''%WFNNB-La Redoute%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Lane Bryant%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Metrostyle%'' )  OR (CurrentCreditor LIKE ''%WFNNB-New York and Company%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Roamans%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Shop at Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Spiegel%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Stage Stores%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Value City%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Victorica%'' )  OR (CurrentCreditor LIKE ''%WFNNB/Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB%'' )  OR (CurrentCreditor LIKE ''%WFNNB / Woman Within%'' ) ))) and not ( (CurrentCreditor LIKE ''%Zwickers%'' ) or (CurrentCreditor LIKE ''%Eskanos%'' ) or (CurrentCreditor LIKE ''%winn%'' ) or (CurrentCreditor LIKE ''%patenude%'' ) or (CurrentCreditor LIKE ''%peter roach%'' )))  ) AND ( substring(ApplicantLastName, 1, 1) = '' '' OR substring(ApplicantLastName, 1, 1) = ''"'' OR substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''Q'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''X'' OR substring(ApplicantLastName, 1, 1) = ''Y'' OR substring(ApplicantLastName, 1, 1) = ''Z'')) OR (substring(ApplicantLastName, 1, 1) = '' '' OR substring(ApplicantLastName, 1, 1) = ''"'' OR substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''Q'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''X'' OR substring(ApplicantLastName, 1, 1) = ''Y'' OR substring(ApplicantLastName, 1, 1) = ''Z'') AND (( ( LTRIM(CurrentCreditor) LIKE  ''[A-J]%'' ))) AND (((( (CurrentAmount >= (0.1 * CurrentAmount))) and not ( (((CurrentCreditor = ''Cap One'' )  OR (CurrentCreditor = ''Cap. One'' )  OR (CurrentCreditor = ''Cap.One'' )  OR (CurrentCreditor = ''Capial One'' )  OR (CurrentCreditor = ''Capita One'' )  OR (CurrentCreditor = ''Capital  One'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital One (Pre Charge off)'' )  OR (CurrentCreditor = ''Capital One Auto Finance'' )  OR (CurrentCreditor = ''Capital One Bank'' )  OR (CurrentCreditor = ''Capital One Card Ctr'' )  OR (CurrentCreditor = ''Capital One Credit Cards'' )  OR (CurrentCreditor = ''Capital One Installment Loans'' )  OR (CurrentCreditor = ''Capital One Recovery'' )  OR (CurrentCreditor = ''Capital One Services'' )  OR (CurrentCreditor = ''Capital One Services Inc.'' )  OR (CurrentCreditor = ''Capital One Services, Inc'' )  OR (CurrentCreditor = ''Capital One(settled)'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital Recovery Service'' )  OR (CurrentCreditor = ''Capital Recovery Service, LLC'' )  OR (CurrentCreditor = ''Capital Recovery Services'' )  OR (CurrentCreditor = ''Capitol One'' )  OR (CurrentCreditor = ''Captial One'' )  OR (CurrentCreditor = ''Captial One Bank'' ) )) or (((CurrentCreditor = ''Capital  One'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital One (Pre Charge off)'' )  OR (CurrentCreditor = ''Capital One Auto Finance'' )  OR (CurrentCreditor = ''Capital One Bank'' )  OR (CurrentCreditor = ''Capital One Card Ctr'' )  OR (CurrentCreditor = ''Capital One Credit Cards'' )  OR (CurrentCreditor = ''Capital One Installment Loans'' )  OR (CurrentCreditor = ''Capital One Recovery'' )  OR (CurrentCreditor = ''Capital One Services'' )  OR (CurrentCreditor = ''Capital One Services Inc.'' )  OR (CurrentCreditor = ''Capital One Services, Inc'' )  OR (CurrentCreditor = ''Capital One'' ) ))) and not ( (((CurrentCreditor = ''Bank One/ Chase'' )  OR (CurrentCreditor = ''Bank One/Chase'' )  OR (CurrentCreditor = ''BP (Chase)'' )  OR (CurrentCreditor = ''Chase'' )  OR (CurrentCreditor = ''Chase / Bank One'' )  OR (CurrentCreditor = ''Chase / First USA'' )  OR (CurrentCreditor = ''Chase / mann bracken'' )  OR (CurrentCreditor = ''Chase Bank'' )  OR (CurrentCreditor = ''Chase Bank USA, N.A.'' )  OR (CurrentCreditor = ''Chase card services'' )  OR (CurrentCreditor = ''Chase Cardmember Services'' )  OR (CurrentCreditor = ''Chase County Community Hospital'' )  OR (CurrentCreditor = ''Chase Credit Card'' )  OR (CurrentCreditor = ''Chase First USA'' )  OR (CurrentCreditor = ''Chase Legal Department'' )  OR (CurrentCreditor = ''Chase Litigation dept'' )  OR (CurrentCreditor = ''Chase Manhattan Bank'' )  OR (CurrentCreditor = ''Chase Receivables'' )  OR (CurrentCreditor = ''Chase Recievables'' )  OR (CurrentCreditor = ''Chase Recovery'' )  OR (CurrentCreditor = ''Chase Student Loan Servicing, LLC'' )  OR (CurrentCreditor = ''Chase Visa'' )  OR (CurrentCreditor = ''Chase-Disney'' )  OR (CurrentCreditor = ''Chase'' )  OR (CurrentCreditor = ''Circuit City/Chase'' )  OR (CurrentCreditor = ''Disney Rewards (Chase)'' )  OR (CurrentCreditor = ''JP Morgan Chase'' )  OR (CurrentCreditor = ''JP Morgan Chase Bank'' )  OR (CurrentCreditor = ''JP Morgan Chase Legal Department'' )  OR (CurrentCreditor = ''JP MORGAN CHASE LEGAL DEPT'' )  OR (CurrentCreditor = ''JP Morgan Chase Legal Dept.'' )  OR (CurrentCreditor = ''JPMorgan Chase Legal  Dept.'' )  OR (CurrentCreditor = ''JPMorgan Chase Legal Department'' )  OR (CurrentCreditor = ''New York Life chase'' )  OR (CurrentCreditor = ''United Mileage Plus / Chase'' ) ))) and not ( (((CurrentCreditor = ''First  Premier'' )  OR (CurrentCreditor = ''First Premeir Bank'' )  OR (CurrentCreditor = ''First Premier'' )  OR (CurrentCreditor = ''First Premier'' )  OR (CurrentCreditor = ''First Premier Bank'' )  OR (CurrentCreditor = ''First Premier Bank.'' )  OR (CurrentCreditor = ''First Premier Bank'' )  OR (CurrentCreditor = ''First Premiere Bank'' ) ))) and not ( (((CurrentCreditor = ''Jefferson Capital'' )  OR (CurrentCreditor = ''Jefferson Capital Systems'' )  OR (CurrentCreditor = ''Jefferson Capital Systems, LLC'' ) ))) and not ( (((CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Chase / mann bracken'' )  OR (CurrentCreditor = ''Mann  Bracken'' )  OR (CurrentCreditor = ''Mann  Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann  Bracken LLC'' )  OR (CurrentCreditor = ''Mann  Bracken, LLC'' )  OR (CurrentCreditor = ''Mann &  Bracken LLC'' )  OR (CurrentCreditor = ''Mann &  Bracken LLC'' )  OR (CurrentCreditor = ''Mann & Bracken'' )  OR (CurrentCreditor = ''Mann & Bracken LLC'' )  OR (CurrentCreditor = ''Mann & Braken'' )  OR (CurrentCreditor = ''Mann and Bracken'' )  OR (CurrentCreditor = ''Mann Backen, LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Bracken  LLC'' )  OR (CurrentCreditor = ''Mann Bracken , LLC'' )  OR (CurrentCreditor = ''Mann Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Bracken Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken L.L.C.'' )  OR (CurrentCreditor = ''Mann Bracken LLC'' )  OR (CurrentCreditor = ''Mann Bracken,  LLC'' )  OR (CurrentCreditor = ''Mann Bracken, L.L.C.'' )  OR (CurrentCreditor = ''Mann Bracken, LCC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC, Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken, LLC.'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Braken'' )  OR (CurrentCreditor = ''Mann Braken,LLC'' )  OR (CurrentCreditor = ''Mann Brocken'' )  OR (CurrentCreditor = ''Mann, Bracken, Layng & Knezo, Attorneys at Law'' )  OR (CurrentCreditor = ''Mannbracken'' ) ))) and not ( (((CurrentCreditor = ''Merrick   Bank'' )  OR (CurrentCreditor = ''Merrick  Bank'' )  OR (CurrentCreditor = ''Merrick Bank'' )  OR (CurrentCreditor = ''Merrick Bank Card'' )  OR (CurrentCreditor = ''Merrick Bank.'' )  OR (CurrentCreditor = ''Merrick Bank'' ) ))) and not ( (RTrim(LTrim(CurrentCreditor)) = ''WAMU'') or (((CurrentCreditor = ''Washington  Mutual'' )  OR (CurrentCreditor = ''Washington Mutal'' )  OR (CurrentCreditor = ''Washington Mutal Bank'' )  OR (CurrentCreditor = ''Washington Mutua'' )  OR (CurrentCreditor = ''Washington Mutual'' )  OR (CurrentCreditor = ''Washington Mutual'' ) )) or (((CurrentCreditor = ''Providian'' )  OR (CurrentCreditor = ''Providian Bancorp'' )  OR (CurrentCreditor = ''Providian Financial'' )  OR (CurrentCreditor = ''Providian National Bank'' ) ))) and not ( (((CurrentCreditor = ''MCM  Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''Midland'' )  OR (CurrentCreditor = ''Midland Credit'' )  OR (CurrentCreditor = ''Midland Credit Agency'' )  OR (CurrentCreditor = ''Midland Credit Management'' )  OR (CurrentCreditor = ''Midland Credit Management Inc.'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc.'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc.'' )  OR (CurrentCreditor = ''Midland Credit MGMT Inc.'' )  OR (CurrentCreditor = ''Midland Funding LLC'' )  OR (CurrentCreditor = ''Midland Marketing'' ) ))) and not ( (((CurrentCreditor LIKE ''%Chadwicks-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Chadwicks/WFNNB%'' )  OR (CurrentCreditor LIKE ''%Express-WFNNB%'' )  OR (CurrentCreditor LIKE ''%King Size/WFNNB%'' )  OR (CurrentCreditor LIKE ''%La Redoute-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Maurices-WFNNB%'' )  OR (CurrentCreditor LIKE ''%New York and Company-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Peebles-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Sports Authority WFNNB%'' )  OR (CurrentCreditor LIKE ''%Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Dress Barn%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Express%'' )  OR (CurrentCreditor LIKE ''%WFNNB - J. Crew%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Jessica London%'' )  OR (CurrentCreditor LIKE ''%WFNNB - King Size%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Lane Bryant%'' )  OR (CurrentCreditor LIKE ''%WFNNB - My World Mastercard%'' )  OR (CurrentCreditor LIKE ''%WFNNB - New York and Company%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Peebles%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Roamans%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB Brylane Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB Friedmans%'' )  OR (CurrentCreditor LIKE ''%WFNNB Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB Victorias Secret%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Avenue%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Dressbarn%'' )  OR (CurrentCreditor LIKE ''%WFNNB- King Size%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Spiegel%'' )  OR (CurrentCreditor LIKE ''%WFNNB-American%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Avenue%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Brylane Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Dress Barn%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Express%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Fina%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Goody%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Gordmans%'' )  OR (CurrentCreditor LIKE ''%WFNNB-La Redoute%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Lane Bryant%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Metrostyle%'' )  OR (CurrentCreditor LIKE ''%WFNNB-New York and Company%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Roamans%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Shop at Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Spiegel%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Stage Stores%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Value City%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Victorica%'' )  OR (CurrentCreditor LIKE ''%WFNNB/Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB%'' )  OR (CurrentCreditor LIKE ''%WFNNB / Woman Within%'' ) ))) and not ( (CurrentCreditor LIKE ''%Zwickers%'' ) or (CurrentCreditor LIKE ''%Eskanos%'' ) or (CurrentCreditor LIKE ''%winn%'' ) or (CurrentCreditor LIKE ''%patenude%'' ) or (CurrentCreditor LIKE ''%peter roach%'' )))  ) AND ( substring(ApplicantLastName, 1, 1) = '' '' OR substring(ApplicantLastName, 1, 1) = ''"'' OR substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''Q'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''X'' OR substring(ApplicantLastName, 1, 1) = ''Y'' OR substring(ApplicantLastName, 1, 1) = ''Z'')) OR (substring(ApplicantLastName, 1, 1) = '' '' OR substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''Q'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''X'' OR substring(ApplicantLastName, 1, 1) = ''Y'' OR substring(ApplicantLastName, 1, 1) = ''Z'') AND (( ( LTRIM(CurrentCreditor) LIKE  ''[K-Z]%'' ))) AND (((( (CurrentAmount >= (0.1 * CurrentAmount))) and not ( (((CurrentCreditor = ''Cap One'' )  OR (CurrentCreditor = ''Cap. One'' )  OR (CurrentCreditor = ''Cap.One'' )  OR (CurrentCreditor = ''Capial One'' )  OR (CurrentCreditor = ''Capita One'' )  OR (CurrentCreditor = ''Capital  One'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital One (Pre Charge off)'' )  OR (CurrentCreditor = ''Capital One Auto Finance'' )  OR (CurrentCreditor = ''Capital One Bank'' )  OR (CurrentCreditor = ''Capital One Card Ctr'' )  OR (CurrentCreditor = ''Capital One Credit Cards'' )  OR (CurrentCreditor = ''Capital One Installment Loans'' )  OR (CurrentCreditor = ''Capital One Recovery'' )  OR (CurrentCreditor = ''Capital One Services'' )  OR (CurrentCreditor = ''Capital One Services Inc.'' )  OR (CurrentCreditor = ''Capital One Services, Inc'' )  OR (CurrentCreditor = ''Capital One(settled)'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital Recovery Service'' )  OR (CurrentCreditor = ''Capital Recovery Service, LLC'' )  OR (CurrentCreditor = ''Capital Recovery Services'' )  OR (CurrentCreditor = ''Capitol One'' )  OR (CurrentCreditor = ''Captial One'' )  OR (CurrentCreditor = ''Captial One Bank'' ) )) or (((CurrentCreditor = ''Capital  One'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital One (Pre Charge off)'' )  OR (CurrentCreditor = ''Capital One Auto Finance'' )  OR (CurrentCreditor = ''Capital One Bank'' )  OR (CurrentCreditor = ''Capital One Card Ctr'' )  OR (CurrentCreditor = ''Capital One Credit Cards'' )  OR (CurrentCreditor = ''Capital One Installment Loans'' )  OR (CurrentCreditor = ''Capital One Recovery'' )  OR (CurrentCreditor = ''Capital One Services'' )  OR (CurrentCreditor = ''Capital One Services Inc.'' )  OR (CurrentCreditor = ''Capital One Services, Inc'' )  OR (CurrentCreditor = ''Capital One'' ) ))) and not ( (((CurrentCreditor = ''Bank One/ Chase'' )  OR (CurrentCreditor = ''Bank One/Chase'' )  OR (CurrentCreditor = ''BP (Chase)'' )  OR (CurrentCreditor = ''Chase'' )  OR (CurrentCreditor = ''Chase / Bank One'' )  OR (CurrentCreditor = ''Chase / First USA'' )  OR (CurrentCreditor = ''Chase / mann bracken'' )  OR (CurrentCreditor = ''Chase Bank'' )  OR (CurrentCreditor = ''Chase Bank USA, N.A.'' )  OR (CurrentCreditor = ''Chase card services'' )  OR (CurrentCreditor = ''Chase Cardmember Services'' )  OR (CurrentCreditor = ''Chase County Community Hospital'' )  OR (CurrentCreditor = ''Chase Credit Card'' )  OR (CurrentCreditor = ''Chase First USA'' )  OR (CurrentCreditor = ''Chase Legal Department'' )  OR (CurrentCreditor = ''Chase Litigation dept'' )  OR (CurrentCreditor = ''Chase Manhattan Bank'' )  OR (CurrentCreditor = ''Chase Receivables'' )  OR (CurrentCreditor = ''Chase Recievables'' )  OR (CurrentCreditor = ''Chase Recovery'' )  OR (CurrentCreditor = ''Chase Student Loan Servicing, LLC'' )  OR (CurrentCreditor = ''Chase Visa'' )  OR (CurrentCreditor = ''Chase-Disney'' )  OR (CurrentCreditor = ''Chase'' )  OR (CurrentCreditor = ''Circuit City/Chase'' )  OR (CurrentCreditor = ''Disney Rewards (Chase)'' )  OR (CurrentCreditor = ''JP Morgan Chase'' )  OR (CurrentCreditor = ''JP Morgan Chase Bank'' )  OR (CurrentCreditor = ''JP Morgan Chase Legal Department'' )  OR (CurrentCreditor = ''JP MORGAN CHASE LEGAL DEPT'' )  OR (CurrentCreditor = ''JP Morgan Chase Legal Dept.'' )  OR (CurrentCreditor = ''JPMorgan Chase Legal  Dept.'' )  OR (CurrentCreditor = ''JPMorgan Chase Legal Department'' )  OR (CurrentCreditor = ''New York Life chase'' )  OR (CurrentCreditor = ''United Mileage Plus / Chase'' ) ))) and not ( (((CurrentCreditor = ''First  Premier'' )  OR (CurrentCreditor = ''First Premeir Bank'' )  OR (CurrentCreditor = ''First Premier'' )  OR (CurrentCreditor = ''First Premier'' )  OR (CurrentCreditor = ''First Premier Bank'' )  OR (CurrentCreditor = ''First Premier Bank.'' )  OR (CurrentCreditor = ''First Premier Bank'' )  OR (CurrentCreditor = ''First Premiere Bank'' ) ))) and not ( (((CurrentCreditor = ''Jefferson Capital'' )  OR (CurrentCreditor = ''Jefferson Capital Systems'' )  OR (CurrentCreditor = ''Jefferson Capital Systems, LLC'' ) ))) and not ( (((CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Chase / mann bracken'' )  OR (CurrentCreditor = ''Mann  Bracken'' )  OR (CurrentCreditor = ''Mann  Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann  Bracken LLC'' )  OR (CurrentCreditor = ''Mann  Bracken, LLC'' )  OR (CurrentCreditor = ''Mann &  Bracken LLC'' )  OR (CurrentCreditor = ''Mann &  Bracken LLC'' )  OR (CurrentCreditor = ''Mann & Bracken'' )  OR (CurrentCreditor = ''Mann & Bracken LLC'' )  OR (CurrentCreditor = ''Mann & Braken'' )  OR (CurrentCreditor = ''Mann and Bracken'' )  OR (CurrentCreditor = ''Mann Backen, LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Bracken  LLC'' )  OR (CurrentCreditor = ''Mann Bracken , LLC'' )  OR (CurrentCreditor = ''Mann Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Bracken Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken L.L.C.'' )  OR (CurrentCreditor = ''Mann Bracken LLC'' )  OR (CurrentCreditor = ''Mann Bracken,  LLC'' )  OR (CurrentCreditor = ''Mann Bracken, L.L.C.'' )  OR (CurrentCreditor = ''Mann Bracken, LCC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC, Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken, LLC.'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Braken'' )  OR (CurrentCreditor = ''Mann Braken,LLC'' )  OR (CurrentCreditor = ''Mann Brocken'' )  OR (CurrentCreditor = ''Mann, Bracken, Layng & Knezo, Attorneys at Law'' )  OR (CurrentCreditor = ''Mannbracken'' ) ))) and not ( (((CurrentCreditor = ''Merrick   Bank'' )  OR (CurrentCreditor = ''Merrick  Bank'' )  OR (CurrentCreditor = ''Merrick Bank'' )  OR (CurrentCreditor = ''Merrick Bank Card'' )  OR (CurrentCreditor = ''Merrick Bank.'' )  OR (CurrentCreditor = ''Merrick Bank'' ) ))) and not ( (RTrim(LTrim(CurrentCreditor)) = ''WAMU'') or (((CurrentCreditor = ''Washington  Mutual'' )  OR (CurrentCreditor = ''Washington Mutal'' )  OR (CurrentCreditor = ''Washington Mutal Bank'' )  OR (CurrentCreditor = ''Washington Mutua'' )  OR (CurrentCreditor = ''Washington Mutual'' )  OR (CurrentCreditor = ''Washington Mutual'' ) )) or (((CurrentCreditor = ''Providian'' )  OR (CurrentCreditor = ''Providian Bancorp'' )  OR (CurrentCreditor = ''Providian Financial'' )  OR (CurrentCreditor = ''Providian National Bank'' ) ))) and not ( (((CurrentCreditor = ''MCM  Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''Midland'' )  OR (CurrentCreditor = ''Midland Credit'' )  OR (CurrentCreditor = ''Midland Credit Agency'' )  OR (CurrentCreditor = ''Midland Credit Management'' )  OR (CurrentCreditor = ''Midland Credit Management Inc.'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc.'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc.'' )  OR (CurrentCreditor = ''Midland Credit MGMT Inc.'' )  OR (CurrentCreditor = ''Midland Funding LLC'' )  OR (CurrentCreditor = ''Midland Marketing'' ) ))) and not ( (((CurrentCreditor LIKE ''%Chadwicks-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Chadwicks/WFNNB%'' )  OR (CurrentCreditor LIKE ''%Express-WFNNB%'' )  OR (CurrentCreditor LIKE ''%King Size/WFNNB%'' )  OR (CurrentCreditor LIKE ''%La Redoute-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Maurices-WFNNB%'' )  OR (CurrentCreditor LIKE ''%New York and Company-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Peebles-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Sports Authority WFNNB%'' )  OR (CurrentCreditor LIKE ''%Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Dress Barn%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Express%'' )  OR (CurrentCreditor LIKE ''%WFNNB - J. Crew%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Jessica London%'' )  OR (CurrentCreditor LIKE ''%WFNNB - King Size%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Lane Bryant%'' )  OR (CurrentCreditor LIKE ''%WFNNB - My World Mastercard%'' )  OR (CurrentCreditor LIKE ''%WFNNB - New York and Company%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Peebles%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Roamans%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB Brylane Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB Friedmans%'' )  OR (CurrentCreditor LIKE ''%WFNNB Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB Victorias Secret%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Avenue%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Dressbarn%'' )  OR (CurrentCreditor LIKE ''%WFNNB- King Size%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Spiegel%'' )  OR (CurrentCreditor LIKE ''%WFNNB-American%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Avenue%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Brylane Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Dress Barn%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Express%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Fina%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Goody%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Gordmans%'' )  OR (CurrentCreditor LIKE ''%WFNNB-La Redoute%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Lane Bryant%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Metrostyle%'' )  OR (CurrentCreditor LIKE ''%WFNNB-New York and Company%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Roamans%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Shop at Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Spiegel%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Stage Stores%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Value City%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Victorica%'' )  OR (CurrentCreditor LIKE ''%WFNNB/Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB%'' )  OR (CurrentCreditor LIKE ''%WFNNB / Woman Within%'' ) ))) and not ( (CurrentCreditor LIKE ''%Zwickers%'' ) or (CurrentCreditor LIKE ''%Eskanos%'' ) or (CurrentCreditor LIKE ''%winn%'' ) or (CurrentCreditor LIKE ''%patenude%'' ) or (CurrentCreditor LIKE ''%peter roach%'' )))  ) AND ( substring(ApplicantLastName, 1, 1) = '' '' OR substring(ApplicantLastName, 1, 1) = ''"'' OR substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''Q'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''X'' OR substring(ApplicantLastName, 1, 1) = ''Y'' OR substring(ApplicantLastName, 1, 1) = ''Z''))))'
declare @start as int set @start = (@PageNum-1)*@PageSize
declare @end as int set @end = @PageNum*@PageSize-1

EXEC
('
	declare @vtblNDS table
	(
		ClientID int,
		AccountID int,
		SSN varchar(50),
		ApplicantFullName varchar(101),
		ApplicantLastName varchar(50),
		ApplicantFirstName varchar(50),
		ApplicantState varchar(50),
		ApplicantCity varchar(50),
		ApplicantZipCode varchar(50),
		SDAAccount varchar(50),
		FundsAvailable money,
		OriginalCreditor varchar(50),
		CurrentCreditor varchar(50),
		CurrentCreditorState varchar(50),
		CurrentCreditorAccountNumber varchar(30),
		LeastDebtAmount money,
		CurrentAmount money,
		AccountStatus varchar(255),
		AccountAge int,
		ClientAge int,
		LastSettled int,
		NextDepositDate datetime,
		NextDepositAmount money,
		LastOffer datetime,
		OfferDirection varchar(50)
	)

	INSERT INTO
		@vtblNDS
	SELECT
		ns.ClientID
		,ns.AccountID
		,ns.SSN
		,ns.ApplicantFullName
		,ns.ApplicantLastName
		,ns.ApplicantFirstName
		,ns.ApplicantState
		,ns.ApplicantCity
		,ns.ApplicantZipCode
		,ns.SDAAccount
		,ns.FundsAvailable
		,ns.OriginalCreditor
		,ns.CurrentCreditor
		,ns.CurrentCreditorState
		,ns.CurrentCreditorAccountNumber
		,ns.LeastDebtAmount
		,ns.CurrentAmount
		,ns.AccountStatus
		,ns.AccountAge
		,ns.ClientAge
		,ns.LastSettled
		,ns.NextDepositDate
		,ns.NextDepositAmount
		,ns.LastOffer
		,ns.OfferDirection
	FROM
		vwNegotiationDistributionSource as ns 

	SELECT
		'+ @DisplayColumns + '
	FROM
		(
			SELECT
				row_number() OVER (ORDER BY ' + @OrderBy + ') as RowNum,
				*
			FROM
				@vtblNDS
			WHERE
				(' + @where + ')
		) as drv
	WHERE
		RowNum between ' + @start + ' and ' + @end 
)
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getCreditors]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_enrollment_getCreditors]
(
	@applicantID int
)
as
	BEGIN
		IF @applicantID <> 0
		BEGIN
			select 
				  Name [Creditor]
				, AccountNumber
				, Balance
				, LeadCreditorInstance
				, Phone
				, Ext
				, Street
				, Street2
				, City
				, StateID
				, ZipCode
				--, isnull(ForName,'') [ForCreditor]
				--, ForStreet
				--, ForStreet2
				--, ForCity
				--, ForStateID
				--, ForZipCode
				, IntRate
				, MinPayment
			from 
				dbo.tblLeadCreditorInstance
			where
				leadApplicantID = @applicantID
		END
	END
GO
/****** Object:  StoredProcedure [dbo].[stp_CheckScan_InsertCheck]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_CheckScan_InsertCheck]
(
	@regID int,
	@clientID int,
	@frontPath varchar(max),
	@backPath varchar(max),
	@CheckRouting varchar(20),
	@CheckAccountNum varchar(20),
	@CheckAmount money,
	@CheckAuxOnus varchar(20),
	@CheckNumber varchar(50),
	@CheckType varchar(50),
	@CheckOnUs varchar(50),
	@CheckRoutingCheckSum varchar(1),
	@CheckMicrLine varchar(200),
	@userID int,
	@SaveID varchar(50)
)
as
BEGIN
	INSERT INTO [tblICLChecks]
	([RegisterID],[clientID],[CheckFrontPath],[CheckBackPath],[Created],[CreatedBy],[Processed],[ProcessedBy],[Verified]
	,[VerifiedBy],[CheckRouting],[CheckAccountNum],[CheckAmount],[CheckAuxOnus],[CheckNumber],[CheckType],[CheckOnUs]	,[CheckRoutingCheckSum],[CheckMicrLine],[SaveGUID])
	VALUES
	(
		@regID	
		,@clientID
		,@frontPath
		,@backPath
		,getdate()
		,@userID
		,NULL
		,NULL
		,getdate()
		,@userid
		,@CheckRouting
		,@CheckAccountNum
		,@CheckAmount
		,@CheckAuxOnus
		,@CheckNumber
		,@CheckType
		,@CheckOnUs
		,@CheckRoutingCheckSum
		,@CheckMicrLine
		,@SaveID
	)

	Select  scope_identity()
END

GRANT EXEC ON stp_CheckScan_InsertCheck TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_LexxCMS_client_updatePerson]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LexxCMS_client_updatePerson]

	(
		@personID int,
	@SSN varchar(50),
	@FirstName varchar(50),
	@LastName varchar(50),
	@DateOfBirth datetime,
	@Street varchar(255),
	@Street2 varchar(255),
	@City varchar(50),
	@StateID int,
	@ZipCode varchar(50),
	@LastModifiedBy int,
	@EmailAddress varchar(200)
	)


AS
BEGIN
	UPDATE [tblPerson]
	SET [SSN] = @SSN
	,[FirstName] = @FirstName
	,[LastName] = @LastName
	,[DateOfBirth] = @DateOfBirth
	,[Street] = @Street
	,[Street2] = @Street2
	,[City] = @City
	,[StateID] = @StateID
	,[ZipCode] = @ZipCode
	,[LastModified] = getdate()
	,[LastModifiedBy] = @LastModifiedBy
	,[emailaddress] = @EmailAddress
	WHERE personid = @personid

END


GRANT EXEC ON stp_LexxCMS_client_updatePerson TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_Agency_DashBoard_NetIncomeChartData]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Agency_DashBoard_NetIncomeChartData]
(
	@UserID int,
	@CompanyID int = -1 
)

as
BEGIN
	declare @startdate datetime 
	set @startdate = dateadd(d,-15,getdate())

	declare @CommVSChargeBack table(Period datetime, CommissionCount int, CommissionAmount money, ChargeBackCount int, ChargeBackAmount money)
	declare @vtblCal table(TransActionDate datetime);
		
	-- fill calendar
	with    mycte as
	(
	select cast('1/1/' + cast(year(getdate()) as varchar) as datetime) DateValue
	union all
	select DateValue + 1
	from    mycte    
	where   DateValue + 1 <= getdate()
	)
	insert into @vtblCal
	select  top 5 DateValue
	from    mycte
	where CONVERT(BIT, CASE WHEN datepart(dw, DateValue) IN (1,7) THEN 0 ELSE 1 END) = 1 and datevalue < getdate() order by datevalue desc
	OPTION  (MAXRECURSION 0)

	--Fill Period
	Insert into  @CommVSChargeBack( CommissionCount, CommissionAmount, Period)
	select count(cp.commpayid) as Qty, 
		   sum(cp.amount) as Amount,  
		   convert(varchar(10),cbt.batchdate,101) as [period]
	from tblcommpay cp
	inner join tblcommbatch cbt on cbt.commbatchid = cp.commbatchid and cbt.batchdate >= @startDate  
	inner join tblcommstruct cs on cs.commstructid = cp.commstructid
	inner join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID	
	inner join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	inner join tblregisterpayment rp on rp.registerpaymentid = cp.registerpaymentid
	inner join tblregister r on r.registerid = rp.feeregisterid
	inner join tblclient c on c.clientid = r.clientid 	
	inner join tbluserclientaccess uc on uc.userid = uca.userid and c.created between uc.clientcreatedfrom and uc.clientcreatedto	
	inner join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = c.agencyid
	group by  convert(varchar(10),cbt.batchdate,101) 

	select count(cb.commchargebackid) as Qty, sum(cb.amount) as Amount, convert(varchar(10),cbt.batchdate,101) as [period] 
	into #t
	from tblcommchargeback cb
	inner join tblcommbatch cbt on cbt.commbatchid = cb.commbatchid and cbt.batchdate >= @startDate 
	inner join tblcommstruct cs on cs.commstructid = cb.commstructid
	inner join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID	
	inner join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	inner join tblregisterpayment rp on rp.registerpaymentid = cb.registerpaymentid
	inner join tblregister r on r.registerid = rp.feeregisterid
	inner join tblclient c on c.clientid = r.clientid 
	inner join tbluserclientaccess uc on uc.userid = uca.userid and c.created between uc.clientcreatedfrom and uc.clientcreatedto	
	inner join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = c.agencyid
	group by  convert(varchar(10),cbt.batchdate,101)

	Update @CommVSChargeBack Set
	ChargeBackCount = t.Qty,
	ChargeBackAmount = t.Amount
	From @CommVSChargeBack c
	join #t t on t.period = c.period

	Insert into  @CommVSChargeBack( ChargeBackCount, ChargeBackAmount, Period)
	Select  t.qty, t.amount, t.period 
	from #t t
	where t.period not in (select period from @CommVSChargeBack)

	declare @income varchar(1000), @chargeback varchar(1000), @net varchar(1000), @balance varchar(1000)

	select @net = coalesce(@net + ', ', '') + cast((isnull(CommissionAmount,0) - isnull(ChargeBackAmount,0)) as varchar(20)) + ' [' +  cast(month(vc.transactiondate) as varchar) + '/' + cast(day(vc.transactiondate) as varchar) + ']'
	from @vtblCal as vc 
	left outer join @CommVSChargeBack as ccb on convert(varchar(10),ccb.period,101) = convert(varchar(10),vc.transactiondate,101)
	order by vc.transactiondate

	exec('
		select ''Net Fee Payments'', ' + @net
		)

	drop table #t
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMattersbyClientAccount]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <08 - 03 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Decription  : Get Matter detail information based on ClientId and AccountId
*/

CREATE procedure [dbo].[stp_GetMattersbyClientAccount]
(
	@ClientId int,
    @AccountId int
)
AS


BEGIN


select

m.MatterId, m.MatterTypeId,
m.MatterDate,
m.MatterNumber,
m.MatterMemo,
c.ClientId,
c.AccountNumber,
m.MatterNumber,
ti.AccountNumber,
p.FirstName+' '+ p.LastName as ClientName,
co.[Name] as Firm,
CASE WHEN m.AttorneyId is null then 'None'
	 WHEN m.AttorneyId = 0 then		'TBD'
	 ELSE at.FirstName+' '+ at.LastName END as Attorney,
msc.MatterStatusCodeId,
--msc.MatterStatusCode,
m.CreatedDateTime, m.CreatedBy, m.CreditorInstanceId, 
ms.MatterStatusId,
ms.MatterStatus as MatterStatusCode, 
m.MatterSubStatusId, 
(select MatterSubStatus from tblmattersubstatus where mattersubstatusid=m.MatterSubStatusId) as MatterSubStatus,
mt.MatterGroupId



from 

dbo.tblMatter m
join dbo.tblClient c on c.ClientId=m.ClientId
join dbo.tblPerson p on c.PrimaryPersonId =p.PersonId
join dbo.tblCompany co on co.CompanyId=c.CompanyId
join dbo.tblMatterStatusCode as msc on msc.MatterStatusCodeId = m.MatterStatusCodeId
left outer join tblMatterType mt on mt.MatterTypeId = m.mattertypeid
join tblAccount ac on ac.ClientId=c.ClientId 
and ac.AccountId= @AccountId

join tblCreditorInstance ti on ti.CreditorInstanceId=m.CreditorInstanceId 
and ti.AccountId= ac.AccountId

--join tblCreditorInstance ti on ti.CreditorInstanceId=ac.CurrentCreditorInstanceId 
--and Right(m.MatterNumber,4)= Right(ti.AccountNumber,4)
left join dbo.tblAttorney at on at.AttorneyId = m.AttorneyId 
left outer join dbo.tblMatterStatus as ms on ms.MatterStatusId = m.MatterStatusId

where c.ClientId=@ClientId and IsNull(m.IsDeleted,0)=0

order by m.MatterDate,m.MatterNumber

END
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertMultiDepositRule]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_InsertMultiDepositRule]
(
@StartDate datetime,
@EndDate datetime,
@DepositDay int,
@DepositAmount money,
@BankAccountID int,
@CreatedBy int,
@LastModifiedBy int,
@ClientDepositId int,
@OldRuleID int = 0,
@Locked bit = 0
)
as
BEGIN
	INSERT INTO [tblDepositRuleAch]([StartDate],[EndDate],[DepositDay],[DepositAmount],[BankAccountID],[Created],[CreatedBy],[LastModified],[LastModifiedBy],[ClientDepositId], [OldRuleID], [Locked])
	VALUES (@StartDate,@EndDate,@DepositDay,@DepositAmount,@BankAccountID,getdate(),@CreatedBy,getdate(),@LastModifiedBy,@ClientDepositId, @OldRuleID, @Locked)
END


GRANT EXEC ON stp_InsertMultiDepositRule TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetUserActivity]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetUserActivity]
	(
		@returntop int = 30
	)

as


exec
(
	'select top 0
		*
	from
		(
			select
				tblusersearch.userid,
				tbluser.username,
				''Searched For'' as type,
				null as typeid,
				tblusersearch.terms + '' ('' + convert(varchar(10), tblusersearch.results) + '')'' as activity,
				tblusersearch.search as [when]
			from
				tblusersearch inner join
				tbluser on tblusersearch.userid = tbluser.userid
			union
			select
				tbluservisit.userid,
				tbluser.username,
				''Visited '' + tbluservisit.type as type,
				tbluservisit.typeid,
				tbluservisit.display as activity,
				tbluservisit.visit as [when]
			from
				tbluservisit inner join
				tbluser on tbluservisit.userid = tbluser.userid
		)
		as derivedtbl
	order by
		[when] desc'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_QueryResults_ProjectedCommission]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_QueryResults_ProjectedCommission]
(
	@commrecid int = null,	
	@monthdate datetime,
	@col int,
	@ach bit = null
)
as

set @col=@col+1

declare @ismca bit

if @col in (1,3) begin --potential

	if @col=1 begin
		set @ismca=1
	end else begin
		set @ismca=0
	end

	select 
		'client' as [type],
		isnull(pc.clientid,0) as typeid,
		firstname [First Name],
		lastname [Last Name],
		mca MonthlyCommitAmt,
		da ProjectedDepAmt,
		depositmethod DepMethod,
		isnull(sum(commissionearned),0) as ProjectedCommEarned
	from 
		tblprojectedclient c left outer join 
		tblprojectedcommission pc on 
			c.clientid=pc.clientid 
			and c.[month]=pc.[month]
			and c.[year]=pc.[year]
	where
		ach=isnull(@ach,ach)
		and (ismca is null or ismca=@ismca)
		and (@commrecid is null or @commrecid=commrecid)
		and month(@monthdate)=c.[month]
		and year(@monthdate)=c.[year]
	group by
		pc.clientid,
		firstname,
		lastname,
		mca,
		da,
		depositmethod,
		ach,
		exceptionreason
	order by
		lastname,
		firstname
end else if @col=2 begin  --exceptions

	select 
		'client' as [type],
		c.clientid as typeid,
		firstname [First Name],
		lastname [Last Name],
		mca MonthlyCommitAmt,
		da ProjectedDepAmt,
		depositmethod DepMethod,
		isnull(sum(case when ismca=0 then commissionearned else 0 end),0) as ProjectedCommEarned,
		exceptionreason as Reason
	from 
		tblprojectedclient c left outer join 
		tblprojectedcommission pc on 
			c.clientid=pc.clientid 
			and c.[month]=pc.[month]
			and c.[year]=pc.[year]
	where
		ach=isnull(@ach,ach)
		and not c.exceptionreason is null
		and (@commrecid is null or @commrecid=commrecid)
		and month(@monthdate)=c.[month]
		and year(@monthdate)=c.[year]
		
	group by
		c.clientid,
		firstname,
		lastname,
		mca,
		da,
		depositmethod,
		ach,
		exceptionreason
	order by
		lastname,
		firstname
end else if @col in (6,7) begin
	select 
		'client' as [type],
		ca.clientid as typeid,
		p.firstname [First Name],
		p.lastname [Last Name],
		isnull(c.depositmethod,'Check') DepMethod,
		isnull(sum(ca.FeePaymentAmount),0) as SumOfPayments,
		isnull(sum(ca.CommissionEarned),0) as Commission
	from 
		tblprojectedcommissionactual ca inner join
		tblclient c on ca.clientid=c.clientid inner join
		tblperson p on c.primarypersonid=p.personid
	where
		(case when depositmethod='ach' then 1 else 0 end )=isnull(@ach,(case when depositmethod='ach' then 1 else 0 end))
		and (@commrecid is null or @commrecid=commrecid)
		and month(@monthdate)=ca.[month]
		and year(@monthdate)=ca.[year]
		and ca.col=@col
	group by
		ca.clientid,
		p.firstname,
		p.lastname,
		c.depositmethod
	order by 
		p.lastname,
		p.firstname
end else if @col in (4,5,8) begin
	select 
		'client' as [type],
		hc.typeid,
		FirstName,
		LastName,
		c.depositamount MonthlyCommitAmt,
		customvalue3 as ProjectedDepAmt,
		isnull(c.depositmethod,'Check') DepMethod,
		customvalue2 as ProjectedCommMissed,
		customvalue as Reason
	from
		tblhomepageclientcache hc inner join
		tblclient c on hc.typeid=c.clientid inner join
		tblperson p on c.primarypersonid=p.personid
	where
		month(@monthdate)=hc.[month]
		and year(@monthdate)=hc.[year]		
		and ((hc.commrecid is null and @commrecid is null) or 
			@commrecid=hc.commrecid)
		and hc.col=@col
		and hc.ach=isnull(@ach,ach)
	order by 
		p.lastname,
		p.firstname
end
GO
/****** Object:  Table [dbo].[tblRegisterPayment]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblRegisterPayment](
	[RegisterPaymentId] [int] IDENTITY(1,1) NOT NULL,
	[PaymentDate] [datetime] NOT NULL,
	[FeeRegisterId] [int] NOT NULL,
	[Amount] [money] NOT NULL,
	[Voided] [bit] NOT NULL CONSTRAINT [DF_tblRegisterPayment_Voided]  DEFAULT ((0)),
	[Bounced] [bit] NOT NULL CONSTRAINT [DF_tblRegisterPayment_Bounced]  DEFAULT ((0)),
	[PFOBalance] [money] NOT NULL CONSTRAINT [DF_tblRegisterPayment_PFOBalance]  DEFAULT ((0)),
	[SDABalance] [money] NOT NULL CONSTRAINT [DF_tblRegisterPayment_SDABalance]  DEFAULT ((0)),
	[Clear] [datetime] NULL,
	[ClearBy] [int] NULL,
	[VoidDate] [datetime] NULL,
	[BounceDate] [datetime] NULL,
	[Created] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[Modified] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ReferenceRegisterPaymentID] [int] NULL,
 CONSTRAINT [PK_tblRegisterPayment] PRIMARY KEY CLUSTERED 
(
	[RegisterPaymentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegisterPayment_7_1134627085__K3_K5_K6_2_4] ON [dbo].[tblRegisterPayment] 
(
	[FeeRegisterId] ASC,
	[Voided] ASC,
	[Bounced] ASC
)
INCLUDE ( [PaymentDate],
[Amount]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[stp_CheckScan_DeleteCheck]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_CheckScan_DeleteCheck]
(
	@check21ID int
)
as
BEGIN
	update tblICLChecks
	set DeleteDate = getdate()
	where check21ID = @check21ID
END


GRANT EXEC ON stp_CheckScan_DeleteCheck TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientFile_getClientInfo]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ClientFile_getClientInfo]
(
	@clientID int
)
as
BEGIN

	/*development
	declare @clientID int
	set @clientID = 88733
	*/

		select PrimaryOrder,Relationship,Name,Gender,SSN,Address,[ContactInfo] = left(ContactInfo,len(ContactInfo)-1)
from
(
SELECT 
	case when p.relationship = 'Prime' then 1 else 0 end as PrimaryOrder
	, isnull(p.relationship,'') as [Relationship]
	, p.FirstName + ' ' + p.LastName AS [Name]
	, isnull(p.gender,'') as [Gender]
	, isnull(p.SSN,'') as [SSN]
	, case when p.street2 is null then isnull(p.Street,'') + char(13) else isnull(p.Street,'') + char(13) + isnull(p.Street2,'') + char(13) end 
	+ isnull(case when p.stateid  = 0 then p.City + p.ZipCode else p.City + ', ' + s.Abbreviation + ' ' + p.ZipCode end,'')
	as Address
	,(select pt.name + ': (' + convert(varchar,isnull(areacode,'')) + ')' +  convert(varchar, case when not number is null then right(number,3) + '-' + left(number,4) else '' end ) + case when extension is null then '' else 'Ext: ' +convert(varchar,extension) end + ','
from tblPersonPhone pp inner join tblphone p on pp.phoneid = p.phoneid inner join tblPhoneType pt on pt.phonetypeid = p.phonetypeid
where pp.personid = c.primarypersonid FOR XML PATH('') )[ContactInfo]
FROM tblClient AS c 
	INNER JOIN tblPerson AS p ON c.ClientID = p.ClientID 
	LEFT OUTER JOIN tblState AS s ON p.StateID = s.StateID 
WHERE
	(c.ClientID = @clientID) 
) as cData
order by PrimaryOrder desc

END

GRANT EXEC ON stp_ClientFile_getClientInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyBatchSummary3]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AgencyBatchSummary3]
(
	@UserID int,
	@CompanyID int = -1
)
as
begin
/*
	Logic based off stp_ReportGetCommissionBatchTransfers. This proc will replace 
	stp_ReportGetAgencyCommission and is used used when displaying the Agency Batches summary 
	on the agency home page. New proc allows client filtering by creation date.

	12.15.08
	Joins streamlined to match other procs used on the agency portal interface so that all are pulling
	the same results.
	
	01.06.09
	Join to tblUserClientAccess to filter by client created.
	
	01/23/09
	Optional filtering by company id
	
	02/05/09
	Join to tblUserAgencyAccess
*/

declare @vtblCal table (BatchDate datetime)
declare @minBatchDate datetime;

-- fill calendar
with mycte as
(
select cast('1/1/' + cast(year(getdate()) as varchar) as datetime) DateValue
union all
select DateValue + 1
from    mycte    
where   DateValue + 1 < getdate()
)

insert into @vtblCal
select  top 5 DateValue
from    mycte
where CONVERT(BIT, CASE WHEN datepart(dw, DateValue) IN (1,7) THEN 0 ELSE 1 END) = 1 and datevalue < getdate() order by datevalue desc
OPTION  (MAXRECURSION 0)

select @minBatchDate = min(BatchDate)
from @vtblCal


SELECT 
	CommBatchID
,	BatchDate
,	sum(Amount) as Amount 
,	CommRecID
,	CommRec
,	Company
,	Agency
FROM 
(
	SELECT 
		cp.CommBatchID
	,	b.BatchDate
	,	cp.Amount 
	,	cr.CommRecID
	,	cr.Display [CommRec]
	,	ShortCoName [Company]
	,	a.Code [Agency]
	FROM 
		tblCommPay cp
		join tblcommbatch b on b.commbatchid = cp.commbatchid and b.batchdate >= @minBatchDate  
		join tblcommstruct cs on cs.commstructid = cp.commstructid
		join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID	
		join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
		join tblcompany comp on comp.companyid = uca.companyid
		join tblCommRec cr on cr.CommRecID = cs.CommRecID
		join tblRegisterPayment rp on rp.RegisterPaymentID = cp.RegisterPaymentID 
		join tblRegister r on r.RegisterID = rp.FeeRegisterID 
		join tblClient c on c.ClientID = r.ClientID 
		join tbluserclientaccess uc on uc.userid = uca.userid and c.Created between uc.ClientCreatedFrom and uc.ClientCreatedTo
		join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = c.agencyid
		join tblCommScen s on s.commscenid = b.commscenid
		join tblAgency a on a.agencyid = s.agencyid

	UNION ALL 

	SELECT 
		cp.CommBatchID
	,	b.BatchDate
	,	-cp.Amount as Amount 
	,	cr.CommRecID
	,	cr.Display [CommRec]
	,	ShortCoName [Company]
	,	a.Code [Agency]
	FROM 
		tblCommChargeback cp 
		join tblcommbatch b on b.commbatchid = cp.commbatchid and b.batchdate >= @minBatchDate  
		join tblcommstruct cs on cs.commstructid = cp.commstructid
		join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID	
		join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
		join tblcompany comp on comp.companyid = uca.companyid
		join tblCommRec cr on cr.CommRecID = cs.CommRecID
		join tblRegisterPayment rp on rp.RegisterPaymentID = cp.RegisterPaymentID 
		join tblRegister r on r.RegisterID = rp.FeeRegisterID 
		join tblClient c on c.ClientID = r.ClientID 
		join tbluserclientaccess uc on uc.userid = uca.userid and c.Created between uc.ClientCreatedFrom and uc.ClientCreatedTo
		join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = c.agencyid
		join tblCommScen s on s.commscenid = b.commscenid
		join tblAgency a on a.agencyid = s.agencyid

) as d

GROUP BY 
	CommBatchID
,	BatchDate
,	CommRecID
,	CommRec
,	Company
,	Agency
ORDER BY 
	CommBatchID desc, CommRec


end
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertClientBankAccount]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertClientBankAccount]
(
@ClientId int,
@Routing varchar(9),
@Account varchar(50),
@BankType varchar(1),
@UserId int
)
AS
BEGIN
	--Do not allow duplicate bank accounts
	declare @bankId int
	select @bankid = null
	
	select top 1 @bankid = BankAccountId 
	from tblClientBankAccount 
	where ClientId = @ClientId And RoutingNumber = @Routing and AccountNumber = @Account and [Disabled] Is Null
	
	If @bankid is null
	Begin
		insert into tblClientBankAccount(ClientId, RoutingNumber, AccountNumber, BankType, CreatedBy, LastModified, LastModifiedBy)
		values (@ClientId, @Routing, @Account, @BankType, @UserID, GetDate(), @UserId)
		
		select scope_identity()
	End
	Else
		select @bankid
END



GRANT EXEC ON stp_InsertClientBankAccount TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateProcessingReport]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_UpdateProcessingReport] 
@ReportId int,
@Notes varchar(max)
AS
Update tblProcessingReport Set
Notes=@Notes
Where ReportId = @ReportId
GO
/****** Object:  StoredProcedure [dbo].[stp_LoadClientStatusAll]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_LoadClientStatusAll]

as


update
	tblclient
set
	currentclientstatusid = 
	(
		select
			r.clientstatusid
		from
			tblroadmap r inner join
			(
				select
					max(roadmapid) as roadmapid
				from
					tblroadmap
				group by
					clientid
			)
			as s on r.roadmapid = s.roadmapid
		where
			r.clientid = tblclient.clientid
	)
GO
/****** Object:  StoredProcedure [dbo].[stp_PendingSettlements]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_PendingSettlements]
(
	@companyid int = null,
	@settlementid int = null
)
as

select st.name [state], s.settlementid, c.accountnumber, c.clientid, p.firstname + ' ' + p.lastname [client], g.name [creditor], a.originalamount, s.creditoraccountbalance, s.settlementpercent / 100 [settlementpercent], 
	s.settlementamount, s.settlementsavings, s.settlementfee, s.overnightdeliveryamount, s.settlementduedate, 
	s.created [settlementcreated]
into #settlements
from tblsettlements s
join tblclient c on c.clientid = s.clientid
join tblperson p on p.personid = c.primarypersonid
left join tblstate st on st.stateid = p.stateid
join tblaccount a on a.accountid = s.creditoraccountid
join tblcreditorinstance ci on ci.creditorinstanceid = a.currentcreditorinstanceid
join tblcreditor cr on cr.creditorid = ci.creditorid
join tblcreditorgroup g on g.creditorgroupid = cr.creditorgroupid
join tblcompany co on co.companyid = c.companyid
where (@companyid is null or c.companyid = @companyid)
and (@settlementid is null or s.settlementid = @settlementid)
and s.status = 'a'
and s.active = 1
and s.recommend is null
and s.created > '5/28/10'  


-- output
select [state], count(*) [count]
from #settlements
group by [state]
order by [state]

select *
from #settlements
order by [state], settlementcreated

drop table #settlements

--select r.settlementid, max(r.settlementstatusid) [settlementstatusid]
--from tblnegotiationroadmap r with (nolock)
--join tblsettlements s on s.settlementid = r.settlementid
--	and s.status = 'a'
--	and s.active = 1
--	and s.recommend is null
--join tblclient c on c.clientid = s.clientid
--where (@companyid is null or c.companyid = @companyid)
--group by r.settlementid
--having max(r.settlementstatusid) in (3,6,8,10)
--
--select * from tblnegotiationsettlementstatus
GO
/****** Object:  StoredProcedure [dbo].[stp_GetProcessingReport]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetProcessingReport]
@ReportId int
AS
Select ReportId, ReportDate, SessionID, Notes From tblProcessingReport
Where ReportId=@ReportId
GO
/****** Object:  StoredProcedure [dbo].[stp_hardship_updateClientHardship]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_hardship_updateClientHardship]
(
@ClientID int, 
@MarriageTypeID int, 
@NumOfChildren int, 
@NumOfGrandChildren int, 
@IsReceivingStateAssistance bit, 
@IsReceivingStateAssistanceExplain bit, 
@HasClientReFinanced bit,  
@EquityValueOfHome money, 
@ReasonForDebt varchar(max), 
@DoApplicantsHaveAssets bit, 
@AdditionalInformation varchar(max), 
@IsHardShipActive bit,
@userid int,
@ClientHardshipDataId int
)
AS
BEGIN
	UPDATE tblClientHardshipData SET MarriageTypeID = @MarriageTypeID, NumOfChildren = @NumOfChildren, NumOfGrandChildren = @NumOfGrandChildren, IsReceivingStateAssistance = @IsReceivingStateAssistance, IsReceivingStateAssistanceExplain = @IsReceivingStateAssistanceExplain, HasClientReFinanced = @HasClientReFinanced, EquityValueOfHome = @EquityValueOfHome, ReasonForDebt = @ReasonForDebt, DoApplicantsHaveAssets = @DoApplicantsHaveAssets, AdditionalInformation = @AdditionalInformation, LastModified = GETDATE(), LastModifiedBy = @userid, IsHardShipActive = @IsHardShipActive WHERE (ClientHardshipDataId = @ClientHardshipDataId)
END


GRANT EXEC ON stp_hardship_updateClientHardship TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_gettrackers]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_gettrackers]
	(
		@year int ,
		@month int
	)

AS
BEGIN
	SELECT 
		sti.TrackerImportID
		, isnull(sti.Team,'')[Team]
		, sti.Negotiator
		, convert(varchar,sti.AgencyID)[AgencyID]
		, a.Name AS AgencyName
		, sti.LawFirm, sti.Date, sti.Status, sti.Due
		, convert(varchar,sti.ClientAcctNumber)[ClientAcctNumber]
		, sti.Name, sti.CreditorAccountNum, sti.OriginalCreditor
		, sti.CurrentCreditor, sti.BALANCE, sti.SettlementAmt
		, sti.SettlementPercent, sti.FundsAvail, sti.Note, sti.sent
		, sti.paid, sti.days, sti.ClientSavings, sti.SettlementFees
		, sti.SettlementSavingsPct, CancelDate 
	FROM tblSettlementTrackerImports AS sti with(nolock)
	INNER JOIN tblAgency AS a ON sti.AgencyID = a.AgencyID 
	WHERE (YEAR(sti.Date) = @year) AND (MONTH(sti.Date) = @month) or ((YEAR(sti.paid) = @year) AND (MONTH(sti.paid) = @month))
	option (fast 25)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_checkscan_getChecksToProcessByDateVerified]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_checkscan_getChecksToProcessByDateVerified]
(
@verifyDate datetime,
@companyid int

)
as 
BEGIN
	select  
		[rowNum]= ROW_NUMBER() over (order by check21id)
		, c.companyid 
		,nc.* 
		, [amount] = r.amount 
	from 
		tblICLChecks nc 
		inner join tblregister r on nc.registerid= r.registerid 
		inner join tblclient c on c.clientid = nc.clientid
	Where 
		r.bounce is null 
		and r.void is null 
		and nc.processed is null 
		and convert(datetime,convert(varchar,verified,101)) = @verifyDate
		and c.companyid = @companyid
END
GO
/****** Object:  Table [dbo].[tblAccount]    Script Date: 09/10/2010 18:32:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAccount](
	[AccountID] [int] IDENTITY(1,1) NOT NULL,
	[ClientID] [int] NOT NULL,
	[CurrentCreditorInstanceID] [int] NULL,
	[AccountStatusID] [int] NULL,
	[OriginalAmount] [money] NOT NULL,
	[CurrentAmount] [money] NOT NULL,
	[SetupFeePercentage] [money] NOT NULL,
	[SettlementFeeCredit] [money] NULL,
	[OriginalDueDate] [datetime] NOT NULL,
	[Created] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
	[Settled] [datetime] NULL,
	[SettledBy] [int] NULL,
	[Removed] [datetime] NULL,
	[RemovedBy] [int] NULL,
	[SettledMediationID] [int] NULL,
	[UnverifiedAmount] [money] NULL,
	[UnverifiedRetainerFee] [money] NULL,
	[Verified] [datetime] NULL,
	[VerifiedAmount] [money] NULL,
	[VerifiedBy] [int] NULL,
	[VerifiedRetainerFee] [money] NULL,
	[OriginalCreditorInstanceID] [int] NULL,
	[PreviousStatus] [int] NULL,
 CONSTRAINT [PK_tblAccount] PRIMARY KEY CLUSTERED 
(
	[AccountID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[stp_SettledAccountsByState]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SettledAccountsByState]
(
	@State char(2),
	@CompanyID int
)
as
begin

select 
      count(distinct c.clientid) [clients],
      count(a.accountid) [total_accounts], 
      sum(case when a.accountstatusid = 54 then 1 else 0 end) [accounts_settled],
      sum(case when a.accountstatusid = 54 then 0 else 1 end) [accounts_unsettled],
      sum(ci.amount) [total_debt],
      sum(case when a.accountstatusid = 54 then ci.amount else 0 end) [settled_debt],
      sum(case when a.accountstatusid = 54 then 0 else ci.amount end) [unsettled_debt]
from tblaccount a
join tblcreditorinstance ci on ci.creditorinstanceid = a.currentcreditorinstanceid
join tblclient c on c.clientid = a.clientid
join tblperson p on p.personid = c.primarypersonid
join tblstate s on s.stateid = p.stateid 
      and s.abbreviation = @state
where c.companyid = @companyid

end
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportCommissionVsChargebackDailyComparison]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportCommissionVsChargebackDailyComparison]
(
	@daynum int = NULL
)
as 
BEGIN

	if @daynum is null
		set @daynum = day(getdate())


	declare @CommVSChargeBack table(YearNum int,MonthNum int,DayNum int, CommissionCount int, CommissionAmount money, ChargeBackCount int, ChargeBackAmount money)
	declare @vtblTemp table (YearNum int,MonthNum int,DayNum int,Qty int,Amount money)
	declare @vtblCal table(YearNum int, MonthNum int, DayNum int);
	-- fill calendar
		
		with    mycte as
		(
		select cast('1/1/' + cast(year(dateadd(yy,0,getdate())) as varchar) as datetime) DateValue
		union all
		select DateValue + 1
		from    mycte    
		where   DateValue + 1 < cast('12/31/' + cast(year(dateadd(yy,0,getdate())) as varchar) as datetime)
		)
		insert into @vtblCal
		select  datepart(yy, DateValue) [yearnum],datepart(mm, DateValue) [monthNum],datepart(dd, DateValue) [daynum]
		from mycte
		OPTION  (MAXRECURSION 0)

	--Fill Period
	Insert into  @CommVSChargeBack( CommissionCount, CommissionAmount, DayNum,MonthNum, YearNum)
	select count(cp.commpayid) as Qty, 
		   sum(cp.amount) as Amount,  
		   day(rp.paymentdate) as [DayNum],
		   month(rp.paymentdate) as [MonthNum],
		   year(rp.paymentdate) as [YearNum]
	from tblcommpay cp
	inner join tblregisterpayment rp on rp.registerpaymentid = cp.registerpaymentid
	where day(rp.paymentdate) = @daynum 
	group by year(rp.paymentdate),month(rp.paymentdate), day(rp.paymentdate) 

	insert into @vtblTemp
	select year(cb.chargebackdate) as [YearNum],month(cb.chargebackdate) as [MonthNum],day(cb.chargebackdate) as [DayNum] , count(cb.commchargebackid) as Qty, sum(cb.amount) as Amount
	from tblcommchargeback cb
	where day(cb.chargebackdate) = @daynum
	group by  year(cb.chargebackdate),month(cb.chargebackdate),  day(cb.chargebackdate) 

	Update @CommVSChargeBack Set
	ChargeBackCount = t.Qty,
	ChargeBackAmount = t.Amount
	From @CommVSChargeBack c
	join @vtblTemp t on t.daynum = c.daynum and t.monthnum = c.monthnum

	select 
	vc.yearnum
	, vc.monthnum
	, vc.daynum
	, isnull(vt.commissioncount,0) [IncomeCount]
	, isnull(vt.commissionamount,0) [IncomeAmount]
	, isnull(vt.ChargeBackCount,0) [ChargeBackCount]
	, isnull(vt.ChargeBackAmount,0) [ChargeBackAmount]
	
	from @vtblCal as vc 
	left outer join @CommVSChargeBack as vt on vc.yearnum = vt.yearnum and vc.monthnum = vt.monthnum
	where vc.daynum = @daynum
	order by vc.yearNum, vc.monthnum
END



GRANT EXEC ON stp_ReportCommissionVsChargebackDailyComparison TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_CleanupCreditorGroup]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_CleanupCreditorGroup]
(
	@CreditorGroupID int
)
as 
begin

-- If no creditors are using this group, delete it
if (select count(*) from tblcreditor where creditorgroupid = @CreditorGroupID) = 0 and
	(select count(*) from tblleadcreditorinstance where creditorgroupid = @CreditorGroupID) = 0
begin
	delete 
	from tblcreditorgroup
	where creditorgroupid = @CreditorGroupID
end 

end
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertProcessingReport]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertProcessingReport]
@ReportDate datetime,
@SessionId varchar(50),
@Notes varchar(max),
@ReportType varchar(10)
AS
BEGIN
	Insert into tblProcessingReport(ReportDate, SessionId, Notes, ReportType)
	Values (@ReportDate, @SessionId, @Notes, @ReportType)
	
	Select scope_identity()
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAddressFullForAddress]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetAddressFullForAddress]
	(
		@street varchar (255),
		@street2 varchar (255),
		@city varchar (255),
		@state varchar (255),
		@zipcode varchar (255),
		@address varchar (255) output
	)

as


-- initialize the returned address to an empty string (so we don't have to deal with null values)
set @address = ''


if len(@street) > 0
	begin
		set @address = @street
	end

if len(@street2) > 0
	begin
		if len(@address) > 0
			begin
				set @address = @address + char(13) + char(10) + @street2
			end
		else
			begin
				set @address = @street2
			end
	end

if len(@city) > 0
	begin
		if len(@address) > 0
			begin
				set @address = @address + char(13) + char(10) + @city
			end
		else
			begin
				set @address = @city
			end
	end

if len(@state) > 0
	begin
		if len(@city) > 0
			begin
				set @address = @address + ', ' + @state
			end
		else
			begin
				if len(@address) > 0
					begin
						set @address = @address + char(13) + char(10) + @state
					end
				else
					begin
						set @address = @state
					end
			end
	end

if len(@zipcode) > 0
	begin
		if len(@state) > 0
			begin
				set @address = @address + ' ' + @zipcode
			end
		else if len(@city) > 0
			begin
				set @address = @address + ', ' + @zipcode
			end
		else
			begin
				if len(@address) > 0
					begin
						set @address = @address + char(13) + char(10) + @zipcode
					end
				else
					begin
						set @address = @zipcode
					end
			end
	end
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetCommissionPayDirection]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[stp_ReportGetCommissionPayDirection]
(
	@companyid int,
	@date datetime = null
)

as

if @date is null
begin
	set @date = getdate()
end

SELECT
	cs.CommStructID,
	cr.CommRecId,
	cs.ParentCommRecId,
	cr.Display + ' ('+ cr.Abbreviation + ')' as CommRec,
	a.AgencyId,
	a.Name as Agency,
	ft.EntryTypeID,
	ft.Name,
	ft.[Percent]
FROM
	tblCommStruct as cs
	inner join tblCommRec as cr on cs.CommRecId = cr.CommRecId
	inner join tblCommScen as sce on cs.CommScenId = sce.CommScenId
	inner join tblAgency as a on a.AgencyId = sce.AgencyId
	inner join
	(
		SELECT
			cf.CommStructID,
			et.EntryTypeID,
			et.DisplayName as [Name],
			cf.[Percent],
			et.[Order]
		FROM
			tblCommFee as cf
			inner join tblEntryType as et on et.EntryTypeID = cf.EntryTypeID
	) as ft on ft.CommStructID = cs.CommStructID
WHERE
	sce.StartDate < @date
	and
	(
		sce.EndDate > @date
		or sce.EndDate is null
	)
	and cs.CompanyID = @companyid
ORDER BY
	ft.[Order]
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportAgencyExtraFieldsInsert]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ImportAgencyExtraFieldsInsert]
@ClientId int,
@LeadNumber varchar(50) = null,
@DateSent datetime = null,
@DateReceived datetime = null,
@SeidemanPullDate datetime = null,
@DebtTotal float = null,
@MissingInfo varchar(255) = null,
@UserId int
AS
BEGIN
insert into tblAgencyExtraFields01(ClientId, LeadNumber, DateSent, DateReceived, SeidemanPullDate,
DebtTotal, MissingInfo, Created, CreatedBy, LastModified, LastModifiedBy)
values(@ClientId, @LeadNumber, @DateSent, @DateReceived, @SeidemanPullDate,
@DebtTotal, @MissingInfo, GetDate(), @UserId, GetDate(), @UserId)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_PotentialCollectDeposits]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_PotentialCollectDeposits]
(
	@fordate datetime
)
as
BEGIN
-- based off stp_CollectACHDeposits and stp_CollectAdHocACHDeposits
-- grabs ach and check deposits

set nocount on
set ansi_warnings off

declare @clientid int
declare @amount money
declare @registerid int

/*declare @vtblDeposits table
(
	ClientID int,
	Amount money
)


INSERT INTO
	@vtblDeposits*/
insert tblpotentialregistertmp
(
	clientid,
	transactiondate,
	amount,
	entrytypeid,
	achmonth,
	achyear,
	fee,
	isfullypaid
)	
SELECT
	drvDeposits.ClientID,
	cast(convert(varchar(50), @fordate, 101) as datetime),
	abs(drvDeposits.DepositAmount),
	3,
	month(@fordate),
	year(@fordate),
	0,
	0
FROM
(
	SELECT
		c.ClientID,
		c.DepositAmount
	FROM
		tblClient as c
		inner join tblPerson as p on p.PersonID = c.PrimaryPersonID
		inner join tblCommRec as cr on cr.CompanyID = c.CompanyID and cr.IsTrust = 1
	WHERE
		c.ClientID not in
		(
			SELECT
				ClientID
			FROM
				tblRuleACH
			WHERE
				StartDate <= cast(convert(varchar(10), @fordate, 101) as datetime) and
				(
					EndDate is null
					or EndDate >= cast(convert(varchar(10), @fordate, 101) as datetime)
				)
		) and
		(
			c.DepositDay = day(@fordate)
		)
		and c.DepositStartDate <= cast(convert(varchar(10), @fordate, 101) as datetime)
		and c.CurrentClientStatusID not in (15, 17, 18)
		and (lower(c.DepositMethod) = 'ach' or lower(c.DepositMethod) = 'check')
		and c.DepositDay is not null
		and c.DepositDay > 0
		--and c.BankRoutingNumber is not null
		--and c.BankAccountNumber is not null
		--and len(c.BankRoutingNumber) > 0
		--and len(c.BankAccountNumber) > 0
		and c.DepositStartDate is not null

	UNION ALL

	SELECT
		c.ClientID,
		r.DepositAmount
	FROM
		tblRuleACH as r
		inner join tblClient as c on c.ClientID = r.ClientID
		inner join tblPerson as p on PersonID = c.PrimaryPersonID
		inner join tblCommRec as cr on cr.CompanyID = c.CompanyID and cr.IsTrust = 1
	WHERE
		r.RuleACHID in
		(
			SELECT
				min(RuleACHID)
			FROM
				tblRuleACH
			WHERE
				StartDate <= cast(convert(varchar(10), @fordate, 101) as datetime) and
				(
					EndDate is null
					or EndDate >= cast(convert(varchar(10), @fordate, 101) as datetime)
				) and
				(
					r.DepositDay = day(@fordate)
				)
			GROUP BY
				ClientID
		)
		and c.DepositStartDate <= cast(convert(varchar(10), @fordate, 101) as datetime)
		and c.CurrentClientStatusID not in (15, 17, 18)
		and (lower(c.DepositMethod) = 'ach' or lower(c.DepositMethod) = 'check')
		and c.DepositDay is not null
		and c.DepositDay > 0
		--and c.BankRoutingNumber is not null
		--and c.BankAccountNumber is not null
		--and len(c.BankRoutingNumber) > 0
		--and len(c.BankAccountNumber) > 0
		and c.DepositStartDate is not null		
) as drvDeposits
where not exists (select 1 from tblpotentialregistertmp r where r.clientid = drvDeposits.clientid and r.achmonth = month(@fordate) and r.achyear = year(@fordate))


/*declare cursor_CollectACHDeposits cursor forward_only read_only for
	SELECT
		ClientID,
		Amount
	FROM
		@vtblDeposits

open cursor_CollectACHDeposits

fetch next from cursor_CollectACHDeposits into @clientid, @amount

while @@fetch_status = 0
begin
	set @registerid = null

	SELECT
		@registerid = RegisterID
	FROM
		tblRegister
	WHERE
		ClientID = @clientid
		and ACHMonth = month(@fordate)
		and ACHYear = year(@fordate)

	if @registerid is null
		begin
			-- insert an sda deposit transaction (where the trandate and holddate are the process day)
			insert into
				tblpotentialregistertmp
				(
					clientid,
					transactiondate,
					amount,
					entrytypeid,
					achmonth,
					achyear,
					fee,
					isfullypaid
				)
			values
				(
					@clientid,
					cast(convert(varchar(50), @fordate, 101) as datetime),
					@amount,
					3,
					month(@fordate),
					year(@fordate),
					0,
					0
				)
		end

	fetch next from cursor_CollectACHDeposits into @clientid, @amount
end

close cursor_CollectACHDeposits
deallocate cursor_CollectACHDeposits
*/

--adhoc
insert tblpotentialregistertmp
(
	clientid,
	transactiondate,
	amount,
	entrytypeid,
	fee,
	isfullypaid
)
SELECT
	a.ClientID,
	cast(convert(varchar(50), @fordate, 101) as datetime),
	abs(a.DepositAmount),
	3,
	0,
	0
FROM
	tblAdHocACH as a
	inner join tblClient as c on c.ClientID = a.ClientID
WHERE
	c.CurrentClientStatusID not in (15, 17, 18)
	and cast(convert(varchar(10), a.DepositDate, 101) as datetime) = cast(convert(varchar(10), @fordate, 101) as datetime)
	and a.RegisterID is null


declare @count int
select @count = count(*) from tblpotentialregistertmp where entrytypeid = 3 and transactiondate = @fordate
print cast(@count as varchar(5)) + ' deposits added'


END
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyBatchSummary]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AgencyBatchSummary]
(
	@UserID int,
	@CompanyID int = -1
)
as
begin
/*
	Logic based off stp_ReportGetCommissionBatchTransfers. This proc will replace 
	stp_ReportGetAgencyCommission and is used used when displaying the Agency Batches summary 
	on the agency home page. New proc allows client filtering by creation date.

	12.15.08
	Joins streamlined to match other procs used on the agency portal interface so that all are pulling
	the same results.
	
	01.06.09
	Join to tblUserClientAccess to filter by client created.
	
	01/23/09
	Optional filtering by company id
	
	02/05/09
	Join to tblUserAgencyAccess
*/

declare @vtblCal table (BatchDate datetime)
declare @minBatchDate datetime;

-- fill calendar
with mycte as
(
select cast('1/1/' + cast(year(getdate()) as varchar) as datetime) DateValue
union all
select DateValue + 1
from    mycte    
where   DateValue + 1 < getdate()
)

insert into @vtblCal
select  top 5 DateValue
from    mycte
where CONVERT(BIT, CASE WHEN datepart(dw, DateValue) IN (1,7) THEN 0 ELSE 1 END) = 1 and datevalue < getdate() order by datevalue desc
OPTION  (MAXRECURSION 0)

select @minBatchDate = min(BatchDate)
from @vtblCal


SELECT 
	CommBatchID
,	BatchDate
,	sum(Amount) as Amount 
,	CommRecID
,	CommRec
,	Company
FROM 
(
	SELECT 
		cp.CommBatchID
	,	b.BatchDate
	,	cp.Amount 
	,	cr.CommRecID
	,	cr.Display [CommRec]
	,	ShortCoName [Company]
	FROM 
		tblCommPay cp
		join tblcommbatch b on b.commbatchid = cp.commbatchid and b.batchdate >= @minBatchDate  
		join tblcommstruct cs on cs.commstructid = cp.commstructid
		join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID	
		join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
		join tblcompany comp on comp.companyid = uca.companyid
		join tblCommRec cr on cr.CommRecID = cs.CommRecID
		join tblRegisterPayment rp on rp.RegisterPaymentID = cp.RegisterPaymentID 
		join tblRegister r on r.RegisterID = rp.FeeRegisterID 
		join tblClient c on c.ClientID = r.ClientID 
		join tbluserclientaccess uc on uc.userid = uca.userid and c.Created between uc.ClientCreatedFrom and uc.ClientCreatedTo
		join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = c.agencyid

	UNION ALL 

	SELECT 
		cp.CommBatchID
	,	b.BatchDate
	,	-cp.Amount as Amount 
	,	cr.CommRecID
	,	cr.Display [CommRec]
	,	ShortCoName [Company]
	FROM 
		tblCommChargeback cp 
		join tblcommbatch b on b.commbatchid = cp.commbatchid and b.batchdate >= @minBatchDate  
		join tblcommstruct cs on cs.commstructid = cp.commstructid
		join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID	
		join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
		join tblcompany comp on comp.companyid = uca.companyid
		join tblCommRec cr on cr.CommRecID = cs.CommRecID
		join tblRegisterPayment rp on rp.RegisterPaymentID = cp.RegisterPaymentID 
		join tblRegister r on r.RegisterID = rp.FeeRegisterID 
		join tblClient c on c.ClientID = r.ClientID 
		join tbluserclientaccess uc on uc.userid = uca.userid and c.Created between uc.ClientCreatedFrom and uc.ClientCreatedTo
		join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = c.agencyid

) as derivedtable 

GROUP BY 
	CommBatchID
,	BatchDate
,	CommRecID
,	CommRec
,	Company
ORDER BY 
	CommBatchID desc, CommRec


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetRelatables]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <03 - 18 January 2010>
      Category    : [TimeMatter]
      Type        : {Update}
      Decription  : Added RelationTypeId=20 for ClientRequest 
*/

CREATE procedure [dbo].[stp_GetRelatables]
	(
		@relationtypeid int,
		@dependencyid int	--ClientID when relatable to client
							--CreditorID for contact
	)
as
declare @table varchar(50)


declare @select varchar(8000)
declare @join varchar(8000)
declare @where varchar(8000)

set @join=(select [table] from tblrelationtype where relationtypeid=@relationtypeid)

if @join='tblClient' begin
	set @join = @join + ' c inner join tblperson p on c.primarypersonid=p.personid'
	set @select = 'c.clientid as RelationID, p.firstname [First Name], p.LastName [Last Name], p.SSN'
	set @where = 'c.clientid=' + convert(varchar, @dependencyid)
end else if @join='tblAccount' begin
	set @join = @join + ' a inner join tblcreditorinstance ci on a.currentcreditorinstanceid=ci.creditorinstanceid 
		inner join tblcreditor c on ci.creditorid=c.creditorid'
	set @select = 'a.accountid as RelationID, c.name [Creditor], ci.accountnumber [Account Number],ci.referencenumber [Reference Number]'
	set @where = 'a.clientid=' + convert(varchar, @dependencyid)
end else if @join='tblContact' begin
	set @join = @join + ' c'
	set @select = 'c.contactid as RelationID, c.firstname [First Name], c.lastname [Last Name], c.EmailAddress Email'
	set @where = 'c.creditorid=' + convert(varchar, @dependencyid)
end else if @join='tblRegister' begin
	set @join = @join + ' r inner join tblentrytype et on r.entrytypeid=et.entrytypeid'
	set @select = 'r.registerid as RelationID, et.Name [Entry Type], r.transactiondate [Date] , r.amount [Amount]'
	set @where = 'r.clientid=' + convert(varchar, @dependencyid)
end else if @join='tblRegisterPayment' begin
	set @join = @join + ' rp inner join tblregister r on rp.feeregisterid=r.registerid inner join tblentrytype et on r.entrytypeid=et.entrytypeid'
	set @select = 'rp.registerpaymentid as RelationID, et.Name [Fee Type], rp.paymentdate [Date], rp.amount [Amount]'
	set @where = 'r.clientid=' + convert(varchar, @dependencyid)
--- Added for RelationTypeId=19 Matter
end else if @join='tblMatter' begin
	set @join =@join 
	set @select = 'MatterId as [RelationId], MatterNumber [MatterNumber], CONVERT(VARCHAR(10),MatterDate,  101)[MatterDate], MatterMemo[MatterMemo]' 
	set @where= 'clientId='+convert(varchar, @dependencyid)+ 'order by [MatterDate] desc'

end

if len(@select)>0
	exec ('select ' + @select + ' from ' + @join + ' where ' + @where)
else
	select 1 as ID, 'Add to stp_GetRelatables' as ToImplement
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCoAppsForBofA]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 11/05/2009
-- Description:	Get Co-Apps for B of A
-- =============================================
CREATE PROCEDURE [dbo].[stp_GetCoAppsForBofA] 
	-- Add the parameters for the stored procedure here
	@ClientID int
AS
		BEGIN
	SET NOCOUNT ON;
		SELECT p.FirstName + ' ' + p.LastName 
        from tblperson p 
        join tblClient c on c.clientid = p.clientid 
        where p.ClientID = @ClientID
        and p.personid <> c.primarypersonid 
END
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyIncomeComparison_InitialDrafts]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_AgencyIncomeComparison_InitialDrafts]
(
	@UserID int ,
	@startday varchar(3),
	@endday varchar(3),
	@companyid int = -1
)
as
BEGIN
	declare @CommVSChargeBack table(YearNum int,MonthNum int,TimeFrame varchar(30), CommissionCount int, CommissionAmount money, ChargeBackCount int, ChargeBackAmount money)
	declare @vtblCal table(YearNum int, MonthNum int, DayNum int, timeFrame varchar(100))
	declare @tblCompare table(YearNum int, MonthNum int, timeFrame varchar(100),[Gross Fee Payments] money,[Chargeback] money,[Net Fee Payments] money)
	declare @timeDesc varchar(500)
	
	set @timeDesc = cast(@startday as varchar)+ '-' + cast(@endday as varchar)	;

	-- fill calendar 
	--1 year from today
	with    mycte as
	(
	select dateadd(yy,-1,getdate()) DateValue
	union all
	select DateValue + 1 from mycte where DateValue + 1 < getdate()
	)
	insert into @vtblCal
	select  datepart(yy, DateValue) [yearnum],datepart(mm, DateValue) [monthNum],datepart(dd, DateValue) [daynum],
	 left(datename(mm,cast(datepart(mm, DateValue) as varchar) + '/1/' + cast(datepart(yy, DateValue)  as varchar)),3) + ' ' + cast(datepart(yy, DateValue)  as varchar) [timeframe]
	from mycte
	OPTION  (MAXRECURSION 0)
	
	insert into @tblCompare 
	select Yearnum, MonthNum, timeFrame,null,null,null
	from @vtblCal
	group by Yearnum, MonthNum, timeFrame
	order by Yearnum, MonthNum, timeFrame

	--get all registerpaymentids that are initial drafts
	select distinct dp.registerpaymentid 
	into #tempRegPayIDs
	from tblregisterpaymentdeposit dp 
	join vw_initialdrafts df on df.registerid = dp.depositregisterid
	join tblclient c on c.clientid = df.clientid 
	join tbluserclientaccess uc on uc.userid = @UserID and c.created between uc.clientcreatedfrom and uc.clientcreatedto
	join tblusercompanyaccess uca on uca.userid = uc.userid and (@companyid = -1 or uca.companyid = @companyid)
	join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = c.agencyid

	--Fill Period
	--case for END checks for END then gets the last day of month
	Insert into  @CommVSChargeBack( CommissionCount, CommissionAmount, YearNum, MonthNum, timeframe)
	select 
		count(cp.commpayid) as Qty
		, sum(cp.amount) as Amount
		,year(cbt.batchdate) as [YearNum]
		,month(cbt.batchdate) as [MonthNum]
		,cast(@startday as varchar)+ '-' + cast(case when @endday = 'END' then DAY(DATEADD (m, 1, DATEADD (d, 1 - DAY(cbt.batchdate), cbt.batchdate)) - 1) else @endday end  as varchar)
	from tblcommpay cp
	inner join tblcommbatch cbt on cbt.commbatchid = cp.commbatchid 
	inner join #tempRegPayIDs dpi on dpi.registerpaymentid = cp.registerpaymentid
	inner join tblcommstruct cs on cs.commstructid = cp.commstructid
	inner join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
	inner join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
	where 
	day(cbt.batchdate) >= @startday and 
	day(cbt.batchdate) <=
	case when @endday = 'END' then DAY(DATEADD (m, 1, DATEADD (d, 1 - DAY(cbt.batchdate), cbt.batchdate)) - 1) else @endday end  and 
	cbt.batchdate >= dateadd(yy,-1,getdate())
	group by  year(cbt.batchdate), month(cbt.batchdate), case when @endday = 'END' then DAY(DATEADD (m, 1, DATEADD (d, 1 - DAY(cbt.batchdate), cbt.batchdate)) - 1) else @endday end  


	select  
	year(cbt.batchdate) as [YearNum]
	,month(cbt.batchdate) as [MonthNum]
	,cast(@startday as varchar)+ '-' + cast(case when @endday = 'END' then DAY(DATEADD (m, 1, DATEADD (d, 1 - DAY(cbt.batchdate), cbt.batchdate)) - 1) else @endday end  as varchar) [timeframe]
	,count(cb.commchargebackid) as Qty
	, sum(cb.amount) as Amount
	into #tblTemp
	from tblcommchargeback cb
	inner join tblcommbatch cbt on cbt.commbatchid = cb.commbatchid 
	inner join #tempRegPayIDs dpi on dpi.registerpaymentid = cb.registerpaymentid
	inner join tblcommstruct cs on cs.commstructid = cb.commstructid
	inner join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID	
	inner join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
	where 
	day(cbt.batchdate) >= @startday and 
	day(cbt.batchdate) <=
	case when @endday = 'END' then DAY(DATEADD (m, 1, DATEADD (d, 1 - DAY(cbt.batchdate), cbt.batchdate)) - 1) else @endday end  
	and cbt.batchdate > dateadd(yy,-1,getdate())
	group by  year(cbt.batchdate), month(cbt.batchdate), cast(case when @endday = 'END' then DAY(DATEADD (m, 1, DATEADD (d, 1 - DAY(cbt.batchdate), cbt.batchdate)) - 1) else @endday end  as varchar)



	Update @CommVSChargeBack Set
	ChargeBackCount = t.Qty,
	ChargeBackAmount = t.Amount
	From @CommVSChargeBack c
	join #tblTemp t on t.monthnum = c.monthnum and t.yearnum = c.yearnum and t.timeframe = c.timeframe


	Insert into  @CommVSChargeBack( ChargeBackCount, ChargeBackAmount, timeframe,MonthNum, YearNum)
	Select  t.qty, t.amount, t.timeframe,t.monthnum,t.yearnum 
	from #tblTemp t
	where t.timeframe not in (select timeframe from @CommVSChargeBack)


	update @tblCompare	set 
		[Gross Fee Payments] = t1.[Gross Fee Payments],
		[Chargeback] = t1.[Chargeback],
		[Net Fee Payments] = t1.[Net Fee Payments]
	FROM 
	(
	select 
	 left(datename(mm,cast(cb.monthnum as varchar) + '/1/' + cast(cb.yearnum as varchar)),3) + ' ' + cast(cb.yearnum as varchar) [timeframe]
	, isnull(sum(CommissionAmount),0)[Gross Fee Payments]
	, isnull(sum(ChargeBackAmount) ,0)[Chargeback]
	, isnull(sum(CommissionAmount),0) - isnull(sum(ChargeBackAmount) ,0)[Net Fee Payments]
	from @CommVSChargeBack cb
		inner join @tblCompare cp ON cp.YearNum = cb.YearNum and cp.monthnum = cb.monthnum
	group by cb.yearnum,cb.monthnum,cb.timeframe
	) t1
	inner join @tblCompare cp ON cp.[timeframe] = t1.[timeframe] 
	;
	
	select 
		[timeframe]
		,isnull([Gross Fee Payments],0)[Gross Fee Payments]
		,isnull([Chargeback],0)[Chargeback]
		,isnull([Net Fee Payments],0)[Net Fee Payments]
	from @tblCompare
	order by yearnum, monthnum
	drop table #tblTemp
	drop table #tempRegPayIDs
END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationsSystemNoteInfo]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_NegotiationsSystemNoteInfo]
(
	@accountID numeric
)
as
SELECT     TOP (1) 
	currcred.CreditorID AS CurrCreditorID, 
	ISNULL(origcred.Name, currcred.Name) AS OriginalCreditorName, 
	currcred.Name AS CurrentCreditorName, 
	RIGHT(ci.AccountNumber, 4) AS CreditorAcctLast4, CASE WHEN ct.firstname IS NULL AND ct.lastname IS NULL THEN '(No Contact information on file)' ELSE isnull(ct.firstname, '') + ' ' + isnull(ct.lastname, '') END AS CreditorContact, 
	ISNULL('(' + p.AreaCode + ')' + LEFT(p.Number, 3) + '-' + RIGHT(p.Number, 4) + CASE WHEN NOT extension IS NULL THEN ' x' + CAST(extension AS varchar) ELSE '' END, '(No Contact information on file)') AS ContactPhone
FROM tblAccount AS a with(nolock) INNER JOIN
	tblCreditorInstance AS ci with(nolock) ON ci.CreditorInstanceID = a.CurrentCreditorInstanceID INNER JOIN
	tblCreditor AS currcred with(nolock) ON currcred.CreditorID = ci.CreditorID LEFT JOIN
	tblCreditor AS origcred with(nolock) ON ci.ForCreditorID = origcred.CreditorID LEFT OUTER JOIN
	tblContact AS ct with(nolock) ON a.accountid = ct.CreditorID LEFT OUTER JOIN
	tblContactPhone AS cp with(nolock) ON cp.ContactID = ct.ContactID LEFT OUTER JOIN
	tblPhone AS p with(nolock) ON p.PhoneID = cp.PhoneID AND p.PhoneTypeID = 56
WHERE
	(a.AccountID = @accountID)
ORDER BY 
	ct.Created DESC




GRANT EXEC ON stp_NegotiationsSystemNoteInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientReactivated]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 04/07/2010
-- Description:	Client has gone from Pending Cancellation to active
-- =============================================
CREATE PROCEDURE [dbo].[stp_ClientReactivated] 
	@ClientID int
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @AccountID AS integer
	DECLARE @PreviousStatus AS integer 
	DECLARE @AccountStatusID AS integer

	DECLARE c_PC CURSOR for
	SELECT AccountID, PreviousStatus, AccountStatusID 
	FROM tblAccount
	WHERE AccountStatusID NOT IN (55,54,157,158,159,160,164,166)
	AND ClientID = @ClientID 

	OPEN c_PC
	FETCH NEXT FROM c_PC INTO @AccountID, @PreviousStatus, @AccountStatusID
	WHILE @@FETCH_STATUS = 0 
	BEGIN
		UPDATE tblAccount 
		SET AccountStatusID = @PreviousStatus
		WHERE AccountID = @AccountID
	FETCH NEXT FROM c_PC INTO @AccountID, @PreviousStatus, @AccountStatusID
	END

	CLOSE c_PC
	DEALLOCATE c_PC
END
GO
/****** Object:  StoredProcedure [dbo].[stp_hardship_getClientHardshipInfo]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_hardship_getClientHardshipInfo]
(
@clientid int
)
as
BEGIN
	SELECT     
		chd.ClientHardshipDataId
		, chd.ClientID
		, chd.MarriageTypeID
		,  cmt.MarriageTypeDescription,chd.NumOfChildren
		, chd.NumOfGrandChildren
		, chd.IsReceivingStateAssistance
		, chd.IsReceivingStateAssistanceExplain
		, chd.HasClientReFinanced
		, chd.EquityValueOfHome
		, chd.ReasonForDebt
		, chd.DoApplicantsHaveAssets
		, chd.AdditionalInformation
		, chd.Created
		, chd.LastModified
		, chd.IsHardShipActive
		, c.FirstName + ' ' + c.LastName AS CreatedBy
		, l.FirstName + ' ' + l.LastName AS LastModifiedBy
	FROM         
		tblClientHardshipData AS chd INNER JOIN
		tblUser AS c ON chd.CreatedBy = c.UserID INNER JOIN
		tblUser AS l ON chd.LastModifiedBy = l.UserID INNER JOIN
		tblClientMarriageTypes AS cmt ON chd.MarriageTypeID = cmt.MarriageTypeID
	WHERE 
		chd.ClientID = @clientid and deleted is null
END



GRANT EXEC ON stp_hardship_getClientHardshipInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_DashboardGetItems]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_DashboardGetItems]
(
	@userid int,
	@scenario nvarchar(50)
)

as

BEGIN

set nocount on
set ansi_warnings off

declare @paramname nvarchar(50)
declare @paramvalue nvarchar(50)
declare @id int

declare @vtblProfile table
(
	DashboardItemID int,
	ClientX int,
	ClientY int
)

declare @vtblPermission table
(
	DashboardItemID int
)

declare @vtblFinal table
(
	DashboardItemID int,
	ClientX int,
	ClientY int
)

INSERT INTO
	@vtblProfile
exec
	stp_DashboardGetProfile @userid, @scenario

if (SELECT count(*) FROM @vtblProfile) = 0
begin
	INSERT INTO
		@vtblProfile
	exec
		stp_DashboardGetDefaultProfile @scenario
end

declare cursor_dashboardpermission cursor for
	SELECT DISTINCT
		UserParameterName,
		UserParameter,
		DashboardItemID
	FROM
		tblDashboardPermission
	WHERE
		Scenario = @scenario

open cursor_dashboardpermission

fetch next from cursor_dashboardpermission into @paramname, @paramvalue, @id

while @@fetch_status = 0
begin
	if @paramname is null or @paramvalue is null
	begin
		INSERT INTO
			@vtblPermission (DashboardItemID)
		VALUES
		(
			@id
		)
	end
	else
	begin
		INSERT INTO
			@vtblPermission (DashboardItemID)
		exec
		('
		SELECT
			' + @id + '
		FROM
			tblUser
		WHERE
			UserID = ' + @userid + '
			and [' + @paramname + '] = ' + @paramvalue + '
		')
	end

	fetch next from cursor_dashboardpermission into @paramname, @paramvalue, @id
end

close cursor_dashboardpermission
deallocate cursor_dashboardpermission

INSERT INTO
	@vtblFinal
SELECT DISTINCT
	pf.DashboardItemID,
	pf.ClientX,
	pf.ClientY
FROM
	@vtblProfile as pf
	inner join @vtblPermission as p on p.DashboardItemID = pf.DashboardItemID

SELECT
	di.DesignXML,
	di.SQLParamXML,
	f.ClientX,
	f.ClientY,
	isnull(di.ClientWidth, 'null') as ClientWidth,
	isnull(di.ClientHeight, 'null') as ClientHeight
FROM
	@vtblFinal as f
	inner join tblDashboardItem as di on di.DashboardItemID = f.DashboardItemID

END
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportEnrollmentInsert]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ImportEnrollmentInsert]
@Name varchar(50) = null,
@Phone varchar(50) = null,
@ZipCode varchar(50) = null,
@Behind bit = null,
@BehindId int = null,
@ConcernId int = null,
@TotalUnsecuredDebt money = null,
@DepositCommitment money = null,
@Qualified bit = 1,
@Committed bit = 1,
@DeliveryMethod varchar(50) = null,
@AgencyId int = null,
@CompanyId int = null,
@UserId int
AS
BEGIN

Insert Into tblEnrollment(
[Name], Phone, ZipCode, Behind, BehindID,
ConcernID, TotalUnsecuredDebt, DepositCommitment, Qualified,
[Committed], DeliveryMethod, AgencyID, CompanyID,
Created, CreatedBy)
Values (
@Name, @Phone, @ZipCode, @Behind, @BehindId,
@ConcernId, @TotalUnsecuredDebt, @DepositCommitment, @Qualified,
@Committed, @DeliveryMethod, @AgencyId, @CompanyId,
GetDate(), @UserId)

Select SCOPE_IDENTITY()

END
GO
/****** Object:  StoredProcedure [dbo].[stp_CheckScan_getAllRecordsReadyToProcess]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_CheckScan_getAllRecordsReadyToProcess]
as
begin
select  distinct
[rowNum]= ROW_NUMBER() over (order by check21id)
, p.firstname + ' ' + p.lastname[ClientName] 
, case when p.street2 is null then p.street else p.street + ', ' + p.street2 end + ', ' + p.city + ', ' + s.abbreviation + ' ' + p.zipcode[ClientAddress]
, nc.* 
, [amount] = r.amount 
from tblICLChecks nc 
inner join tblregister r on nc.registerid= r.registerid 
inner join tblclient c on c.clientid = nc.clientid
inner join tblperson p on p.personid = c.primarypersonid
inner join tblstate s on s.stateid = p.stateid
Where r.bounce is null and r.void is null and nc.processed is null
end
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyIncomeComparison_NonInitialDrafts]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_AgencyIncomeComparison_NonInitialDrafts]
(
	@UserID int ,
	@startday varchar(3),
	@endday varchar(3),
	@companyid int = -1
)
as
BEGIN
	declare @CommVSChargeBack table(YearNum int,MonthNum int,TimeFrame varchar(30), CommissionCount int, CommissionAmount money, ChargeBackCount int, ChargeBackAmount money)
	declare @vtblCal table(YearNum int, MonthNum int, DayNum int, timeFrame varchar(100))
	declare @timeDesc varchar(500)	

	set @timeDesc = cast(@startday as varchar)+ '-' + cast(@endday as varchar);

	-- fill calendar 
	--1 year from today
	with    mycte as
	(
	select dateadd(yy,-1,getdate()) DateValue
	union all
	select DateValue + 1 from mycte where DateValue + 1 < getdate()
	)
	insert into @vtblCal
	select  datepart(yy, DateValue) [yearnum],datepart(mm, DateValue) [monthNum],datepart(dd, DateValue) [daynum],
	 left(datename(mm,cast(datepart(mm, DateValue) as varchar) + '/1/' + cast(datepart(yy, DateValue)  as varchar)),3) + ' ' + cast(datepart(yy, DateValue)  as varchar) [timeframe]
	from mycte
	OPTION  (MAXRECURSION 0)

	declare @tblCompare table(YearNum int, MonthNum int, timeFrame varchar(100),[Gross Fee Payments] money,[Chargeback] money,[Net Fee Payments] money)
	insert into @tblCompare 
	select Yearnum, MonthNum, timeFrame,null,null,null
	from @vtblCal
	group by Yearnum, MonthNum, timeFrame
	order by Yearnum, MonthNum, timeFrame

	--get all registerpaymentids that are initial drafts
	select distinct dp.registerpaymentid 
	into #tempRegPayIDs
	from tblregisterpaymentdeposit dp 
	left join vw_initialdrafts df on df.registerid = dp.depositregisterid
	join tblregister r on r.registerid = dp.depositregisterid
	join tblclient c on c.clientid = r.clientid 
	join tbluserclientaccess uc on uc.userid = @UserID and c.created between uc.clientcreatedfrom and uc.clientcreatedto	
	join tblusercompanyaccess uca on uca.userid = uc.userid and (@companyid = -1 or uca.companyid = @companyid)
	join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = c.agencyid
	where df.registerid is null


	--Fill Period
	--case for END checks for END then gets the last day of month
	Insert into  @CommVSChargeBack( CommissionCount, CommissionAmount, YearNum, MonthNum, timeframe)
	select 
		count(cp.commpayid) as Qty
		, sum(cp.amount) as Amount
		,year(cbt.batchdate) as [YearNum]
		,month(cbt.batchdate) as [MonthNum]
		,cast(@startday as varchar)+ '-' + cast(case when @endday = 'END' then DAY(DATEADD (m, 1, DATEADD (d, 1 - DAY(cbt.batchdate), cbt.batchdate)) - 1) else @endday end  as varchar)
	from tblcommpay cp
	inner join tblcommbatch cbt on cbt.commbatchid = cp.commbatchid 
	inner join #tempRegPayIDs dpi on dpi.registerpaymentid = cp.registerpaymentid
	inner join tblcommstruct cs on cs.commstructid = cp.commstructid
	inner join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
	inner join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
	where 
	day(cbt.batchdate) >= @startday and 
	day(cbt.batchdate) <=
	case when @endday = 'END' then DAY(DATEADD (m, 1, DATEADD (d, 1 - DAY(cbt.batchdate), cbt.batchdate)) - 1) else @endday end  and 
	cbt.batchdate >= dateadd(yy,-1,getdate())
	group by  year(cbt.batchdate), month(cbt.batchdate), case when @endday = 'END' then DAY(DATEADD (m, 1, DATEADD (d, 1 - DAY(cbt.batchdate), cbt.batchdate)) - 1) else @endday end  


	select  
	year(cbt.batchdate) as [YearNum]
	,month(cbt.batchdate) as [MonthNum]
	,cast(@startday as varchar)+ '-' + cast(case when @endday = 'END' then DAY(DATEADD (m, 1, DATEADD (d, 1 - DAY(cbt.batchdate), cbt.batchdate)) - 1) else @endday end  as varchar) [timeframe]
	,count(cb.commchargebackid) as Qty
	, sum(cb.amount) as Amount
	into #tblTemp
	from tblcommchargeback cb
	inner join tblcommbatch cbt on cbt.commbatchid = cb.commbatchid 
	inner join #tempRegPayIDs dpi on dpi.registerpaymentid = cb.registerpaymentid
	inner join tblcommstruct cs on cs.commstructid = cb.commstructid
	inner join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID	
	inner join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
	where 
	day(cbt.batchdate) >= @startday and 
	day(cbt.batchdate) <=
	case when @endday = 'END' then DAY(DATEADD (m, 1, DATEADD (d, 1 - DAY(cbt.batchdate), cbt.batchdate)) - 1) else @endday end  
	and cbt.batchdate > dateadd(yy,-1,getdate())
	group by  year(cbt.batchdate), month(cbt.batchdate), cast(case when @endday = 'END' then DAY(DATEADD (m, 1, DATEADD (d, 1 - DAY(cbt.batchdate), cbt.batchdate)) - 1) else @endday end  as varchar)



	Update @CommVSChargeBack Set
	ChargeBackCount = t.Qty,
	ChargeBackAmount = t.Amount
	From @CommVSChargeBack c
	join #tblTemp t on t.monthnum = c.monthnum and t.yearnum = c.yearnum and t.timeframe = c.timeframe


	Insert into  @CommVSChargeBack( ChargeBackCount, ChargeBackAmount, timeframe,MonthNum, YearNum)
	Select  t.qty, t.amount, t.timeframe,t.monthnum,t.yearnum 
	from #tblTemp t
	where t.timeframe not in (select timeframe from @CommVSChargeBack)


		update @tblCompare	set 
		[Gross Fee Payments] = t1.[Gross Fee Payments],
		[Chargeback] = t1.[Chargeback],
		[Net Fee Payments] = t1.[Net Fee Payments]
	FROM 
	(
	select 
	 left(datename(mm,cast(cb.monthnum as varchar) + '/1/' + cast(cb.yearnum as varchar)),3) + ' ' + cast(cb.yearnum as varchar) [timeframe]
	, isnull(sum(CommissionAmount),0)[Gross Fee Payments]
	, isnull(sum(ChargeBackAmount) ,0)[Chargeback]
	, isnull(sum(CommissionAmount),0) - isnull(sum(ChargeBackAmount) ,0)[Net Fee Payments]
	from @CommVSChargeBack cb
	inner join @tblCompare cp ON cp.YearNum = cb.YearNum and cp.monthnum = cb.monthnum
	group by cb.yearnum,cb.monthnum,cb.timeframe
	) t1
	inner join @tblCompare cp ON cp.[timeframe] = t1.[timeframe] 
	;
	
	select 
		[timeframe]
		,isnull([Gross Fee Payments],0)[Gross Fee Payments]
		,isnull([Chargeback],0)[Chargeback]
		,isnull([Net Fee Payments],0)[Net Fee Payments]
	from @tblCompare
	order by yearnum, monthnum
	
	drop table #tblTemp
	drop table #tempRegPayIDs
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SaveCreditLiabilityLookup]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SaveCreditLiabilityLookup]
(
	@CreditorName varchar(50),
	@Street varchar(75),
	@City varchar(30),
	@StateCode varchar(10),
	@PostalCode varchar(15),
	@Contact varchar(20)
)
as
begin
	-- at this point we've just saving creditors from the credit report, don't know which ones the user will
	-- choose to import yet, if any

	-- returns CreditLiabilityLookupID

	declare @CreditLiabilityLookupID int, @CreditorGroupID int, @CreditorID int, @StateID int
	
	set @CreditLiabilityLookupID = -1
	set @CreditorGroupID = -1 
	set @CreditorID = -1 	


	-- does the lookup already exist?
	select @CreditLiabilityLookupID=CreditLiabilityLookupID
	from tblCreditLiabilityLookup
	where CreditorName=@CreditorName
		and Street=@Street
		and City=@City
		and StateCode=@StateCode
		and PostalCode=@PostalCode

	if @CreditLiabilityLookupID = -1 begin
	
		insert tblCreditLiabilityLookup (CreditorName,Street,City,StateCode,PostalCode,Contact)
		values (@CreditorName,@Street,@City,@StateCode,@PostalCode,@Contact)
		
		set @CreditLiabilityLookupID = scope_identity()
		
		-- maybe there's an exact match in the system already and we can assign it to the lookup
		select @StateID=StateID 
		from tblState 
		where abbreviation = @StateCode
	
		select @CreditorGroupID=creditorgroupid
		from tblcreditorgroup
		where name = @CreditorName

		select @CreditorID=creditorid
		from tblcreditor
		where street = @Street
			and city = @City
			and stateid = @StateID
			and zipcode = @PostalCode
			and creditorgroupid = @CreditorGroupID
		
		if @CreditorID > 0 begin
			update tblCreditLiabilityLookup 
			set creditorid = @CreditorID
			where creditliabilitylookupid = @CreditLiabilityLookupID
		end
	end

	select @CreditLiabilityLookupID

end
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportAccountInsert]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ImportAccountInsert]
@ClientId int,
@AccountStatusId int,
@Amount money,
@DueDate datetime, 
@SetupFeePercentage money,
@CreditorId int,
@CreditorAccountNumber varchar(50),
@Acquired datetime,
@UserId int
AS
BEGIN

declare @accountId int
declare @instanceId int

--temp fix until next release is deployed
select @AccountStatusID = 51
--end of temp fix

Insert Into tblAccount(
ClientID, AccountStatusID, OriginalAmount, CurrentAmount, 
SetupFeePercentage, OriginalDueDate, 
Created, CreatedBy, LastModified, LastModifiedBy)
Values(
@ClientID, @AccountStatusID, @Amount, @Amount, 
@SetupFeePercentage, @DueDate, 
GetDate(), @UserId, GetDate(), @UserId)

Select @accountId = SCOPE_IDENTITY()

Insert Into tblCreditorInstance(
AccountID, CreditorID, ForCreditorID, 
Acquired, Amount, OriginalAmount, AccountNumber,
Created, CreatedBy, LastModified, LastModifiedBy)
Values(@accountId, @CreditorId, Null, 
@Acquired, @Amount, @Amount, @CreditorAccountNumber,
GetDate(), @UserId, GetDate(), @UserId)

Select @instanceId = SCOPE_IDENTITY()

update tblAccount set
currentcreditorinstanceid = @instanceId,
originalcreditorinstanceid = @instanceId
where AccountId = @accountid

select @accountId

END
GO
/****** Object:  StoredProcedure [dbo].[stp_Matters_DocumentsReport]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_Matters_DocumentsReport]

	(
		@criteria varchar(2000) = ''
	)
AS
BEGIN
	exec('
		select 
			[Matter] = m.matterid
			,[Document Type] = dt.displayname
			,[Client Account Number]=c.accountnumber
			,[Creditor Last 4] = ci.accountnumber
			,[Creditor Name]= cc.name
			,[State] = s.abbreviation
			,[Firm] = co.name
			,[Created By] = ru.firstname + '' '' + ru.lastname
			,[PDFPath] = ''\\'' + c.storageserver + ''\'' + c.storageroot + ''\'' + c.accountnumber + ''\'' +
			case when dr.subfolder is null then ''CreditorDocs\'' else ''CreditorDocs\'' + dr.subfolder end
			+ c.accountnumber + ''_'' + dr.doctypeid + ''_'' + dr.docid + ''_'' + dr.datestring + ''.pdf''
		from tblmatter m with(nolock)
			inner join tblclient c with(nolock) on c.clientid = m.clientid
			inner join tblperson p with(nolock) on p.personid = c.primarypersonid
			inner join tblstate s with(nolock) on s.stateid = p.stateid
			inner join tblcompany co with(nolock) on co.companyid = c.companyid
			left join tbldocrelation dr with(nolock) on dr.relationid = m.matterid and dr.relationtype = ''matter''
			inner join tbldocumenttype dt with(nolock) on dt.typeid = dr.doctypeid and typeId LIKE ''%M%''
			inner join tblcreditorinstance ci with(nolock) on ci.creditorinstanceid = m.creditorinstanceid
			inner join tblcreditor cc with(nolock) on cc.creditorid = ci.creditorid
			inner join tbluser ru with(nolock) on ru.userid = dr.relatedby 
		where isnull(m.isdeleted,0) = 0 ' 
		+ @criteria 
		+ ' Order By dr.relateddate desc
		')
END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationInterfaceDefaultValues]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Default Values to populate. This proc is manually run to pre-populate values before use. The values are mainly used by 
			     Structure and Criteria Assignment Interfaces

*/

CREATE Procedure [dbo].[stp_NegotiationInterfaceDefaultValues]
AS

DECLARE @DashboardId int
INSERT INTO tblDashBoardItem
  SELECT
  '<design><div><b><sqlparam id="sql2" value="Description" /></b><br /><table style="font-family:Tahoma;font-size:11px;"><tr><td>Client Count:</td><td><sqlparam id="sql1" value="ClientCount" /><br /></td></tr><tr><td>Account Count:</td><td><sqlparam id="sql1" value="AccountCount" /><br /></td></tr><tr><td>State Count:</td><td><sqlparam id="sql1" value="StateCount" /><br /></td></tr><tr><td>Zip Code Count:</td><td><sqlparam id="sql1" value="ZipCodeCount" /><br /></td></tr><tr><td>Creditor Count:</td><td><sqlparam id="sql1" value="CreditorCount" /><br /></td></tr><tr><td>Status Count:</td><td><sqlparam id="sql1" value="StatusCount" /><br /></td></tr><tr><td>Total SDA:</td><td><sqlparam id="sql1" value="TotalSDAAmount" /><br /></td></tr></table></div></design>',
  '<sql><sqlparam id="sql1" value="exec stp_NegotiationDashboardGet ''{id}'', ''count(distinct ClientId) As ClientCount, count(AccountId) as AccountCount, count(distinct ApplicantState) as StateCount, count(distinct ApplicantZipCode) as ZipCodeCount, count(distinct CurrentCreditor) as CreditorCount, count(distinct AccountStatus) as StatusCount, ''''$'''' + cast(sum(isnull(SDABalance, 0)) as nvarchar(25)) as TotalSDAAmount''" /><sqlparam id="sql2" value="SELECT [Description] FROM tblNegotiationFilters WHERE FilterID in ({id})" isnull="NONE" /></sql>',
  null,
  null

SELECT @DashboardId = SCOPE_IDENTITY()

INSERT INTO tblDashboardPermission
 SELECT 'NegotiationInterface', null,null, @DashboardId


INSERT INTO tblDashboardProfile (DashboardItemId,Scenario, UserID,ClientX,ClientY) VALUES (@DashboardId,'NegotiationInterface',531,0,0)
INSERT INTO tblDashboardProfile (DashboardItemId,Scenario, UserID,ClientX,ClientY) VALUES (@DashboardId,'NegotiationInterface',493,0,0)
INSERT INTO tblDashboardProfile (DashboardItemId,Scenario, UserID,ClientX,ClientY) VALUES (@DashboardId,'NegotiationInterface',750,0,0)
INSERT INTO tblDashboardProfile (DashboardItemId,Scenario, UserID,ClientX,ClientY) VALUES (@DashboardId,'NegotiationInterface',773,0,0)
INSERT INTO tblDashboardProfile (DashboardItemId,Scenario, UserID,ClientX,ClientY) VALUES (@DashboardId,'NegotiationInterface',785,0,0)
INSERT INTO tblDashboardProfile (DashboardItemId,Scenario, UserID,ClientX,ClientY) VALUES (@DashboardId,'NegotiationInterface',787,0,0)
INSERT INTO tblDashboardProfile (DashboardItemId,Scenario, UserID,ClientX,ClientY) VALUES (@DashboardId,'NegotiationInterface',820,0,0)
INSERT INTO tblDashboardProfile (DashboardItemId,Scenario, UserID,ClientX,ClientY) VALUES (@DashboardId,'NegotiationInterface',311,0,0)
 
INSERT INTO tblNegotiationAssignment (HeaderName,ColumnName,SQL,SQLAggregation,Aggregation,GroupedAggregation,Format,[Order],[Default],CanGroup) VALUES ('State','ApplicantState','ApplicantState','count(ApplicantState)','sum',NULL,	NULL,1,0,1)
INSERT INTO tblNegotiationAssignment (HeaderName,ColumnName,SQL,SQLAggregation,Aggregation,GroupedAggregation,Format,[Order],[Default],CanGroup) VALUES ('SDA Balance','SDABalance','SDABalance','sum(SDABalance)','sum',NULL,	'C',3,0,0)
INSERT INTO tblNegotiationAssignment (HeaderName,ColumnName,SQL,SQLAggregation,Aggregation,GroupedAggregation,Format,[Order],[Default],CanGroup) VALUES ('Total Debt','CurrentAmount','CurrentAmount','sum(CurrentAmount)','sum',NULL,	'C',4,0,0)
INSERT INTO tblNegotiationAssignment (HeaderName,ColumnName,SQL,SQLAggregation,Aggregation,GroupedAggregation,Format,[Order],[Default],CanGroup) VALUES ('Client Count','ClientID','DISTINCT ClientID','count(DISTINCT ClientID)','sum',NULL,	NULL,2,0,0)
INSERT INTO tblNegotiationAssignment (HeaderName,ColumnName,SQL,SQLAggregation,Aggregation,GroupedAggregation,Format,[Order],[Default],CanGroup) VALUES ('Zip Code','ApplicantZipCode','substring(ApplicantZipCode, 1, 2)','count(ApplicantZipCode)','sum',NULL,	NULL,1,0,1)
INSERT INTO tblNegotiationAssignment (HeaderName,ColumnName,SQL,SQLAggregation,Aggregation,GroupedAggregation,Format,[Order],[Default],CanGroup) VALUES ('Last Name','ApplicantLastName','substring(ApplicantLastName, 1, 1)','count(ApplicantLastName)','sum',NULL,	NULL,0,1,1)
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientQueue_IoU]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_ClientQueue_IoU]
(
	@AgencyID int,
	@Row int,
	@Col int,
	@Value varchar(255)
)
AS

BEGIN

if (@value is null or @value = '') begin

	declare @cellCount int
	set @cellCount = (select count(*) from tblclientqueue where agencyid=@agencyid and row=@row)

	if (@cellCount = 1) begin
		--last cell in row.  Just set it to null
		update
			tblclientqueue
		set
			[value]='&nbsp;'
		where
			agencyid=@agencyid and row=@row and col=@col
	end else begin
		--delete cell
		delete from 
			tblclientqueue
		where
			agencyid=@agencyid and row=@row and col=@col
	end

end else begin

	declare @clientqueueid int
	set @clientqueueid=
	(
		select 
			clientqueueid 
		from 
			tblclientqueue 
		where 
			agencyid=@agencyid and row=@row and col=@col
	)

	if (@clientqueueid is null) begin

		insert into 
			tblclientqueue(agencyid,col,row,[value]) 
		values 
			(@agencyid,@col,@row,@value)

	end else begin

		update 
			tblclientqueue 
		set 
			[value]=@value 
		where 
			clientqueueid=@clientqueueid

	end

end

END
GO
/****** Object:  Table [dbo].[tblPhoneType]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblPhoneType](
	[PhoneTypeID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[Created] [datetime] NOT NULL,
	[CreatedBy] [varchar](50) NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [varchar](50) NOT NULL,
 CONSTRAINT [PK_tblPhoneType] PRIMARY KEY CLUSTERED 
(
	[PhoneTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetCommissionBatchTransfers]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetCommissionBatchTransfers]
(
	@CommBatchIDs varchar(1500),
	@CompanyID nvarchar(100),
	@CommRecID nvarchar(1000),
	@ClientCreatedDateFrom varchar(20) = '1/1/1900',
	@ClientCreatedDateTo varchar(20) = '1/1/2050'
)
as
begin
/*
	History:
	10/13/08	jhernandez		Settlement attorney portal
	10/24/08	jhernandez		Removed conditional filtering for commrecs 5 & 24. Using multiple scenarios now.
	12/15/08	jhernandez		Include payments made through Lexxiom
*/

SELECT ClientID, ClientName, sum(Amount) as Amount 
FROM (
	select person.ClientID, ltrim(person.FirstName + ' ' + person.LastName) as ClientName, comm.Amount as Amount 
	from tblCommPay as comm 
	join tblRegisterPayment as registerpay on registerpay.RegisterPaymentID = comm.RegisterPaymentID 
	join tblRegister as register on register.RegisterID = registerpay.FeeRegisterID 
	join tblClient as client on client.ClientID = register.ClientID 
		and client.CompanyID = @CompanyID
		and (client.Created between @ClientCreatedDateFrom and @ClientCreatedDateTo)
	join dbo.splitstr(@CommBatchIDs,',') b on b.Value = comm.commbatchid
	join tblcommstruct cs on cs.commstructid = comm.commstructid 
		--and cs.parentcommrecid <> 4
	join dbo.splitstr(@CommRecID,',') r on r.Value = cs.commrecid
	left join tblPerson as person on person.PersonID = client.PrimaryPersonID
	
	union all
	
	select person.ClientID, ltrim(person.FirstName + ' ' + person.LastName) as ClientName, -comm.Amount as Amount 
	from tblCommChargeback as comm 
	join tblRegisterPayment as registerpay on registerpay.RegisterPaymentID = comm.RegisterPaymentID 
	join tblRegister as register on register.RegisterID = registerpay.FeeRegisterID 
	join tblClient as client on client.ClientID = register.ClientID 
		and client.CompanyID = @CompanyID
		and (client.Created between @ClientCreatedDateFrom and @ClientCreatedDateTo)
	join dbo.splitstr(@CommBatchIDs,',') b on b.Value = comm.commbatchid
	join tblcommstruct cs on cs.commstructid = comm.commstructid 
		--and cs.parentcommrecid <> 4
	join dbo.splitstr(@CommRecID,',') r on r.Value = cs.commrecid
	left join tblPerson as person on person.PersonID = client.PrimaryPersonID
	
) as derivedtable 

GROUP BY ClientName, ClientID 
ORDER BY ClientName


end
GO
/****** Object:  Table [dbo].[tblClient]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblClient](
	[ClientID] [int] IDENTITY(1,1) NOT NULL,
	[PrimaryPersonID] [int] NULL,
	[EnrollmentID] [int] NOT NULL,
	[TrustID] [int] NULL,
	[AccountNumber] [varchar](50) NULL,
	[DepositMethod] [varchar](50) NULL,
	[DepositDay] [int] NULL,
	[DepositAmount] [money] NULL,
	[BankName] [varchar](255) NULL,
	[BankRoutingNumber] [varchar](50) NULL,
	[BankAccountNumber] [varchar](50) NULL,
	[BankType] [char](2) NULL CONSTRAINT [DF_tblClient_BankType]  DEFAULT ('C'),
	[BankCity] [varchar](50) NULL,
	[BankStateID] [int] NULL,
	[BankFraction] [varchar](50) NULL,
	[UserName] [varchar](50) NULL,
	[Password] [varchar](50) NULL,
	[SetupFee] [money] NULL,
	[SetupFeePercentage] [money] NULL,
	[SettlementFeePercentage] [money] NULL,
	[MonthlyFee] [money] NULL,
	[MonthlyFeeDay] [int] NULL,
	[MonthlyFeeStartDate] [datetime] NULL,
	[AdditionalAccountFee] [money] NULL,
	[ReturnedCheckFee] [money] NULL,
	[OvernightDeliveryFee] [money] NULL,
	[AgencyID] [int] NULL,
	[CompanyID] [int] NULL,
	[AssignedUnderwriter] [int] NULL,
	[AssignedCSRep] [int] NULL,
	[AssignedMediator] [int] NULL,
	[ReceivedLSA] [bit] NULL,
	[ReceivedDeposit] [bit] NULL,
	[VWDESaved] [datetime] NULL,
	[VWDESavedBy] [int] NULL,
	[VWDEResolved] [datetime] NULL,
	[VWDEResolvedBy] [int] NULL,
	[VWUWSaved] [datetime] NULL,
	[VWUWSavedBy] [int] NULL,
	[VWUWResolved] [datetime] NULL,
	[VWUWResolvedBy] [int] NULL,
	[Created] [datetime] NOT NULL,
	[CreatedBy] [varchar](50) NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [varchar](50) NOT NULL,
	[ImportID] [int] NULL,
	[SentWelcomeCoverLetter] [datetime] NULL,
	[SentByWelcomeCoverLetter] [int] NULL,
	[SentWelcomeCallLetter] [datetime] NULL,
	[SentByWelcomeCallLetter] [int] NULL,
	[SentCreditorLetters] [datetime] NULL,
	[SentByCreditorLetters] [int] NULL,
	[SentWelcomePackage] [datetime] NULL,
	[SentByWelcomePackage] [int] NULL,
	[NoChecks] [bit] NOT NULL CONSTRAINT [DF_tblClient_NoChecks]  DEFAULT ((0)),
	[CurrentClientStatusID] [int] NULL,
	[DepositStartDate] [datetime] NULL,
	[OldClientID] [int] NULL,
	[AutoAssignMediator] [bit] NOT NULL CONSTRAINT [DF_tblClient_AutoAssignMediator]  DEFAULT ((1)),
	[PFOBalance] [money] NOT NULL CONSTRAINT [DF_tblClient_PFOBalance]  DEFAULT ((0)),
	[SDABalance] [money] NOT NULL CONSTRAINT [DF_tblClient_SDABalance]  DEFAULT ((0)),
	[StorageServer] [varchar](50) NULL CONSTRAINT [DF_tblClient_StorageServer]  DEFAULT ('nas02'),
	[StorageRoot] [varchar](50) NULL CONSTRAINT [DF_tblClient_StorageRoot]  DEFAULT ('ClientStorage'),
	[InitialAgencyPercent] [money] NULL,
	[InitialDraftDate] [datetime] NULL,
	[InitialDraftAmount] [money] NULL,
	[AgentName] [nvarchar](150) NULL,
	[SubsequentMaintFee] [money] NULL,
	[SubMaintFeeStart] [datetime] NULL,
	[ServiceImportId] [int] NULL,
	[MultiDeposit] [bit] NOT NULL DEFAULT ((0)),
	[MaintenanceFeeCap] [money] NULL,
	[RemittName] [nvarchar](250) NULL,
	[BofAConversionDate] [datetime] NULL,
	[AssignedUnderwriterDate] [datetime] NULL,
	[Accept] [bit] NULL,
	[AcceptRejectDate] [datetime] NULL,
	[AcceptRejectBy] [int] NULL,
	[RejectReason] [varchar](500) NULL,
	[ReferenceClientID] [int] NULL,
 CONSTRAINT [PK_tblClient] PRIMARY KEY CLUSTERED 
(
	[ClientID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCreditorInstancesForAccount]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetCreditorInstancesForAccount]
	(
		@accountid int
	)

as

select
	tblcreditorinstance.*,
	convert(bit, (
		case
			when tblaccount.currentcreditorinstanceid = tblcreditorinstance.creditorinstanceid
			then 1
			else 0
		end
	))
	as iscurrent,
	isnull(tblaccount.settlementfeecredit,0) as settlementfeecredit,
	tblaccount.originalamount,
	tblaccount.currentamount,
	tblaccount.originalduedate,
	isnull(g.name,tblcreditor.name) as creditorname,
	forcreditor.name as forcreditorname,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname,
	case when tblcreditor.validated = 0 then 'red' else 'black' end [Color],
	tblcreditor.validated
from
	tblcreditorinstance inner join
	tblaccount on tblcreditorinstance.accountid = tblaccount.accountid inner join
	tblcreditor on tblcreditorinstance.creditorid = tblcreditor.creditorid left outer join
	tblcreditor forcreditor on tblcreditorinstance.forcreditorid = forcreditor.creditorid left outer join
	tbluser as tblcreatedby on tblcreditorinstance.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblcreditorinstance.lastmodifiedby = tbllastmodifiedby.userid left join
	tblcreditorgroup g on g.creditorgroupid = tblcreditor.creditorgroupid
where
	tblcreditorinstance.accountid = @accountid
order by
	tblcreditorinstance.created,
	tblcreditorinstance.creditorinstanceid
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_getCreditors]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_LetterTemplates_getCreditors]
(
	@clientid int
)
as
BEGIN
	SELECT     
		ci.CreditorInstanceID, a.AccountID, cr.Name
	FROM         
		tblAccount AS a INNER JOIN
		tblCreditorInstance AS ci ON a.CurrentCreditorInstanceID = ci.CreditorInstanceID INNER JOIN
		tblCreditor AS cr ON ci.CreditorID = cr.CreditorID
	WHERE (a.ClientID = 778) AND (a.Removed IS NULL)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Report_AccountsOverPercentage_Fulfillment_PlannedGrid]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Report_AccountsOverPercentage_Fulfillment_PlannedGrid]
(
	@SelectedClientIDs varchar(8000)=null
)

as

create table #SelectedClientIDs(ClientID int)
if not @selectedclientids is null
	exec('insert into #selectedclientids select clientid from tblclient where clientid in (' + @SelectedClientIDs + ')')

select 
	u.userid, 
	firstname + ' '+ lastname as fullname,  
	(select count(clientid) from tblclient where assignedmediator=u.userid) as has,
	(select count(clientid) from tblclient where assignedmediator=u.userid and clientid in (select clientid from #SelectedClientIDs)) as hasselected
from 
	tbluser u inner join 
	tbluserposition up on u.userid=up.userid 
where 
	up.positionid=4

drop table #SelectedClientIDs
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Paths_CreatePath]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Paths_CreatePath]
    @ApplicationId UNIQUEIDENTIFIER,
    @Path           NVARCHAR(256),
    @PathId         UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    BEGIN TRANSACTION
    IF (NOT EXISTS(SELECT * FROM dbo.aspnet_Paths WHERE LoweredPath = LOWER(@Path) AND ApplicationId = @ApplicationId))
    BEGIN
        INSERT dbo.aspnet_Paths (ApplicationId, Path, LoweredPath) VALUES (@ApplicationId, @Path, LOWER(@Path))
    END
    COMMIT TRANSACTION
    SELECT @PathId = PathId FROM dbo.aspnet_Paths WHERE LOWER(@Path) = LoweredPath AND ApplicationId = @ApplicationId
END
GO
/****** Object:  Table [dbo].[tblAdHocACH]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblAdHocACH](
	[AdHocAchID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[ClientID] [int] NOT NULL,
	[RegisterID] [int] NULL,
	[DepositDate] [datetime] NOT NULL,
	[DepositAmount] [money] NOT NULL,
	[BankName] [varchar](50) NOT NULL,
	[BankRoutingNumber] [varchar](50) NOT NULL,
	[BankAccountNumber] [varchar](50) NOT NULL,
	[Created] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
	[BankType] [varchar](1) NULL,
	[InitialDraftYN] [bit] NULL,
	[BankAccountId] [int] NULL,
 CONSTRAINT [PK_tblAdHocACH] PRIMARY KEY CLUSTERED 
(
	[AdHocAchID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblAdHocACH_8_598345246__K2_K14_1_3_4_5_6_7_8_9_10_11_12_13_15_9987] ON [dbo].[tblAdHocACH] 
(
	[ClientID] ASC,
	[InitialDraftYN] ASC
)
INCLUDE ( [AdHocAchID],
[RegisterID],
[DepositDate],
[DepositAmount],
[BankName],
[BankRoutingNumber],
[BankAccountNumber],
[Created],
[CreatedBy],
[LastModified],
[LastModifiedBy],
[BankType],
[BankAccountId]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientQueue_DeleteRow]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_ClientQueue_DeleteRow]
(
	@AgencyID int,
	@Row int
)
AS

BEGIN

delete from 
	tblclientqueue 
where 
	agencyid = @agencyid 
	and row = @row

update 
	tblclientqueue 
set 
	row = row - 1 
where
	agencyid = @agencyid 
	and row > @row

END
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_Litigation_getAttorneySignatureInfo]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_Litigation_getAttorneySignatureInfo]
	(
		@clientid int
	)
AS
BEGIN
	declare @state varchar(2)
	declare @companyid int

	select @state = s.abbreviation, @companyid = c.companyid
	from tblClient c 
		inner join tblPerson p on c.PrimaryPersonID = p.PersonID
		inner join tblstate s on s.stateid = p.stateid
	where c.clientid = @clientid
	
	declare @attyName varchar(150)
	declare @attySigPath varchar(150)

	SELECT     
	@attyName = a.firstname + case when a.middlename is null or a.middlename = '' then ' ' else ' ' + a.middlename + ' ' end + a.lastname + case when a.suffix is null or a.suffix = '' then ' ' else ' ' + a.suffix + ' ' end
	, @attySigPath = a.sigpath
	FROM tblAttorney AS a INNER JOIN
	tblAttyStates AS [as] ON a.AttorneyID = [as].AttorneyID INNER JOIN
	tblAttyRelation AS ar ON a.AttorneyID = ar.AttorneyID
	where ar.AttyRelation = 'Associated' and [as].state = @state and ar.CompanyID = @companyid and not a.sigpath is null 
	ORDER BY [as].State, ar.CompanyID

	if (@attySigPath is null)
		BEGIN
			select
				@attyName = contact1
				, @attySigPath = sigpath
			FROM tblCompany
			Where CompanyID = @companyid
		END

	select @attyName[AttorneyName],@attySigPath[SigPath]
END



GRANT EXEC ON stp_LetterTemplates_Litigation_getAttorneySignatureInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_SSRS_getClientData]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_SSRS_getClientData 1

CREATE procedure [dbo].[stp_SSRS_getClientData]
(
@firmid int
)
as
BEGIN
	--declare @firmid int
	--set @firmid = 2
	select
		  [File #] = c.accountnumber 
		  ,c.clientid
		  ,c.currentclientstatusid
		  ,[Status] = stat.name
		  ,[Name] = p.firstname + ' ' + p.lastname
		  ,[DOB] = isnull(convert(varchar,p.dateofbirth,110),'')
		  ,[SSN] = isnull((substring(p.ssn,1,3)+'-'+substring(p.ssn,4,2)+'-'+substring(p.ssn,6,4)),'')
		  ,[Address] = isnull(p.street,'')
		  ,[Address2] = isnull(p.street2,'')
		  ,[City] = isnull(p.city,'')
		  ,[State] = isnull(st.abbreviation,'')
		  ,[Zipcode] = isnull(p.zipcode,'')
		  ,[E-Mail] = isnull(p.emailaddress,'')
		  ,[Home Phone] = isnull((SELECT TOP 1  '(' + AreaCode + ') ' + substring(Number, 0,4) + '-' + substring(Number, 4,4) + ' ' + isnull(' x' + Extension,'') 
				FROM tblPhone WHERE PhoneTypeId=27 AND tblPhone.PhoneID IN (SELECT PhoneID FROM tblPersonPhone WHERE PersonId=p.PersonId)),' ')
		  ,[Home Fax] = isnull(( SELECT  TOP 1'(' + AreaCode + ') ' + substring(Number, 0,4) + '-' + substring(Number, 4,4) + ' ' + isnull(' x' + Extension,'') 
				FROM tblPhone WHERE PhoneTypeId=29 AND tblPhone.PhoneID IN (SELECT PhoneID FROM tblPersonPhone WHERE PersonId=p.PersonId)),' ')
		  ,[Hire Date] = convert(varchar,c.created,110)
		  ,[Verified] = isnull((select top(1) convert(varchar,rm.created,110) from tblroadmap rm where rm.clientid = c.clientid and rm.clientstatusid = 11),'')
		  ,[Fees Paid]= isnull((select sum(rp.amount) from tblregisterpayment rp inner join tblregister r on rp.feeregisterid = r.registerid
				where r.clientid = c.clientid and rp.bounced =0 and rp.voided = 0),0)
		  ,ttlRefund = isnull((select sum(abs(r.amount)) from tblregister r where r.clientid = c.clientid and r.entrytypeid = 48 and (r.bounce is null and r.void is null)),0)
		  ,ttlDeposits = isnull((select sum(r.amount) from tblregister r where r.clientid = c.clientid and r.entrytypeid = 3 and (r.bounce is null and r.void is null)),0)
		  ,[Settlments Paid] = isnull((select sum(abs(r.amount)) from tblregister r where r.clientid = c.clientid and r.entrytypeid = 18 and (r.bounce is null and r.void is null)),0)
		  ,[Refunds Paid] =  isnull((select sum(abs(r.amount)) from tblregister r where r.clientid = c.clientid and r.entrytypeid in (21,28) and (r.bounce is null and r.void is null)),0)
		  ,sdaBalance = c.sdabalance
		  ,[Disengaged] =  isnull((select top(1) convert(varchar,rm.created,110) from tblroadmap rm where rm.clientid = c.clientid and rm.clientstatusid = c.currentclientstatusid and rm.clientstatusid in (12,17,18) order by rm.roadmapid desc),'')
		  ,[Account ID]=a.accountid
			,[Account Status]=credstat.description 
			,[Creditor Name] =cr.name
			,[Creditor Street] =cr.street
			,[Creditor Suite/Mailstop] = cr.street2
			,[Creditor City]     =cr.city
			,[Creditor State] = crst.abbreviation  
			,[Creditor Zip] = cr.zipcode
			,[Amount Claimed] = round(a.currentamount,2)
	from tblclient c
	left join tblperson p on c.primarypersonid = p.personid
	left join tblstate st on p.stateid = st.stateid
	inner join tblclientstatus stat on c.currentclientstatusid = stat.clientstatusid
	inner join tblaccount a on a.clientid = c.clientid
	inner join tblaccountstatus credstat on a.accountstatusid = credstat.accountstatusid
	inner join tblcreditorinstance ci on a.currentcreditorinstanceid = ci.creditorinstanceid
	inner join tblcreditor cr on ci.creditorid = cr.creditorid
	inner join tblstate crst on cr.stateid = crst.stateid
	where c.companyid = @firmid
	

END
GO
/****** Object:  StoredProcedure [dbo].[stp_Harassment_InsertSubmission]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Harassment_InsertSubmission]
(
@ClientID int,
@PersonID int,
@ClientAccountNumber  int,
@ClientState  varchar(4),
@OriginalCreditorID int,
@SuedByCreditor  bit,
@CurrentCreditorID int,
@CreatedBy int,
@NoticeOfRepMailDate datetime,
@NoticeOfCeaseAndDesist datetime,
@CreditorUnAuthorizedCharges  bit,
@IndividualCallingName varchar(200),
@IndividualCallingIdentity varchar(500),
@IndividualCallingPhone varchar(50),
@IndividualCallingNumberDialed varchar(50),
@IndividualCallingDateOfCall datetime,
@IndividualCallingNumTimesCalled numeric,
@IndividualCallingTimeOfCall  varchar(50),
@CreditorAcctID int = null,
@AbuseBeginDate datetime = null,
@EstNumberDailyCalls int = 0
)
as
BEGIN
/*
stp_Harassment_InsertSubmission 778,12345,6005000,'NY',12345,0,12345,750,'2009-06-05 08:12:29.750','2009-06-05 08:12:29.750',0,'IndividualCallingName','IndividualCallingIdentity','5555555555','5555555555','2009-06-05 08:12:29.750',3,'2009-06-05 08:12:29.750',123456,'4/12/2010',3
*/
	INSERT INTO [tblHarassmentClient] 
	([ClientID],[PersonID],[ClientAccountNumber],[ClientState],[OriginalCreditorID],[SuedByCreditor],[CurrentCreditorID],
	[CreatedBy],[Method], NoticeOfRepMailDate, NoticeOfCeaseAndDesist, CreditorUnAuthorizedCharges, [IndividualCallingName],
	[IndividualCallingIdentity],[IndividualCallingPhone],[IndividualCallingDateOfCall],[IndividualCallingNumTimesCalled],
	[IndividualCallingTimeOfCall],[IndividualCallingNumberDialed],CreditorAccountID,AbuseBeginDate,EstNumberDailyCalls) 
	VALUES(@ClientID,@PersonID,@ClientAccountNumber,@ClientState,@OriginalCreditorID,@SuedByCreditor,@CurrentCreditorID,@CreatedBy,
	NULL,@NoticeOfRepMailDate,@NoticeOfCeaseAndDesist,@CreditorUnAuthorizedCharges,@IndividualCallingName,@IndividualCallingIdentity,
	@IndividualCallingPhone,@IndividualCallingDateOfCall,@IndividualCallingNumTimesCalled,@IndividualCallingTimeOfCall,@IndividualCallingNumberDialed,@CreditorAcctID,@AbuseBeginDate,@EstNumberDailyCalls)
	
	SELECT SCOPE_IDENTITY() AS [ClientSubmissionID]


END


GRANT EXEC ON stp_Harassment_InsertSubmission TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_hardship_insertClientHardship]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_hardship_insertClientHardship]
(
@ClientID int, 
@MarriageTypeID int, 
@NumOfChildren int, 
@NumOfGrandChildren int, 
@IsReceivingStateAssistance bit, 
@IsReceivingStateAssistanceExplain bit, 
@HasClientReFinanced bit,  
@EquityValueOfHome money, 
@ReasonForDebt varchar(max), 
@DoApplicantsHaveAssets bit, 
@AdditionalInformation varchar(max), 
@userid int
)
AS
BEGIN
	INSERT INTO tblClientHardshipData(ClientID, MarriageTypeID, NumOfChildren, NumOfGrandChildren, IsReceivingStateAssistance, IsReceivingStateAssistanceExplain, HasClientReFinanced, EquityValueOfHome, ReasonForDebt, DoApplicantsHaveAssets, AdditionalInformation, Created, CreatedBy, LastModified, LastModifiedBy, IsHardShipActive) 
	VALUES (@ClientID, @MarriageTypeID, @NumOfChildren, @NumOfGrandChildren, @IsReceivingStateAssistance, @IsReceivingStateAssistanceExplain, @HasClientReFinanced, @EquityValueOfHome, @ReasonForDebt, @DoApplicantsHaveAssets, @AdditionalInformation, GETDATE(), @userid, GETDATE(), @userid, 1)
END


GRANT EXEC ON stp_hardship_insertClientHardship TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_Reporting_SmartDebtor_KPI]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Reporting_SmartDebtor_KPI]
(
	@startdate datetime,
	@enddate datetime
)
as
BEGIN
/*	developement

	[stp_Reporting_SmartDebtor_KPI] '7/1/2009 12:00:00 AM','7/14/2009 12:00:00 AM'

	declare @startDate datetime
	declare @endDate datetime

	set @startDate = '6/1/2009 12:00:00 AM'
	set @endDate = '7/1/2009 12:00:00 AM'

*/
/*    developement */

   
	declare @ssql varchar(max)
	declare @val varchar(4)
	declare @dnis varchar(max) 
	declare @addDNIS varchar(20)

	set @ssql = ''
	set @dnis = ''

	-- hard coded values (need to find where these come from)
	declare @TransferPercentGoal float
	declare @NumCasesGoal int
	declare @ConversionPercentGoal float
	declare @MarketingBudgetPerDay money
	declare @CostPerConversionGoal money

	-- set values
	set @TransferPercentGoal = 85.00
	set @NumCasesGoal  = 12
	set @ConversionPercentGoal = 12.00
	set @MarketingBudgetPerDay = 5531.00
	set @CostPerConversionGoal = 416.67

	declare cursor_DNIS cursor forward_only read_only for SELECT right(dnis,4)[dnis] from tblleaddnis where dnis <> '' order by right(dnis,4)
	open cursor_DNIS
	fetch next from cursor_DNIS into @addDNIS
	while @@fetch_status = 0
		begin
			set @dnis = @dnis + case when @addDNIS is null then '' else @addDNIS + ',' end 

			fetch next from cursor_DNIS into @addDNIS
		end
	close cursor_DNIS
	deallocate cursor_DNIS

	set @dnis = left(@dnis, len(@dnis)-1)

	
--get internet/phone lead data
set @ssql = @ssql + 'declare @tblRpt table (TypeDayID int, ConnectDate varchar(20), TotalInboundCalls int, TotalInternet int, TotalSystemCalls int, TotalAppointments int,TotalCallsAnswered int,TotalOtherInboundLeads int ,TotalCallsTransferred int, TransferPercent float, TransferPercentGoal float, NumCasesAgainstMarketingDollars int, NumCasesGoal int, ConversionPercent float, ConversionPercentGoal float,MarketingBudgetSpentPerDay Money, MarketingBudgetPerDay Money, CostPerConversionDay Money, CostPerConversionGoal Money, TotalNumCases int) ' + char(13)
set @ssql = @ssql + 'insert into @tblRpt '
set @ssql = @ssql + 'select '
set @ssql = @ssql + '[DayOfWeek] = case when datepart(dw, initiated-1) in (6,7) then ''0'' else ''1'' end '
set @ssql = @ssql + ', [ConnectDate] = convert(varchar(10),initiated,101) '
set @ssql = @ssql + ', [TotalInboundCalls] = SUM(CASE WHEN [TYPE] = ''PHONE'' THEN 1 ELSE 0 END) '
set @ssql = @ssql + ', [TotalInternet] = SUM(CASE WHEN [TYPE] = ''INTERNET'' THEN 1 ELSE 0 END) '
set @ssql = @ssql + ', [TotalSystemCalls] = sum(case when Stationid = ''System'' then 1 else 0 end) '
set @ssql = @ssql + ', [TotalAppointments] = sum(FirstAppointmentDate) '
set @ssql = @ssql + ', [TotalCallsAnswered] = 0 '
set @ssql = @ssql + ', [TotalCallsTransferred] = 0'
set @ssql = @ssql + ', [TotalOtherInboundLeads] = sum(case when Leadsourceid in (1,2) then 1 else 0 end)'
set @ssql = @ssql + ', [TransferPercent] = 0 '
set @ssql = @ssql + ', [TransferPercentGoal] = ' + convert(varchar,@TransferPercentGoal)
set @ssql = @ssql + ', [NumCasesAgainstMarketingDollars] = 0 '
set @ssql = @ssql + ', [NumCasesGoal] = ' + convert(varchar,@NumCasesGoal)
set @ssql = @ssql + ', [ConversionPercent] = 0 '
set @ssql = @ssql + ', [ConversionPercentGoal] = ' + convert(varchar,@ConversionPercentGoal)
set @ssql = @ssql + ', [MarketingBudgetSpentPerDay] = 0 '
set @ssql = @ssql + ', [MarketingBudgetPerDay] = 0' 
set @ssql = @ssql + ', [CostPerConversionDay] = ' + convert(varchar,@CostPerConversionGoal)
set @ssql = @ssql + ', [CostPerConversionGoal] = ' + convert(varchar,@CostPerConversionGoal)
set @ssql = @ssql + ', [TotalNumCases] = (select count(distinct(leadapplicantid))  from tblleadstatusroadmap where leadstatusid = 6 and convert(varchar(10),created ,101) = convert(varchar(10),initiated,101)) '
set @ssql = @ssql + 'from ( ' + char(13)
set @ssql = @ssql + 'select [Type] = ''INTERNET'''
set @ssql = @ssql + ',[DNIS] = ''00000'' '
set @ssql = @ssql + ',[I3CallIDKey] = ''00000'' '
set @ssql = @ssql + ',[LocalCallIDKey] = ''*****'''
set @ssql = @ssql + ',[StationID] = ''00000'' '
set @ssql = @ssql + ',[Screen Pop]= ''00000'' '
set @ssql = @ssql + ',[initiated]= la.created'
set @ssql = @ssql + ',[initDay] = day(la.created)'
set @ssql = @ssql + ',[Created] = la.created'
set @ssql = @ssql + ',[Status] = isnull(ls.description,'''')'
set @ssql = @ssql + ',[Full Name] = isnull(la.fullname,'''')'
set @ssql = @ssql + ',[City] = isnull(la.city,'''')'
set @ssql = @ssql + ',[State] = isnull(st.name,'''')'
set @ssql = @ssql + ',Concerns = isnull(con.description,'''')'
set @ssql = @ssql + ',LawFirm = isnull(comp.ShortCoName,'''')'
set @ssql = @ssql + ',Associate = isnull(u2.firstname +'' '' + u2.lastname,'''')'
set @ssql = @ssql + ',Rep = isnull(u.firstname + '' '' + u.lastname,'''')'
set @ssql = @ssql + ',[Total Debt] = isnull(calc.totaldebt,0)'
set @ssql = @ssql + ',[RemoteNumber] = ''00000'' '
set @ssql = @ssql + ',[HoldDuration] = ''00000'' '
set @ssql = @ssql + ',[LeadStatusId] = la.statusid '
set @ssql = @ssql + ',[FirstAppointmentDate] = case when not FirstAppointmentDate is null then 1 else 0 end '
set @ssql = @ssql + ',[LeadCreatedDate] = la.Created '
set @ssql = @ssql + ',[LeadSourceID]=la.LeadSourceID ' + char(13)
set @ssql = @ssql + 'from tblleadapplicant la '
set @ssql = @ssql + 'left join tblleadstatus ls on la.statusid = ls.statusid '
set @ssql = @ssql + 'left join tblstate st on la.stateid = st.stateid '
set @ssql = @ssql + 'left join tblcompany comp on la.companyid = comp.companyid '
set @ssql = @ssql + 'left join tblleadconcerns con on la.concernsid = con.concernsid '
set @ssql = @ssql + 'left join tbluser u on repid = u.userid '
set @ssql = @ssql + 'left join tbluser u2 on createdbyid = u2.userid '
set @ssql = @ssql + 'left join tblleadcalculator calc on la.leadapplicantid = calc.leadapplicantid ' + char(13)
set @ssql = @ssql + 'where (rgrid is not null or publisherid is not null) ' 
set @ssql = @ssql + 'and la.Created >= ' + char(39) + convert(varchar,@startDate,120) + char(39) + ' '
set @ssql = @ssql + 'and la.Created <  ' + char(39) + convert(varchar,@endDate,120)  + char(39)  + ' ' + char(13)
set @ssql = @ssql + 'union all ' + char(13)
set @ssql = @ssql + 'select [Type] = ''PHONE''' + char(13)
set @ssql = @ssql + ',[DNIS] = substring(cd.dnis,5,4)'
set @ssql = @ssql + ',[I3CallIDKey] = cd.callid'
set @ssql = @ssql + ',[LocalCallIDKey] = isnull(lc.callidkey,'''')'
set @ssql = @ssql + ',[StationID] = case when cd.stationid = ''System'' then ''System'' else '''' end'
set @ssql = @ssql + ',[Screen Pop]= cd.localname'
set @ssql = @ssql + ',[initiated]= cd.ConnectedDate'
set @ssql = @ssql + ',[initDay] = datename(day,cd.ConnectedDate)'
set @ssql = @ssql + ',[Created] = isnull(lc.created,'''')'
set @ssql = @ssql + ',[Status] = isnull(ls.description,'''')'
set @ssql = @ssql + ',[Full Name] = isnull(la.fullname,'''')'
set @ssql = @ssql + ',[City] = isnull(la.city,'''')'
set @ssql = @ssql + ',[State] = isnull(st.name,'''')'
set @ssql = @ssql + ',Concerns = isnull(con.description,'''')'
set @ssql = @ssql + ',LawFirm = isnull(comp.ShortCoName,'''')'
set @ssql = @ssql + ',Associate = isnull(u2.firstname +'' '' + u2.lastname,'''')'
set @ssql = @ssql + ',Rep = isnull(u.firstname + '' '' + u.lastname,'''')'
set @ssql = @ssql + ',[Total Debt] = isnull(calc.totaldebt,0)'
set @ssql = @ssql + ',[RemoteNumber] = cd.remoteNumber '
set @ssql = @ssql + ',[HoldDuration] = cd.HoldDurationSeconds '
set @ssql = @ssql + ',[LeadStatusId] = la.statusid '
set @ssql = @ssql + ',[FirstAppointmentDate] = case when not FirstAppointmentDate is null then 1 else 0 end '
set @ssql = @ssql + ',[LeadCreatedDate] = la.Created '
set @ssql = @ssql + ',[LeadSourceID]=la.LeadSourceID '
set @ssql = @ssql + 'from [DMF-SQL-0001].i3_cic.dbo.calldetail cd ' + char(13)
set @ssql = @ssql + 'left join tblleadcall lc on lc.callidkey = cd.callid '
set @ssql = @ssql + 'left join tblleadapplicant la on la.leadapplicantid = lc.leadapplicantid '
set @ssql = @ssql + 'left join tblleadstatus ls on la.statusid = ls.statusid '
set @ssql = @ssql + 'left join tblstate st on la.stateid = st.stateid '
set @ssql = @ssql + 'left join tblcompany comp on la.companyid = comp.companyid '
set @ssql = @ssql + 'left join tblleadconcerns con on la.concernsid = con.concernsid '
set @ssql = @ssql + 'left join tbluser u on repid = u.userid '
set @ssql = @ssql + 'left join tbluser u2 on createdbyid = u2.userid '
set @ssql = @ssql + 'left join tblleadcalculator calc on lc.leadapplicantid = calc.leadapplicantid '
set @ssql = @ssql + 'where rgrid is null and publisherid is null and (' + char(13)
DECLARE @pos int,@nextpos int,@valuelen int
SELECT @pos = 0, @nextpos = 1
WHILE @nextpos > 0
	BEGIN
		SELECT @nextpos = charindex(',', @dnis, @pos + 1)
		SELECT @valuelen = CASE WHEN @nextpos > 0 THEN @nextpos ELSE len(@dnis) + 1 END - @pos - 1
		set @ssql = @ssql + 'cd.dnis like ''sip:' + convert(varchar, substring(@dnis, @pos + 1, @valuelen)) + '%'' '
		SELECT @pos = @nextpos
		if @pos > 0
			BEGIN
				set @ssql = @ssql + 'OR ' 
			END
	END 
	set @ssql = @ssql + ') and calldirection =''inbound'' and calltype =''external'' '
	set @ssql = @ssql + 'and cd.ConnectedDate >= convert(varchar,' + char(39) +  convert(varchar,@startDate) + char(39) + ') '
	set @ssql = @ssql + 'and cd.ConnectedDate <  convert(varchar,' + char(39) + convert(varchar,@endDate) + char(39)  + ') '
	set @ssql = @ssql + 'and cd.InteractionType = 0 ) as leaddata '
	set @ssql = @ssql + 'group by convert(varchar(10),initiated,101), DATENAME(dw, initiated), DATEPART(dw, initiated - 1) '
	set @ssql = @ssql + 'order by convert(varchar(10),initiated,101);' + char(13)

	set @ssql = @ssql + 'declare @numDate varchar(10) '
	set @ssql = @ssql + 'declare @nextDate varchar(10)'
	set @ssql = @ssql + 'declare NumCur cursor for select convert(varchar(10),connectdate, 101)from @tblRpt '
	set @ssql = @ssql + 'open NumCur '
	set @ssql = @ssql + 'fetch next from NumCur into @numDate '
	set @ssql = @ssql + 'while @@fetch_status = 0 begin '
	set @ssql = @ssql + '  declare @numCnt int '
	set @ssql = @ssql + '  set @nextDate = convert(varchar(10),dateadd(d,1,@numDate), 101) '
	set @ssql = @ssql + '  select @numCnt = count(*) '
	set @ssql = @ssql + '  from (select Signed = (select top(1) created from tblleadstatusroadmap lrm where lrm.leadapplicantid = la.leadapplicantid and lrm.leadstatusid in (6,7,10,11) order by lrm.roadmapid desc) '
	set @ssql = @ssql + '  from tblleadapplicant la '
	set @ssql = @ssql + '  where created between @numDate and @nextDate '
	set @ssql = @ssql + '  ) as caseData where signed is not null;'
	set @ssql = @ssql + '  update @tblRpt set NumCasesAgainstMarketingDollars = @numCnt where connectdate between @numDate and @nextDate'
	set @ssql = @ssql + '  print(@numDate)'
	set @ssql = @ssql + '  print(@numCnt)'
	set @ssql = @ssql + '  fetch next from NumCur into @numDate '
	set @ssql = @ssql + 'end '
	set @ssql = @ssql + 'close NumCur deallocate NumCur '

--get budget info	
	set @ssql = @ssql + 'declare @phonelist table (date datetime, budget money, actual money) '
	set @ssql = @ssql + 'declare @date datetime, @fordate datetime, @nextfordate datetime, @budget money, @actual money,@days int ;'

	set @ssql = @ssql + 'with mycte as ('
	set @ssql = @ssql + 'select cast(''1/1/'' + cast(year(' + char(39) +  convert(varchar,@startDate) + char(39) + ') as varchar) as datetime) DateValue'
	set @ssql = @ssql + ' union all '
	set @ssql = @ssql + 'select DateValue + 1 '
	set @ssql = @ssql + 'from    mycte    '
	set @ssql = @ssql + 'where   DateValue + 1 <= ' + char(39) + convert(varchar,@endDate) + char(39)  + ') '
	set @ssql = @ssql + 'insert @phonelist (date) '
	set @ssql = @ssql + 'select DateValue from mycte where datevalue between ' + char(39) + convert(varchar,@startDate) + char(39) + ' and '+ char(39) + convert(varchar,@endDate) + char(39) + ' '
	set @ssql = @ssql + 'OPTION (MAXRECURSION 0)'
	set @ssql = @ssql + 'declare cur cursor for select date from @phonelist '
	set @ssql = @ssql + 'open cur '
	set @ssql = @ssql + 'fetch next from cur into @date '
	set @ssql = @ssql + 'while @@fetch_status = 0 begin '
	set @ssql = @ssql + '  select @fordate = max(fordate) from tblleadphonelist where fordate <= @date '
	set @ssql = @ssql + '  select @nextfordate = isnull(min(fordate),getdate()) from tblleadphonelist where fordate > @fordate '
	set @ssql = @ssql + '  select @budget = sum(budget) from tblleadphonelist where fordate = @fordate '
	set @ssql = @ssql + '  select @actual = sum(actual) from tblleadphonelist where fordate = @fordate '
	set @ssql = @ssql + '  set @days = datediff(day,@fordate,@nextfordate) '
	set @ssql = @ssql + '  update @phonelist set budget = (@budget / @days) where date = @date '
	set @ssql = @ssql + '  update @phonelist set actual = (@actual / @days) where date = @date '
	set @ssql = @ssql + '  fetch next from cur into @date '
	set @ssql = @ssql + 'end '
	set @ssql = @ssql + 'close cur deallocate cur '
	set @ssql = @ssql + 'update @tblRpt set MarketingBudgetPerDay = budget,MarketingBudgetSpentPerDay = actual from @tblRpt r join @phonelist p on p.date = r.connectdate '
	set @ssql = @ssql +' update @tblRpt set [CostPerConversionDay] = case when NumCasesAgainstMarketingDollars = 0 then 0 else convert(float,MarketingBudgetPerDay)/convert(float,NumCasesAgainstMarketingDollars) end;'

--update total calls answered
	set @ssql = @ssql + 'update @tblRpt set TotalCallsAnswered = TotalInboundCalls - TotalSystemCalls; '  + char(13)

--update conversion %
	set @ssql = @ssql + 'update @tblRpt set '
	set @ssql = @ssql + 'ConversionPercent = NumCasesAgainstMarketingDollars/ISNULL(NULLIF(convert(float,TotalInboundCalls) + convert(float,TotalInternet),0),1) '  + char(13)
	set @ssql = @ssql + 'where NumCasesAgainstMarketingDollars <> 0'


	set @ssql = @ssql + 'select * from @tblRpt ORDER BY cast(CONNECTDATE as datetime)'  + char(13)

	exec( @ssql)

END




GRANT EXEC ON stp_Reporting_SmartDebtor_KPI TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientQueue_Get]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_ClientQueue_Get]
(
	@AgencyID int
)
AS

BEGIN

	select 
		*
	from
		tblClientQueue
	where
		agencyid=@agencyid
	order by
		row	

END
GO
/****** Object:  Table [dbo].[tblPersonPhone]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPersonPhone](
	[PersonPhoneID] [int] IDENTITY(1,1) NOT NULL,
	[PersonID] [int] NOT NULL,
	[PhoneID] [int] NOT NULL,
	[Created] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
 CONSTRAINT [PK_tblPersonPhone] PRIMARY KEY CLUSTERED 
(
	[PersonPhoneID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[stp_Ustes_ClientsWithOneAccountToSettle]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Ustes_ClientsWithOneAccountToSettle]
as
BEGIN
set nocount on
	declare @vtblClients table(clientid numeric)

	insert into @vtblClients 
	SELECT c.clientid
	FROM tblAccount AS a INNER JOIN tblClient AS c ON a.ClientID = c.ClientID  AND (a.AccountStatusID is null or a.AccountStatusID NOT IN (54, 55))
	WHERE  (c.CurrentClientStatusID NOT IN (15, 16, 17, 18)) 
	group by c.clientid
	having count(*) = 1

	select 
		p.firstname+' '+p.lastname as [ClientName],p.ssn,
		ct.accountnumber as [SDA Account Number],
		ct.sdabalance as [SDA Balance],
		isnull(ltrim(rtrim(origcred.name)),'') as [OriginalCreditorName], 
		ltrim(rtrim(currcred.name)) as [CurrentCreditorName], 
		a.currentamount as [Creditor Acct Bal],
		right(ci.accountnumber,6) as[LastAct6]
	from @vtblClients  as vc inner join tblaccount as a on vc.clientid=a.clientid
	inner join tblcreditorinstance as ci on ci.creditorinstanceid = a.currentcreditorinstanceid
	inner join tblcreditor as currcred on currcred.creditorid=ci.creditorid
	inner join tblperson as p on p.clientid=vc.clientid
	inner join tblClient as ct on ct.clientid=vc.clientid
	left outer join  tblcreditor as origcred on ci.forcreditorid = origcred.creditorid
	where a.accountstatusid not in (54,55) and p.relationship = 'Prime'
	order by ltrim(rtrim(currcred.name))
END
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_getCheckRequestInfo]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_getCheckRequestInfo]
(
@settid int
)
as
BEGIN
/*
	declare @settid int
	set @settid = 501576
*/
	select 
	[PayableTo] = c.Name
	, [DueDate] = isnull(convert(varchar(10),s.settlementduedate,101) ,'')
	, [CheckAmount] = isnull(s.settlementamount,0)
	, [CredAcctNum] = isnull(ci.accountnumber ,'')
	, [CredRefNum] = isnull(ci.referencenumber,'') 
	, [specialinstructions] = isnull(specialinstructions,'NONE')
	from tblsettlements s 
	inner join tblaccount a on s.creditoraccountid = a.accountid 
	inner join tblCreditorInstance ci on ci.creditorinstanceid = a.currentcreditorinstanceid 
	inner join tblcreditor c on c.creditorid = ci.creditorid 
	left join tblsettlements_specialinstructions ss on ss.settlementid = s.settlementid
	where s.settlementid = @settid
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Harassment_UpdateStatus]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_Harassment_UpdateStatus]

	(
		@clientsubmissionid int,
		@statusid int,
		@declinereasonid int = -1
	)
AS
BEGIN
	update tblharassmentclient
	set HarassmentStatusID =@statusid,HarassmentStatusDate=getdate(),HarassmentDeclineReasonID=@declinereasonid
	where clientsubmissionid = @clientsubmissionid
end




GRANT EXEC ON stp_Harassment_UpdateStatus TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[dba_missingIndexStoredProc_sp]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[dba_missingIndexStoredProc_sp] As Print 'Hello World!'
GO
/****** Object:  StoredProcedure [dbo].[stp_Reporting_SmartDebtor_SystemCallBack]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Reporting_SmartDebtor_SystemCallBack]
(
@dnis varchar(max) ,
@startDate datetime ,
@endDate datetime 
)
as
BEGIN


	if @dnis = 'ALL'
	BEGIN
		declare @addDNIS varchar(20)
		set @dnis = ''
		declare cursor_DNIS cursor forward_only read_only for SELECT right(dnis,4)[dnis] from tblleaddnis where dnis <> '' order by right(dnis,4)
		open cursor_DNIS
		fetch next from cursor_DNIS into @addDNIS
		while @@fetch_status = 0
			begin
				set @dnis = @dnis + case when @addDNIS is null then '' else @addDNIS + ',' end 
				
				fetch next from cursor_DNIS into @addDNIS
			end
		close cursor_DNIS
		deallocate cursor_DNIS

		set @dnis = left(@dnis, len(@dnis)-1)
		--select @dnis
	END

	declare @ssql varchar(max)
	declare @val varchar(4)

	set @ssql = ''

	set @ssql = 'select '
	set @ssql = @ssql + '[DNIS] = substring(cd.dnis,5,4)'
	set @ssql = @ssql + ',[I3CallIDKey] = cd.callid'
	set @ssql = @ssql + ',[LocalCallIDKey] = isnull(lc.callidkey,'''')'
	set @ssql = @ssql + ',[StationID] = case when cd.stationid = ''System'' then ''System'' else '''' end'
	set @ssql = @ssql + ',[Screen Pop]= cd.localname'
	set @ssql = @ssql + ',[initiated]= cd.ConnectedDate'
	set @ssql = @ssql + ',[initDay] = datename(day,cd.ConnectedDate)'
	set @ssql = @ssql + ',[Created] = isnull(lc.created,'''')'
	set @ssql = @ssql + ',[Status] = isnull(ls.description,'''')'
	set @ssql = @ssql + ',[Full Name] = isnull(la.fullname,'''')'
	set @ssql = @ssql + ',[City] = isnull(la.city,'''')'
	set @ssql = @ssql + ',[State] = isnull(st.name,'''')'
	set @ssql = @ssql + ',Concerns = isnull(con.description,'''')'
	set @ssql = @ssql + ',LawFirm = isnull(comp.ShortCoName,'''')'
	set @ssql = @ssql + ',Associate = isnull(u2.firstname +'' '' + u2.lastname,'''')'
	set @ssql = @ssql + ',Rep = isnull(u.firstname + '' '' + u.lastname,'''')'
	set @ssql = @ssql + ',[Total Debt] = isnull(calc.totaldebt,0)'
	set @ssql = @ssql + ',[RemoteNumber] = cd.remoteNumber '
	set @ssql = @ssql + ',[HoldDuration] = cd.HoldDurationSeconds '
	set @ssql = @ssql + 'from sqllive.i3_cic.dbo.calldetail cd '
	set @ssql = @ssql + 'left join tblleadcall lc on lc.callidkey = cd.callid '
	set @ssql = @ssql + 'left join tblleadapplicant la on la.leadapplicantid = lc.leadapplicantid '
	set @ssql = @ssql + 'left join tblleadstatus ls on la.statusid = ls.statusid '
	set @ssql = @ssql + 'left join tblstate st on la.stateid = st.stateid '
	set @ssql = @ssql + 'left join tblcompany comp on la.companyid = comp.companyid '
	set @ssql = @ssql + 'left join tblleadconcerns con on la.concernsid = con.concernsid '
	set @ssql = @ssql + 'left join tbluser u on repid = u.userid '
	set @ssql = @ssql + 'left join tbluser u2 on createdbyid = u2.userid '
	set @ssql = @ssql + 'left join tblleadcalculator calc on lc.leadapplicantid = calc.leadapplicantid '
	set @ssql = @ssql + 'where cd.Stationid = ''System'' and '

	
	set @ssql = @ssql + '(' + char(13)
	DECLARE @pos int,@nextpos int,@valuelen int
	SELECT @pos = 0, @nextpos = 1

	WHILE @nextpos > 0
	BEGIN
	  SELECT @nextpos = charindex(',', @dnis, @pos + 1)
	  SELECT @valuelen = CASE WHEN @nextpos > 0 THEN @nextpos ELSE len(@dnis) + 1 END - @pos - 1
	  set @ssql = @ssql + 'cd.dnis like ''sip:' + convert(varchar, substring(@dnis, @pos + 1, @valuelen)) + '@%'' '
	  SELECT @pos = @nextpos
		if @pos > 0
			BEGIN
				set @ssql = @ssql + 'OR ' + char(13)
			END
	END 
	set @ssql = @ssql + ') and '

	set @ssql = @ssql + 'calldirection =''inbound'' and calltype = ''external'' '
	set @ssql = @ssql + 'and cd.ConnectedDate >= ' + char(39) + convert(varchar,@startDate) + char(39) + ' '
	set @ssql = @ssql + 'and cd.ConnectedDate <= ' + char(39) + convert(varchar,@endDate) + char(39) + ' '
	set @ssql = @ssql + 'order by cd.dnis, cd.ConnectedDate'

	exec(@ssql)

END
GO
/****** Object:  StoredProcedure [dbo].[stp_VerificationCall_Insert]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_VerificationCall_Insert]
@ClientId int,
@UserId int,
@CallIdKey varchar(50),
@LanguageId int = 1
AS
BEGIN
	Insert Into tblVerificationCall(ClientId, ExecutedBy, CallIdKey, LanguageId)
	Values(@ClientId, @UserId, @CallIdKey, @LanguageId)
	Select Scope_identity()
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPersonsOnAccount]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetPersonsOnAccount]
(
	@ClientID int
)
as
begin
/*
	History:
	jhernandez		05/23/08	Returns person accounts related to a client
	jhernandez		09/03/08	Address info
*/

select p.FirstName, p.LastName, isnull(p.SSN,'') [SSN], c.AccountNumber,
	isnull(Street,'') [Address1], isnull(Street2,'') [Address2], isnull(City,'') [City],
	isnull(s.Abbreviation,'') [State], isnull(ZipCode,'') [ZipCode],
	case when p.PersonID = c.PrimaryPersonID then 1 else 0 end [IsPrimary]
from tblPerson p
join tblClient c on c.ClientID = p.ClientID
left join tblState s on s.StateID = p.StateID
where p.ClientID = @ClientID
order by [IsPrimary] desc


end
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_UpdateMissingSettlements]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_UpdateMissingSettlements]
/*
	(
		@parameter1 int = 5,
		@parameter2 datatype OUTPUT
	)

*/
AS
BEGIN
	declare @guid uniqueidentifier
	set @guid= NEWID()

	INSERT INTO [tblSettlementTrackerImports]([TrackerImportBatchID],[Team],[Negotiator],[AgencyID],[LawFirm],[Date],[Status],[Due],[ClientAcctNumber],[Name],[CreditorAccountNum],[OriginalCreditor],[CurrentCreditor],[BALANCE],[SettlementAmt],[SettlementPercent],[FundsAvail],[Note],[sent],[paid],[days],[ClientSavings],[SettlementFees],[SettlementSavingsPct],[ImportDate],[ImportBy],[SettlementID])
	select distinct
		[TrackerImportBatchID] , [Team] , [Negotiator] , [AgencyID] , [LawFirm] , [Date], [Status] 
		, [Due] , [ClientAcctNum] , [Client Name] , [CreditorAcctNum] , [OriginalCreditor], [CurrentCreditor] 
		, [Balance] , [SettlementAmount] , [SettlementPct] , [FundsAvail] , [Note] , [sent] , [Paid] 
		, [Days] , [Client Savings], [SettlementFees] , [SettlementFeePct], [ImportDate] , [ImportBy],[SettlementID]
		from (
		SELECT DISTINCT 
		 [TrackerImportBatchID] = CONVERT(varchar(255), @guid)
		, [Team] = ne.NegotiationEntityID 
		, [Negotiator] =neg.firstname + ' ' + neg.lastname
		, [AgencyID] = c.AgencyID
		, [LawFirm] = co.ShortCoName
		, [Date] = convert(varchar(10),sett.Created,101)
		, [Status] = [as].Code 
		, [Due] = convert(varchar(10),sett.SettlementDueDate,101)
		, [ClientAcctNum] = c.AccountNumber
		, [Client Name] = p.FirstName + ' ' + p.LastName 
		, [CreditorAcctNum] = curr.AccountNumber 
		, [OriginalCreditor] = origname.Name 
		, [CurrentCreditor] = currname.Name 
		, [Balance] = a.CurrentAmount
		, [SettlementAmount] = sett.SettlementAmount
		, [SettlementPct] = case when sett.SettlementAmount > 0 then sett.SettlementAmount/ISNULL(NULLIF(convert(float,a.CurrentAmount),0),1) else 0 end
		, [FundsAvail] = c.SDABalance - c.PFOBalance -(SELECT ISNULL(SUM(Amount), 0) AS Expr1 FROM tblRegister WHERE (ClientId = c.ClientID) AND (EntryTypeId = 3) AND (Hold > GETDATE()) AND (Void IS NULL) AND (Bounce IS NULL) AND (Clear IS NULL)) -(SELECT ISNULL(SUM(Amount), 0) AS Expr1 FROM tblRegister AS tblRegister_3 WHERE (ClientId = c.ClientID) AND (EntryTypeId = 43) AND (Hold > GETDATE()) AND (Void IS NULL) AND (Bounce IS NULL) AND (Clear IS NULL))
		, [Note] = ''
		, [sent] = ''
		, [Paid] = case when [as].Code = 'SA' then a.settled else Null end
		, [Days] = DateDiff(d,sett.Created,getdate())
		, [Client Savings] = a.CurrentAmount - sett.SettlementAmount
		, [SettlementFees] = (a.CurrentAmount - sett.SettlementAmount)*c.SettlementFeePercentage
		, [SettlementFeePct] = c.SettlementFeePercentage
		, [ImportDate] = getdate()
		, [ImportBy] = -1
		, sett.SettlementID
	FROM tblCompany AS co with(nolock) RIGHT OUTER JOIN
		tblCreditor AS origname with(nolock) RIGHT OUTER JOIN
		tblCreditorInstance AS orig with(nolock) ON origname.CreditorID = orig.CreditorID RIGHT OUTER JOIN
		tblClient AS c with(nolock) INNER JOIN
		tblSettlements AS sett with(nolock) ON c.ClientID = sett.ClientID LEFT OUTER JOIN
		tblNegotiationEntity AS ne with(nolock) ON sett.CreatedBy = ne.UserID LEFT OUTER JOIN
		tblAccount AS a with(nolock) INNER JOIN
		tblAccountStatus AS [as] with(nolock) ON a.AccountStatusID = [as].AccountStatusID ON sett.CreditorAccountID = a.AccountID LEFT OUTER JOIN
		tblCreditor AS currname with(nolock) RIGHT OUTER JOIN
		tblCreditorInstance AS curr with(nolock) ON currname.CreditorID = curr.CreditorID ON a.CurrentCreditorInstanceID = curr.CreditorInstanceID ON 
		orig.CreditorInstanceID = a.OriginalCreditorInstanceID LEFT OUTER JOIN
		tblPerson AS p with(nolock) ON c.PrimaryPersonID = p.PersonID ON co.CompanyID = c.CompanyID LEFT OUTER JOIN
		tblUser AS neg with(nolock) ON neg.UserID = sett.CreatedBy
	WHERE   sett.status = 'a' and active = 1
	and not settlementid in (select settlementid from tblsettlementtrackerimports)
	) as batchData 
	order by team, creditoracctnum
	option (fast 100)

	declare @tblGroups table(NegotiationEntityID int,Name varchar(100))
	declare @tblTeams table(tid int,Name varchar(100))

	insert into @tblGroups 
	select NegotiationEntityID, name from tblnegotiationentity with(nolock) where type = 'group'

	--select * from @tblGroups 
	insert into @tblTeams
	select sti.trackerimportid, tg.name
	from tblsettlementtrackerimports sti with(nolock)
	inner join tblnegotiationentity  ne with(nolock) on ne.negotiationentityid = sti.team
	inner join @tblGroups tg on tg.NegotiationEntityID = ne.parentNegotiationEntityID
	where isnumeric(sti.team) = 1 and ne.parentnegotiationentityid is not null


	update tblsettlementtrackerimports 
	set team = tm.name
	from @tblTeams tm
	inner join tblsettlementtrackerimports sti with(nolock) on sti.trackerimportid = tm.tid
END
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertClientIntakebak]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <2 - 22 February 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Insert or update ClientIntakeform   
*/

CREATE procedure [dbo].[stp_InsertClientIntakebak]

@ClientIntakeId int =0,
@CreditorInstanceID int =0,
@AccountID int =0,
@IntakeFormDate datetime=null,
@LitigationDocument varchar(50)='',
@Amount money=0,
@ClientDocReceivedDate datetime=null,
@HowDocReceived varchar(50)='',
@IsPlaintiffCompany bit,
@IsAmountDispute bit,
@IsRealestateOwner bit,
@IsCurrentlyWorking bit,
@AnyAccount bit,
@HaveBankAccs bit,
@HaveOtherAssets bit,
@DeclinedLegalServices bit,
@SentLocalCounsel bit,
@Notes nvarchar(4000)='',
@IsresidenceofPropertyOne bit,
@DurationOwnerdPropertyOne int =0,
@AppMarketvalPropertyOne decimal(18,0)=0,
@PayoffPropertyOne varchar(50)='',
@LiensOnPropertyOne bit,
@TotalEquityPropertyOne varchar(50)='',
@HousePaymentsPropertyOne varchar(50)='',
@PeopleLivePropertyOne varchar(50)='',
@IsresidenceofPropertyTwo bit,
@DurationOwnerdPropertyTwo int =0,
@AppMarketvalPropertyTwo decimal(18,0)=0,
@PayoffPropertyTwo varchar(50)='',
@LiensOnPropertyTwo bit,
@TotalEquityPropertyTwo varchar(50)='',
@HousePaymentsPropertyTwo varchar(50)='',
@PeopleLivePropertyTwo varchar(50)='',
@EmployerName varchar(50)='',
@CurrentEmployerDuration int =0,
@Takehomepay money=0,
@Per varchar(50)='',
@Otherwage varchar(50)='',
@OtherIncomeSource varchar(50)='',
@BankAccOne varchar(50)='',
@BankAmtSourceAccOne varchar(50)='',
@AppBalanceAccOne varchar(50)='',
@BankAccTwo varchar(50)='',
@BankAmtSourceAccTwo varchar(50)='',
@AppBalanceAccTwo varchar(50)='',
@BankAccThree varchar(50)='',
@BankAmtSourceAccThree varchar(50)='',
@AppBalanceAccThree varchar(50)='',
@VerifiedBy int =0,
@FeePaidBy int =0,
@CreatedDatetime datetime=null,
@CreatedBy int =0,
@LastModifiedDatetime datetime=null,
@LastModifiedBy int =0,
@IsReceivingAid bit,
@IsVerified bit,
@TypeOfAid varchar(50)='',
@LegalServicesClientID int=0,
@VerifiedDate datetime=null,
@MatterID int=0,
@AccTypeOne int=0,
@AccTypeTwo int=0,
@IsSelfEmployed bit=null,
@Assets nvarchar(max)='',
@IsRentalPropertyOne bit=null,
@RentOnPropertyOne money=0,
@IsRentalPropertyTwo bit=null,
@RentOnPropertyTwo money=0,
@Phone as varchar(20)='',
@Levies1 as varchar(50)='',
@Levies2 as varchar(50)='',
@IReceived varchar(20)='',
@WageVal varchar(50)='' ,
@TypeOfAidPension	varchar(50)='' ,
@TypeOfAidUnemp	varchar(50)	='' ,
@TypeOfAidRetire	varchar(50)	='' ,
@AmtReceivedPension	varchar(50)	='' ,
@AmtReceivedUnemp	varchar(50)	='' ,
@AmtReceivedRetire	varchar(50)	='' 
as


DECLARE @latestCreditorInstanceId int
SET @LatestCreditorInstanceId=(select TOP 1 CreditorInstanceId from tblCreditorInstance where AccountId =@AccountID order by Created desc)
 set @CreditorInstanceID=@LatestCreditorInstanceId
--select @CreditorInstanceID = CreditorInstanceID from tblmatter where matterid=@MatterId
declare @IntakeId  as int
set @IntakeId  =0
select @IntakeId = ClientIntakeId  from tblclientintakeform where AccountId = @AccountId 

if @IntakeId  = 0
begin 
	insert into tblclientintakeform 
	(AccountID, CreditorInstanceID, IntakeFormDate, LitigationDocument, ClientDocReceivedDate, 
	HowDocReceived, IsPlaintiffCompany, IsAmountDispute, IsRealestateOwner, IsCurrentlyWorking, AnyAccount, 
	HaveBankAccs, HaveOtherAssets, DeclinedLegalServices, SentLocalCounsel, Notes, IsresidenceofPropertyOne, 
	DurationOwnerdPropertyOne, AppMarketvalPropertyOne, PayoffPropertyOne, LiensOnPropertyOne, TotalEquityPropertyOne, 
	HousePaymentsPropertyOne, PeopleLivePropertyOne, IsresidenceofPropertyTwo, DurationOwnerdPropertyTwo, 
	AppMarketvalPropertyTwo, PayoffPropertyTwo, LiensOnPropertyTwo, TotalEquityPropertyTwo, HousePaymentsPropertyTwo, 
	PeopleLivePropertyTwo, EmployerName, CurrentEmployerDuration, Takehomepay, Per, Otherwage, 
	OtherIncomeSource, BankAccOne, BankAmtSourceAccOne, AppBalanceAccOne, BankAccTwo, BankAmtSourceAccTwo, 
	AppBalanceAccTwo, --BankAccThree, BankAmtSourceAccThree, AppBalanceAccThree,
	VerifiedBy, FeePaidBy,CreatedDatetime, CreatedBy, IsReceivingAid, TypeOfAid, LegalServicesClientID, VerifiedDate, IsVerified,
	AccTypeOne, AccTypeTwo, IsSelfEmployed, Amount, Assets, IsRentalPropertyOne,RentOnPropertyOne, IsRentalPropertyTwo,RentOnPropertyTwo,
	Phone, Levies1, Levies2, IReceived,WageVal,  TypeOfAidPension,  TypeOfAidUnemp, TypeOfAidRetire,  AmtReceivedPension,  AmtReceivedUnemp,  AmtReceivedRetire )
	values(@AccountID,
	@CreditorInstanceID, @IntakeFormDate, @LitigationDocument, @ClientDocReceivedDate, 
	@HowDocReceived, @IsPlaintiffCompany, @IsAmountDispute, @IsRealestateOwner, @IsCurrentlyWorking,
	@AnyAccount, @HaveBankAccs, @HaveOtherAssets, @DeclinedLegalServices, @SentLocalCounsel, @Notes,
	@IsresidenceofPropertyOne, @DurationOwnerdPropertyOne, @AppMarketvalPropertyOne, @PayoffPropertyOne, 
	@LiensOnPropertyOne, @TotalEquityPropertyOne, @HousePaymentsPropertyOne, @PeopleLivePropertyOne, 
	@IsresidenceofPropertyTwo, @DurationOwnerdPropertyTwo, @AppMarketvalPropertyTwo, @PayoffPropertyTwo, 
	@LiensOnPropertyTwo, @TotalEquityPropertyTwo, @HousePaymentsPropertyTwo, @PeopleLivePropertyTwo, 
	@EmployerName, @CurrentEmployerDuration, @Takehomepay, @Per, @Otherwage, @OtherIncomeSource, 
	@BankAccOne, @BankAmtSourceAccOne, @AppBalanceAccOne, @BankAccTwo, @BankAmtSourceAccTwo,
	@AppBalanceAccTwo,-- @BankAccThree, @BankAmtSourceAccThree, @AppBalanceAccThree, 
	@VerifiedBy, @FeePaidBy, @CreatedDatetime, @CreatedBy, @IsReceivingAid, @TypeOfAid, @LegalServicesClientID, @VerifiedDate, @IsVerified,
	@AccTypeOne, @AccTypeTwo, @IsSelfEmployed, @Amount, @Assets, @IsRentalPropertyOne, @RentOnPropertyOne, @IsRentalPropertyTwo, @RentOnPropertyTwo,
	@Phone, @Levies1, @Levies2, @IReceived,@WageVal,  @TypeOfAidPension, @TypeOfAidUnemp, @TypeOfAidRetire, @AmtReceivedPension, @AmtReceivedUnemp, @AmtReceivedRetire  )
end
else
begin
	update tblclientintakeform set CreditorInstanceID=@CreditorInstanceID,
    LitigationDocument= @LitigationDocument,  ClientDocReceivedDate= @ClientDocReceivedDate, 
	HowDocReceived= @HowDocReceived, IsPlaintiffCompany= @IsPlaintiffCompany, 
	IsAmountDispute= @IsAmountDispute, IsRealestateOwner= @IsRealestateOwner, 
	IsCurrentlyWorking= @IsCurrentlyWorking, AnyAccount= @AnyAccount, HaveBankAccs= @HaveBankAccs, 
	HaveOtherAssets= @HaveOtherAssets, DeclinedLegalServices= @DeclinedLegalServices, 
	SentLocalCounsel= @SentLocalCounsel, Notes= @Notes, IsresidenceofPropertyOne= @IsresidenceofPropertyOne, 
	DurationOwnerdPropertyOne= @DurationOwnerdPropertyOne, AppMarketvalPropertyOne= @AppMarketvalPropertyOne, 
	PayoffPropertyOne= @PayoffPropertyOne, LiensOnPropertyOne= @LiensOnPropertyOne, 
	TotalEquityPropertyOne= @TotalEquityPropertyOne, HousePaymentsPropertyOne= @HousePaymentsPropertyOne, 
	PeopleLivePropertyOne= @PeopleLivePropertyOne, IsresidenceofPropertyTwo= @IsresidenceofPropertyTwo, 
	DurationOwnerdPropertyTwo= @DurationOwnerdPropertyTwo, AppMarketvalPropertyTwo= @AppMarketvalPropertyTwo, 
	PayoffPropertyTwo= @PayoffPropertyTwo, LiensOnPropertyTwo= @LiensOnPropertyTwo, 
	TotalEquityPropertyTwo= @TotalEquityPropertyTwo, HousePaymentsPropertyTwo= @HousePaymentsPropertyTwo, 
	PeopleLivePropertyTwo= @PeopleLivePropertyTwo, EmployerName= @EmployerName, 
	CurrentEmployerDuration= @CurrentEmployerDuration, Takehomepay= @Takehomepay, Per= @Per, 
	Otherwage= @Otherwage, OtherIncomeSource= @OtherIncomeSource, BankAccOne= @BankAccOne, 
	BankAmtSourceAccOne= @BankAmtSourceAccOne, AppBalanceAccOne= @AppBalanceAccOne, BankAccTwo= @BankAccTwo, 
	BankAmtSourceAccTwo= @BankAmtSourceAccTwo, AppBalanceAccTwo= @AppBalanceAccTwo, 
	--BankAccThree= @BankAccThree, BankAmtSourceAccThree= @BankAmtSourceAccThree, AppBalanceAccThree= @AppBalanceAccThree,
	FeePaidBy= @FeePaidBy, 
	LastModifiedDatetime= @LastModifiedDatetime, LastModifiedBy= @LastModifiedBy,
	IsReceivingAid=@IsReceivingAid, TypeOfAid =@TypeOfAid, LegalServicesClientID=@LegalServicesClientID,
	IsVerified=@IsVerified, VerifiedBy=@VerifiedBy, VerifiedDate=@VerifiedDate ,
	AccTypeOne=@AccTypeOne, AccTypeTwo=@AccTypeTwo, IsSelfEmployed=@IsSelfEmployed, Amount=@Amount, Assets =@Assets,
IsRentalPropertyOne=@IsRentalPropertyOne, RentOnPropertyOne=@RentOnPropertyOne, IsRentalPropertyTwo=@IsRentalPropertyTwo, RentOnPropertyTwo =@RentOnPropertyTwo ,
	Phone=@Phone,Levies1=@Levies1,Levies2=@Levies2, IReceived=@IReceived , WageVal=@WageVal	,
 TypeOfAidPension=@TypeOfAidPension,  TypeOfAidUnemp=@TypeOfAidUnemp,
 TypeOfAidRetire=@TypeOfAidRetire,  AmtReceivedPension=@AmtReceivedPension,  
AmtReceivedUnemp=@AmtReceivedUnemp,  AmtReceivedRetire =@AmtReceivedRetire
 

where ClientIntakeId=@IntakeId-- @ClientIntakeId
 
	--if @IsVerified = 0
	--update tblclientintakeform set VerifiedBy=@VerifiedBy, VerifiedDate=@VerifiedDate
	--where ClientIntakeId= @ClientIntakeId
--CreditorInstanceID= @CreditorInstanceID, IntakeFormDate= @IntakeFormDate, 
--Amount= @Amount,CreatedDatetime= @CreatedDatetime, CreatedBy= @CreatedBy, 
end
GO
/****** Object:  StoredProcedure [dbo].[get_ClientACHInfo]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[get_ClientACHInfo]
(
	@clientId int
)

AS

SET NOCOUNT ON

SELECT
	DepositMethod,
	DepositDay,
	BankName,
	BankRoutingNumber,
	BankAccountNumber,
	BankType,
	DepositStartDate,
	DepositAmount
FROM
	tblClient
WHERE
	ClientId=@clientId
GO
/****** Object:  StoredProcedure [dbo].[stp_Reporting_SmartDebtor_LeadDNIS]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Reporting_SmartDebtor_LeadDNIS]
(
@dnis varchar(max) ,
@startDate datetime ,
@endDate datetime 
)
as
BEGIN

/* 
usage: --stp_Reporting_SmartDebtor_LeadDNIS 'ALL', '6/22/2009','6/23/2009'

dev
declare @startDate datetime
declare @dnis varchar(max) 
set @dnis = '9650, 9677, 9678, 9679'
set @startDate = dateadd(d,-day(getdate())+1,getdate())

*/

	if @dnis = 'ALL'
	BEGIN
		declare @addDNIS varchar(20)
		set @dnis = ''
		declare cursor_DNIS cursor forward_only read_only for SELECT right(dnis,4)[dnis] from tblleaddnis where dnis <> '' order by right(dnis,4)
		open cursor_DNIS
		fetch next from cursor_DNIS into @addDNIS
		while @@fetch_status = 0
			begin
				set @dnis = @dnis + case when @addDNIS is null then '' else @addDNIS + ',' end 
				
				fetch next from cursor_DNIS into @addDNIS
			end
		close cursor_DNIS
		deallocate cursor_DNIS

		set @dnis = left(@dnis, len(@dnis)-1)
		--select @dnis
	END

	declare @ssql varchar(max)
	declare @val varchar(4)

	set @ssql = ''

	set @ssql = 'select '
	set @ssql = @ssql + '[DNIS] = substring(cd.dnis,5,4)'
	set @ssql = @ssql + ',[I3CallIDKey] = cd.callid'
	set @ssql = @ssql + ',[LocalCallIDKey] = isnull(lc.callidkey,'''')'
	set @ssql = @ssql + ',[StationID] = case when cd.stationid = ''System'' then ''System'' else '''' end'
	set @ssql = @ssql + ',[Screen Pop]= cd.localname'
	set @ssql = @ssql + ',[initiated]= cd.ConnectedDate'
	set @ssql = @ssql + ',[initDay] = datename(day,cd.ConnectedDate)'
	set @ssql = @ssql + ',[Created] = isnull(lc.created,'''')'
	set @ssql = @ssql + ',[Status] = isnull(ls.description,'''')'
	set @ssql = @ssql + ',[Full Name] = isnull(la.fullname,'''')'
	set @ssql = @ssql + ',[City] = isnull(la.city,'''')'
	set @ssql = @ssql + ',[State] = isnull(st.name,'''')'
	set @ssql = @ssql + ',Concerns = isnull(con.description,'''')'
	set @ssql = @ssql + ',LawFirm = isnull(comp.ShortCoName,'''')'
	set @ssql = @ssql + ',Associate = isnull(u2.firstname +'' '' + u2.lastname,'''')'
	set @ssql = @ssql + ',Rep = isnull(u.firstname + '' '' + u.lastname,'''')'
	set @ssql = @ssql + ',[Total Debt] = isnull(calc.totaldebt,0)'
	set @ssql = @ssql + ',[RemoteNumber] = cd.remoteNumber '
	set @ssql = @ssql + ',[HoldDuration] = cd.HoldDurationSeconds '
	set @ssql = @ssql + 'from [DMF-SQL-0001].i3_cic.dbo.calldetail cd '
	set @ssql = @ssql + 'left join tblleadcall lc on lc.callidkey = cd.callid '
	set @ssql = @ssql + 'left join tblleadapplicant la on la.leadapplicantid = lc.leadapplicantid '
	set @ssql = @ssql + 'left join tblleadstatus ls on la.statusid = ls.statusid '
	set @ssql = @ssql + 'left join tblstate st on la.stateid = st.stateid '
	set @ssql = @ssql + 'left join tblcompany comp on la.companyid = comp.companyid '
	set @ssql = @ssql + 'left join tblleadconcerns con on la.concernsid = con.concernsid '
	set @ssql = @ssql + 'left join tbluser u on repid = u.userid '
	set @ssql = @ssql + 'left join tbluser u2 on createdbyid = u2.userid '
	set @ssql = @ssql + 'left join tblleadcalculator calc on lc.leadapplicantid = calc.leadapplicantid '
	set @ssql = @ssql + 'where '

	
	set @ssql = @ssql + '(' + char(13)
	DECLARE @pos int,@nextpos int,@valuelen int
	SELECT @pos = 0, @nextpos = 1

	WHILE @nextpos > 0
	BEGIN
	  SELECT @nextpos = charindex(',', @dnis, @pos + 1)
	  SELECT @valuelen = CASE WHEN @nextpos > 0 THEN @nextpos ELSE len(@dnis) + 1 END - @pos - 1
	  set @ssql = @ssql + 'cd.dnis like ''sip:' + convert(varchar, substring(@dnis, @pos + 1, @valuelen)) + '@%'' '
	  SELECT @pos = @nextpos
		if @pos > 0
			BEGIN
				set @ssql = @ssql + 'OR ' + char(13)
			END
	END 
	set @ssql = @ssql + ') and '

	set @ssql = @ssql + 'calldirection =''inbound'' and calltype = ''external'' '
	set @ssql = @ssql + 'and cd.ConnectedDate >= ' + char(39) + convert(varchar,@startDate) + char(39) + ' '
	set @ssql = @ssql + 'and cd.ConnectedDate <= ' + char(39) + convert(varchar,@endDate) + char(39) + ' '
	set @ssql = @ssql + 'order by cd.dnis, cd.ConnectedDate'

	exec(@ssql)

END


GRANT EXEC ON stp_Reporting_SmartDebtor_LeadDNIS TO PUBLIC
GO
/****** Object:  Table [dbo].[tblNachaRegister2]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblNachaRegister2](
	[NachaRegisterId] [int] IDENTITY(1,1) NOT NULL,
	[NachaFileId] [int] NOT NULL DEFAULT ((-1)),
	[Name] [varchar](50) NULL,
	[AccountNumber] [varchar](50) NULL,
	[RoutingNumber] [varchar](50) NULL,
	[Type] [char](1) NULL,
	[Amount] [money] NOT NULL,
	[IsPersonal] [bit] NULL,
	[CommRecId] [int] NULL,
	[CompanyID] [int] NOT NULL,
	[ShadowStoreId] [varchar](20) NULL,
	[ClientID] [int] NULL,
	[TrustId] [int] NULL,
	[RegisterID] [int] NULL,
	[RegisterPaymentID] [int] NULL,
	[Created] [datetime] NOT NULL DEFAULT (getdate()),
	[Status] [int] NULL,
	[State] [int] NULL,
	[ReceivedDate] [datetime] NULL,
	[ProcessedDate] [datetime] NULL,
	[ExceptionCode] [varchar](255) NULL,
	[Notes] [varchar](max) NULL,
	[ExceptionResolved] [bit] NULL,
	[Flow] [varchar](6) NOT NULL,
	[ReferenceNachaRegisterID] [int] NULL,
 CONSTRAINT [PK_tblNachaRegister2] PRIMARY KEY CLUSTERED 
(
	[NachaRegisterId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPendingRecordedFile]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetPendingRecordedFile]
AS
Begin
	Select VerificationCallId, RecCallIdKey, ClientId, ExecutedBy
	From tblVerificationCall
	Where Completed = 1
	and isnull(RecordedCallPath,'') = ''

End
GO
/****** Object:  Table [dbo].[tblPhone]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblPhone](
	[PhoneID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[PhoneTypeID] [int] NOT NULL,
	[AreaCode] [varchar](50) NOT NULL,
	[Number] [varchar](50) NOT NULL,
	[Extension] [varchar](50) NULL,
	[Created] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
 CONSTRAINT [PK_btlPhone] PRIMARY KEY CLUSTERED 
(
	[PhoneID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientsByState]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ClientsByState]
(
	@CompanyID int,
	@StateID int,
	@GroupID int
)
as
begin

	select c.clientid, c.accountnumber, p.lastname + ', ' + p.firstname [name], p.street, p.city, 
		isnull(s.name,'') [state], cs.name [status]
	from tblclient c
	join tblperson p on p.personid = c.primarypersonid
		and isnull(p.stateid,0) = @StateId
	join tblclientstatus cs on cs.clientstatusid = c.currentclientstatusid
	join tblclientstatusxref x on x.clientstatusgroupid = @GroupID and x.clientstatusid = cs.clientstatusid
	left join tblstate s on s.stateid = p.stateid
	where c.companyid = @CompanyID
	order by [name]

end
GO
/****** Object:  StoredProcedure [dbo].[stp_CreditorValidationDetail]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_CreditorValidationDetail]
(
	@UserID int
)
as
begin

	-- active validated 
	select c.creditorid, g.name, c.street, c.street2, c.city, s.name [state], c.zipcode, h.created, h.createdby, 1 [active], isnull(c.validated,0) [validated]
	into #validated
	from tblcreditorhistory h
	join tblcreditor c on c.creditorid = h.creditorid
	join tblcreditorgroup g on g.creditorgroupid = c.creditorgroupid
	left join tblstate s on s.stateid = c.stateid
	where h.createdby = @UserID
	and h.validated = 1

	-- inactive validated (no longer in tblCreditor)
	insert #validated
	select h.creditorid, h.name, h.street, h.street2, h.city, s.name [state], h.zipcode, h.created, h.createdby, 0 [active], 0 [validated]
	from tblcreditorhistory h
	left join tblstate s on s.stateid = h.stateid
	where h.createdby = @UserID
	and h.validated = 1
	and h.creditorid not in (select creditorid from #validated)

	select * from #validated order by creditorid desc
	drop table #validated


	-- active approved
	select c.creditorid, g.name, c.street, c.street2, c.city, s.name [state], c.zipcode, h.created, h.createdby, 1 [active], isnull(c.validated,0) [validated]
	into #approved
	from tblcreditorhistory h
	join tblcreditor c on c.creditorid = h.creditorid
	join tblcreditorgroup g on g.creditorgroupid = c.creditorgroupid
	left join tblstate s on s.stateid = c.stateid
	where h.createdby = @UserID
	and h.approved = 1

	-- inactive approved (no longer in tblCreditor)
	insert #approved
	select h.creditorid, h.name, h.street, h.street2, h.city, s.name [state], h.zipcode, h.created, h.createdby, 0 [active], 0 [validated]
	from tblcreditorhistory h
	left join tblstate s on s.stateid = h.stateid
	where h.createdby = @UserID
	and h.approved = 1
	and h.creditorid not in (select creditorid from #approved)

	select * from #approved order by creditorid desc
	drop table #approved


	-- dups
	select h.creditorid, h.name, h.street, h.street2, h.city, s.name [state], h.zipcode, h.created, h.createdby, 0 [active], 0 [validated]
	into #dups
	from tblcreditorhistory h
	left join tblstate s on s.stateid = h.stateid
	where h.createdby = @UserID
	and h.duplicate = 1

	-- replaced with
	insert #dups
	select h.creditorid, g.name, c.street, c.street2, c.city, s.name [state], c.zipcode, c.created, c.createdby, 1 [active], isnull(c.validated,0) [validated]
	from tblcreditorhistory h
	join tblcreditor c on c.creditorid = h.newcreditorid
	join tblcreditorgroup g on g.creditorgroupid = c.creditorgroupid
	left join tblstate s on s.stateid = c.stateid
	where h.createdby = @UserID
	and h.duplicate = 1

	select * from #dups order by creditorid desc, active
	drop table #dups



	select u.firstname+' '+u.lastname [name], g.name [group] 
	from tbluser u 
	join tblusergroup g on g.usergroupid = u.usergroupid 
	where u.userid = @UserID
	

end
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertClientIntake]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <05 - 31 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Insert or update ClientIntakeform   
*/

CREATE PROCEDURE [dbo].[stp_InsertClientIntake]

@ClientIntakeId int =0,
@CreditorInstanceID int =0,
@AccountID int =0,
@IntakeFormDate datetime=null,
@LitigationDocument varchar(50)='',
@Amount money=0,
@ClientDocReceivedDate datetime=null,
@HowDocReceived varchar(50)='',
@IsPlaintiffCompany bit,
@IsAmountDispute bit,
@IsRealestateOwner bit,
@IsCurrentlyWorking bit,
@AnyAccount bit,
@HaveBankAccs bit,
@HaveOtherAssets bit,
@DeclinedLegalServices bit,
@SentLocalCounsel bit,
@Notes nvarchar(4000)='',
@IsresidenceofPropertyOne bit,
@DurationOwnerdPropertyOne int =0,
@AppMarketvalPropertyOne decimal(18,0)=0,
@PayoffPropertyOne money=NULL,
@LiensOnPropertyOne bit,
@TotalEquityPropertyOne money=NULL,
@HousePaymentsPropertyOne varchar(50)='',
@PeopleLivePropertyOne varchar(50)='',
@IsresidenceofPropertyTwo bit,
@DurationOwnerdPropertyTwo int =0,
@AppMarketvalPropertyTwo decimal(18,0)=0,
@PayoffPropertyTwo money=NULL,
@LiensOnPropertyTwo bit,
@TotalEquityPropertyTwo money=NULL,
@HousePaymentsPropertyTwo varchar(50)='',
@PeopleLivePropertyTwo varchar(50)='',
@EmployerName varchar(50)='',
@CurrentEmployerDuration int =0,
@Takehomepay money=0,
@Per varchar(50)='',
@Otherwage varchar(50)='',
@OtherIncomeSource varchar(50)='',
@BankAccOne varchar(50)='',
@BankAmtSourceAccOne varchar(50)='',
@AppBalanceAccOne money=NULL,
@BankAccTwo varchar(50)='',
@BankAmtSourceAccTwo varchar(50)='',
@AppBalanceAccTwo money=NULL,
@BankAccThree varchar(50)='',
@BankAmtSourceAccThree varchar(50)='',
@AppBalanceAccThree varchar(50)='',
@VerifiedBy int =0,
@FeePaidBy int =0,
@CreatedDatetime datetime=null,
@CreatedBy int =0,
@LastModifiedDatetime datetime=null,
@LastModifiedBy int =0,
@IsReceivingAid bit,
@IsVerified bit,
@TypeOfAid varchar(50)='',
@LegalServicesClientID int=0,
@VerifiedDate datetime=null,
@MatterID int=0,
@AccTypeOne int=0,
@AccTypeTwo int=0,
@IsSelfEmployed bit=null,
@Assets nvarchar(max)='',
@IsRentalPropertyOne bit=null,
@RentOnPropertyOne money=0,
@IsRentalPropertyTwo bit=null,
@RentOnPropertyTwo money=0,
@Phone as varchar(20)='',
@Levies1 as varchar(50)='',
@Levies2 as varchar(50)='',
@IReceived money=NULL,
@WageVal varchar(50)='' ,
@TypeOfAidPension	varchar(50)='' ,
@TypeOfAidUnemp	varchar(50)	='' ,
@TypeOfAidRetire	varchar(50)	='' ,
@AmtReceivedPension	money=NULL,
@AmtReceivedUnemp	money=NULL,
@AmtReceivedRetire	money=NULL,
@ClientName	varchar(100)	='' ,
@whoisplantiff varchar(100)	='' 
as


DECLARE @latestCreditorInstanceId int
SET @LatestCreditorInstanceId=(select TOP 1 CreditorInstanceId from tblCreditorInstance where AccountId =@AccountID order by Created desc)
 set @CreditorInstanceID=@LatestCreditorInstanceId
--select @CreditorInstanceID = CreditorInstanceID from tblmatter where matterid=@MatterId
declare @IntakeId  as int
set @IntakeId  =0
select @IntakeId = ClientIntakeId  from tblclientintakeform where AccountId = @AccountId 

if @IntakeId  = 0
begin 
	insert into tblclientintakeform 
	(AccountID, CreditorInstanceID, IntakeFormDate, LitigationDocument, ClientDocReceivedDate, 
	HowDocReceived, IsPlaintiffCompany, IsAmountDispute, IsRealestateOwner, IsCurrentlyWorking, AnyAccount, 
	HaveBankAccs, HaveOtherAssets, DeclinedLegalServices, SentLocalCounsel, Notes, IsresidenceofPropertyOne, 
	DurationOwnerdPropertyOne, AppMarketvalPropertyOne, PayoffPropertyOne, LiensOnPropertyOne, TotalEquityPropertyOne, 
	HousePaymentsPropertyOne, PeopleLivePropertyOne, IsresidenceofPropertyTwo, DurationOwnerdPropertyTwo, 
	AppMarketvalPropertyTwo, PayoffPropertyTwo, LiensOnPropertyTwo, TotalEquityPropertyTwo, HousePaymentsPropertyTwo, 
	PeopleLivePropertyTwo, EmployerName, CurrentEmployerDuration, Takehomepay, Per, Otherwage, 
	OtherIncomeSource, BankAccOne, BankAmtSourceAccOne, AppBalanceAccOne, BankAccTwo, BankAmtSourceAccTwo, 
	AppBalanceAccTwo, --BankAccThree, BankAmtSourceAccThree, AppBalanceAccThree,
	VerifiedBy, FeePaidBy,CreatedDatetime, CreatedBy, IsReceivingAid, TypeOfAid, LegalServicesClientID, VerifiedDate, IsVerified,
	AccTypeOne, AccTypeTwo, IsSelfEmployed, Amount, Assets, IsRentalPropertyOne,RentOnPropertyOne, IsRentalPropertyTwo,RentOnPropertyTwo,
	Phone, Levies1, Levies2, IReceived,WageVal,  TypeOfAidPension,  TypeOfAidUnemp, TypeOfAidRetire,  AmtReceivedPension,  AmtReceivedUnemp,  AmtReceivedRetire, ClientName, whoisplantiff )
	values(@AccountID,
	@CreditorInstanceID, @IntakeFormDate, @LitigationDocument, @ClientDocReceivedDate, 
	@HowDocReceived, @IsPlaintiffCompany, @IsAmountDispute, @IsRealestateOwner, @IsCurrentlyWorking,
	@AnyAccount, @HaveBankAccs, @HaveOtherAssets, @DeclinedLegalServices, @SentLocalCounsel, @Notes,
	@IsresidenceofPropertyOne, @DurationOwnerdPropertyOne, @AppMarketvalPropertyOne, @PayoffPropertyOne, 
	@LiensOnPropertyOne, @TotalEquityPropertyOne, @HousePaymentsPropertyOne, @PeopleLivePropertyOne, 
	@IsresidenceofPropertyTwo, @DurationOwnerdPropertyTwo, @AppMarketvalPropertyTwo, @PayoffPropertyTwo, 
	@LiensOnPropertyTwo, @TotalEquityPropertyTwo, @HousePaymentsPropertyTwo, @PeopleLivePropertyTwo, 
	@EmployerName, @CurrentEmployerDuration, @Takehomepay, @Per, @Otherwage, @OtherIncomeSource, 
	@BankAccOne, @BankAmtSourceAccOne, @AppBalanceAccOne, @BankAccTwo, @BankAmtSourceAccTwo,
	@AppBalanceAccTwo,-- @BankAccThree, @BankAmtSourceAccThree, @AppBalanceAccThree, 
	@VerifiedBy, @FeePaidBy, @CreatedDatetime, @CreatedBy, @IsReceivingAid, @TypeOfAid, @LegalServicesClientID, @VerifiedDate, @IsVerified,
	@AccTypeOne, @AccTypeTwo, @IsSelfEmployed, @Amount, @Assets, @IsRentalPropertyOne, @RentOnPropertyOne, @IsRentalPropertyTwo, @RentOnPropertyTwo,
	@Phone, @Levies1, @Levies2, @IReceived,@WageVal,  @TypeOfAidPension, @TypeOfAidUnemp, @TypeOfAidRetire, @AmtReceivedPension, @AmtReceivedUnemp, @AmtReceivedRetire,@ClientName, @whoisplantiff  )
end
else
begin
	update tblclientintakeform set CreditorInstanceID=@CreditorInstanceID,
    LitigationDocument= @LitigationDocument,  ClientDocReceivedDate= @ClientDocReceivedDate, 
	HowDocReceived= @HowDocReceived, IsPlaintiffCompany= @IsPlaintiffCompany, 
	IsAmountDispute= @IsAmountDispute, IsRealestateOwner= @IsRealestateOwner, 
	IsCurrentlyWorking= @IsCurrentlyWorking, AnyAccount= @AnyAccount, HaveBankAccs= @HaveBankAccs, 
	HaveOtherAssets= @HaveOtherAssets, DeclinedLegalServices= @DeclinedLegalServices, 
	SentLocalCounsel= @SentLocalCounsel, Notes= @Notes, IsresidenceofPropertyOne= @IsresidenceofPropertyOne, 
	DurationOwnerdPropertyOne= @DurationOwnerdPropertyOne, AppMarketvalPropertyOne= @AppMarketvalPropertyOne, 
	PayoffPropertyOne= @PayoffPropertyOne, LiensOnPropertyOne= @LiensOnPropertyOne, 
	TotalEquityPropertyOne= @TotalEquityPropertyOne, HousePaymentsPropertyOne= @HousePaymentsPropertyOne, 
	PeopleLivePropertyOne= @PeopleLivePropertyOne, IsresidenceofPropertyTwo= @IsresidenceofPropertyTwo, 
	DurationOwnerdPropertyTwo= @DurationOwnerdPropertyTwo, AppMarketvalPropertyTwo= @AppMarketvalPropertyTwo, 
	PayoffPropertyTwo= @PayoffPropertyTwo, LiensOnPropertyTwo= @LiensOnPropertyTwo, 
	TotalEquityPropertyTwo= @TotalEquityPropertyTwo, HousePaymentsPropertyTwo= @HousePaymentsPropertyTwo, 
	PeopleLivePropertyTwo= @PeopleLivePropertyTwo, EmployerName= @EmployerName, 
	CurrentEmployerDuration= @CurrentEmployerDuration, Takehomepay= @Takehomepay, Per= @Per, 
	Otherwage= @Otherwage, OtherIncomeSource= @OtherIncomeSource, BankAccOne= @BankAccOne, 
	BankAmtSourceAccOne= @BankAmtSourceAccOne, AppBalanceAccOne= @AppBalanceAccOne, BankAccTwo= @BankAccTwo, 
	BankAmtSourceAccTwo= @BankAmtSourceAccTwo, AppBalanceAccTwo= @AppBalanceAccTwo, 
	--BankAccThree= @BankAccThree, BankAmtSourceAccThree= @BankAmtSourceAccThree, AppBalanceAccThree= @AppBalanceAccThree,
	FeePaidBy= @FeePaidBy, 
	LastModifiedDatetime= @LastModifiedDatetime, LastModifiedBy= @LastModifiedBy,
	IsReceivingAid=@IsReceivingAid, TypeOfAid =@TypeOfAid, LegalServicesClientID=@LegalServicesClientID,
	IsVerified=@IsVerified, VerifiedBy=@VerifiedBy, VerifiedDate=@VerifiedDate ,
	AccTypeOne=@AccTypeOne, AccTypeTwo=@AccTypeTwo, IsSelfEmployed=@IsSelfEmployed, Amount=@Amount, Assets =@Assets,
IsRentalPropertyOne=@IsRentalPropertyOne, RentOnPropertyOne=@RentOnPropertyOne, IsRentalPropertyTwo=@IsRentalPropertyTwo, RentOnPropertyTwo =@RentOnPropertyTwo ,
	Phone=@Phone,Levies1=@Levies1,Levies2=@Levies2, IReceived=@IReceived , WageVal=@WageVal	,
 TypeOfAidPension=@TypeOfAidPension,  TypeOfAidUnemp=@TypeOfAidUnemp,
 TypeOfAidRetire=@TypeOfAidRetire,  AmtReceivedPension=@AmtReceivedPension,  
AmtReceivedUnemp=@AmtReceivedUnemp,  AmtReceivedRetire =@AmtReceivedRetire,
ClientName=@ClientName, whoisplantiff=@whoisplantiff
 

where ClientIntakeId=@IntakeId-- @ClientIntakeId
 
	--if @IsVerified = 0
	--update tblclientintakeform set VerifiedBy=@VerifiedBy, VerifiedDate=@VerifiedDate
	--where ClientIntakeId= @ClientIntakeId
--CreditorInstanceID= @CreditorInstanceID, IntakeFormDate= @IntakeFormDate, 
--Amount= @Amount,CreatedDatetime= @CreatedDatetime, CreatedBy= @CreatedBy, 
end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetChecksToPrint]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetChecksToPrint]
	(
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as


if not @orderby is null and not @orderby=''
	set @orderby=' order by ' + @orderby

exec
(
	'select
		tblchecktoprint.*,
		tblchecktoprint.firstname + '' '' + tblchecktoprint.lastname as ClientName,
		tblprintedby.firstname + '' '' + tblprintedby.lastname as printedbyname,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname
	from
		tblchecktoprint left outer join
		tbluser as tblprintedby on tblchecktoprint.printedby = tblprintedby.userid left outer join
		tbluser as tblcreatedby on tblchecktoprint.createdby = tblcreatedby.userid '
	+ @where + ' ' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_Reporting_SmartDebtor_KPI_Dashboard]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[stp_Reporting_SmartDebtor_KPI_Dashboard]

as
BEGIN

DECLARE @startdate datetime
DECLARE @enddate datetime
	
set @startdate = convert(datetime,convert(varchar,getdate(),110))
set @enddate = convert(datetime,convert(varchar,dateadd(day,1,getdate()),110))
   
	declare @ssql varchar(max)
	declare @val varchar(4)
	declare @dnis varchar(max) 
	declare @addDNIS varchar(20)

	set @ssql = ''
	set @dnis = ''

	-- hard coded values (need to find where these come from)
	declare @TransferPercentGoal float
	declare @NumCasesGoal int
	declare @ConversionPercentGoal float
	declare @MarketingBudgetPerDay money
	declare @CostPerConversionGoal money

	-- set values
	set @TransferPercentGoal = 85.00
	set @NumCasesGoal  = 12
	set @ConversionPercentGoal = 12.00
	set @MarketingBudgetPerDay = 5531.00
	set @CostPerConversionGoal = 416.67

	declare cursor_DNIS cursor forward_only read_only for SELECT right(dnis,4)[dnis] from tblleaddnis where dnis <> '' order by right(dnis,4)
	open cursor_DNIS
	fetch next from cursor_DNIS into @addDNIS
	while @@fetch_status = 0
		begin
			set @dnis = @dnis + case when @addDNIS is null then '' else @addDNIS + ',' end 

			fetch next from cursor_DNIS into @addDNIS
		end
	close cursor_DNIS
	deallocate cursor_DNIS

	set @dnis = left(@dnis, len(@dnis)-1)

	set @ssql = @ssql + 'declare @tblRpt table (TypeDayID int, ConnectDate varchar(20), TotalInboundCalls int, TotalSystemCalls int, TotalAppointments int,TotalCallsAnswered int, TotalCallsTransferred int, TransferPercent float, TransferPercentGoal float, NumCasesAgainstMarketingDollars int, NumCasesGoal int, ConversionPercent float, ConversionPercentGoal float,MarketingBudgetSpentPerDay Money, MarketingBudgetPerDay Money, CostPerConversionDay Money, CostPerConversionGoal Money, TotalNumCases int) ' + char(13)
	set @ssql = @ssql + 'insert into @tblRpt '
	set @ssql = @ssql + 'select '
	set @ssql = @ssql + '[DayOfWeek] = case when datepart(dw, initiated-1) in (6,7) then ''0'' else ''1'' end '
	set @ssql = @ssql + ', [ConnectDate] = convert(varchar(10),initiated,101) '
	set @ssql = @ssql + ', [TotalInboundCalls] = count(*) '
	set @ssql = @ssql + ', [TotalSystemCalls] = sum(case when Stationid = ''System'' then 1 else 0 end) '
	set @ssql = @ssql + ', [TotalAppointments] = sum(FirstAppointmentDate) '
	set @ssql = @ssql + ', [TotalCallsAnswered] = count(*)-sum(case when Stationid = ''System'' then 1 else 0 end) '
	set @ssql = @ssql + ', [TotalCallsTransferred] = sum(transfer)'
	set @ssql = @ssql + ', [TransferPercent] = NULL '
	set @ssql = @ssql + ', [TransferPercentGoal] = ' + convert(varchar,@TransferPercentGoal)
	set @ssql = @ssql + ', [NumCasesAgainstMarketingDollars] = sum(case when LeadStatusId in (6,7) and convert(varchar(10),initiated,101) = convert(varchar(10),LeadCreatedDate,101) then 1 else 0 end) '
	set @ssql = @ssql + ', [NumCasesGoal] = ' + convert(varchar,@NumCasesGoal)
	set @ssql = @ssql + ', [ConversionPercent] = NULL '
	set @ssql = @ssql + ', [ConversionPercentGoal] = ' + convert(varchar,@ConversionPercentGoal)
	set @ssql = @ssql + ', [MarketingBudgetSpentPerDay] = 0 '
	set @ssql = @ssql + ', [MarketingBudgetPerDay] = 0' 
	set @ssql = @ssql + ', [CostPerConversionDay] = ' + convert(varchar,@CostPerConversionGoal)
	set @ssql = @ssql + ', [CostPerConversionGoal] = ' + convert(varchar,@CostPerConversionGoal)
	set @ssql = @ssql + ', [TotalNumCases] = sum(case when convert(varchar(10),initiated,101) = convert(varchar(10),LeadCreatedDate,101) then 1 else 0 end) '
	set @ssql = @ssql + 'from ('
	set @ssql = @ssql + 'SELECT [DNIS] = substring(cd.dnis,5,4)'
	set @ssql = @ssql + ',[I3CallIDKey] = cd.callid'
	set @ssql = @ssql + ',[LocalCallIDKey] = isnull(lc.callidkey,'''')'
	set @ssql = @ssql + ',[StationID] = case when cd.stationid = ''System'' then ''System'' else '''' end'
	set @ssql = @ssql + ',[Screen Pop]= cd.localname'
	set @ssql = @ssql + ',[initiated]= cd.ConnectedDate'
	set @ssql = @ssql + ',[initDay] = datename(day,cd.ConnectedDate)'
	set @ssql = @ssql + ',[Created] = isnull(lc.created,'''')'
	set @ssql = @ssql + ',[Status] = isnull(ls.description,'''')'
	set @ssql = @ssql + ',[Full Name] = isnull(la.fullname,'''')'
	set @ssql = @ssql + ',[City] = isnull(la.city,'''')'
	set @ssql = @ssql + ',[State] = isnull(st.name,'''')'
	set @ssql = @ssql + ',Concerns = isnull(con.description,'''')'
	set @ssql = @ssql + ',LawFirm = isnull(comp.ShortCoName,'''')'
	set @ssql = @ssql + ',Associate = isnull(u2.firstname +'' '' + u2.lastname,'''')'
	set @ssql = @ssql + ',Rep = isnull(u.firstname + '' '' + u.lastname,'''')'
	set @ssql = @ssql + ',[Total Debt] = isnull(calc.totaldebt,0)'
	set @ssql = @ssql + ',[RemoteNumber] = cd.remoteNumber '
	set @ssql = @ssql + ',[HoldDuration] = cd.HoldDurationSeconds '
	set @ssql = @ssql + ',[transfer] = case when calleventlog like ''%campaign enrollment%'' then 1 else 0 end '
	set @ssql = @ssql + ',[LeadStatusId] = la.statusid '
	set @ssql = @ssql + ',[FirstAppointmentDate] = case when not FirstAppointmentDate is null then 1 else 0 end '
	set @ssql = @ssql + ',[LeadCreatedDate] = la.Created '
	set @ssql = @ssql + 'from sqllive.i3_cic.dbo.calldetail cd '
	set @ssql = @ssql + 'left join tblleadcall lc on lc.callidkey = cd.callid '
	set @ssql = @ssql + 'left join tblleadapplicant la on la.leadapplicantid = lc.leadapplicantid '
	set @ssql = @ssql + 'left join tblleadstatus ls on la.statusid = ls.statusid '
	set @ssql = @ssql + 'left join tblstate st on la.stateid = st.stateid '
	set @ssql = @ssql + 'left join tblcompany comp on la.companyid = comp.companyid '
	set @ssql = @ssql + 'left join tblleadconcerns con on la.concernsid = con.concernsid '
	set @ssql = @ssql + 'left join tbluser u on repid = u.userid '
	set @ssql = @ssql + 'left join tbluser u2 on createdbyid = u2.userid '
	set @ssql = @ssql + 'left join tblleadcalculator calc on lc.leadapplicantid = calc.leadapplicantid '
	set @ssql = @ssql + 'where '
	set @ssql = @ssql + '(' + char(13)
	DECLARE @pos int,@nextpos int,@valuelen int
	SELECT @pos = 0, @nextpos = 1
	WHILE @nextpos > 0
		BEGIN
			SELECT @nextpos = charindex(',', @dnis, @pos + 1)
			SELECT @valuelen = CASE WHEN @nextpos > 0 THEN @nextpos ELSE len(@dnis) + 1 END - @pos - 1
			set @ssql = @ssql + 'cd.dnis like ''sip:' + convert(varchar, substring(@dnis, @pos + 1, @valuelen)) + '%'' '
			SELECT @pos = @nextpos
			if @pos > 0
				BEGIN
					set @ssql = @ssql + 'OR ' + char(13)
				END
		END 
	set @ssql = @ssql + ') and '

	set @ssql = @ssql + 'calldirection =''inbound'' and calltype = ''external'' '
	set @ssql = @ssql + 'and cd.ConnectedDate >= ' + char(39) + convert(varchar,@startDate) + char(39) + ' '
	set @ssql = @ssql + 'and cd.ConnectedDate < ' + char(39) + convert(varchar,@endDate) + char(39) + ' '
	set @ssql = @ssql + 'and cd.InteractionType = 0 '
	set @ssql = @ssql + ') as calldata '
	set @ssql = @ssql + 'group by convert(varchar(10),initiated,101), DATENAME(dw, initiated), DATEPART(dw, initiated - 1) '
	set @ssql = @ssql + 'order by convert(varchar(10),initiated,101);' + char(13)

	set @ssql = @ssql + 'update @tblRpt '
	set @ssql = @ssql + 'set TransferPercent = case when TotalCallsTransferred = 0 then 0 else convert(float,TotalCallsTransferred)/convert(float,TotalCallsAnswered)*100 end '
	set @ssql = @ssql + ', ConversionPercent = case when TotalCallsTransferred = 0 then 0 else convert(float,NumCasesAgainstMarketingDollars)/convert(float,TotalCallsTransferred)*100 end '
	set @ssql = @ssql + ', TotalCallsAnswered = TotalInboundCalls - TotalSystemCalls; '  + char(13)

	set @ssql = @ssql + 'declare @phonelist table (date datetime, budget money, actual money) '
	set @ssql = @ssql + 'declare @date datetime, @fordate datetime, @nextfordate datetime, @budget money, @actual money,@days int ;'

	set @ssql = @ssql + 'with mycte as '
	set @ssql = @ssql + '('
	set @ssql = @ssql + 'select cast(''1/1/'' + cast(year(getdate()) as varchar) as datetime) DateValue'
	set @ssql = @ssql + ' union all '
	set @ssql = @ssql + 'select DateValue + 1 '
	set @ssql = @ssql + 'from    mycte    '
	set @ssql = @ssql + 'where   DateValue + 1 <= getdate()'
	set @ssql = @ssql + ')'

	set @ssql = @ssql + 'insert @phonelist (date) '
	set @ssql = @ssql + 'select DateValue from mycte where datevalue between ' + char(39) + convert(varchar,@startDate) + char(39) + ' and '+ char(39) + convert(varchar,@endDate) + char(39) + ' '
	set @ssql = @ssql + 'OPTION (MAXRECURSION 0)'

	set @ssql = @ssql + 'declare cur cursor for select date from @phonelist '
	set @ssql = @ssql + 'open cur '
	set @ssql = @ssql + 'fetch next from cur into @date '
	set @ssql = @ssql + 'while @@fetch_status = 0 begin '
	set @ssql = @ssql + '  select @fordate = max(fordate) from tblleadphonelist where fordate <= @date '
	set @ssql = @ssql + '  select @nextfordate = isnull(min(fordate),getdate()) from tblleadphonelist where fordate > @fordate '
	set @ssql = @ssql + '  select @budget = sum(budget) from tblleadphonelist where fordate = @fordate '
	set @ssql = @ssql + '  select @actual = sum(actual) from tblleadphonelist where fordate = @fordate '
	set @ssql = @ssql + '  set @days = datediff(day,@fordate,@nextfordate) '
	set @ssql = @ssql + '  update @phonelist set budget = (@budget / @days) where date = @date '
	set @ssql = @ssql + '  update @phonelist set actual = (@actual / @days) where date = @date '

	set @ssql = @ssql + '  fetch next from cur into @date '
	set @ssql = @ssql + 'end '

	set @ssql = @ssql + 'close cur deallocate cur '

	set @ssql = @ssql + 'update @tblRpt set MarketingBudgetPerDay = budget,MarketingBudgetSpentPerDay = actual from @tblRpt r join @phonelist p on p.date = r.connectdate '
	set @ssql = @ssql +' update @tblRpt set [CostPerConversionDay] = case when NumCasesAgainstMarketingDollars = 0 then 0 else convert(float,MarketingBudgetPerDay)/convert(float,NumCasesAgainstMarketingDollars) end;'

	--set @ssql = @ssql + 'select * from @phonelist order by  date ; '  + char(13)
	set @ssql = @ssql + 'select * from @tblRpt ; '  + char(13)

	exec(@ssql)

END
GO
/****** Object:  StoredProcedure [dbo].[stp_VerificationCall_Update]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_VerificationCall_Update]
@VerificationCallId int,
@EndDate datetime = null,
@Completed bit = null,
@RecCallIdKey varchar(50) = null,
@RecordedCallPath varchar(1000) = null,
@LastStep varchar(50) = null,
@DocumentPath varchar(100) = null
AS
Update tblVerificationCall Set
EndDate = isnull(@EndDate, EndDate)	,
Completed = isnull(@Completed, Completed),
RecCallIdKey = isnull(@RecCallIdKey, RecCallIdKey),
RecordedCallPath = isnull(@RecordedCallPath, RecordedCallPath),
LastStep = isnull(@LastStep, LastStep),
DocumentPath = isnull(@DocumentPath, DocumentPath)
Where VerificationCallId = @VerificationCallId
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertCreditorGroup]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_InsertCreditorGroup]
(
	@Name varchar(250),
	@UserID int
)
as
begin

declare @creditorgroupid int, @gname varchar(250)

if exists (select 1 from tblcreditorgroup where [name] = @Name) begin
	select @creditorgroupid=creditorgroupid, @gname=name from tblcreditorgroup where [name] = @Name
	
	-- uncommented 6/2/10 by jh - can't remember why we decided to turn this off at some point
	if (convert(varbinary,@Name) <> convert(varbinary,@gname)) begin
		update tblcreditorgroup set [name]=@Name, lastmodified=getdate(), lastmodifiedby=@UserID where creditorgroupid = @creditorgroupid
	end
	
	select @creditorgroupid
end
else begin
	insert tblcreditorgroup ([name],created,createdby,lastmodified,lastmodifiedby)
	values (@Name,getdate(),@UserID,getdate(),@UserID)
	
	select scope_identity()
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_CleanupCreditor_getDistinctCreditors]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[stp_CleanupCreditor_getDistinctCreditors]
AS
Select count(creditorid) as Ct, 
[Name], 
isnull(Street,'') as [Street], 
isnull(City,'') as [City], 
isnull(StateId,0) as [StateId], 
substring(isnull(ZipCode,''),0,6) as [ZipCode]
from tblcreditor 
group by 
[Name], 
isnull(Street,''), 
isnull(City,''), 
isnull(StateId,0), 
substring(isnull(ZipCode,''),0,6)
having count(creditorid) > 1
order by count(creditorid) desc
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertClientIntakebak2]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <04 - 30 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Insert or update ClientIntakeform   
*/

CREATE PROCEDURE [dbo].[stp_InsertClientIntakebak2]

@ClientIntakeId int =0,
@CreditorInstanceID int =0,
@AccountID int =0,
@IntakeFormDate datetime=null,
@LitigationDocument varchar(50)='',
@Amount money=0,
@ClientDocReceivedDate datetime=null,
@HowDocReceived varchar(50)='',
@IsPlaintiffCompany bit,
@IsAmountDispute bit,
@IsRealestateOwner bit,
@IsCurrentlyWorking bit,
@AnyAccount bit,
@HaveBankAccs bit,
@HaveOtherAssets bit,
@DeclinedLegalServices bit,
@SentLocalCounsel bit,
@Notes nvarchar(4000)='',
@IsresidenceofPropertyOne bit,
@DurationOwnerdPropertyOne int =0,
@AppMarketvalPropertyOne decimal(18,0)=0,
@PayoffPropertyOne money=NULL,
@LiensOnPropertyOne bit,
@TotalEquityPropertyOne money=NULL,
@HousePaymentsPropertyOne varchar(50)='',
@PeopleLivePropertyOne varchar(50)='',
@IsresidenceofPropertyTwo bit,
@DurationOwnerdPropertyTwo int =0,
@AppMarketvalPropertyTwo decimal(18,0)=0,
@PayoffPropertyTwo money=NULL,
@LiensOnPropertyTwo bit,
@TotalEquityPropertyTwo money=NULL,
@HousePaymentsPropertyTwo varchar(50)='',
@PeopleLivePropertyTwo varchar(50)='',
@EmployerName varchar(50)='',
@CurrentEmployerDuration int =0,
@Takehomepay money=0,
@Per varchar(50)='',
@Otherwage varchar(50)='',
@OtherIncomeSource varchar(50)='',
@BankAccOne varchar(50)='',
@BankAmtSourceAccOne varchar(50)='',
@AppBalanceAccOne money=NULL,
@BankAccTwo varchar(50)='',
@BankAmtSourceAccTwo varchar(50)='',
@AppBalanceAccTwo money=NULL,
@BankAccThree varchar(50)='',
@BankAmtSourceAccThree varchar(50)='',
@AppBalanceAccThree varchar(50)='',
@VerifiedBy int =0,
@FeePaidBy int =0,
@CreatedDatetime datetime=null,
@CreatedBy int =0,
@LastModifiedDatetime datetime=null,
@LastModifiedBy int =0,
@IsReceivingAid bit,
@IsVerified bit,
@TypeOfAid varchar(50)='',
@LegalServicesClientID int=0,
@VerifiedDate datetime=null,
@MatterID int=0,
@AccTypeOne int=0,
@AccTypeTwo int=0,
@IsSelfEmployed bit=null,
@Assets nvarchar(max)='',
@IsRentalPropertyOne bit=null,
@RentOnPropertyOne money=0,
@IsRentalPropertyTwo bit=null,
@RentOnPropertyTwo money=0,
@Phone as varchar(20)='',
@Levies1 as varchar(50)='',
@Levies2 as varchar(50)='',
@IReceived money=NULL,
@WageVal varchar(50)='' ,
@TypeOfAidPension	varchar(50)='' ,
@TypeOfAidUnemp	varchar(50)	='' ,
@TypeOfAidRetire	varchar(50)	='' ,
@AmtReceivedPension	money=NULL,
@AmtReceivedUnemp	money=NULL,
@AmtReceivedRetire	money=NULL,
@ClientName	varchar(100)	='' 
as


DECLARE @latestCreditorInstanceId int
SET @LatestCreditorInstanceId=(select TOP 1 CreditorInstanceId from tblCreditorInstance where AccountId =@AccountID order by Created desc)
 set @CreditorInstanceID=@LatestCreditorInstanceId
--select @CreditorInstanceID = CreditorInstanceID from tblmatter where matterid=@MatterId
declare @IntakeId  as int
set @IntakeId  =0
select @IntakeId = ClientIntakeId  from tblclientintakeform where AccountId = @AccountId 

if @IntakeId  = 0
begin 
	insert into tblclientintakeform 
	(AccountID, CreditorInstanceID, IntakeFormDate, LitigationDocument, ClientDocReceivedDate, 
	HowDocReceived, IsPlaintiffCompany, IsAmountDispute, IsRealestateOwner, IsCurrentlyWorking, AnyAccount, 
	HaveBankAccs, HaveOtherAssets, DeclinedLegalServices, SentLocalCounsel, Notes, IsresidenceofPropertyOne, 
	DurationOwnerdPropertyOne, AppMarketvalPropertyOne, PayoffPropertyOne, LiensOnPropertyOne, TotalEquityPropertyOne, 
	HousePaymentsPropertyOne, PeopleLivePropertyOne, IsresidenceofPropertyTwo, DurationOwnerdPropertyTwo, 
	AppMarketvalPropertyTwo, PayoffPropertyTwo, LiensOnPropertyTwo, TotalEquityPropertyTwo, HousePaymentsPropertyTwo, 
	PeopleLivePropertyTwo, EmployerName, CurrentEmployerDuration, Takehomepay, Per, Otherwage, 
	OtherIncomeSource, BankAccOne, BankAmtSourceAccOne, AppBalanceAccOne, BankAccTwo, BankAmtSourceAccTwo, 
	AppBalanceAccTwo, --BankAccThree, BankAmtSourceAccThree, AppBalanceAccThree,
	VerifiedBy, FeePaidBy,CreatedDatetime, CreatedBy, IsReceivingAid, TypeOfAid, LegalServicesClientID, VerifiedDate, IsVerified,
	AccTypeOne, AccTypeTwo, IsSelfEmployed, Amount, Assets, IsRentalPropertyOne,RentOnPropertyOne, IsRentalPropertyTwo,RentOnPropertyTwo,
	Phone, Levies1, Levies2, IReceived,WageVal,  TypeOfAidPension,  TypeOfAidUnemp, TypeOfAidRetire,  AmtReceivedPension,  AmtReceivedUnemp,  AmtReceivedRetire, ClientName )
	values(@AccountID,
	@CreditorInstanceID, @IntakeFormDate, @LitigationDocument, @ClientDocReceivedDate, 
	@HowDocReceived, @IsPlaintiffCompany, @IsAmountDispute, @IsRealestateOwner, @IsCurrentlyWorking,
	@AnyAccount, @HaveBankAccs, @HaveOtherAssets, @DeclinedLegalServices, @SentLocalCounsel, @Notes,
	@IsresidenceofPropertyOne, @DurationOwnerdPropertyOne, @AppMarketvalPropertyOne, @PayoffPropertyOne, 
	@LiensOnPropertyOne, @TotalEquityPropertyOne, @HousePaymentsPropertyOne, @PeopleLivePropertyOne, 
	@IsresidenceofPropertyTwo, @DurationOwnerdPropertyTwo, @AppMarketvalPropertyTwo, @PayoffPropertyTwo, 
	@LiensOnPropertyTwo, @TotalEquityPropertyTwo, @HousePaymentsPropertyTwo, @PeopleLivePropertyTwo, 
	@EmployerName, @CurrentEmployerDuration, @Takehomepay, @Per, @Otherwage, @OtherIncomeSource, 
	@BankAccOne, @BankAmtSourceAccOne, @AppBalanceAccOne, @BankAccTwo, @BankAmtSourceAccTwo,
	@AppBalanceAccTwo,-- @BankAccThree, @BankAmtSourceAccThree, @AppBalanceAccThree, 
	@VerifiedBy, @FeePaidBy, @CreatedDatetime, @CreatedBy, @IsReceivingAid, @TypeOfAid, @LegalServicesClientID, @VerifiedDate, @IsVerified,
	@AccTypeOne, @AccTypeTwo, @IsSelfEmployed, @Amount, @Assets, @IsRentalPropertyOne, @RentOnPropertyOne, @IsRentalPropertyTwo, @RentOnPropertyTwo,
	@Phone, @Levies1, @Levies2, @IReceived,@WageVal,  @TypeOfAidPension, @TypeOfAidUnemp, @TypeOfAidRetire, @AmtReceivedPension, @AmtReceivedUnemp, @AmtReceivedRetire,@ClientName  )
end
else
begin
	update tblclientintakeform set CreditorInstanceID=@CreditorInstanceID,
    LitigationDocument= @LitigationDocument,  ClientDocReceivedDate= @ClientDocReceivedDate, 
	HowDocReceived= @HowDocReceived, IsPlaintiffCompany= @IsPlaintiffCompany, 
	IsAmountDispute= @IsAmountDispute, IsRealestateOwner= @IsRealestateOwner, 
	IsCurrentlyWorking= @IsCurrentlyWorking, AnyAccount= @AnyAccount, HaveBankAccs= @HaveBankAccs, 
	HaveOtherAssets= @HaveOtherAssets, DeclinedLegalServices= @DeclinedLegalServices, 
	SentLocalCounsel= @SentLocalCounsel, Notes= @Notes, IsresidenceofPropertyOne= @IsresidenceofPropertyOne, 
	DurationOwnerdPropertyOne= @DurationOwnerdPropertyOne, AppMarketvalPropertyOne= @AppMarketvalPropertyOne, 
	PayoffPropertyOne= @PayoffPropertyOne, LiensOnPropertyOne= @LiensOnPropertyOne, 
	TotalEquityPropertyOne= @TotalEquityPropertyOne, HousePaymentsPropertyOne= @HousePaymentsPropertyOne, 
	PeopleLivePropertyOne= @PeopleLivePropertyOne, IsresidenceofPropertyTwo= @IsresidenceofPropertyTwo, 
	DurationOwnerdPropertyTwo= @DurationOwnerdPropertyTwo, AppMarketvalPropertyTwo= @AppMarketvalPropertyTwo, 
	PayoffPropertyTwo= @PayoffPropertyTwo, LiensOnPropertyTwo= @LiensOnPropertyTwo, 
	TotalEquityPropertyTwo= @TotalEquityPropertyTwo, HousePaymentsPropertyTwo= @HousePaymentsPropertyTwo, 
	PeopleLivePropertyTwo= @PeopleLivePropertyTwo, EmployerName= @EmployerName, 
	CurrentEmployerDuration= @CurrentEmployerDuration, Takehomepay= @Takehomepay, Per= @Per, 
	Otherwage= @Otherwage, OtherIncomeSource= @OtherIncomeSource, BankAccOne= @BankAccOne, 
	BankAmtSourceAccOne= @BankAmtSourceAccOne, AppBalanceAccOne= @AppBalanceAccOne, BankAccTwo= @BankAccTwo, 
	BankAmtSourceAccTwo= @BankAmtSourceAccTwo, AppBalanceAccTwo= @AppBalanceAccTwo, 
	--BankAccThree= @BankAccThree, BankAmtSourceAccThree= @BankAmtSourceAccThree, AppBalanceAccThree= @AppBalanceAccThree,
	FeePaidBy= @FeePaidBy, 
	LastModifiedDatetime= @LastModifiedDatetime, LastModifiedBy= @LastModifiedBy,
	IsReceivingAid=@IsReceivingAid, TypeOfAid =@TypeOfAid, LegalServicesClientID=@LegalServicesClientID,
	IsVerified=@IsVerified, VerifiedBy=@VerifiedBy, VerifiedDate=@VerifiedDate ,
	AccTypeOne=@AccTypeOne, AccTypeTwo=@AccTypeTwo, IsSelfEmployed=@IsSelfEmployed, Amount=@Amount, Assets =@Assets,
IsRentalPropertyOne=@IsRentalPropertyOne, RentOnPropertyOne=@RentOnPropertyOne, IsRentalPropertyTwo=@IsRentalPropertyTwo, RentOnPropertyTwo =@RentOnPropertyTwo ,
	Phone=@Phone,Levies1=@Levies1,Levies2=@Levies2, IReceived=@IReceived , WageVal=@WageVal	,
 TypeOfAidPension=@TypeOfAidPension,  TypeOfAidUnemp=@TypeOfAidUnemp,
 TypeOfAidRetire=@TypeOfAidRetire,  AmtReceivedPension=@AmtReceivedPension,  
AmtReceivedUnemp=@AmtReceivedUnemp,  AmtReceivedRetire =@AmtReceivedRetire,
ClientName=@ClientName
 

where ClientIntakeId=@IntakeId-- @ClientIntakeId
 
	--if @IsVerified = 0
	--update tblclientintakeform set VerifiedBy=@VerifiedBy, VerifiedDate=@VerifiedDate
	--where ClientIntakeId= @ClientIntakeId
--CreditorInstanceID= @CreditorInstanceID, IntakeFormDate= @IntakeFormDate, 
--Amount= @Amount,CreatedDatetime= @CreatedDatetime, CreatedBy= @CreatedBy, 
end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetRemainingReceivablesTotal]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetRemainingReceivablesTotal]
	(
		@CommRecId int
	)

as

SELECT 
	((-tblRegister.Amount
		-(SELECT 
			case when SUM(b.Amount) is null then 0 else sum(b.amount) end
		FROM 
			tblRegisterPayment b
		WHERE 
			b.FeeRegisterId=tblRegister.RegisterId
		)
	)
	* tblCommFee.[Percent]
	) as RemainingReceivables
INTO
	#tmp
FROM
	tblRegister INNER JOIN 
	tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
	tblClient ON tblRegister.ClientId=tblClient.ClientId INNER JOIN
	tblAgency ON tblClient.AgencyId=tblAgency.AgencyId INNER JOIN
	tblCommScen ON tblClient.AgencyId=tblCommScen.AgencyId  INNER JOIN
	tblCommStruct ON tblCommScen.CommScenId=tblCommStruct.CommScenId INNER JOIN
	tblCommFee ON (tblRegister.EntryTypeId=tblCommFee.EntryTypeId AND tblCommFee.CommStructId=tblCommStruct.CommStructId)
WHERE
	tblCommStruct.CommRecId=@CommRecId AND
	tblEntryType.Fee=1

select 
	sum(remainingreceivables) as total 
from 
	#tmp 
where 
	remainingreceivables>0

drop table #tmp
GO
/****** Object:  StoredProcedure [dbo].[stp_DashboardGetProfile]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_DashboardGetProfile]
(
	@userid int,
	@scenario nvarchar(50)
)

as

set nocount on
set ansi_warnings off

SELECT
	DashboardItemID,
	ClientX,
	ClientY
FROM
	tblDashboardProfile
WHERE
	UserID = @userid
	and Scenario = @scenario
GO
/****** Object:  StoredProcedure [dbo].[stp_InputGrid_GetDefinition]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_InputGrid_GetDefinition]
(
	@InputGridName varchar(255),
	@Col int = null
)
AS

BEGIN

	if @col is null begin
		select 
			* 
		from 
			tblinputgriddefinition inner join
			tblinputgrid on tblinputgriddefinition.inputgridid=tblinputgrid.inputgridid
		where
			inputgridname=@inputgridname
		order by
			col	

	end else begin

		select 
			* 
		from 
			tblinputgriddefinition inner join
			tblinputgrid on tblinputgriddefinition.inputgridid=tblinputgrid.inputgridid
		where
			inputgridname=@inputgridname
			and col=@col
		
	end

END
GO
/****** Object:  Table [dbo].[tblAuditTable]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblAuditTable](
	[AuditTableID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[PKColumn] [varchar](50) NOT NULL,
 CONSTRAINT [PK_tblAuditTable] PRIMARY KEY CLUSTERED 
(
	[AuditTableID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPotentialCreditorGroups]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetPotentialCreditorGroups]
(
	@creditor varchar(100)
) 
as
begin

select 
	creditorgroupid, name 
from 
	tblcreditorgroup 
where (
	difference(ltrim(rtrim(name)), @creditor) > 3 
or 
	difference(@creditor, ltrim(rtrim(name))) > 3) 
order 
	by name

end
GO
/****** Object:  StoredProcedure [dbo].[get_ClientAccountOverviewListbak]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[get_ClientAccountOverviewListbak]
(
	@clientId int,
	@settled bit=null,
	@removed bit=null
)

AS

SET NOCOUNT ON

select distinct
	a.AccountId,
	a.OriginalAmount,
	a.CurrentAmount,
	oci.accountnumber as OriginalAccountNumber,
	oci.referencenumber as OriginalReferenceNumber,
	oc.creditorid as OriginalCreditorID,
	oc.name as OriginalCreditorName,
	(ocp.areacode + ocp.number + ' ' + isnull(ocp.extension,'')) as OriginalCreditorPhone,
	cci.accountnumber as CurrentAccountNumber,
	cci.referencenumber as CurrentReferenceNumber,
	cc.creditorid as CurrentCreditorID,
	cc.name as CurrentCreditorName,
	(ccp.AreaCode + ccp.Number + ' ' + isnull(ccp.Extension,'')) as CurrentCreditorPhone,
	[as].AccountStatusID,
	[as].Code as AccountStatusCode,
	[as].Description as AccountStatusDescription,
	isnull(n.numnotes,0) + isnull(pc.numphonecalls,0) as numcomms,
	case when verified is null then 0 else 1 end as verified,
	a.settled,
	a.removed
from
	tblaccount a inner join
	tblcreditorinstance oci ON a.originalcreditorinstanceid = oci.creditorinstanceid inner join
	tblcreditor oc ON oci.creditorid = oc.creditorid inner join
	tblcreditorinstance cci ON a.currentcreditorinstanceid = cci.creditorinstanceid inner join
	tblcreditor cc ON cci.creditorid = cc.creditorid left join
	tblaccountstatus [as] ON a.accountstatusid = [as].accountstatusid left outer join
	(
		select
			isnull(count(distinct noteid),0) as numnotes,
			relationid
		from
			tblnoterelation
		where
			relationtypeid = 2
		group by
			relationid
	)
	as n on a.accountid = n.relationid left outer join
	(
		select
			isnull(count(distinct phonecallid),0) as numphonecalls,
			relationid
		from
			tblphonecallrelation
		where
			relationtypeid = 2
		group by
			relationid
	)
	as pc on a.accountid = pc.relationid left outer join
	(
		select 
			creditorid,
			p.*
		from
			tblcreditorphone cp inner join
			tblphone p on cp.phoneid=p.phoneid
		where 
			p.phoneid = (select top 1 cp2.phoneid from tblcreditorphone cp2 where cp2.creditorid = cp.creditorid)
	)
	ocp on ocp.creditorid = oci.creditorid left outer join
	(
		select 
			creditorid,
			p.*
		from
			tblcreditorphone cp inner join
			tblphone p on cp.phoneid=p.phoneid
		where 
			p.phoneid = (select top 1 cp2.phoneid from tblcreditorphone cp2 where cp2.creditorid = cp.creditorid)
	)
	ccp on ccp.creditorid = cci.creditorid
where
	clientid = @clientId
	and	(
			@settled is null or 
			(@settled=1 and not settled is null) or
			(@settled=0 and settled is null)
		)
	and	(
			@removed is null or 
			(@removed=1 and not removed is null) or
			(@removed=0 and removed is null)
		)
GO
/****** Object:  StoredProcedure [dbo].[stp_Switch_UserGroups_Insert]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Switch_UserGroups_Insert]
   @UserId int,
   @UserGroupId int,
   @IsDefaultGroup int,
   @ByUserId int
AS
Insert into tblUserGroups(UserId, UserGroupId, IsDefaultGroup, Created, CreatedBy, LastModified, LastModifiedBy)
Values (@UserId, @UserGroupId, @IsDefaultGroup, GetDate(), @ByUserId, GetDate(), @ByUserId)
GO
/****** Object:  StoredProcedure [dbo].[stp_Report_DaysAgo_Xls]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Report_DaysAgo_Xls]
(
	@startdate datetime=null,
	@includeonlytransactions varchar (8000)='1=1',
	@criteria varchar (8000)='1=1',
	@unioncriteria varchar (8000)='1=1',
	@neverdeposited bit = 0
)

as

if @startdate is null
	set @startdate=getdate()

set @unioncriteria=' and ' + @unioncriteria

declare @union varchar(8000)

if (@neverdeposited = 1) begin
	set @union = ' union all 
	select 
		c.clientid,
		c.created as hiredate,
		c.accountnumber,		
		c.depositmethod,
		c.depositamount,
		c.depositday,
		c.depositstartdate,
		a.agencyid,
		a.code as agencyname,
		cs.clientstatusid,
		cs.name as clientstatusname,

		(p.firstname + '' '' + p.lastname) as clientname,
		p.lastname,
		p.street,
		p.street2,
		p.city,
		s.name as statename,
		p.zipcode,
		(tblHomePhone.AreaCode + tblHomePhone.Number + '' '' + tblHomePhone.Extension) as HomePhone,
		(tblWorkPhone.AreaCode + tblWorkPhone.Number + '' '' + tblWorkPhone.Extension) as WorkPhone,
		
		null as daysago,
		null as registerid,
		null as transactiondate,
		null as amount,
		null as bounce,
		null as void,
		null as achyear
		
	from 
		tblclient c inner join
		tblperson p on c.primarypersonid = p.personid inner join
		tblstate s on p.stateid = s.stateid inner join
		tblclientstatus cs on c.currentclientstatusid = cs.clientstatusid inner join
		tblagency a on c.agencyid = a.agencyid 

		left outer join
		(
			select personid,ph1.* from tblpersonphone pph1 inner join tblphone ph1 on pph1.phoneid=ph1.phoneid
			where ph1.phonetypeid=27
		) tblHomePhone on tblHomePhone.personid=p.personid
		
		left outer join
		(
			select personid,ph1.* from tblpersonphone pph1 inner join tblphone ph1 on pph1.phoneid=ph1.phoneid
			where ph1.phonetypeid=27
		) tblWorkPhone on tblWorkPhone.personid=p.personid

	where 
		not c.clientid in (select r.clientid from tblregister r where r.entrytypeid in (3,10))
		
' + @unioncriteria
end else begin 
	set @union = ''	
end

set @criteria=' where ' + @criteria

exec
(
	'select
		t.clientid,
		t.hiredate,
		t.accountnumber,		
		t.depositmethod,
		t.depositamount,
		t.depositday,
		t.depositstartdate,
		
		t.agencyid,
		t.agencyname,
		t.clientstatusid,
		t.clientstatusname,

		t.clientname,
		t.lastname,
		t.street,
		t.street2,
		t.city,
		t.statename,
		t.zipcode,
		t.HomePhone,
		t.WorkPhone,
		
		t.daysago,
		t.registerid,
		t.transactiondate,
		t.amount,
		t.bounce,
		t.void,
		t.achyear
		
		
	from
		(
			select
				convert(money, datediff(mi, r.transactiondate, ''' + @startdate + ''')) / 1400 as daysago,
				c.depositmethod,
				c.depositamount,
				c.depositday,
				c.depositstartdate,
				c.created as hiredate,
				c.accountnumber,
				c.agencyid,
				a.code as agencyname,
				cs.clientstatusid,
				(p.firstname + '' '' + p.lastname) as clientname,
				p.lastname,
				p.street,
				p.street2,
				p.city,
				s.name as statename,
				p.zipcode,
				cs.name as clientstatusname,
				(tblHomePhone.AreaCode + tblHomePhone.Number + '' '' + tblHomePhone.Extension) as HomePhone,
				(tblWorkPhone.AreaCode + tblWorkPhone.Number + '' '' + tblWorkPhone.Extension) as WorkPhone,
				r.*
			from
				tblregister r inner join
				(
					select
						nr.clientid,
						max(registerid) as registerid
					from
						tblregister nr inner join
						(
							select
								clientid,
								max(transactiondate) as transactiondate
							from
								tblregister
							where
								(
									entrytypeid = 3 or
									entrytypeid = 10
								)
								and (' + @includeonlytransactions + ')
							group by
								clientid
						)
						as nnr on nr.clientid = nnr.clientid and nr.transactiondate = nnr.transactiondate
					group by
						nr.clientid
				)
				as nr on r.registerid = nr.registerid inner join
				tblclient c on r.clientid = c.clientid inner join
				tblperson p on c.primarypersonid = p.personid inner join
				tblstate s on p.stateid = s.stateid inner join
				tblclientstatus cs on c.currentclientstatusid = cs.clientstatusid inner join
				tblagency a on c.agencyid = a.agencyid 

				left outer join
				(
					select personid,ph1.* from tblpersonphone pph1 inner join tblphone ph1 on pph1.phoneid=ph1.phoneid
					where ph1.phonetypeid=27
				) tblHomePhone on tblHomePhone.personid=p.personid
				
				left outer join
				(
					select personid,ph1.* from tblpersonphone pph1 inner join tblphone ph1 on pph1.phoneid=ph1.phoneid
					where ph1.phonetypeid=27
				) tblWorkPhone on tblWorkPhone.personid=p.personid
				
		)
		as t
	
		' + @criteria
		
		+ @union

		+ ' order by lastname'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_Statistic_ProjectedCommission]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Statistic_ProjectedCommission]
	(
		@monthdate datetime='2006.10.01',
		@commrecid int=null
	)
 
as

declare @customid varchar(50)
set @customid=''
if not @commrecid is null
	set @customid=convert(varchar,@commrecid) + '|'
set @customid = @customid + convert(varchar,@monthdate,6)

select 
	* 
from 
	tblquerycache
where
	classname='default_aspx' and
	queryname='Projected Commissions' and
	customid=@customid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetDataEntryTypesForClient]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetDataEntryTypesForClient]
	(
		@clientid int
	)

as

select
	tbldataentrytype.*,
	t.numdataentries
from
	tbldataentrytype left outer join
	(
		select
			dataentrytypeid,
			count(dataentryid) as numdataentries
		from
			tbldataentry
		where
			clientid = @clientid
		group by
			dataentrytypeid
	)
	as t on tbldataentrytype.dataentrytypeid = t.dataentrytypeid
order by
	[order], [name]
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetFeeCharges]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetFeeCharges]

as

select
	tblcommrec.commrecid,
	tblcommrec.display,
	tblentrytype.name as feetype,
	tblentrytype.entrytypeid,
	tblcommfeecharge.fixedamount
from
	tblcommrec inner join
	tblcommfeecharge on tblcommrec.commrecid=tblcommfeecharge.commrecid inner join
	tblentrytype on tblcommfeecharge.entrytypeid=tblentrytype.entrytypeid
GO
/****** Object:  StoredProcedure [dbo].[stp_UseExistingCreditor]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_UseExistingCreditor]
(
	@OldCreditorID int,
	@NewCreditorID int,
	@UserID int
)
as
begin
/*
	Used when validating creditors. The user determined that the creditor pending validation already
	exists.
*/

update tblcreditorinstance
set creditorid = @NewCreditorID, lastmodified = getdate(), lastmodifiedby = @UserID
where creditorid = @OldCreditorID

update tblcreditorinstance
set forcreditorid = @NewCreditorID, lastmodified = getdate(), lastmodifiedby = @UserID
where forcreditorid = @OldCreditorID

update tblcontact
set creditorid = @NewCreditorID, lastmodified = getdate(), lastmodifiedby = @UserID
where creditorid = @OldCreditorID

update tblcreditorphone
set creditorid = @NewCreditorID, lastmodified = getdate(), lastmodifiedby = @UserID
where creditorid = @OldCreditorID	

update tblcreditorhistory
set newcreditorid = @NewCreditorID
where creditorid = @OldCreditorID	

update tblleadcreditorinstance
set creditorid = @NewCreditorID
where creditorid = @OldCreditorID

update tblleadcreditorinstance
set creditorgroupid = c.creditorgroupid, name = c.name, street = c.street, street2 = c.street2, city = c.city, stateid = c.stateid, zipcode = c.zipcode
from tblleadcreditorinstance ci
join tblcreditor c on c.creditorid = ci.creditorid
	and c.creditorid = @NewCreditorID
	
update tblcreditliabilitylookup
set creditorid = @NewCreditorID, CreditorIdUpdated = getdate(), CreditorIdUpdatedBy = @UserID
where creditorid = @OldCreditorID	

-- now that the old creditor is not being used, delete it
delete from tblcreditor where creditorid = @OldCreditorID


end
GO
/****** Object:  StoredProcedure [dbo].[stp_Switch_SetDefaultUserGroup]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_Switch_SetDefaultUserGroup]
@UserId int,
@DefaultGroupId int,
@ByUserId int
AS
Begin
Update tblUserGroups Set
IsDefaultGroup  = Case When UserGroupId = @DefaultGroupId Then 1 Else 0 End,
LastModified = GetDate(),
LastModifiedBy = @ByUserId
Where  UserID = @UserId
End
GO
/****** Object:  StoredProcedure [dbo].[rpt_AgencyPayments]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[rpt_AgencyPayments]
(
	@startdate VARCHAR(10) = null, 
	@enddate VARCHAR(10) = null, 
	@commrecid VARCHAR(10) = null, 
	@OrderBY VARCHAR(30)
)

AS

DECLARE @sql VARCHAR(8000)

--order by payment date, payment ount, batch date, comm amount.


create table #AgencyPayments
(
	RegisterPaymentID int null,
	Agency VARCHAR(255) null,
	Abbreviation VARCHAR(10) NULL,
	AccountNumber VARCHAR(10) NULL,
	[Client Name] VARCHAR(200) NULL,
	[Trans Type] VARCHAR(20) NULL,
	[Creditor Name] VARCHAR(200) NULL,
	[Payment Date] VARCHAR(10) NULL,
	Amount MONEY NULL,
	CompanyID INT NULL,
	[Commission Amount] MONEY NULL,
	[Comm Percentage] MONEY NULL,
	[Batch Date] VARCHAR(10) NULL	
)



INSERT INTO #AgencyPayments
select	rp.registerpaymentid [Pymt ID],
		a.name[Agency],
		cr.Abbreviation [Comm Rec],
		c.accountnumber,
		p.firstname + ' ' + p.lastname as [Client Name],
		[Trans Type] =	CASE 
							WHEN r.entrytypeid = 42 THEN '(2%) ' + e.name + ' Pymt'
							WHEN r.entrytypeid = 2 THEN '(8%) ' + e.name + ' Pymt'
							ELSE e.name + ' Pymt'
						END,
		[Cred Name] =	coalesce(c2.[Name], c1.[Name], ' '),
		convert(varchar, rp.paymentdate, 101) as [Pymt Date], 
		rp.amount as [Pymt Amount], 
		cp.commpayid [CP ID], 
		cp.amount as [Comm Amt],
		cp.[percent] as [Comm %],
		convert(varchar, cb.batchdate, 101) as [Batch Date]
from tblregisterpayment rp 
inner join tblregister r on rp.feeregisterid = r.registerid
inner join tblcommpay cp on cp.registerpaymentid = rp.registerpaymentid
inner join tblcommstruct cs on cp.commstructid = cs.commstructid
left join tblcommbatch cb on cp.commbatchid = cb.commbatchid
inner join tblclient c on r.clientid = c.clientid
inner join tblperson p on c.primarypersonid = p.personid
inner join tblagency a on c.agencyid = a.agencyid
inner join tblcommrec cr on cs.commrecid = cr.commrecid
inner join tblentrytype e on r.entrytypeid = e.entrytypeid
left join tblaccount act on r.accountid = act.accountid
left join tblcreditorinstance I on act.currentcreditorinstanceid = I.creditorinstanceid
left join tblcreditor c1 on I.creditorid = c1.creditorid
left join tblcreditor c2 on I.forcreditorid = c2.creditorid
where cb.batchdate >= @startdate
and cb.batchdate < @enddate
and cs.commrecid = @commrecid

union all

select	rp.registerpaymentid [Pymt ID],
		a.name[Agency],
		cr.Abbreviation [Comm Rec],
		c.accountnumber,
		p.firstname + ' ' + p.lastname as [Client Name],
		[Trans Type] =	CASE 
							WHEN r.entrytypeid = 42 THEN '(2%) ' + e.name + ' Pymt'
							WHEN r.entrytypeid = 2 THEN '(8%) ' + e.name + ' Pymt'
							ELSE e.name + ' Pymt'
						END,
		[Cred Name] =	coalesce(c2.[Name], c1.[Name], ' '),
		convert(varchar, rp.paymentdate, 101) as [Pymt Date], 
		rp.amount as [Pymt Amount], 
		cc.commpayid [CP ID], 
		-cc.amount as [Comm Amt],
		cc.[percent] as [Comm %],
		convert(varchar, cb.batchdate, 101) as [Batch Date]
from tblregisterpayment rp 
inner join tblregister r on rp.feeregisterid = r.registerid
inner join tblcommchargeback cc on cc.registerpaymentid = rp.registerpaymentid
inner join tblcommstruct cs on cc.commstructid = cs.commstructid
left join tblcommbatch cb on cc.commbatchid = cb.commbatchid
inner join tblclient c on r.clientid = c.clientid
inner join tblperson p on c.primarypersonid = p.personid
inner join tblagency a on c.agencyid = a.agencyid
inner join tblcommrec cr on cs.commrecid = cr.commrecid
inner join tblentrytype e on r.entrytypeid = e.entrytypeid
left join tblaccount act on r.accountid = act.accountid
left join tblcreditorinstance I on act.currentcreditorinstanceid = I.creditorinstanceid
left join tblcreditor c1 on I.creditorid = c1.creditorid
left join tblcreditor c2 on I.forcreditorid = c2.creditorid
where cb.batchdate >= @startdate
and cb.batchdate < @enddate
and cs.commrecid = @commrecid

SET @sql = 'SELECT * FROM #agencypayments '
IF @OrderBY IS NOT NULL
BEGIN
	SET @sql = @sql + 'Order BY ' + @OrderBy
END

EXEC (@sql)

DROP TABLE #AgencyPayments
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateNegotiationXrefTable]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_UpdateNegotiationXrefTable]
(
	@EntityID int = null
,	@hours int = 3
)
as
begin

-- Using same procs that Assign Criteria interface uses

-- Note: If the output of stp_NegotiationEntityFilterSelect or stp_NegotiationDashboardGetByID changes,
-- this procedure will fail until the declared temp tables are updated to match.

declare @FilterID int
declare @vtblFilterIDs table (FilterID int,[Description] varchar(200),FilterClause varchar(max),FilterText varchar(max),FilterType varchar(50),ParentFilterId int)
declare @vtblDashboard table (ClientID int,AccountID int,SSN varchar(20),ApplicantFullName varchar(200),ApplicantLastName varchar(100),ApplicantFirstName varchar(100),ApplicantState varchar(30),ApplicantCity varchar(50),ApplicantZipCode varchar(20),SDAAccount varchar(20),FundsAvailable money,OriginalCreditor varchar(100),CurrentCreditor varchar(100),CurrentCreditorState varchar(20),CurrentCreditorAccountNumber varchar(30),LeastDebtAmount money,CurrentAmount money,AccountStatus varchar(100),AccountStatusID int,AccountAge int,ClientAge int,LastSettled int,NextDepositDate varchar(20),NexDepositAmount money,LastOffer datetime,OfferDirection varchar(20))

set nocount on


-- only update if their last refresh was more than x hours ago
declare cur cursor for select NegotiationEntityID from tblNegotiationEntity where UserID is not null and Deleted = 0 and (@EntityID is null or @EntityID = NegotiationEntityID) and ParentNegotiationEntityID is not null and LastRefresh < dateadd(hh,-@hours,getdate())
open cur
fetch next from cur into @EntityID
while @@fetch_status = 0
	begin
		-- clear filter ids from previous entity
		delete from @vtblFilterIDs where 1=1

		-- clear entity's current assignments
		delete from tblAccountEntityXref where EntityID = @EntityID

		-- get entity's filter ids
		insert into @vtblFilterIDs
		exec stp_NegotiationEntityFilterSelect @EntityID, 'base'
		
		-- get entity's assignments by filter
		declare cur2 cursor for select FilterID from @vtblFilterIDs
		open cur2
		fetch next from cur2 into @FilterID
		while @@fetch_status = 0
			begin
				-- clear accounts ids from previous filter
				delete from @vtblDashboard where 1=1
		
				-- get account ids
				insert into @vtblDashboard
				exec stp_NegotiationDashboardGetByID @FilterID
				
				-- add assignments
				insert tblAccountEntityXref (AccountID,EntityID)
				select AccountID, @EntityID
				from @vtblDashboard
				
				-- get next filter
				fetch next from cur2 into @FilterID
			end
			
		close cur2
		deallocate cur2
		
		-- log when entity was refreshed
		update tblNegotiationEntity set LastRefresh = getdate() where NegotiationEntityID = @EntityID

		-- get next entity
		fetch next from cur into @EntityID
	end

close cur
deallocate cur


-- the root entity (Oscar) does not get assigned by the cursor
--if @EntityID is null begin
	if exists (select 1 from tblNegotiationEntity where UserID is not null and Deleted = 0 and ParentNegotiationEntityID is null and LastRefresh < dateadd(hh,-@hours,getdate())) begin
		select @EntityID = NegotiationEntityID from tblNegotiationEntity where UserID is not null and Deleted = 0 and ParentNegotiationEntityID is null and LastRefresh < dateadd(hh,-@hours,getdate())

		delete from tblAccountEntityXref where EntityID = @EntityID

		insert tblAccountEntityXref (AccountID,EntityID) select distinct AccountID, @EntityID from tblAccountEntityXref
		
		update tblNegotiationEntity set LastRefresh = getdate() where NegotiationEntityID = @EntityID
	end
--end


set nocount off

end
GO
/****** Object:  Table [dbo].[tblNachaRegister]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblNachaRegister](
	[NachaRegisterId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[NachaFileId] [int] NULL,
	[Name] [varchar](50) NOT NULL,
	[AccountNumber] [varchar](50) NOT NULL,
	[RoutingNumber] [varchar](9) NOT NULL,
	[Type] [varchar](1) NOT NULL CONSTRAINT [DF_tblNachaRegister_Type]  DEFAULT ('C'),
	[Amount] [money] NOT NULL,
	[IdTidbit] [varchar](50) NULL,
	[IsPersonal] [bit] NOT NULL CONSTRAINT [DF_tblNachaRegister_IsPersonal]  DEFAULT ((1)),
	[CommRecId] [int] NOT NULL,
	[IsDeclined] [bit] NOT NULL CONSTRAINT [DF_tblNachaRegister_IsDeclined]  DEFAULT ((0)),
	[DeclinedReason] [varchar](255) NULL,
	[DeclinedDate] [datetime] NULL,
	[CompanyID] [int] NULL,
	[Created] [datetime] NULL DEFAULT (getdate()),
	[ClientID] [int] NULL,
	[RegisterID] [int] NULL,
 CONSTRAINT [PK_tblNachaRegister] PRIMARY KEY CLUSTERED 
(
	[NachaRegisterId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_Agency_Dashboard_ClientRetentionRolling]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_Agency_Dashboard_ClientRetentionRolling 

CREATE procedure [dbo].[stp_Agency_Dashboard_ClientRetentionRolling]
(
	@userid int,
	@companyid int = -1,
	@MonthsToShow int = 24
)
as
BEGIN
	/* development usage
	declare @userid int
	set @userid = 375
	*/
	declare @sSQL varchar(max)

	select 
		  a.ImportAbbr
		  ,convert(varchar,c.accountnumber) [Acct#]       
		  ,convert(varchar,c.created,110) [Created]
		  ,s.name [Status]
		  ,TermDate = isnull(convert(varchar,(select top(1) rm.created from tblroadmap rm where clientstatusid in (17,18) and rm.clientid = c.clientid order by roadmapid desc),110),'')
		  ,Retention = isnull(datediff(day,c.created,(select top(1) rm.created from tblroadmap rm where clientstatusid in (17) and rm.clientid = c.clientid order by roadmapid desc)),'')
	into #cr
	from tblclient c
	inner join tblClientStatus s on c.currentclientstatusid = s.clientstatusid
	inner join tblagency a on c.agencyid = a.agencyid
	Inner join tbluseragencyaccess uaa on uaa.agencyid = c.agencyid and uaa.userid = @userid
	inner join tblusercompanyaccess uca on uca.userid = uaa.userid and uca.companyid = c.companyid and (@companyid = -1 or uca.companyid = @companyid)
	inner join tbluserclientaccess uc on uc.userid = uca.userid and c.created between uc.clientcreatedfrom and uc.clientcreatedto
	where c.created >= dateadd(yy,-2,getdate())
	and c.accountnumber is not null
	order by c.created

	declare @Months int
	declare @LastNumber int
	declare @totalclients int

	select @totalclients = count(*) from #cr

	set @Months = 1
	set @LastNumber = 0

	--build case statement for 24 blocks of 30 days
	set @sSQL = 'select ''Cancelled/Completed''[Status],[TotalClients] = ' + cast(@totalclients as varchar) + char(13)
	WHILE @Months <= @MonthsToShow
		BEGIN
			set @sSQL = @sSQL + ',[Month ' + cast(@Months as varchar) + ']'
			set @sSQL = @sSQL + ' = (select count(*) from #cr where retention > ' + cast(@LastNumber as varchar) 
			set @sSQL = @sSQL + ' and retention <=' + cast(@months*30 as varchar) + ')' + char(13)
			set @LastNumber = @months*30
			set @months = @Months + 1
		END

	set @sSQl = @sSQL + ' Union all '	+ char(13)

	--build case statement for 24 blocks of 30 days
	set @months = 1
	set @sSQl = @sSQL +'select ''Remaining''[Status]'
	set @sSQl = @sSQL + ', ' + cast(@totalclients as varchar)+ ' [TotalClients]'
	set @LastNumber = 0
	
	WHILE @Months <= @MonthsToShow
		BEGIN
			declare @remaining int
			select @remaining  = @totalclients -(select count(*) from #cr where retention > @LastNumber  and retention <=@months*30 )
			set @sSQl = @sSQL + ', ' + cast(@remaining as varchar) +' [Month ' + cast(@Months as varchar) + ']' + char(13)
			set @totalclients = @remaining 
			set @LastNumber = @months*30
			set @months = @Months + 1
		END

	exec(@sSQl)
drop table #cr

END


GRANT EXEC ON stp_Agency_Dashboard_ClientRetentionRolling TO PUBLIC
GO
/****** Object:  Table [dbo].[tblAuditColumn]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblAuditColumn](
	[AuditColumnID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AuditTableID] [int] NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[IsBigValue] [bit] NOT NULL CONSTRAINT [DF_tblAuditColumn_IsBigValue]  DEFAULT ((0)),
 CONSTRAINT [PK_tblAuditColumn] PRIMARY KEY CLUSTERED 
(
	[AuditColumnID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_GetSettlementAcceptanceFormData]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetSettlementAcceptanceFormData]
(
@SettlementID as int
)
as
BEGIN
	SELECT top(1)    
		tblSettlements.SettlementID
, a.AccountID
, tblPerson.FirstName + ' ' + tblPerson.LastName AS ApplicantFullName
, tblClient.AccountNumber AS ControlNum
, tblCompany.ShortCoName AS Firm
, tblAgency.Name AS Agent
, ISNULL(forCred.Name, '') AS OriginalCreditor
, CONVERT(varchar, ci.AccountNumber) AS CAN
, curCred.Name AS CurrentCreditor
, ci.ReferenceNumber AS RefNum
, tblSettlements.SettlementSavings AS ClientSavings
, a.CurrentAmount AS OutstandingBalance
, tblSettlements.SettlementAmount
, tblSettlements.SettlementFee AS SettlementFees
, tblSettlements.SettlementDueDate
, ISNULL(cont.FirstName, '') + ' ' + ISNULL(cont.LastName, '') AS CurrentContact
, tblClient.SDABalance
, tblPhone.AreaCode, tblPhone.Number, tblPhone.Extension, 
ISNULL(vd.NextDepositDate, '1/1/1900') AS NextDepositDate, ISNULL(vd.NextDepositAmount, 0) AS NextDepositAmount, 
tblClient.SettlementFeePercentage AS SettlementFee, tblUser.FirstName + ' ' + tblUser.LastName AS NegotiatedBy
	FROM         tblClient INNER JOIN
						  tblAccount AS a INNER JOIN
						  tblPerson ON a.ClientID = tblPerson.ClientID INNER JOIN
						  tblCreditorInstance AS ci ON a.CurrentCreditorInstanceID = ci.CreditorInstanceID INNER JOIN
						  tblCreditor AS curCred ON ci.CreditorID = curCred.CreditorID ON tblClient.ClientID = a.ClientID INNER JOIN
						  tblAgency ON tblClient.AgencyID = tblAgency.AgencyID INNER JOIN
						  tblCompany ON tblClient.CompanyID = tblCompany.CompanyID LEFT OUTER JOIN
						  vwClientNextDepositSchedule AS vd ON tblClient.ClientID = vd.ClientId LEFT OUTER JOIN
						  tblContactPhone AS cp INNER JOIN
						  tblPhone ON cp.PhoneID = tblPhone.PhoneID RIGHT OUTER JOIN
						  tblContact AS cont ON cp.ContactID = cont.ContactID ON curCred.CreditorID = cont.CreditorID LEFT OUTER JOIN
						  tblCreditor AS forCred ON ci.ForCreditorID = forCred.CreditorID LEFT OUTER JOIN
						  tblUser INNER JOIN
						  tblSettlements ON tblUser.UserID = tblSettlements.CreatedBy ON a.AccountID = tblSettlements.CreditorAccountID
	WHERE     (tblSettlements.SettlementID = @SettlementID) AND (tblPerson.Relationship = 'Prime')
	Order By cont.created desc
END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationInsertSettlement]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_NegotiationInsertSettlement]
(
@CreditorAccountID int,
@ClientID int,
@RegisterBalance money = Null,
@FrozenAmount money = Null,
@CreditorAccountBalance money = Null,
@SettlementPercent float,
@SettlementAmount money,
@SettlementAmtAvailable money = Null,
@SettlementAmtBeingSent money = Null,
@SettlementAmtStillOwed money = Null,
@SettlementDueDate datetime =  Null,
@SettlementSavings money = Null,
@SettlementFee money = Null,
@OvernightDeliveryAmount money = Null,
@SettlementCost money = Null,
@SettlementFeeAmtAvailable money = Null,
@SettlementFeeAmtBeingPaid money = Null,
@SettlementFeeAmtStillOwed money = Null,
@SettlementNotes varchar(max) = Null,
@Status  varchar(1) = Null,
@SettlementRegisterHoldID int = Null,
@OfferDirection varchar(50),
@SettlementSessionGuid varchar(100) = Null,
@SettlementFeeCredit money = Null,
@UserId int
)
AS
BEGIN
/*
	History
	
	06.02.08 opereira Created
*/
--8.17.09.ug. set all other settlements to inactive
declare @settid numeric

update tblsettlements
set active = 0
where CreditorAccountID = @CreditorAccountID and ClientID = @ClientID

Insert Into tblSettlements(CreditorAccountID, ClientID, RegisterBalance,FrozenAmount, CreditorAccountBalance, SettlementPercent,SettlementAmount, SettlementAmtAvailable, SettlementAmtBeingSent,SettlementAmtStillOwed, SettlementDueDate, SettlementSavings,
SettlementFee, OvernightDeliveryAmount, SettlementCost,SettlementFeeAmtAvailable, SettlementFeeAmtBeingPaid, SettlementFeeAmtStillOwed,SettlementNotes, [Status], Created,CreatedBy, LastModified, LastModifiedBy,SettlementRegisterHoldID, OfferDirection, SettlementSessionGuid,SettlementFeeCredit,Active)
VALUES(@CreditorAccountID, @ClientID, @RegisterBalance,@FrozenAmount, @CreditorAccountBalance, @SettlementPercent,@SettlementAmount, @SettlementAmtAvailable, @SettlementAmtBeingSent,
@SettlementAmtStillOwed, @SettlementDueDate, @SettlementSavings,@SettlementFee, @OvernightDeliveryAmount, @SettlementCost,@SettlementFeeAmtAvailable, @SettlementFeeAmtBeingPaid, @SettlementFeeAmtStillOwed,
@SettlementNotes, @Status, GetDate(),@UserId, GetDate(), @UserId,@SettlementRegisterHoldID, @OfferDirection, @SettlementSessionGuid,@SettlementFeeCredit,1)

SELECT @settid = Scope_Identity()

--remove old settlements
declare @ClientAcctNum numeric
declare @origCreditor varchar(200)
declare @CreditorAcctNum varchar(100)
declare @bal money
declare @settamt money

SELECT DISTINCT 
 @ClientAcctNum = c.AccountNumber
, @origCreditor = origname.Name 
, @CreditorAcctNum = curr.AccountNumber 
, @bal = a.currentamount
, @settamt = sett.settlementamount
FROM tblCompany AS co RIGHT OUTER JOIN
tblCreditor AS origname RIGHT OUTER JOIN
tblCreditorInstance AS orig ON origname.CreditorID = orig.CreditorID RIGHT OUTER JOIN
tblClient AS c INNER JOIN
tblSettlements AS sett ON c.ClientID = sett.ClientID LEFT OUTER JOIN
tblNegotiationEntity AS ne ON sett.CreatedBy = ne.UserID LEFT OUTER JOIN
tblAccount AS a INNER JOIN
tblAccountStatus AS [as] ON a.AccountStatusID = [as].AccountStatusID ON sett.CreditorAccountID = a.AccountID LEFT OUTER JOIN
tblCreditor AS currname RIGHT OUTER JOIN
tblCreditorInstance AS curr ON currname.CreditorID = curr.CreditorID ON a.CurrentCreditorInstanceID = curr.CreditorInstanceID ON 
orig.CreditorInstanceID = a.OriginalCreditorInstanceID LEFT OUTER JOIN
tblPerson AS p ON c.PrimaryPersonID = p.PersonID ON co.CompanyID = c.CompanyID LEFT OUTER JOIN
tblUser AS neg ON neg.UserID = ne.UserID
WHERE   sett.settlementid = @settid and sett.status ='a' and sett.active = 1

delete from tblsettlementtrackerimports 
where clientacctnumber =@ClientAcctNum 
and @bal=balance
and @settamt = settlementamt
and originalcreditor = @origCreditor
and creditoraccountnum = @CreditorAcctNum
and paid is not null
--insert settlement tracker
declare @guid uniqueidentifier
set @guid= NEWID()

INSERT INTO [tblSettlementTrackerImports]([TrackerImportBatchID],[Team],[Negotiator],[AgencyID],[LawFirm],[Date],[Status],[Due],[ClientAcctNumber],[Name],[CreditorAccountNum],[OriginalCreditor],[CurrentCreditor],[BALANCE],[SettlementAmt],[SettlementPercent],[FundsAvail],[Note],[sent],[paid],[days],[ClientSavings],[SettlementFees],[SettlementSavingsPct],[ImportDate],[ImportBy],[SettlementID])
select distinct[TrackerImportBatchID] , [Team] , [Negotiator] , [AgencyID] , [LawFirm] , [Date], [Status] , [Due] , [ClientAcctNum] , [Client Name] , [CreditorAcctNum] , [OriginalCreditor], [CurrentCreditor] 
, [Balance] , [SettlementAmount] , [SettlementPct] , [FundsAvail] , [Note] , [sent] , [Paid] , [Days] , [Client Savings], [SettlementFees] , [SettlementFeePct], [ImportDate] , [ImportBy],[SettlementID]
from (
SELECT DISTINCT 
 [TrackerImportBatchID] = CONVERT(varchar(255), @guid), [Team] = isnull(ne.NegotiationEntityID,-1) 
, [Negotiator] =neg.firstname + ' ' + neg.lastname, [AgencyID] = c.AgencyID, [LawFirm] = co.ShortCoName
, [Date] = convert(varchar(10),sett.Created,101), [Status] = [as].Code , [Due] = convert(varchar(10),sett.SettlementDueDate,101)
, [ClientAcctNum] = c.AccountNumber, [Client Name] = p.FirstName + ' ' + p.LastName , [CreditorAcctNum] = curr.AccountNumber 
, [OriginalCreditor] = origname.Name , [CurrentCreditor] = currname.Name , [Balance] = a.CurrentAmount, [SettlementAmount] = sett.SettlementAmount
, [SettlementPct] = case when sett.SettlementAmount > 0 and a.CurrentAmount > 0 then sett.SettlementAmount/a.CurrentAmount else 0 end
, [FundsAvail] = c.SDABalance - c.PFOBalance -(SELECT ISNULL(SUM(Amount), 0) AS Expr1 FROM tblRegister WHERE (ClientId = c.ClientID) AND (EntryTypeId = 3) AND (Hold > GETDATE()) AND (Void IS NULL) AND (Bounce IS NULL) AND (Clear IS NULL)) -(SELECT ISNULL(SUM(Amount), 0) AS Expr1 FROM tblRegister AS tblRegister_3 WHERE (ClientId = c.ClientID) AND (EntryTypeId = 43) AND (Hold > GETDATE()) AND (Void IS NULL) AND (Bounce IS NULL) AND (Clear IS NULL))
, [Note] = '', [sent] = '', [Paid] = case when [as].Code = 'SA' then a.settled else Null end, [Days] = DateDiff(d,sett.Created,getdate())
, [Client Savings] = a.CurrentAmount - sett.SettlementAmount, [SettlementFees] = (a.CurrentAmount - sett.SettlementAmount)*c.SettlementFeePercentage
, [SettlementFeePct] = c.SettlementFeePercentage, [ImportDate] = getdate(), [ImportBy] = @userID, sett.SettlementID
FROM tblCompany AS co RIGHT OUTER JOIN
tblCreditor AS origname RIGHT OUTER JOIN
tblCreditorInstance AS orig ON origname.CreditorID = orig.CreditorID RIGHT OUTER JOIN
tblClient AS c INNER JOIN
tblSettlements AS sett ON c.ClientID = sett.ClientID LEFT OUTER JOIN
tblNegotiationEntity AS ne ON sett.CreatedBy = ne.UserID LEFT OUTER JOIN
tblAccount AS a INNER JOIN
tblAccountStatus AS [as] ON a.AccountStatusID = [as].AccountStatusID ON sett.CreditorAccountID = a.AccountID LEFT OUTER JOIN
tblCreditor AS currname RIGHT OUTER JOIN
tblCreditorInstance AS curr ON currname.CreditorID = curr.CreditorID ON a.CurrentCreditorInstanceID = curr.CreditorInstanceID ON 
orig.CreditorInstanceID = a.OriginalCreditorInstanceID LEFT OUTER JOIN
tblPerson AS p ON c.PrimaryPersonID = p.PersonID ON co.CompanyID = c.CompanyID LEFT OUTER JOIN
tblUser AS neg ON neg.UserID = sett.CreatedBy
WHERE   sett.settlementid = @settid and sett.status ='a' and sett.active = 1
) as batchData 
order by team, creditoracctnum;

declare @tblGroups table(NegotiationEntityID int,Name varchar(100))
declare @tblTeams table(tid int,Name varchar(100))

insert into @tblGroups 
select NegotiationEntityID, name from tblnegotiationentity with(nolock) where type = 'group'

--select * from @tblGroups 
insert into @tblTeams
select sti.trackerimportid, tg.name
from tblsettlementtrackerimports sti with(nolock)
inner join tblnegotiationentity  ne with(nolock) on ne.negotiationentityid = sti.team
inner join @tblGroups tg on tg.NegotiationEntityID = ne.parentNegotiationEntityID
where isnumeric(sti.team) = 1 and ne.parentnegotiationentityid is not null

update tblsettlementtrackerimports 
set team = tm.name
from @tblTeams tm
inner join tblsettlementtrackerimports sti with(nolock) on sti.trackerimportid = tm.tid


update tblsettlementtrackerimports 
set team = 'HOUSE(SP)'
where isnumeric(team) = 1


SELECT @settid 

END
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertMatterEmailTemplate]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Revision	: <02 - 18 February 2010>
	Category	: [TimeMatter]
	Type        : {New}
	Decription	: Add new Email Template
*/

CREATE procedure [dbo].[stp_InsertMatterEmailTemplate]
(
	@EmailConfigID int = NULL,
	@MailFrom varchar(50) = NULL,
	@MailCC varchar(50) = NULL,
	@MailBCC varchar(200) = NULL,
	@MailSubject varchar(100) = NULL,
	@MailPurpose varchar(200) = NULL,
	@MailContent varchar(max) = NULL,
	@MailFooter varchar(500) = NULL,
	@MType char(1) = NULL,
	@Createdby int = NULL,
	@CreatedDate datetime = NULL,
	@LastModifiedby int = NULL,
	@LastModifiedDate datetime = NULL,
	@Status bit = NULL,
	@SeqNo int = 1,
	@LawfirmId int = NULL
)
AS

IF NOT EXISTS ( Select (EmailConfigID) from tblEmailConfiguration where EmailConfigID=@EmailConfigID)

BEGIN

--- Please add transaction and roll back here!

INSERT INTO dbo.tblEmailConfiguration
(
	MailFrom,
	MailCC,
	MailBCC,
	MailSubject,
	MailPurpose,
	MailContent,
	MailFooter,
	MType,
	Createdby,
	CreatedDate,
	LastModifiedby,
	LastModifiedDate,
	Status,
	SeqNo,
	LawfirmId
)

VALUES
(
	@MailFrom,
	@MailCC,
	@MailBCC,
	@MailSubject,
	@MailPurpose,
	@MailContent,
	@MailFooter,
	@MType,
	@Createdby,
	getdate(),
	@Createdby,
	getdate(),
	@Status,
	@SeqNo,
	@LawfirmId
)


SELECT NEWID = SCOPE_IDENTITY()

END

ELSE 

BEGIN

Update dbo.tblEmailConfiguration

SET 

	MailFrom=@MailFrom,
	MailCC=@MailCC,
	MailBCC=@MailBCC,
	MailSubject=@MailSubject,
	MailPurpose=@MailPurpose,
	MailContent=@MailContent,
	MailFooter=@MailFooter,
	MType=@MType,
	LastModifiedby=@CreatedBy,
	LastModifiedDate=getdate(),
	Status=@Status,
	SeqNo=@SeqNo,
	LawfirmId=@LawfirmId

Where EmailConfigID=@EmailConfigID

END
GO
/****** Object:  StoredProcedure [dbo].[get_CommRecAccountName]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[get_CommRecAccountName]
(
	@commRecId int
)

AS

BEGIN

SET NOCOUNT ON

SELECT
	Abbreviation
FROM
	tblCommRec
WHERE
	CommRecId=@commRecId
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetSettlementCommissionStats]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetSettlementCommissionStats]
as
declare @vtblStats table
(
Userid int,
[IncentiveMonth] int,
[IncentiveYear] int,
TotalUnits int,
Rate money,
TotalPayout money,
TotalAcctBal money,
TotalSettlementsAmt money,
TotalSettlementFees money,
TotalAvgPercentage float,
IncentiveRate float,
IncentiveAdj money,
TotalIncentivePaid money
)

declare @Month int, @Units int, @rate float

insert into @vtblStats
select 
	createdby as [userid],
	month(created) as [IncentiveMonth],
	year(created) as [IncentiveYear],
	count(*) as [TotalUnits], 
	null as [rate],
	null as totalpayout,
	sum(creditoraccountbalance) as [TotalAcctBal],
	sum(settlementamount) as [TotalSettlementsAmt],
	sum(settlementfee) as [TotalSettlementFees],
	null as TotalAvgPercentage,
	null as IncentiveRate ,
	null as IncentiveAdj,
	null as TotalIncentivePaid 
from tblsettlements as s
group by createdby,year(created),month(created)


declare cur_Stats cursor local for select [IncentiveMonth] , TotalUnits , rate from @vtblStats
open cur_Stats
fetch next from cur_Stats into @Month , @Units , @rate 
while @@fetch_status = 0 
	BEGIN
		print @units
		update @vtblStats
		set rate = (select top 1 rate from dbo.tblSettementIncentives_RatePerSettlement where @units between beginrange and endrange  order by  settlementunits desc)
		where TotalUnits = @units

		fetch next from cur_Stats into @Month , @Units , @rate 
	END
close cur_Stats
deallocate cur_Stats

update @vtblStats
set totalpayout = rate*totalunits

update @vtblStats
set TotalAvgPercentage = [TotalSettlementsAmt]/[TotalAcctBal]*100

update @vtblStats
set IncentiveRate = (select settlementpercentagerate from dbo.tblSettementIncentives_SettlementAvgRate where
cast(TotalAvgPercentage as numeric) between AvgSettlementPercentageStartRange and AvgSettlementPercentageEndRange )

update @vtblStats
set IncentiveAdj = totalpayout*(IncentiveRate/100)

update @vtblStats
set TotalIncentivePaid = totalpayout+IncentiveAdj
/*get groups*/
declare @vtblGroups table
(
	groupName varchar(30),
	groupID int
)
insert into @vtblGroups
select distinct name, negotiationentityid from dbo.tblNegotiationEntity where type = 'group' and deleted <> 1

declare @vtblList table
(
	GroupName Varchar(30),
	UserName varchar(200),
	EntityID int,
	UserID int
)

declare @groupName varchar(200)
declare @groupID int

declare cur_List cursor local for select groupname, groupID from @vtblGroups
open cur_List
fetch next from cur_List into @groupName, @groupID
while @@fetch_status = 0 
	BEGIN
		insert into @vtblList
		select distinct @groupname, name,negotiationentityid,userid from tblNegotiationEntity where parentnegotiationentityid = @groupID and deleted <> 1
		fetch next from cur_List into @groupName, @groupID
	END
close cur_List
deallocate cur_List

declare cur_List cursor local for select groupname,  entityID from @vtblList
open cur_List
fetch next from cur_List into @groupName, @groupID
while @@fetch_status = 0 
	BEGIN
		insert into @vtblList
		select distinct @groupname, name,negotiationentityid,userid from tblNegotiationEntity where parentnegotiationentityid = @groupID and deleted <> 1
		fetch next from cur_List into @groupName, @groupID
	END
close cur_List
deallocate cur_List


select u.groupname,u.username ,s.* from @vtblStats as s inner join @vtblList as u on s.userid=u.userid
order by s.userid, [IncentiveMonth]
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPhoneCalls]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetPhoneCalls]
	(
		@returntop varchar (50) = '100 percent',
		@where varchar (8000) = '',
		@orderby varchar (8000) = '',
		@userid int
	)

as

declare @clientjoin varchar(1000)
	
-- filter search results if user belongs to specific company(s)
if exists (select 1 from tblusercompanyaccess where userid = @userid) begin
	set @clientjoin = ' join tblclient on tblclient.clientid = tblperson.clientid
						join tblusercompanyaccess uc on uc.companyid = tblclient.companyid and uc.userid = ' + cast(@userid as varchar(10))
end else
	set @clientjoin = ' left outer join tblclient on tblclient.clientid = tblperson.clientid'


exec
(
	'select top ' + @returntop + '
		tblphonecall.*,
		tblperson.firstname as personfirstname,
		tblperson.lastname as personlastname,
		tbluser.firstname as userfirstname,
		tbluser.lastname as userlastname,
		tblclient.clientid,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname,
		ut.name as usertype
	from
		tblphonecall left outer join
		tblperson on tblphonecall.personid = tblperson.personid '
		+ @clientjoin + ' left outer join
		tbluser on tblphonecall.userid = tbluser.userid left outer join
		tbluser as tblcreatedby on tblphonecall.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on tblphonecall.lastmodifiedby = tbllastmodifiedby.userid left outer join
		tblusertype ut on tbluser.usertypeid=ut.usertypeid
	' + @where + ' ' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateRoutingNumber]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_UpdateRoutingNumber]
(
	@RoutingNumber char(9)
,	@NewRoutingNumber char(9)
,	@BankName varchar(50)
,	@Address varchar(50)
,	@City varchar(50)
,	@State varchar(50)
,	@Zipcode varchar(10)
,	@PhoneNo char(10)
)
as
begin

-- does the current (new) routing number exist?
if exists (select 1 from tblroutingnumber where routingnumber = @NewRoutingNumber) begin
	update tblroutingnumber
	set CustomerName = @BankName, [Address] = @Address, City = @City, Zipcode = left(@Zipcode,5), ZipcodeExtension = substring(@Zipcode,6,4), AreaCode = left(@PhoneNo,3), PhonePrefix = substring(@PhoneNo,4,3), PhoneSuffix = substring(@PhoneNo,7,4), ModifiedDate = getdate()
	where RoutingNumber = @NewRoutingNumber
end
else begin
	update tblroutingnumber
	set NewRoutingNumber = @NewRoutingNumber, ModifiedDate = getdate()
	where RoutingNumber = @RoutingNumber	

	insert tblroutingnumber (routingnumber,customername,[address],city,statecode,zipcode,zipcodeextension,areacode,phoneprefix,phonesuffix,insertdate,active)
	values (@NewRoutingNumber,@BankName,@Address,@City,@State,left(@Zipcode,5),substring(@Zipcode,6,4),left(@PhoneNo,3),substring(@PhoneNo,4,3),substring(@PhoneNo,7,4),getdate(),1)
end

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAccountsForClient]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetAccountsForClient]
	(
		@clientid int
	)

as


select
	tblaccount.*,
	tblcreditorinstance.creditorid,
	tblcreditorinstance.forcreditorid,
	tblcreditorinstance.acquired,
	tblcreditorinstance.accountnumber,
	tblcreditorinstance.referencenumber,
	tblcreditor.[name] as creditorname,
	tblcreditor.street as creditorstreet,
	tblcreditor.street2 as creditorstreet2,
	tblcreditor.city as creditorcity,
	tblcreditor.stateid as creditorstateid,
	tblstate.[name] as creditorstatename,
	tblstate.abbreviation as creditorstateabbreviation,
	tblcreditor.zipcode as creditorzipcode,
	tblforcreditor.[name] as forcreditorname,
	tblforcreditor.street as forcreditorstreet,
	tblforcreditor.street2 as forcreditorstreet2,
	tblforcreditor.city as forcreditorcity,
	tblforcreditor.stateid as forcreditorstateid,
	tblforstate.[name] as forcreditorstatename,
	tblforstate.abbreviation as forcreditorstateabbreviation,
	tblforcreditor.zipcode as forcreditorzipcode,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname,
	tblsettledby.firstname + ' ' + tblsettledby.lastname as settledbyname,
	tblcreditor.validated as creditorvalidated,
	tblforcreditor.validated as forcreditorvalidated,
	tblcreditor.creditorgroupid as creditorgroupid,
	tblforcreditor.creditorgroupid as forcreditorgroupid
from
	tblaccount inner join
	tblcreditorinstance on tblaccount.currentcreditorinstanceid = tblcreditorinstance.creditorinstanceid inner join
	tblcreditor on tblcreditorinstance.creditorid = tblcreditor.creditorid left outer join
	tblcreditor as tblforcreditor on tblcreditorinstance.forcreditorid = tblforcreditor.creditorid left outer join
	tblstate on tblcreditor.stateid = tblstate.stateid left outer join
	tblstate as tblforstate on tblforcreditor.stateid = tblforstate.stateid left outer join
	tbluser as tblcreatedby on tblaccount.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblaccount.lastmodifiedby = tbllastmodifiedby.userid left outer join
	tbluser as tblsettledby on tblaccount.settledby = tblsettledby.userid
where
	tblaccount.clientid = @clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_LeadProductIDLookup]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_LeadProductIDLookup]
(
	@ProductCode varchar(20),
	@VendorID int,
	@ProductDesc varchar(50) = '',
	@Cost money = 0
)
as
begin

	declare @ProductID int

	select @ProductID=productid, @Cost=cost 
	from tblleadproducts 
	where productcode = @ProductCode 
		and vendorid = @VendorID 
		and active = 1

	if @ProductID is null begin
		if @ProductDesc = '' begin
			set @ProductDesc = @ProductCode
		end
		
		if @Cost = 0 begin
			select @Cost = DefaultCost from tblleadvendors where vendorid = @VendorID
		end
	
		insert tblleadproducts (productcode,productdesc,vendorid,cost,created,createdby)
		values (@ProductCode,@ProductDesc,@VendorID,@Cost,getdate(),1265)

		select @ProductID = scope_identity()
	end

	select @ProductID, @Cost

end
GO
/****** Object:  StoredProcedure [dbo].[stp_nondeposit]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_nondeposit]
@daycount int,
@nodep bit,
@companies varchar(255) = null
As
Begin
	Select @companies = isnull(@companies, '')

	Declare @Where varchar(max)

	Select @Where = ''

	Select @Where = ' AND (c.DepositStartDate is Null or c.DepositStartDate <= dateadd(day, -convert(int,' + convert(varchar, @daycount) + '), getdate()))'

	if @nodep = 0
		Select @Where = @Where + ' OR dateadd(day, -convert(int,' + convert(varchar, @daycount) + '), getdate()) > d.maxdate) '
	Else
		Select @Where = @Where + ') '

	if @companies <> ''
		Select @Where = @Where + ' And c.companyid In (' + @companies + ') '

	Exec ('SELECT c.clientid, 
		   a.name as [Agency],
		   c.Accountnumber, 
		   p.Firstname, p.Lastname, 
		   co.shortCoName as [LawFirm], 
		   DepositStartDate = convert(varchar,c.DepositStartDate, 110), 
		   DepositDayAmountMethod = Case When c.MultiDeposit = 0 Then cast(c.depositday as varchar) + ''/ $'' + cast(c.DepositAmount as varchar) + ''/ '' + c.DepositMethod 
		   Else (select distinct cast(cd.depositday as varchar) + ''/ $'' + cast(cd.DepositAmount as varchar) + ''/ '' + cd.DepositMethod +  '', '' 
		   from tblclientDepositDay cd where cd.clientid = c.clientid and cd.deleteddate is null For XML Path('''')) 
		   End, 
		   DepositCount = isnull(d.countR, 0),
		   ClearedCount = (Select count(registerid) from tblregister r where entrytypeid = 3 and clientid = c.clientid and (r.clear is not null or hold is null or (r.clear is null and r.hold <= getdate())) and (r.bounce is null)), 
		   LastDep = convert(varchar,d.maxdate, 110),
		   bounce = case when (select top 1 bounce from tblregister where registerid = d.maxregisterid) is null then '' '' else ''X'' end, 
		   d.maxregisterid as LastDepId, 
		   daysSince = datediff(day, d.maxdate, getdate()),
		   ActiveDate = convert(varchar,(Select max(Created) from tblroadmap where clientstatusid = 14 and clientid = c.clientid), 110),
		   la.name[PreferredLang]
	FROM tblClient c 
	INNER JOIN tblPerson p ON c.primarypersonid = p.personid 
	INNER JOIN tblCompany co on co.CompanyId = c.companyid 
	INNER JOIN tblAgency a ON c.agencyid = a.agencyid
	left outer join tbllanguage la on la.languageid = p.languageid
	left join 
	(Select count(r.registerid) as CountR, max(r.transactiondate) as maxdate, max(registerid) as maxregisterid, r.clientid 
	from tblregister r 
	where r.entrytypeid = 3 
	group by clientid) d on c.clientid = d.clientid
	where c.currentclientstatusid in (10,14) 
	and (isnull(d.countR,0) = 0 ' + @Where )		

End
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationGetAssignmentData_NoPaging]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_NegotiationGetAssignmentData_nopaging 353


CREATE procedure [dbo].[stp_NegotiationGetAssignmentData_NoPaging]
(
	@userid int
)
as
SET NOCOUNT ON 
declare @sqlTxt varchar(max)
declare @sqlFilters as varchar(max)
declare @DisplayColumns varchar(max)
declare @vtblFilters table
	(
		ClientID int,AccountID int,SSN varchar(50),ApplicantFullName varchar(101),ApplicantLastName varchar(50),ApplicantFirstName varchar(50),
		ApplicantState varchar(50),ApplicantCity varchar(50),ApplicantZipCode varchar(50),SDAAccount varchar(50),FundsAvailable money,
		OriginalCreditor varchar(50),CurrentCreditor varchar(50),CurrentCreditorState varchar(50),CurrentCreditorAccountNumber varchar(30),
		LeastDebtAmount money,CurrentAmount money,AccountStatus varchar(255),AccountAge int,ClientAge int,LastSettled int,NextDepositDate datetime,
		NextDepositAmount money,LastOffer datetime,OfferDirection varchar(50)
	)
DECLARE filterCursor CURSOR READ_ONLY FAST_FORWARD FOR 
SELECT nf.AggregateClause FROM  tblNegotiationFilters AS nf INNER JOIN tblNegotiationFilterXref AS fx ON nf.FilterId = fx.FilterId 
where fx.deleted = 0 and fx.filterid in (SELECT isnull(FilterID, 0) as FilterID FROM tblNegotiationFilterXref WHERE Deleted = 0 and EntityID in (Select top 1 NegotiationEntityID from tblNegotiationEntity where UserID = @userid))

OPEN filterCursor
	FETCH NEXT FROM filterCursor INTO @sqlFilters
	WHILE @@FETCH_STATUS = 0
		BEGIN
			insert into @vtblFilters
			exec('select ClientID ,AccountID ,SSN ,ApplicantFullName ,ApplicantLastName ,ApplicantFirstName ,ApplicantState ,
			ApplicantCity ,ApplicantZipCode ,SDAAccount ,FundsAvailable ,OriginalCreditor ,CurrentCreditor ,CurrentCreditorState ,
			CurrentCreditorAccountNumber ,LeastDebtAmount ,CurrentAmount ,AccountStatus ,AccountAge ,ClientAge ,LastSettled ,NextDepositDate ,
			NextDepositAmount ,LastOffer ,OfferDirection from vwNegotiationDistributionSource where ' + @sqlFilters)
			FETCH NEXT FROM filterCursor INTO @sqlFilters
		END

CLOSE filterCursor
DEALLOCATE filterCursor

SELECT distinct ClientID ,AccountID ,SSN ,ApplicantFullName ,ApplicantLastName ,ApplicantFirstName ,ApplicantState ,ApplicantCity ,ApplicantZipCode ,SDAAccount ,FundsAvailable ,OriginalCreditor ,CurrentCreditor ,CurrentCreditorState ,CurrentCreditorAccountNumber ,LeastDebtAmount ,CurrentAmount ,AccountStatus ,AccountAge ,ClientAge ,LastSettled ,NextDepositDate ,NextDepositAmount ,LastOffer ,OfferDirection  
FROM @vtblFilters Order By LastOffer desc


GRANT EXEC ON stp_NegotiationGetAssignmentData_NoPaging TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_Agency_Dashboard_ClientRetentionRollingByCreated]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_Agency_Dashboard_ClientRetentionRollingByCreated]
(
	@userid int,
	@MonthCreated int,
	@YearCreated int,
	@companyid int = -1
)
as
BEGIN

	/*
	--development use
	declare @userid int
	declare @YearCreated int
	declare @MonthCreated int
	set @userid = 492
	set @MonthCreated = 5
	set @YearCreated = 2008

	stp_Agency_Dashboard_ClientRetentionRollingByCreated 375, 1,2007

	*/
	--script vars
	declare @sSQL varchar(max)
	declare @pstart datetime
	declare @pend datetime

	select @pstart = cast(cast(@YearCreated as varchar) + '-' + cast(@MonthCreated as varchar) + '-01' as datetime)
	select @pend = cast(cast(@YearCreated as varchar) + '-' + cast(@MonthCreated as varchar) + '-' + cast(day(dateadd(d,-1,dateadd(m,1,@pstart))) as varchar) as datetime)

	select 
		  a.ImportAbbr
		  ,convert(varchar,c.accountnumber) [Acct#]       
		  ,convert(varchar,c.created,110) [Created]
		  ,s.name [Status]
		  --,TermDate = isnull(convert(varchar,(select top(1) rm.created from tblroadmap rm where clientstatusid in (17,18) and rm.clientid = c.clientid order by roadmapid desc),110),'')
		  ,Retention = isnull(datediff(day,c.created,(select top(1) rm.created from tblroadmap rm where clientstatusid in (17) and rm.clientid = c.clientid order by roadmapid desc)),'')
	into #cr
	from tblclient c
		inner join tblClientStatus s on c.currentclientstatusid = s.clientstatusid
		inner join tblagency a on c.agencyid = a.agencyid
		Inner join tbluseragencyaccess uaa on uaa.agencyid = c.agencyid and uaa.userid = @userid
		inner join tblusercompanyaccess uca on uca.userid = uaa.userid and uca.companyid = c.companyid and (@companyid = -1 or uca.companyid = @companyid)
		inner join tbluserclientaccess ucc on ucc.userid = uaa.userid and c.created between ucc.clientcreatedfrom and ucc.clientcreatedto
	where c.created >= @pstart 
		and c.created < @pend
		and c.accountnumber is not null
	order by c.created

	--update #cr set retention = datediff(day, created, getdate()) where retention =0
	--select * from #cr

	declare @Months int
	declare @LastNumber int
	declare @totalclients int

	select @totalclients = count(*) from #cr

	set @Months = 1
	set @LastNumber = 0

	set @sSQL = 'select ''Cancelled''[Status],[TotalClients] = ' + cast(@totalclients as varchar) + char(13)
	while @Months <= datediff(m,@pstart,getdate())
		BEGIN
			set @sSQL = @sSQL + ',[Month ' + cast(@Months as varchar) + ']'
			set @sSQL = @sSQL + ' = (select count(*) from #cr where retention > ' + cast(@LastNumber as varchar) 
			set @sSQL = @sSQL + ' and retention <=' + cast(@months*30 as varchar) + ')' + char(13)
			set @LastNumber = @months*30
			set @months = @Months + 1
		END

	set @sSQl = @sSQL + ' Union all '	+ char(13)

	set @months = 1
	set @sSQl = @sSQL +'select ''Remaining''[Status]'
	set @sSQl = @sSQL + ', ' + cast(@totalclients as varchar)+ ' [TotalClients]'
	set @LastNumber = 0
	
	while @Months <= datediff(m,@pstart,getdate())
		BEGIN
			declare @remaining int

			select @remaining  = @totalclients -(select count(*) from #cr where retention > @LastNumber  and retention <=@months*30 )
				
			set @sSQl = @sSQL + ', ' + cast(@remaining as varchar) +' [Month ' + cast(@Months as varchar) + ']' + char(13)
			
			set @totalclients = @remaining 
			set @LastNumber = @months*30
			set @months = @Months + 1
		END

	exec(@sSQl)
	drop table #cr

END



GRANT EXEC ON stp_Agency_Dashboard_ClientRetentionRollingByCreated TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientBankAccounts]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ClientBankAccounts]
(
	@ClientID int
)
as
begin



select r.customername + '::' + r.routingnumber + '::' + d.bankaccountnumber + '::' + d.banktype [bankaccount]
from (
	select distinct routingnumber [bankroutingnumber], accountnumber [bankaccountnumber], isnull(banktype,'C') [banktype]
	from tblclientbankaccount
	where clientid = @ClientID
	and disabled is null

	union 

	select bankroutingnumber, bankaccountnumber, isnull(banktype,'C') [banktype]
	from tblclient
	where clientid = @ClientID
	and bankaccountnumber is not null

	union

	select distinct bankroutingnumber, bankaccountnumber, isnull(banktype,'C') [banktype]
	from tbladhocach
	where clientid = @ClientID

	union 

	select distinct bankroutingnumber, bankaccountnumber, isnull(banktype,'C') [banktype]
	from tblruleach
	where clientid = @ClientID
) d
join tblroutingnumber r on r.routingnumber = d.bankroutingnumber



end
GO
/****** Object:  Table [dbo].[tblCompany]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblCompany](
	[CompanyID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[Default] [bit] NOT NULL CONSTRAINT [DF_tblCompany_Default]  DEFAULT ((0)),
	[ShortCoName] [varchar](50) NULL,
	[Created] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
	[Contact1] [nvarchar](75) NULL,
	[Contact2] [nvarchar](75) NULL,
	[BillingMessage] [nvarchar](255) NULL,
	[WebSite] [nvarchar](255) NULL,
	[SigPath] [nvarchar](100) NULL,
	[UserID] [nvarchar](50) NULL,
	[ControlledAccountName] [varchar](40) NULL,
	[LandingPage] [varchar](50) NOT NULL DEFAULT (''),
 CONSTRAINT [PK_tblCompany] PRIMARY KEY CLUSTERED 
(
	[CompanyID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateCreditor]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_UpdateCreditor]
@CreditorId int,
@Name varchar(50) = null,
@Street varchar(50) = null,
@Street2 varchar(50) = null,
@City varchar(50) = null,
@StateId int = null,
@ZipCode varchar(50) = null,
@Validated bit = null,
@UserId int,
@CreditorGroupId int = null,
@CreditorAddressTypeId int = null 
AS
Begin
/*
	-- Save Log
	Insert Into tblCreditorCleanupLog([NewValue], [OldValue], TableName, FieldName, KeyId, [By])
	Select @CreditorGroupId, CreditorGroupId, 'tblCreditor', 'CreditorGroupId', CreditorId, @UserId
	From tblCreditor
	Where CreditorId = @CreditorId and @CreditorGroupId <> CreditorGroupId
*/
	
	Update tblCreditor Set
	[Name] = isnull(@Name, [Name]),
	Street = isnull(@Street, Street),
	Street2 = isnull(@Street2, Street2),
	City = isnull(@City, City),
	StateId = isnull(@StateId, StateId),
	ZipCode = isnull(@ZipCode, ZipCode),
	Validated = @Validated,
	CreditorGroupId = isnull(@CreditorGroupId, CreditorGroupId),
	CreditorAddressTypeId = isnull(@CreditorAddressTypeId, CreditorAddressTypeId),
	LastModified = GetDate(),
	LastModifiedBy = @UserId 
	Where CreditorId = @CreditorId
	
End
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_getBatches]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_getBatches]
as
BEGIN
	SELECT DISTINCT 
		[SettlementYear] = year(sett.created)
		, [SettlementMonth] = datename(m,sett.created)
		, [MonthNumber] = month(sett.created)
		, [NumSettlements] = count(distinct creditoraccountid)
	FROM tblSettlements AS sett 
	WHERE [status] = 'a' and active = 1 
	group by YEAR(sett.Created) ,datename(m,sett.created),	Month(sett.created)
	order by YEAR(sett.Created) desc,	Month(sett.created) desc
END



GRANT EXEC ON stp_settlementimport_getBatches TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertBalanceLog]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertBalanceLog]
AS
Insert Into tblBalanceLog(ClientId, LastCheck, Balanced)
Select clientId, null, 0
from tblClient Where TrustId = 22 and clientid not in
(Select clientid from tblBalanceLog)
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_UpdateTeamNames]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_settlementimport_UpdateTeamNames]
as
BEGIN
	declare @tblGroups table(NegotiationEntityID int,Name varchar(100))
	declare @tblTeams table(tid int,Name varchar(100))

	insert into @tblGroups 
	select NegotiationEntityID, name from tblnegotiationentity with(nolock) where type = 'group'

	--select * from @tblGroups 
	insert into @tblTeams
	select sti.trackerimportid, tg.name
	from tblsettlementtrackerimports sti with(nolock)
	inner join tblnegotiationentity  ne with(nolock) on ne.negotiationentityid = sti.team
	inner join @tblGroups tg on tg.NegotiationEntityID = ne.parentNegotiationEntityID
	where isnumeric(sti.team) = 1 and ne.parentnegotiationentityid is not null

	update tblsettlementtrackerimports 
	set team = tm.name
	from @tblTeams tm
	inner join tblsettlementtrackerimports sti with(nolock) on sti.trackerimportid = tm.tid

END


GRANT EXEC ON stp_settlementimport_UpdateTeamNames TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_SaveUserCompanyAccess]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SaveUserCompanyAccess]
(
	@UserID int,
	@CompanyIDs varchar(1000)
)
as
begin

if @CompanyIDs = '-99' begin
	select @CompanyIDs = coalesce(@CompanyIDs + ',', '') + cast(CompanyID as varchar(4))
	from tblCompany
end

insert 
	tblUserCompanyAccess (UserID, CompanyID)
select 
	UserID, CompanyID
from 
(
	select @UserID as UserID, c.CompanyID
	from dbo.splitstr(@CompanyIDs,',') s
	join tblCompany c on c.CompanyID = s.Value
) dev
where not exists (select 1 from tblUserCompanyAccess u where u.UserID = dev.UserID and u.CompanyID = dev.CompanyID)


delete from tblUserCompanyAccess
where UserID = @UserID
and CompanyID not in (select [value] from dbo.splitstr(@CompanyIDs,','))


end
GO
/****** Object:  Table [dbo].[tblAudit]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAudit](
	[AuditID] [bigint] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AuditColumnID] [int] NOT NULL,
	[PK] [int] NOT NULL,
	[Value] [sql_variant] NULL,
	[DC] [datetime] NOT NULL CONSTRAINT [DF_tblAudit_Created]  DEFAULT (getdate()),
	[UC] [int] NULL,
	[Deleted] [bit] NOT NULL CONSTRAINT [DF_tblAudit_Deleted]  DEFAULT ((0)),
 CONSTRAINT [PK_tblAudit] PRIMARY KEY CLUSTERED 
(
	[AuditID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportClientNoteInsert]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ImportClientNoteInsert]
@Subject varchar(255) = null,
@Value varchar(5000),
@Created datetime,
@CreatedBy int,
@LastModified datetime,
@LastModifiedBy int,
@OldTable varchar(50) = null,
@OldId int = null,
@ClientId int 
AS
BEGIN

Insert Into tblNote(Subject, Value, Created, CreatedBy, LastModified, LastModifiedBy, OldTable, OldId, ClientID )
Values (@Subject, @Value, @Created, @CreatedBy, @LastModified, @LastModifiedBy, @OldTable, @OldId, @ClientID)
Select Scope_identity()
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetWCFLog]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetWCFLog]
(
	@date datetime = null
)
as 
begin


if @date is null begin
	set @date = getdate()	
end	

select Process
from tblWCFLogs 
where Created >= convert(varchar(10),@date,101) 
	and Process is not null
group by Process
order by max(Created)

select 
	[Status],
	case 
		when [Status] = 'OK' then 'green'
		when [Status] = 'ERROR' then 'red'
		when [Status] = 'WARNING' then 'orange'
		else 'black'
	end Color,
	convert(varchar(30),Created,108) [Created], 
	Process, 
	[Message]
from tblWCFLogs 
where Created >= convert(varchar(10),@date,101) 
	and Process is not null
	and Show = 1
order by LogId


end
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getAgencyTotals]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_reports_getAgencyTotals]
(
@year int,
@month int
)
as
BEGIN

	select 
[AgencyName]= a.name 
,[TotalFees] = sum(settlementfees)
,[TotalBalance] = sum(balance)
,[TotalSettAmt] = sum(settlementamt)
,[TotalUnits]= count(*)
,[TotalAvgPct] = sum(settlementamt)/sum(balance)
,[PaidFees] = sum(case when paid is not null then settlementfees else 0 end)
,[PaidBalance]= sum(case when paid is not null then balance else 0 end)
,[PaidSettAmt]= sum(case when paid is not null then settlementamt else 0 end)
,[PaidUnits] = sum(case when paid is not null then 1 else 0 end)
,[PaidAvgPct]=case when sum(case when paid is not null then balance else 0 end) = 0 then 0 else sum(case when paid is not null then settlementamt else 0 end)/sum(case when paid is not null then balance else 0 end)end
,[PctPaid] = sum(case when paid is not null then 1 else 0 end)/convert(float,count(*))
from tblsettlementtrackerimports sti inner join tblagency a on a.agencyid = sti.agencyid
where year(date) = @year and month(date) = @month
group by sti.agencyid, a.name
order by a.name

END


GRANT EXEC ON stp_settlementimport_reports_getAgencyTotals TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientsPendingReview]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetClientsPendingReview]
	(
		@agencyId int=null
	)

as

select
	c.clientid,
	a.name as agencyname,
	p.firstname + ' ' + p.lastname as clientname,
	tblAgencyExtraFields01.DebtTotal,
	c.created  as HireDate,
	(SELECT Top 1 Created FROM tblRoadmap WHERE ClientId=c.ClientId order by roadmapid desc) as StatusChanged
	
from
	tblclient c inner join
	tblperson p on c.primarypersonid=personid inner join
	tblagency a on c.agencyid=a.agencyid LEFT OUTER JOIN 
	tblAgencyExtraFields01 ON c.ClientId=tblAgencyExtraFields01.ClientId
where 
	c.currentclientstatusid=23
	and a.agencyid=isnull(@agencyid, a.agencyid)
GO
/****** Object:  Table [dbo].[tblState]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblState](
	[StateID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Abbreviation] [varchar](50) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[Created] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
	[CompanyID] [int] NULL,
	[Region] [varchar](50) NULL,
	[OldCompanyID] [int] NULL,
 CONSTRAINT [PK_tblState] PRIMARY KEY CLUSTERED 
(
	[StateID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_ClientContactCheckList_getLocalCounselInfo]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_ClientContactCheckList_getLocalCounselInfo]
	(
		@clientid int
	)
AS
BEGIN
	declare @state varchar(2)
	declare @companyid int

	select @state = s.abbreviation, @companyid = c.companyid
	from tblClient c 
		inner join tblPerson p on c.PrimaryPersonID = p.PersonID
		inner join tblstate s on s.stateid = p.stateid
	where c.clientid = @clientid

	SELECT  
	[AttorneyName]=a.firstname + case when a.middlename is null or a.middlename = '' then ' ' else ' ' + a.middlename + ' ' end + a.lastname + case when a.suffix is null or a.suffix = '' then ' ' else ' ' + a.suffix + ' ' end
	,[attorneyState] =csp.State
	FROM tblCompanyStatePrimary AS csp INNER JOIN
	tblAttorney AS a ON csp.AttorneyID = a.AttorneyID
	WHERE (csp.State = @state) AND (csp.CompanyID = @companyid)
END

GRANT EXEC ON stp_LetterTemplates_ClientContactCheckList_getLocalCounselInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_Agency_DashBoard_NetIncomeGridData]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Agency_DashBoard_NetIncomeGridData]
(
	@UserID int,
	@CompanyID int = -1
)
as
BEGIN

	declare @startdate datetime 
	set @startdate = dateadd(d,-15,getdate())

	declare @CommVSChargeBack table(Period datetime, CommissionCount int, CommissionAmount money, ChargeBackCount int, ChargeBackAmount money)
	declare @vtblCal table (TransactionDate datetime);
	
	-- fill calendar
	with mycte as
	(
	select cast('1/1/' + cast(year(getdate()) as varchar) as datetime) DateValue
	union all
	select DateValue + 1
	from    mycte    
	where   DateValue + 1 < getdate()
	)
	insert into @vtblCal
	select  top 5 DateValue
	from    mycte
	where CONVERT(BIT, CASE WHEN datepart(dw, DateValue) IN (1,7) THEN 0 ELSE 1 END) = 1 and datevalue < getdate() order by datevalue desc
	OPTION  (MAXRECURSION 0)

	--Fill Period
	Insert into  @CommVSChargeBack( CommissionCount, CommissionAmount, Period)
	select count(cp.commpayid) as Qty, 
		   sum(cp.amount) as Amount,  
		   convert(varchar(10),cbt.batchdate,101) as [period]
	from tblcommpay cp
	inner join tblcommbatch cbt on cbt.commbatchid = cp.commbatchid 
	inner join tblcommstruct cs on cs.commstructid = cp.commstructid
	inner join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID	
	inner join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	inner join tblregisterpayment rp on rp.registerpaymentid = cp.registerpaymentid
	inner join tblregister r on r.registerid = rp.feeregisterid
	inner join tblclient c on c.clientid = r.clientid 
	inner join tbluserclientaccess uc on uc.userid = uca.userid and c.created between uc.clientcreatedfrom and uc.clientcreatedto
	inner join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = c.agencyid
	where cbt.batchdate >= @startDate  
	group by  convert(varchar(10),cbt.batchdate,101) 

	select count(cb.commchargebackid) as Qty, sum(cb.amount) as Amount, convert(varchar(10),cbt.batchdate,101) as [period] 
	into #t
	from tblcommchargeback cb
	inner join tblcommbatch cbt on cbt.commbatchid = cb.commbatchid 
	inner join tblcommstruct cs on cs.commstructid = cb.commstructid
	inner join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID	
	inner join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	inner join tblregisterpayment rp on rp.registerpaymentid = cb.registerpaymentid
	inner join tblregister r on r.registerid = rp.feeregisterid
	inner join tblclient c on c.clientid = r.clientid 
	inner join tbluserclientaccess uc on uc.userid = uca.userid and c.created between uc.clientcreatedfrom and uc.clientcreatedto
	inner join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = c.agencyid
	where cbt.batchdate >= @startDate 
	group by  convert(varchar(10),cbt.batchdate,101)

	Update @CommVSChargeBack Set
	ChargeBackCount = t.Qty,
	ChargeBackAmount = t.Amount
	From @CommVSChargeBack c
	join #t t on t.period = c.period

	Insert into  @CommVSChargeBack( ChargeBackCount, ChargeBackAmount, Period)
	Select  t.qty, t.amount, t.period 
	from #t t
	where t.period not in (select period from @CommVSChargeBack)

	declare @income varchar(1000), @chargeback varchar(1000), @net varchar(1000), @balance varchar(1000)

--  **Leave out until we start actually calculating the running balance
--	select @balance = coalesce(@balance + ', ', '') + cast(0 as varchar(20)) + ' [' +  cast(month(vc.transactiondate) as varchar) + '/' + cast(day(vc.transactiondate) as varchar)  + ']'
--	from @vtblCal as vc 
--	left outer join @CommVSChargeBack as ccb on convert(varchar(10),ccb.period,101) = convert(varchar(10),vc.transactiondate,101)
--	order by vc.transactiondate

	select @income = coalesce(@income + ', ', '') + cast(isnull(CommissionAmount,0) as varchar(20)) + ' [' +  cast(month(vc.transactiondate) as varchar) + '/' + cast(day(vc.transactiondate) as varchar)  + ']'
	from @vtblCal as vc 
	left outer join @CommVSChargeBack as ccb on convert(varchar(10),ccb.period,101) = convert(varchar(10),vc.transactiondate,101)
	order by vc.transactiondate

	select @chargeback = coalesce(@chargeback + ', ', '') + cast(isnull(ChargeBackAmount,0) as varchar(20)) 
	from @vtblCal as vc 
	left outer join @CommVSChargeBack as ccb on convert(varchar(10),ccb.period,101) = convert(varchar(10),vc.transactiondate,101)
	order by vc.transactiondate

	select @net = coalesce(@net + ', ', '') + cast((isnull(CommissionAmount,0) - isnull(ChargeBackAmount,0)) as varchar(20)) 
	from @vtblCal as vc 
	left outer join @CommVSChargeBack as ccb on convert(varchar(10),ccb.period,101) = convert(varchar(10),vc.transactiondate,101)
	order by vc.transactiondate

	exec('
		select ''Gross Fee Payments'' [Label], ' + @income + '
		union all
		select ''Chargebacks'', ' + @chargeback + '
		union all 
		select ''Net Fee Payments'', ' + @net
		)
	drop table #t
END
GO
/****** Object:  StoredProcedure [dbo].[stp_CreditorHistoryStats]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_CreditorHistoryStats]
as
begin

	select h.createdby, u.firstname + ' ' + u.lastname [name], ug.name [dept],
		sum(case when h.validated = 1 then 1 else 0 end) [validated],
		sum(case when h.approved = 1 then 1 else 0 end) [approved],
		sum(case when h.duplicate = 1 then 1 else 0 end) [duplicates],
		sum(case when h.validated = 0 and h.approved = 0 and h.duplicate = 0 and c.creditorid is not null then 1 else 0 end) [pending],
		count(h.creditorhistoryid) [total],
		max(h.created) [lastInsertion]
	from tblcreditorhistory h
	left join tblcreditor c on c.creditorid = h.creditorid
	left join tbluser u on u.userid = h.createdby
	left join tblusergroup ug on ug.usergroupid = u.usergroupid
	group by h.createdby, u.firstname, u.lastname, ug.name
	order by [total] desc, u.firstname, u.lastname

end
GO
/****** Object:  StoredProcedure [dbo].[stp_ExcludeACHWarning]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ExcludeACHWarning]
@ItemId int,
@ItemType varchar(50),
@IsMulti bit,
@Scheduled datetime,
@Exclude bit
AS
BEGIN
If @Exclude = 1
	Begin
		if Not Exists(select top 1 WarningId from tblACHWarning  Where ItemId = @ItemId and  ItemType = @ItemType and  MultiDeposit = @IsMulti and Scheduled = @Scheduled)
			Insert into tblACHWarning(ItemId, ItemType, MultiDeposit, Scheduled) Values(@ItemId, @ItemType, @IsMulti, @Scheduled)
	End
Else
	Delete From tblACHWarning
	Where ItemId = @ItemId and  ItemType = @ItemType and  MultiDeposit = @IsMulti and Scheduled = @Scheduled
END
GO
/****** Object:  StoredProcedure [dbo].[stp_hardship_getClientHardship]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_hardship_getClientHardship]
(
@clientid int
)
as
BEGIN
	SELECT     
		chd.ClientHardshipDataId
		, chd.ClientID
		, chd.MarriageTypeID
		, chd.NumOfChildren
		, chd.NumOfGrandChildren
		, chd.IsReceivingStateAssistance
		, chd.IsReceivingStateAssistanceExplain
		, chd.HasClientReFinanced
		, chd.EquityValueOfHome
		, chd.ReasonForDebt
		, chd.DoApplicantsHaveAssets
		, chd.AdditionalInformation
		, chd.Created
		, chd.LastModified
		, chd.IsHardShipActive
		, c.FirstName + ' ' + c.LastName AS CreatedBy
		, l.FirstName + ' ' + l.LastName AS LastModifiedBy
	FROM         
		tblClientHardshipData AS chd 
		INNER JOIN tblUser AS c ON chd.CreatedBy = c.UserID 
		INNER JOIN tblUser AS l ON chd.LastModifiedBy = l.UserID
	WHERE chd.ClientID = @clientid and deleted is null
END


GRANT EXEC ON stp_hardship_getClientHardship TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAgencyParentList]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GetAgencyParentList] 
	@AgencyID int  
AS
BEGIN
	SET NOCOUNT ON;

	SELECT	a.AgencyId [AgencyId],
			a.[Name] 
	FROM tblAgency a
	INNER JOIN tblChildAgency c ON (a.AgencyId = c.ParentAgencyId)
	WHERE c.AgencyId = @AgencyId
	ORDER BY a.[Name]
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientsIncompleteData]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetClientsIncompleteData]
	(
		@agencyId int
	)

as

select
	c.clientid,
	p.firstname,
	p.lastname,
	tblAgencyExtraFields01.DebtTotal,
	c.created  as HireDate,
	(SELECT Top 1 Created FROM tblRoadmap WHERE ClientId=c.ClientId order by roadmapid desc) as StatusChanged
	
from
	tblclient c 
	inner join tblperson p on c.primarypersonid=personid 
	left outer join tblAgencyExtraFields01 ON c.ClientId=tblAgencyExtraFields01.ClientId
where 
	c.currentclientstatusid=24
	and C.agencyid=@agencyid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetC21ExceptionReport]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[stp_GetC21ExceptionReport]
@ReportId int
AS
Begin
Declare @report table(ReportDetailId int,
					 ReportId int,
					 TransactionId varchar(255),
 					 [Status] int,
 					 [State] int,
					 CheckNumber varchar(50),
					 CheckType int,
					 ShadowStoreId varchar(255),
					 DepositId int,
					 Amount money,
					 ClientId int,
					 ClientName varchar(255),
					 ReasonCode varchar(255),
					 ReasonDescription varchar(255),
					 CreatedDate varchar(50),
					 ReceivedDate varchar(50),
					 ProcessedDate varchar(50),
					 FrontImagePath varchar(255),
					 ToDo varchar(255))
					 
--Insert C21 Records					 
Insert Into @report(ReportDetailId, ReportId,  TransactionId, 
					[Status], [State], CheckNumber, CheckType,
					ShadowStoreId, DepositId, Amount,
					ClientId, ClientName,
					ReasonCode, ReasonDescription, CreatedDate, ReceivedDate, ProcessedDate, FrontImagePath, ToDo)
Select r.ReportDetailId, 
	   r.ReportId,  
	   r.TransactionId,  
	   t.Status,
	   t.State,
	   t.CheckNumber,
	   t.CheckType,
	   t.AccountNumber,
	   t.DepositId,
	   t.Amount, 
	   c.clientid,
	   p.firstname + ' ' + p.lastname,
	   t.ExceptionCode AS [ReasonCode],
	   isnull(CASE WHEN t.Status in (1,2)  THEN (Select top 1 ReasonDescription From tblChecksiteStatusReason Where ReasonCode = t.ExceptionCode)
				   WHEN t.Status = 3 THEN (Select top 1 BouncedDescription From tblBouncedReasons Where BouncedCode = t.ExceptionCode)
   				   WHEN t.Status = 0 THEN 'Match not found'
				   ELSE t.Notes END, '') AS [ReasonDescription],
	   convert(varchar,t.Created,101),
	   convert(varchar,t.ReceivedDate,101), 
	   convert(varchar,t.ProcessedDate,101),
  	   isnull(t.FrontImagePath, '') AS [FrontImagePath],
  	   CASE WHEN t.Status = 2  THEN 'Match Manually/ Void if needed'
	   ELSE 'Match Manually/ Clear if needed' END
From tblProcessingReportDetail r
inner join tblProcessingReportState s on s.StateId = r.StateId 
inner join tblC21BatchTransaction t on t.transactionid = r.transactionid
left join tblclient c on c.accountnumber = t.accountnumber
left join tblperson p on p.personid = c.primarypersonid
Where r.ReportId = @ReportId 
And s.StateGroupId = 3
And r.StateId in (4,5)
And r.TransactionType in (5,7)

--Return Data
Select * from @report
Order By  ReportDetailId

--Return all C21 that have not been assigned yet
Select 
	   b.TransactionId as TransactionId,  
	   b.Status as [Status],
	   b.State as [State],
	   b.CheckNumber as [CheckNumber],
	   b.CheckType as [CheckType],
	   b.AccountNumber as [AccountNumber],
	   b.Amount as [Amount], 
  	   c.clientid as [ClientId],
	   p.firstname + ' ' + p.lastname as [ClientName],
	   b.ExceptionCode AS [ReasonCode],
	   isnull(CASE WHEN b.Status in (1,2)  THEN (Select top 1 ReasonDescription From tblChecksiteStatusReason Where ReasonCode = b.ExceptionCode)
				   WHEN b.Status = 3 THEN (Select top 1 BouncedDescription From tblBouncedReasons Where BouncedCode = b.ExceptionCode)
   				   WHEN b.Status = 0 THEN 'Match not found'
				   ELSE b.Notes END, '') AS [ReasonDescription],
	   convert(varchar, b.Created, 101) as [CreatedDate],
	   convert(varchar, b.ReceivedDate, 101) as [ReceivedDate], 
	   convert(varchar, b.ProcessedDate, 101) as [ProcessedDate],
  	   isnull(b.FrontImagePath, '') AS [FrontImagePath],
  	   DateDiff(d, b.Created, GetDate()) as [Days]  
from tblc21batchtransaction  b
left join tblclient c on c.accountnumber = b.accountnumber
left join tblperson p on p.personid = c.primarypersonid
where b.hide = 0 and b.depositid is null and b.closed = 1
and DateDiff(d, b.Created, GetDate()) > 0

--Return all deposits that are pending for assignment
Select 
r.registerid as [DepositId], 
r.clientid as [ClientId],
c.accountnumber as [AccountNumber],
p.firstname + ' ' + p.lastname as [ClientName],
r.checknumber as [CheckNumber],
convert(varchar,r.created, 101) as [CreatedDate],
u1.username as [CreatedBy],
r.amount  as [Amount],
convert(varchar, r.hold, 101) as [HoldDate],
u2.username as [HoldBy],
convert(varchar, r.clear, 101) as [ClearDate],
u3.username as [ClearBy],
DateDiff(d, r.created, GetDate()) as Days
from tblregister r
inner join tblclient c on c.clientid = r.clientid and c.trustid = 22
inner join tblperson p on p.personid = c.primarypersonid
left join tblc21batchtransaction b on b.depositid = r.registerid
left join 
(select pk, max(dc) as DateChange from tblaudit where auditcolumnid = 4 and value = 22 group by pk) a on a.pk = c.clientid
left join tbluser u1 on u1.userid = r.createdby
left join tbluser u2 on u2.userid = r.holdby
left join tbluser u3 on u3.userid = r.clearby
where r.checknumber is not null
and r.entrytypeid = 3
and r.importid is null
and b.depositid is null
and (r.created >= a.DateChange or a.DateChange is null)
and r.bounce is null
and r.void is null
and DateDiff(d, r.created, GetDate()) > 2
and isnull(r.notC21,0) = 0 
Order by r.created

End
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneyNetIncome]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AttorneyNetIncome]
(
	@companyid int
)
as
begin

declare @vtblCal table (TransactionDate datetime)
declare @startdate datetime 
declare @payments varchar(1000), @chargebacks varchar(1000), @net varchar(1000);

-- fill calendar
with mycte as
(
	select cast('1/1/' + cast(year(getdate()) as varchar) as datetime) DateValue
	union all
	select DateValue + 1
	from    mycte    
	where   DateValue + 1 < getdate()
)

-- get only weekdays
insert @vtblCal
select top 6 DateValue
from mycte
where CONVERT(BIT, CASE WHEN datepart(dw, DateValue) IN (1,7) THEN 0 ELSE 1 END) = 1 and datevalue < getdate() order by datevalue desc
OPTION (MAXRECURSION 0)

select @startdate = min(TransactionDate) from @vtblCal


select sum(cp.amount) [Amount], convert(varchar(10),cbt.batchdate,101) as [batchdate]
into #payments
from tblcommpay cp
join tblcommbatch cbt on cbt.commbatchid = cp.commbatchid 
join tblcommstruct cs on cs.commstructid = cp.commstructid and cs.companyid = @companyid
where cbt.batchdate >= @startDate  
group by convert(varchar(10),cbt.batchdate,101) 


select sum(cb.amount) [Amount], convert(varchar(10),cbt.batchdate,101) [batchdate]
into #chargebacks
from tblcommchargeback cb
join tblcommbatch cbt on cbt.commbatchid = cb.commbatchid 
join tblcommstruct cs on cs.commstructid = cb.commstructid and cs.companyid = @companyid
where cbt.batchdate >= @startDate 
group by convert(varchar(10),cbt.batchdate,101)


select @payments = coalesce(@payments + ',','') + cast(amount as varchar(20)) + ' [' + cast(month(batchdate) as varchar(2)) + '/' + cast(day(batchdate) as varchar(2)) + ']'
from #payments
order by batchdate

select @chargebacks = coalesce(@chargebacks + ',','') + cast(isnull(amount,0) as varchar(20))
from #chargebacks
order by batchdate

select @net = coalesce(@net + ',','') + cast(p.amount - isnull(c.amount,0) as varchar(20)) 
from #payments p
left join #chargebacks c on c.batchdate = p.batchdate
order by p.batchdate


exec('
	select ''Gross Fee Payments'' [label],' + @payments + '
	union all
	select ''Chargebacks'', ' + @chargebacks + '
	union all
	select ''Net Fee Payments'', ' + @net
)


drop table #payments
drop table #chargebacks 

end
GO
/****** Object:  StoredProcedure [dbo].[get_ClientAccountOverviewList]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <03 - 25 February 2010>
      Category    : [TimeMatter]
      Type        : {update}
      Description : get_ClientAccoutOverviewList
				  : Retrieves the counts for the opened and closed matters	
*/
CREATE PROCEDURE [dbo].[get_ClientAccountOverviewList]
(
	@clientId int,
	@settled bit=null,
	@removed bit=null
)

AS
SET NOCOUNT ON
select distinct
	a.AccountId,
	a.OriginalAmount,
	a.CurrentAmount, cci.creditorinstanceid,
	oci.accountnumber as OriginalAccountNumber,
	oci.referencenumber as OriginalReferenceNumber,
	oc.creditorid as OriginalCreditorID,
	oc.name as OriginalCreditorName,
	(ocp.areacode + ocp.number + ' ' + isnull(ocp.extension,'')) as OriginalCreditorPhone,
	cci.accountnumber as CurrentAccountNumber,
	cci.referencenumber as CurrentReferenceNumber,
	cc.creditorid as CurrentCreditorID,
	cc.name as CurrentCreditorName,
	cc.name+'-'+RIGHT(cci.accountnumber,4) as CreditorName,
	(ccp.AreaCode + ccp.Number + ' ' + isnull(ccp.Extension,'')) as CurrentCreditorPhone,
	[as].AccountStatusID,
	[as].Code as AccountStatusCode,
	[as].Description as AccountStatusDescription,
	isnull(n.numnotes,0) + isnull(pc.numphonecalls,0) as numcomms,
	case when verified is null then 0 else 1 end as verified,
	a.settled,
	a.removed,
(select count(*) from tblmatter m inner join tblmatterstatus s on s.matterstatusid=m.matterstatusid 
left outer join tblcreditorinstance c on m.creditorinstanceid=c.creditorinstanceid
where IsNull(m.IsDeleted,0)=0 and c.accountid=a.accountid and IsNull(s.IsMatterActive,0)=0) as ClosedMatters,
(select count(*) from tblmatter m inner join tblmatterstatus s on s.matterstatusid=m.matterstatusid 
left outer join tblcreditorinstance c on m.creditorinstanceid=c.creditorinstanceid
where IsNull(m.IsDeleted,0)=0 and c.accountid=a.accountid and IsNull(s.IsMatterActive,0)=1) as ActiveMatters

from
	tblaccount a inner join
	tblcreditorinstance oci ON a.originalcreditorinstanceid = oci.creditorinstanceid inner join
	tblcreditor oc ON oci.creditorid = oc.creditorid inner join
	tblcreditorinstance cci ON a.currentcreditorinstanceid = cci.creditorinstanceid inner join
	tblcreditor cc ON cci.creditorid = cc.creditorid left join
	tblaccountstatus [as] ON a.accountstatusid = [as].accountstatusid left outer join
	(
		select
			isnull(count(distinct noteid),0) as numnotes,
			relationid
		from
			tblnoterelation
		where
			relationtypeid = 2
		group by
			relationid
	)
	as n on a.accountid = n.relationid left outer join
	(
		select
			isnull(count(distinct phonecallid),0) as numphonecalls,
			relationid
		from
			tblphonecallrelation
		where
			relationtypeid = 2
		group by
			relationid
	)
	as pc on a.accountid = pc.relationid left outer join
	(
		select 
			creditorid,
			p.*
		from
			tblcreditorphone cp inner join
			tblphone p on cp.phoneid=p.phoneid
		where 
			p.phoneid = (select top 1 cp2.phoneid from tblcreditorphone cp2 where cp2.creditorid = cp.creditorid)
	)
	ocp on ocp.creditorid = oci.creditorid left outer join
	(
		select 
			creditorid,
			p.*
		from
			tblcreditorphone cp inner join
			tblphone p on cp.phoneid=p.phoneid
		where 
			p.phoneid = (select top 1 cp2.phoneid from tblcreditorphone cp2 where cp2.creditorid = cp.creditorid)
	)
	ccp on ccp.creditorid = cci.creditorid
where
	clientid = @clientId
	and	(
			@settled is null or 
			(@settled=1 and not settled is null) or
			(@settled=0 and settled is null)
		)
	and	(
			@removed is null or 
			(@removed=1 and not removed is null) or
			(@removed=0 and removed is null)
		)
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertProcessingReportDetail]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertProcessingReportDetail]
@ReportId int,
@StateId int,
@TransactionId varchar(50),
@TransactionType int,
@Notes varchar(max)
AS
BEGIN
	Insert into tblProcessingReportDetail(ReportId, StateId, TransactionId, TransactionType, Notes)
	Values (@ReportId, @StateId, @TransactionId, @TransactionType, @Notes)
	
	Select scope_identity()

END
GO
/****** Object:  StoredProcedure [dbo].[stp_Report_AccountsOverPercentage_Fulfillment]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Report_AccountsOverPercentage_Fulfillment]
(
	@hiredate1 datetime = null,
	@hiredate2 datetime = null,
	@percent1 float = null,
	@percent2 float = null,
	@sdabal1 float = 0,
	@sdabal2 float = null,
	@accountbal1 float = null,
	@accountbal2 float = null,
	@clientstatusids varchar(999) = null,
	@clientstatusidsop varchar(5) = '',
	@agencyids varchar(999) = null,
	@agencyidsop varchar(5) = '',
	@accountstatusids varchar(999) = null,
	@accountstatusidsop varchar(5) = null,
	@Assigned bit = null
)

as

create table #tmpAccountStatusIds(AccountStatusID int)
if @accountstatusids is null begin
	insert into #tmpAccountStatusIds select AccountStatusId from tblAccountStatus
end else begin
	exec('insert into #tmpAccountStatusIds select AccountStatusId from tblAccountStatus where ' + @accountstatusidsop + ' AccountStatusId in(' + @accountstatusids + ')')
end

create table #tmpAgencyIds(AgencyId int)
if @agencyids is null begin
	insert into #tmpagencyids select agencyid from tblagency
end else begin
	
	exec('insert into #tmpAgencyIds select agencyid from tblagency where ' + @agencyidsop + ' agencyid in(' + @agencyids + ')')
end

create table #tmpClientStatusIds(ClientStatusId int) 
if @clientstatusids is null begin
	insert into #tmpclientstatusids select clientstatusid from tblclientstatus
end else begin
	exec('insert into #tmpClientStatusIds select clientstatusid from tblclientstatus where ' + @clientstatusidsop + ' clientstatusid in(' + @clientstatusids + ')')
end

select 
	c.clientid,
	balance
into
	#tmpbal
from
	tblclient c inner join
	tblregister r on c.clientid=r.clientid
where 
	r.registerid = (select top 1 registerid from tblregister where tblregister.clientid=r.clientid order by transactiondate desc, registerid desc)
	and balance >= isnull(@sdabal1, balance)
	and balance <= isnull(@sdabal2, balance)
	and	(@assigned is null or (case when c.assignedmediator is null then 0 else 1 end) = @assigned)

select 
	c.clientid,
	c.accountnumber,
	c.created,
	c.agencyid,
	c.currentclientstatusid,
	c.assignedmediator,
	c.primarypersonid
into
	#tmpclient
from 
	tblclient c
where
	agencyid in (select agencyid from #tmpagencyids) and
	c.currentclientstatusid in (select clientstatusid from #tmpclientstatusids) and
	c.created >= isnull(@hiredate1, c.created) and 
	c.created <= isnull(@hiredate2, c.created) 
	and	(@assigned is null or (case when c.assignedmediator is null then 0 else 1 end) = @assigned)

select
	c.*,
	a.currentcreditorinstanceid,
	a.accountid,
	a.currentamount as accountbalance,
	sdabal.balance as sdabalance,
	a.accountstatusid
into
	#tmpClientAccounts
from
	#tmpclient c inner join
	tblaccount a on c.clientid = a.clientid  inner join
	#tmpbal sdabal on c.clientid=sdabal.clientid
where
	(
		a.accountstatusid in (select accountstatusid from #tmpaccountstatusids) or 
		(accountstatusid is null and @accountstatusidsop='not')
	) and
	a.currentamount >= isnull(@accountbal1, a.currentamount) and 
	a.currentamount <= isnull(@accountbal2, a.currentamount) and
	isnull(a.currentamount * @percent1, sdabal.balance) <= sdabal.balance and
	isnull(a.currentamount * @percent2, sdabal.balance) >= sdabal.balance
	and	(@assigned is null or (case when c.assignedmediator is null then 0 else 1 end) = @assigned)


select
	distinct(c.clientid),
	c.assignedmediator,
	p.lastname,
	c.sdabalance,
	count(c.accountid) as accounts
from
	#tmpclientaccounts c inner join
	tblcreditorinstance ci on c.currentcreditorinstanceid=ci.creditorinstanceid inner join
	tblcreditor cr on ci.creditorid=cr.creditorid inner join
	tblstate crstate on cr.stateid=crstate.stateid inner join
	tblperson p on c.primarypersonid=p.personid
group by
	c.clientid,
	c.assignedmediator,
	p.lastname,
	c.sdabalance

drop table #tmpbal
drop table #tmpclient
drop table #tmpclientstatusids
drop table #tmpagencyids
drop table #tmpClientAccounts
drop table #tmpAccountStatusIds
GO
/****** Object:  StoredProcedure [dbo].[stp_GetChildAgencyList]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GetChildAgencyList] 
	@ParentAgencyID int = -1 
AS
BEGIN
	SET NOCOUNT ON;

	SELECT	a.AgencyId [AgencyId],
			a.[Name] 
	FROM tblAgency a
	INNER JOIN tblChildAgency c ON (a.AgencyId = c.AgencyId)
	WHERE c.ParentAgencyId = @ParentAgencyId
	ORDER BY a.[Name]
END
GO
/****** Object:  Table [dbo].[tblRegisterPaymentDeposit]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblRegisterPaymentDeposit](
	[RegisterPaymentDepositID] [int] IDENTITY(1,1) NOT NULL,
	[RegisterPaymentID] [int] NOT NULL,
	[DepositRegisterID] [int] NOT NULL,
	[Amount] [money] NOT NULL,
	[Voided] [bit] NOT NULL CONSTRAINT [DF_tblRegisterPaymentDeposit_Voided]  DEFAULT ((0)),
	[Bounced] [bit] NOT NULL CONSTRAINT [DF_tblRegisterPaymentDeposit_Bounced]  DEFAULT ((0)),
	[ModifiedBy] [int] NULL,
	[VoidDate] [datetime] NULL,
	[BounceDate] [datetime] NULL,
	[Created] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[Modified] [datetime] NULL,
	[ReferenceRegisterPaymentDepositID] [int] NULL,
 CONSTRAINT [PK_tblRegisterPaymentDeposit] PRIMARY KEY CLUSTERED 
(
	[RegisterPaymentDepositID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegisterPaymentDeposit_7_1102626971__K6_K5_K3_4] ON [dbo].[tblRegisterPaymentDeposit] 
(
	[Bounced] ASC,
	[Voided] ASC,
	[DepositRegisterID] ASC
)
INCLUDE ( [Amount]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegisterPaymentDeposit_8_1102626971__K2_K3_1_4_5_6] ON [dbo].[tblRegisterPaymentDeposit] 
(
	[RegisterPaymentID] ASC,
	[DepositRegisterID] ASC
)
INCLUDE ( [Amount],
[RegisterPaymentDepositID],
[Voided],
[Bounced]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegisterPaymentDeposit_8_1102626971__K3_K2_1_4_5_6] ON [dbo].[tblRegisterPaymentDeposit] 
(
	[DepositRegisterID] ASC,
	[RegisterPaymentID] ASC
)
INCLUDE ( [Amount],
[RegisterPaymentDepositID],
[Bounced],
[Voided]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[stp_GetRelatablesbak]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetRelatablesbak]
	(
		@relationtypeid int,
		@dependencyid int	--ClientID when relatable to client
							--CreditorID for contact
							
	)
as
declare @table varchar(50)


declare @select varchar(8000)
declare @join varchar(8000)
declare @where varchar(8000)

set @join=(select [table] from tblrelationtype where relationtypeid=@relationtypeid)

if @join='tblClient' begin
	set @join = @join + ' c inner join tblperson p on c.primarypersonid=p.personid'
	set @select = 'c.clientid as RelationID, p.firstname [First Name], p.LastName [Last Name], p.SSN'
	set @where = 'c.clientid=' + convert(varchar, @dependencyid)
end else if @join='tblAccount' begin
	set @join = @join + ' a inner join tblcreditorinstance ci on a.currentcreditorinstanceid=ci.creditorinstanceid 
		inner join tblcreditor c on ci.creditorid=c.creditorid'
	set @select = 'a.accountid as RelationID, c.name [Creditor], ci.accountnumber [Account Number],ci.referencenumber [Reference Number]'
	set @where = 'a.clientid=' + convert(varchar, @dependencyid)
end else if @join='tblContact' begin
	set @join = @join + ' c'
	set @select = 'c.contactid as RelationID, c.firstname [First Name], c.lastname [Last Name], c.EmailAddress Email'
	set @where = 'c.creditorid=' + convert(varchar, @dependencyid)
end else if @join='tblRegister' begin
	set @join = @join + ' r inner join tblentrytype et on r.entrytypeid=et.entrytypeid'
	set @select = 'r.registerid as RelationID, et.Name [Entry Type], r.transactiondate [Date] , r.amount [Amount]'
	set @where = 'r.clientid=' + convert(varchar, @dependencyid)
end else if @join='tblRegisterPayment' begin
	set @join = @join + ' rp inner join tblregister r on rp.feeregisterid=r.registerid inner join tblentrytype et on r.entrytypeid=et.entrytypeid'
	set @select = 'rp.registerpaymentid as RelationID, et.Name [Fee Type], rp.paymentdate [Date], rp.amount [Amount]'
	set @where = 'r.clientid=' + convert(varchar, @dependencyid)
end

if len(@select)>0
	exec ('select ' + @select + ' from ' + @join + ' where ' + @where)
else
	select 1 as ID, 'Add to stp_GetRelatables' as ToImplement
GO
/****** Object:  Table [dbo].[tblLanguage]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblLanguage](
	[LanguageID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[Default] [bit] NOT NULL CONSTRAINT [DF_tblLanguage_Default]  DEFAULT ((0)),
	[Created] [datetime] NOT NULL,
	[CreatedBy] [varchar](50) NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [varchar](50) NOT NULL,
 CONSTRAINT [PK_tblLanguage] PRIMARY KEY CLUSTERED 
(
	[LanguageID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_GetLocalCounselListbyClient]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Revision	: <05 - 01 March 2010>
	Category	: [TimeMatter]
	Type        : {New}
	Decription	: Returns Valid Local Counsel addflag to show in house attorney
*/
CREATE procedure  [dbo].[stp_GetLocalCounselListbyClient]
(
	@ClientId int ,
	@ShowInhouse bit = 0	
)

AS


IF @ShowInhouse=1
BEGIN
SELECT  

*

from
(
select 

cstate.CompanyId,
--s.StateId,
--s.Abbreviation,
a.AttorneyId,
a.FirstName,
a.MiddleName,
a.LastName,
CASE WHEN a.MiddleName is NULL then a.FirstName+' '+a.LastName
	 WHEN a.MiddleName IN('',' ') then a.FirstName+' '+a.LastName
	 else a.FirstName +' '+ a.MiddleName +' '+a.LastName  end as LocalCounsel,
a.IsInhouse,
 'Firm: '+ ltrim(rtrim(IsNull(cstate.[Name],'')))+'<br>' +'ADDRESS: '+ ltrim(rtrim(IsNull(a.Address1,'')))+' '+ltrim(rtrim(IsNull(a.Address2,'')))+'<br>'+ltrim(rtrim(IsNull(a.City,'')))+'<br>'+ltrim(rtrim(IsNull(a.State,'')))+' '+ltrim(rtrim(IsNull(a.Zip,''))) +'<br>'+
'PHONE: '+ltrim(rtrim(Isnull(a.Phone1,'')))+' '+ltrim(rtrim(IsNull(a.Phone2,''))) +'<br>'+ 'EMAIL: '+ltrim(rtrim(IsNull(a.EmailAddress,''))) as Details



from 

tblAttyStates tas 
join tblState s  on s.Abbreviation= tas.State 
join tblAttorney a on a.AttorneyId = tas.AttorneyId
join 
( select 
c.ClientId,
c.CompanyId,
p.StateId,
co.Name 

from dbo.tblClient c 
join dbo.tblPerson p on p.Personid=c.PrimaryPersonId
join dbo.tblCompany co on co.CompanyId =c.CompanyId
where c.ClientId =@ClientId
) cstate on cstate.StateId = s.StateId



UNION


SELECT 

0 as CompanyId,
a.AttorneyId,
a.FirstName,
a.MiddleName,
a.LastName,
CASE WHEN a.MiddleName is NULL then a.FirstName+' '+a.LastName
	 WHEN a.MiddleName IN('',' ') then a.FirstName+' '+a.LastName
	 else a.FirstName +' '+ a.MiddleName +' '+a.LastName  end as LocalCounsel
,a.IsInhouse, 'ADDRESS: '+ ltrim(rtrim(IsNull(a.Address1,'')))+' '+ltrim(rtrim(IsNull(a.Address2,'')))+'<br>'+ltrim(rtrim(IsNull(a.City,'')))+'<br>'+ltrim(rtrim(IsNull(a.State,'')))+' '+ltrim(rtrim(IsNull(a.Zip,''))) +'<br>'+
'PHONE: '+ltrim(rtrim(Isnull(a.Phone1,'')))+' '+ltrim(rtrim(IsNull(a.Phone2,''))) +'<br>'+ 'EMAIL: '+ltrim(rtrim(IsNull(a.EmailAddress,''))) as Details

from dbo.tblAttorney a where a.IsInhouse =1
)b

order by LocalCounsel


END

ELSE 

BEGIN


select 

cstate.CompanyId,
--s.StateId,
--s.Abbreviation,

a.AttorneyId,
a.FirstName,
a.MiddleName,
a.LastName,
CASE WHEN a.MiddleName is NULL then a.FirstName+' '+a.LastName
	 WHEN a.MiddleName IN('',' ') then a.FirstName+' '+a.LastName
	 else a.FirstName +' '+ a.MiddleName +' '+a.LastName  end as LocalCounsel,
a.IsInhouse,
 'Firm: '+ ltrim(rtrim(IsNull(cstate.[Name],'')))+'<br>' +'ADDRESS: '+ ltrim(rtrim(IsNull(a.Address1,'')))+' '+ltrim(rtrim(IsNull(a.Address2,'')))+'<br>'+ltrim(rtrim(IsNull(a.City,'')))+'<br>'+ltrim(rtrim(IsNull(a.State,'')))+' '+ltrim(rtrim(IsNull(a.Zip,''))) +'<br>'+
'PHONE: '+ltrim(rtrim(Isnull(a.Phone1,'')))+' '+ltrim(rtrim(IsNull(a.Phone2,''))) +'<br>'+ 'EMAIL: '+ltrim(rtrim(IsNull(a.EmailAddress,''))) as Details



from 

tblAttyStates tas 
join tblState s  on s.Abbreviation= tas.State 
join tblAttorney a on a.AttorneyId = tas.AttorneyId
join 
( select 
c.ClientId,
c.CompanyId,
p.StateId,
co.Name 

from dbo.tblClient c 
join dbo.tblPerson p on p.Personid=c.PrimaryPersonId
join dbo.tblCompany co on co.CompanyId =c.CompanyId
where c.ClientId =@ClientId
) cstate on cstate.StateId = s.StateId

order by IsInhouse, (CASE WHEN a.MiddleName is NULL then a.FirstName+' '+a.LastName
	 WHEN a.MiddleName IN('',' ') then a.FirstName+' '+a.LastName
	 else a.FirstName +' '+ a.MiddleName +' '+a.LastName  end ) asc
 



END
GO
/****** Object:  StoredProcedure [dbo].[stp_RunningBalance]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_RunningBalance]
(
	@startdate datetime,
	@enddate datetime--,
	--@userid int
)
as
begin

declare 
	@date datetime, 
	@payments money, 
	@chargebacks money,
	@dailynet money, 
	@runningbal money,
	@companyid int,
	@curcompanyid int,
	@commrecid int,
	@curcommrecid int,
	@LastProjection varchar(10)

declare @vtblCal table (TransactionDate datetime)


create table #comms
(
	commrecid int,
	companyid int,
	date varchar(10),
	payments money,
	chargebacks money,
	entrytypeid int
)

create table #temp2
(
	commrecid int,
	companyid int,
	date datetime,
	payments money,
	chargebacks money,
	dailynet money default(0),
	runningbal money default(0)
)

create table #batches
(
	commrecid int,
	companyid int,
	date varchar(10),
	payments money,
	chargebacks money
)

create table #results
(
	commrec varchar(50),
	company varchar(30),
	date datetime,
	payments money,
	chargebacks money,
	dailynet money,
	calcdnet money,
	runningbal money,
	batched money
)

create table #startdates
(
	commrecid int,
	companyid int,
	startdate datetime
);


-- fill calendar
with mycte as
(
	select cast('1/1/' + cast(year(getdate()) as varchar) as datetime) DateValue
	union all
	select DateValue + 1
	from mycte    
	where DateValue + 1 < getdate()
)

insert @vtblCal
select DateValue
from mycte
where --CONVERT(BIT, CASE WHEN datepart(dw, DateValue) IN (1,7) THEN 0 ELSE 1 END) = 1 and 
	datevalue between @startdate and @enddate order by datevalue desc
OPTION  (MAXRECURSION 0)


set @enddate = dateadd(day,1,@enddate)
select @LastProjection = convert(varchar(10), max(ProjectedOn), 101) from tblPotentialCommPay

if @enddate > getdate() begin --and @userid = -1 begin
	insert @vtblCal select cast(convert(varchar(10), dateadd(day,1,getdate()), 101) as datetime)
	insert @vtblCal select cast(convert(varchar(10), dateadd(day,2,getdate()), 101) as datetime)
	insert @vtblCal select cast(convert(varchar(10), dateadd(day,3,getdate()), 101) as datetime)
	insert @vtblCal select cast(convert(varchar(10), dateadd(day,4,getdate()), 101) as datetime)
	insert @vtblCal select cast(convert(varchar(10), dateadd(day,5,getdate()), 101) as datetime)
end


-- startdate has to be a day that a batch went out which means the prev business day has a $0 running bal
-- exclude and commrecs that haven't had a batch in over 30 days. they're likely no longer getting any
insert #startdates (commrecid, companyid, startdate)
select cbt.commrecid, cbt.companyid, cast(convert(char(10),max(b.batchdate),10) as datetime)
from tblcommbatch b
join tblcommbatchtransfer cbt on cbt.commbatchid = b.commbatchid
--join tblusercommrecaccess ucra on ucra.commrecid = cbt.commrecid and ucra.userid = @userid
--join tblusercompanyaccess uca on uca.companyid = cbt.companyid and uca.userid = ucra.userid 
where b.batchdate between dateadd(day,-30,@startdate) and dateadd(day,1,@startdate)
and cbt.companyid > 0
group by cbt.commrecid, cbt.companyid


-- payment acivity by day
insert
	#comms (commrecid, companyid, entrytypeid, date, payments)
SELECT
	cs.commrecid,
	c.companyid,
	r.entrytypeid,
	convert(varchar(10),rp.paymentdate,101),
	sum(cp.amount)		
FROM
	tblCommPay as cp
	join tblRegisterPayment as rp on rp.RegisterPaymentID = cp.RegisterPaymentID
	join tblRegister as r on r.RegisterID = rp.FeeRegisterID
	join tblClient as c on c.ClientID = r.ClientID
	join tblCommStruct as cs on cs.CommStructID = cp.CommStructID 
	--join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
	--join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid 
	join #startdates t on t.commrecid = cs.commrecid and t.companyid = cs.companyid
WHERE
	rp.paymentdate between t.startdate and @enddate
group by
	cs.commrecid, c.companyid, r.entrytypeid, convert(varchar(10),rp.paymentdate,101)


-- projected payments
insert into
	#comms (commrecid, companyid, entrytypeid, date, payments)
select 
	p.commrecid, p.companyid, entrytypeid, convert(varchar(10),fordate,101), sum(amount)
from tblpotentialcommpay p
--join tblusercommrecaccess ucra on ucra.commrecid = p.commrecid and ucra.userid = @userid	
--join tblusercompanyaccess uca on uca.companyid = p.companyid and uca.userid = ucra.userid 
where convert(varchar(10), ProjectedOn, 101) = @LastProjection
group by p.commrecid, p.companyid, entrytypeid, convert(varchar(10),fordate,101)


-- chargeback activity by day
insert into
	#comms (commrecid, companyid, entrytypeid, date, chargebacks)
SELECT
	cs.commrecid,
	c.companyid,
	r.entrytypeid,
	convert(varchar(10),cc.chargebackdate,101) [date],
	-sum(cc.amount) [chargebacks]
FROM
	tblCommChargeback as cc
	join tblRegisterPayment as rp on rp.RegisterPaymentID = cc.RegisterPaymentID
	join tblRegister as r on r.RegisterID = rp.FeeRegisterID
	join tblClient as c on c.ClientID = r.ClientID
	join tblCommStruct as cs on cs.CommStructID = cc.CommStructID 
	--join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
	--join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid 
	join #startdates t on t.commrecid = cs.commrecid and t.companyid = cs.companyid
WHERE
	cc.chargebackdate between t.startdate and @enddate
group by
	cs.commrecid, c.companyid, r.entrytypeid, convert(varchar(10),cc.chargebackdate,101)


insert #temp2 (commrecid, companyid, date, payments, chargebacks)
select commrecid, companyid, cast(date as datetime), isnull(sum(payments),0), isnull(sum(chargebacks),0)
from #comms
group by commrecid, companyid, date


set @curcommrecid = -1
set @curcompanyid = -1


declare cur cursor for 
	select commrecid, companyid, date, payments, chargebacks from #temp2 order by commrecid, companyid, date

open cur
fetch next from cur into @commrecid, @companyid, @date, @payments, @chargebacks
while @@fetch_status = 0 begin

	if @commrecid <> @curcommrecid begin
		set @runningbal = 0
		set @curcommrecid = @commrecid
	end

	if @companyid <> @curcompanyid begin
		set @runningbal = 0
		set @curcompanyid = @companyid
	end

	set @dailynet = @payments + @chargebacks + @runningbal

	if @dailynet > 0 begin
		-- pay them
		update #temp2 
		set dailynet = @dailynet, runningbal = 0
		where date = @date 
		and commrecid = @commrecid
		and companyid = @companyid

		set @runningbal = 0
	end
	else begin
		-- they have a running balance
		update #temp2 
		set dailynet = 0, runningbal = @dailynet
		where date = @date 
		and commrecid = @commrecid
		and companyid = @companyid

		set @runningbal = @dailynet
	end

	fetch next from cur into @commrecid, @companyid, @date, @payments, @chargebacks
end

close cur
deallocate cur


insert #results (commrec, company, date, payments, chargebacks, dailynet, calcdnet, runningbal, batched)
select r.display, c.name, v.transactiondate, isnull(t.Payments,0), isnull(t.Chargebacks,0), (isnull(t.Payments,0) + isnull(t.Chargebacks,0)), isnull(t.dailynet,0), isnull(t.RunningBal,0), isnull(b.amount,0)
from @vtblCal v
left join #temp2 t on t.date = v.transactiondate
left join 
(
	select cbt.commrecid, cbt.companyid, convert(varchar(10),b.batchdate,101) [date], sum(cbt.transferamount) [amount]
	from tblcommbatchtransfer cbt
	join tblcommbatch b on b.commbatchid = cbt.commbatchid
	join tblcommscen s on s.commscenid = b.commscenid
	join tblcommstruct cs on cs.commscenid = s.commscenid and cs.commrecid = cbt.commrecid and cs.parentcommrecid = cbt.parentcommrecid
	--join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
	--join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and uca.companyid = cbt.companyid
	where b.batchdate between @startdate and @enddate
	group by cbt.commrecid, cbt.companyid, convert(varchar(10),b.batchdate,101)

) b on b.date = t.date and b.commrecid = t.commrecid and b.companyid = t.companyid
left join tblcompany c on c.companyid = t.companyid
left join tblcommrec r on r.commrecid = t.commrecid
where t.companyid > 0


-- output
select distinct date
from #results
order by date

select distinct commrec
from #results
order by commrec

select distinct company
from #results
order by company

select commrec, company, date, Payments, Chargebacks, dailynet [Daily Net], runningbal [Running Balance], calcdnet [Calculated Net], Batched
from #results
order by commrec, company, date


-- payment detail
select
	cr.display [commrec],
	comp.name [company],
	e.displayname [feetype],
	date,
	payments [amount]
from #comms c
join tblcompany comp on comp.companyid = c.companyid
join tblentrytype e on e.entrytypeid = c.entrytypeid
join tblcommrec cr on cr.commrecid = c.commrecid
where c.payments is not null
order by commrec, company, feetype, date

-- chargeback detail
select
	cr.display [commrec],
	comp.name [company],
	e.displayname [feetype],
	date,
	chargebacks [amount]
from #comms c
join tblcompany comp on comp.companyid = c.companyid
join tblentrytype e on e.entrytypeid = c.entrytypeid
join tblcommrec cr on cr.commrecid = c.commrecid
where c.chargebacks is not null
order by commrec, company, feetype, date


--SELECT
--	cr.display [commrec],
--	comp.name [company],
--	e.displayname [feetype],
--	convert(varchar(10),rp.paymentdate,101) [date],
--	sum(cp.amount) [amount]	
--into
--	#paymentdetail	
--FROM
--	tblCommPay as cp
--	join tblRegisterPayment as rp on rp.RegisterPaymentID = cp.RegisterPaymentID
--	join tblRegister as r on r.RegisterID = rp.FeeRegisterID
--	join tblClient as c on c.ClientID = r.ClientID
--	join tblCommStruct as cs on cs.CommStructID = cp.CommStructID 
--	--join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
--	--join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid 
--	join #startdates t on t.commrecid = cs.commrecid and t.companyid = cs.companyid
--	join tblcompany comp on comp.companyid = cs.companyid
--	join tblentrytype e on e.entrytypeid = r.entrytypeid
--	join tblcommrec cr on cr.commrecid = cs.commrecid
--WHERE
--	rp.paymentdate between t.startdate and @enddate
--group by
--	cr.display, comp.name, e.displayname, convert(varchar(10),rp.paymentdate,101)
--
--select *
--from #paymentdetail
--order by commrec, company, feetype, date


select distinct e.displayname [feetype]
from #comms c
join tblentrytype e on e.entrytypeid = c.entrytypeid
order by feetype


drop table #comms
drop table #temp2
drop table #startdates
drop table #results
select * from @vtblCal
end
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationsGetSettlementAcceptanceFormData]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_NegotiationsGetSettlementAcceptanceFormData]
(
	@SettlementID as int
)
as
BEGIN
SELECT     TOP (1) 
s.CreditorAccountID
, s.ClientID
, p.FirstName
, p.LastName
, p.Street
, p.Street2
, p.City
, tblState.Abbreviation
, p.ZipCode
, tblClient.AccountNumber
, tblUser.FirstName + ' ' + tblUser.LastName AS Mediator
, tblAgency.Name AS Agency
, origcred.Name AS OriginalCreditor
, currcred.Name AS CurrentCreditor
, tblCreditorInstance_1.AccountNumber AS CreditorAcctNum
, tblCreditorInstance.ReferenceNumber
, isnull(s.SettlementDueDate,'') as SettlementDueDate
, tblAccount.CurrentAmount
, s.SettlementAmount
, isnull(s.SettlementAmtAvailable,'0.00') as [SettlementAmtAvailable]
, isnull(s.SettlementAmtBeingSent,'0.00') as [SettlementAmtBeingSent]
, isnull(s.SettlementAmtStillOwed,'0.00') as [SettlementAmtStillOwed]
, isnull(s.SettlementSavings,'0.00') as [SettlementSavings]
, isnull(s.SettlementFee,'0.00') as [SettlementFee]
, isnull(s.SettlementCost,'0.00') as [SettlementCost]
, isnull(s.OvernightDeliveryAmount,'0.00') as [OvernightDeliveryAmount]
, isnull(tblAccount.SettlementFeeCredit,'0.00') as [SettlementFeeCredit]
, isnull(s.SettlementFeeAmtAvailable,'0.00') as [SettlementFeeAmtAvailable]
, isnull(s.SettlementFeeAmtBeingPaid,'0.00') as [SettlementFeeAmtBeingPaid]
, isnull(s.SettlementFeeAmtStillOwed,'0.00') as [SettlementFeeAmtStillOwed]
,tblCreditorInstance.CreditorInstanceID
FROM         tblCreditor AS origcred INNER JOIN
                      tblCreditorInstance AS tblCreditorInstance_1 ON origcred.CreditorID = tblCreditorInstance_1.CreditorID RIGHT OUTER JOIN
                      tblCreditor AS currcred INNER JOIN
                      tblCreditorInstance ON currcred.CreditorID = tblCreditorInstance.CreditorID INNER JOIN
                      tblSettlements AS s INNER JOIN
                      tblClient ON s.ClientID = tblClient.ClientID INNER JOIN
                      tblPerson AS p ON tblClient.ClientID = p.ClientID INNER JOIN
                      tblState ON p.StateID = tblState.StateID INNER JOIN
                      tblUser ON s.CreatedBy = tblUser.UserID INNER JOIN
                      tblAgency ON tblClient.AgencyID = tblAgency.AgencyID INNER JOIN
                      tblAccount ON s.CreditorAccountID = tblAccount.AccountID ON tblCreditorInstance.CreditorInstanceID = tblAccount.CurrentCreditorInstanceID ON 
                      tblCreditorInstance_1.CreditorInstanceID = tblAccount.OriginalCreditorInstanceID
WHERE     (s.SettlementID = @SettlementID)
	ORDER BY tblCreditorInstance.Created DESC
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Negotiation_InsertCreditorInstance]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_Negotiation_InsertCreditorInstance]
(
@AccountID int,
@CreditorID int,
@ForCreditorID int,
@Acquired datetime,
@Amount money,
@OriginalAmount money,
@AccountNumber varchar(50),
@ReferenceNumber varchar(50),
@UserID int
)
as
BEGIN
/*
stp_Negotiation_InsertCreditorInstance 11111,11111,11111,'2009-06-05 13:29:37.600',
123.45,123.45,12345678,12345678,750
*/

	declare @instanceID int

	INSERT INTO tblCreditorInstance 
	(AccountID,CreditorID,ForCreditorID,Acquired,Amount,OriginalAmount,
	AccountNumber,ReferenceNumber,
	Created,CreatedBy,LastModified,LastModifiedBy) 
	VALUES 
	(@AccountID,@CreditorID,@ForCreditorID,@Acquired,@Amount,@OriginalAmount,
	@AccountNumber,@ReferenceNumber,
	getdate(),@UserID,getdate(),@UserID)

	SELECT @instanceID = SCOPE_IDENTITY() 

	update tblAccount 
	set CurrentCreditorInstanceID = @instanceID, CurrentAmount = @Amount, LastModified = getdate(), LastModifiedBy = @UserID
	where (accountid = @AccountID)
	
	
END


GRANT EXEC ON stp_Negotiation_InsertCreditorInstance TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_Report_CreditorTrendsByCreditor]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_Report_CreditorTrendsByCreditor]
(
	@creditorName varchar(250) 
)
as
BEGIN
/*
	declare @creditorName varchar(150)

	set @credname = 'accounts'--Null
	
	stp_Report_CreditorTrendsByCreditor 'accounts'
*/
	
		declare @tblTrends table (TimeFrame varchar(20),TotalUnits int,TotalSettlementAmt float ,MinSettlementPct float,MaxSettlementPct float,AvgSettlementPct float)
	
	--get last 30 days
	insert into @tblTrends
	SELECT 
	[TimeFrame] = 'Last 30 Days'
	,count(*)[TotalUnits]
	,sum(sett.settlementamount)[TotalSettlementAmt]
	,min(sett.settlementamount/ISNULL(NULLIF(convert(float,a.currentamount),0),1))[MinSettlementPct]
	,max(sett.settlementamount/ISNULL(NULLIF(convert(float,a.currentamount),0),1))[MaxSettlementPct]
	,sum(sett.settlementamount)/sum(ISNULL(NULLIF(convert(float,a.currentamount),0),1))[AvgSettlementPct]
	FROM tblSettlements AS sett 
	inner join tblaccount a on a.accountid = sett.creditoraccountid
	inner join tblcreditorinstance ci on a.currentcreditorinstanceid = ci.creditorinstanceid
	inner join tblcreditor cur on cur.creditorid = ci.creditorid
	WHERE   sett.status = 'a' and active = 1
	and (cur.name = @creditorName) and sett.created >= dateadd(d,-30,getdate())
	group by cur.name
	
	--get last 90 days
	insert into @tblTrends
	SELECT 
	[TimeFrame] = 'Last 90 Days'
	,count(*)[TotalUnits]
	,sum(sett.settlementamount)[TotalSettlementAmt]
	,min(sett.settlementamount/ISNULL(NULLIF(convert(float,a.currentamount),0),1))[MinSettlementPct]
	,max(sett.settlementamount/ISNULL(NULLIF(convert(float,a.currentamount),0),1))[MaxSettlementPct]
	,sum(sett.settlementamount)/sum(ISNULL(NULLIF(convert(float,a.currentamount),0),1))[AvgSettlementPct]
	FROM tblSettlements AS sett 
	inner join tblaccount a on a.accountid = sett.creditoraccountid
	inner join tblcreditorinstance ci on a.currentcreditorinstanceid = ci.creditorinstanceid
	inner join tblcreditor cur on cur.creditorid = ci.creditorid
	WHERE   sett.status = 'a' and active = 1
	and (cur.name = @creditorName) and sett.created >= dateadd(d,-90,getdate())
	group by cur.name
	
	--get ytd
	insert into @tblTrends
	SELECT 
	[TimeFrame] = 'YTD'
	,count(*)[TotalUnits]
	,sum(sett.settlementamount)[TotalSettlementAmt]
	,min(sett.settlementamount/ISNULL(NULLIF(convert(float,a.currentamount),0),1))[MinSettlementPct]
	,max(sett.settlementamount/ISNULL(NULLIF(convert(float,a.currentamount),0),1))[MaxSettlementPct]
	,sum(sett.settlementamount)/sum(ISNULL(NULLIF(convert(float,a.currentamount),0),1))[AvgSettlementPct]
	FROM tblSettlements AS sett 
	inner join tblaccount a on a.accountid = sett.creditoraccountid
	inner join tblcreditorinstance ci on a.currentcreditorinstanceid = ci.creditorinstanceid
	inner join tblcreditor cur on cur.creditorid = ci.creditorid
	WHERE   sett.status = 'a' and active = 1
	and (cur.name = @creditorName)
	group by cur.name
	
	select * from @tblTrends
END
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportCreateRoadmap]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ImportCreateRoadmap]
@ClientId int,
@ParentRoadMapId int = null,
@ClientStatusId int,
@Reason varchar(255) = null,
@UserId int,
@Created datetime
AS
BEGIN

Insert into tblRoadmap(ClientId, ParentRoadMapId, ClientStatusId, Reason, Created, CreatedBy, LastModified, LastModifiedBy)
Values(@ClientId, @ParentRoadMapId, @ClientStatusId, @Reason, @Created, @UserId, @Created, @UserId)

Select SCOPE_IDENTITY()

END
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetCommissionBatchPaymentsSummary_palmer]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetCommissionBatchPaymentsSummary_palmer]
	(
		@CommRecIDs varchar(255),
		@date1 datetime=null,
		@date2 datetime=null
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

exec
(
	'select
		ut.AgencyId,
		ut.Agency,	
		ut.EntryTypeId,
		ut.FeeType,
		ut.AmountPaid,
		tt.commrec,
		tt.commrecid,
		tt.parentcommrecid,
		tt.amount,
		tt.transferamount,
		ut.commstructid
	from
		(
			select
				r.abbreviation as commrec,
				bt.commrecid,
				bt.parentcommrecid,
				sum(bt.amount) as amount,
				sum(bt.transferamount) as transferamount
			from
				tblcommbatch b inner join
				tblcommbatchtransfer bt on b.commbatchid = bt.commbatchid inner join
				tblcommrec r on bt.commrecid = r.commrecid
			where
				( CAST(CONVERT(varchar(15), b.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
				( CAST(CONVERT(varchar(15), b.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) and
				r.CommRecId IN (' + @CommRecIds + ') and
				(bt.parentcommrecid in (18, 20, 22) or
				((bt.parentcommrecid = 4) and ((select top 1 commstructid from tblcommpay where commbatchid = bt.commbatchid) > 55)))
			group by
				r.abbreviation,
				bt.commrecid,
				bt.parentcommrecid
		)
		as tt left join
		(
			SELECT
				AgencyId,
				Agency,	
				EntryTypeId,
				FeeType,
				CommRec,
				CommRecId,
				ParentCommRecId,
				sum(Amount) as AmountPaid,
				commstructid as commstructid
			FROM
				(
				SELECT 
					tblCommPay.Amount,
					
					tblAgency.AgencyId,
					tblAgency.Name as Agency,

					tblEntryType.EntryTypeId,
					tblEntryType.Name as FeeType,

					tblCommRec.Abbreviation as CommRec,
					tblCommStruct.CommRecId,
					tblCommStruct.ParentCommRecId,
					tblCommStruct.commstructid as commstructid
				FROM
					tblCommPay INNER JOIN
					tblRegisterPayment ON tblCommPay.RegisterPaymentID=tblRegisterPayment.RegisterPaymentID INNER JOIN
					tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructID INNER JOIN
					tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN
					tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId INNER JOIN
					tblRegister tblFeeRegister ON tblRegisterPayment.FeeRegisterId=tblFeeRegister.RegisterId INNER JOIN
					tblEntryType ON tblFeeRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
					tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId INNER JOIN
					tblCommBatch on tblCommPay.CommBatchId=tblCommBatch.CommBatchId

				WHERE
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
					tblCommRec.CommRecId IN (' + @CommRecIds + ')
				
				UNION ALL

				SELECT 
					-tblCommPay.Amount as amount,
							tblAgency.AgencyId,
					tblAgency.Name as Agency,

					tblEntryType.EntryTypeId,
					tblEntryType.Name as FeeType,

					tblCommRec.Abbreviation as CommRec,
					tblCommStruct.CommRecId,
					tblCommStruct.ParentCommRecId,
					tblCommStruct.commstructid as commstructid
				FROM
					tblCommChargeBack tblCommPay INNER JOIN
					tblRegisterPayment ON tblCommPay.RegisterPaymentID=tblRegisterPayment.RegisterPaymentID INNER JOIN
					tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructID INNER JOIN
					tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN
					tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId INNER JOIN
					tblRegister tblFeeRegister ON tblRegisterPayment.FeeRegisterId=tblFeeRegister.RegisterId INNER JOIN
					tblEntryType ON tblFeeRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
					tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId INNER JOIN
					tblCommBatch on tblCommPay.CommBatchId=tblCommBatch.CommBatchId

				WHERE
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
					tblCommRec.CommRecId IN (' + @CommRecIds + ')
				)
				derivetbl
			GROUP BY
				EntryTypeId,FeeType,Agency,CommRec,AgencyId,CommRecId,ParentCommRecId,commstructid
		)
		as ut on tt.commrecid = ut.commrecid and
		(
			(
				tt.parentcommrecid = ut.parentcommrecid
			)
			or
			(
				tt.parentcommrecid is null and
				ut.parentcommrecid is null
			)
		)
	WHERE
		commstructid > 55 or tt.parentcommrecid in (18, 20, 22)
	ORDER BY
		Agency,EntryTypeId,tt.CommRecID'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_Negotiation_ShowHierarchy]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_Negotiation_ShowHierarchy 3

CREATE PROC [dbo].[stp_Negotiation_ShowHierarchy]
(
	@Root int
)
AS
BEGIN
/*
	declare @Root int

	set @root = 3
*/
	SET NOCOUNT ON
	DECLARE @EmpID int, @EmpName varchar(30)

	SET @EmpName = (SELECT distinct '(' + convert(varchar,isnull(UserID,0)) + ') ' + Name  FROM tblNegotiationEntity WHERE NegotiationEntityID = @Root )
	PRINT REPLICATE('-', @@NESTLEVEL * 4) + @EmpName

	SET @EmpID = (SELECT MIN(NegotiationEntityID ) FROM tblNegotiationEntity WHERE ParentNegotiationEntityID  = @Root)

	WHILE @EmpID IS NOT NULL
	BEGIN
		EXEC dbo.stp_Negotiation_ShowHierarchy @EmpID
		SET @EmpID = (SELECT MIN(NegotiationEntityID ) FROM tblNegotiationEntity WHERE ParentNegotiationEntityID  = @Root AND NegotiationEntityID  > @EmpID )
	END

END
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientMinMaxCreated]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ClientMinMaxCreated]
(
	@UserID int,
	@CompanyID int = -1
)
as
begin

	select min(year(c.created)) [min], max(year(c.created)) [max]
	from tblclient c
	join tbluseragencyaccess uaa on uaa.agencyid = c.agencyid and uaa.userid = @userid
	join tblusercompanyaccess uca on uca.userid = uaa.userid and uca.companyid = c.companyid and (@companyid = -1 or uca.companyid = @companyid)
	join tbluserclientaccess ucc on ucc.userid = uaa.userid and c.created between ucc.clientcreatedfrom and ucc.clientcreatedto

end
GO
/****** Object:  StoredProcedure [dbo].[stp_getMultiDepositClientBanks]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_getMultiDepositClientBanks]
(
	@clientid int,
	@BankRoutingNumber nvarchar(9) = NULL,
	@BankAccountNumber nvarchar(50) = NULL
)
as
BEGIN
	IF @BankRoutingNumber IS NULL
		BEGIN
			SELECT     
				cb.BankAccountID
				, rn.CustomerName [BankName]
				, cb.RoutingNumber [BankRoutingNumber]
				, cb.AccountNumber [BankAccountNumber]
				, cb.BankType
				, cb.Disabled
			FROM         
				tblClientBankAccount AS cb 
				INNER JOIN tblRoutingNumber AS rn ON cb.RoutingNumber = rn.RoutingNumber
			WHERE cb.ClientId = @clientid
		END
	IF @BankRoutingNumber IS NOT NULL
		BEGIN
				SELECT     
				cb.BankAccountID
				, rn.CustomerName [BankName]
				, cb.RoutingNumber [BankRoutingNumber]
				, cb.AccountNumber [BankAccountNumber]
				, cb.BankType
				, cb.Disabled
			FROM         
				tblClientBankAccount AS cb 
				INNER JOIN tblRoutingNumber AS rn ON cb.RoutingNumber = rn.RoutingNumber
			WHERE cb.ClientId = @clientid
			AND cb.RoutingNumber = @BankRoutingNumber
			AND cb.AccountNumber = @BankRoutingNumber
		END
END

GRANT EXEC ON stp_getMultiDepositClientBanks TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_LexxCMS_creditors_getAllByClientID]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LexxCMS_creditors_getAllByClientID]
(
	@clientid int
)
as
BEGIN

	select 
	a.accountid
	,cci.creditorinstanceid
	,[CurrentName]=cc.name
	,[CurrentNameCreditorID] = cc.creditorid
	,[OriginalName]=oc.name
	,[OriginalNameCreditorID] = oc.creditorid
	,cci.accountnumber
	,cci.referencenumber
	,[OriginalBalance]=cci.originalamount
	,[CurrentBalance]=cci.amount
	from tblaccount a with(nolock)
		inner join tblcreditorinstance cci with(nolock) on cci.creditorinstanceid = a.currentcreditorinstanceid
		inner join tblcreditor cc with(nolock) on cc.creditorid = cci.creditorid
		inner join tblcreditorinstance oci with(nolock) on oci.creditorinstanceid = a.originalcreditorinstanceid
		inner join tblcreditor oc with(nolock) on oc.creditorid = oci.creditorid
	where clientid =@clientid
END

GRANT EXEC ON stp_LexxCMS_creditors_getAllByClientID TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_StoreUserVisit]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_StoreUserVisit]
(
	@userid int,
	@type varchar(50),
	@typeid int,
	@display varchar(50)
)
as
begin

if exists (select 1 from tbluservisit where userid = @userid and type = @type and typeid = @typeid) begin
	update tbluservisit
	set visit = getdate()
	where userid = @userid 
	and type = @type 
	and typeid = @typeid
end
else begin
	insert tblUserVisit (UserID,Type,TypeID,Display,Visit) 
	values (@userid,@type,@typeid,@display,getdate())
end

end
GO
/****** Object:  StoredProcedure [dbo].[stp_QueryGetClearingAccountTransactions]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_QueryGetClearingAccountTransactions]
	(
		@CommRecId int,
		@CommScenIds varchar(255),
		@date1 datetime=null,
		@date2 datetime=null,
		@where varchar (8000) = '',
		@period varchar (100) = '',
		@orderby varchar(8000) = ''
	)

as

if not @orderby is null and not @orderby=''
	set @orderby = @orderby + ' , '

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

declare @CompanyName varchar(50)
set @CompanyName=(SELECT [Display] FROM tblCommRec WHERE CommRecId=@CommRecId)

exec('
SELECT
	tblRegister.RegisterId,
	tblClient.AccountNumber,
	(SELECT Top 1 Created FROM tblRoadmap WHERE ClientId=tblClient.ClientId AND ClientStatusId=5) as HireDate,
	''' + @CompanyName + ''' as MyCompanyName,
	tblPrimaryPerson.FirstName,
	tblPrimaryPerson.LastName,
	tblEntryType.[Name] as FeeCategory,
	''' + @period + ''' as Period,
	-tblRegister.Amount as Amount

FROM 
	tblRegister INNER JOIN
	tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
	tblClient ON tblRegister.ClientId=tblClient.ClientId INNER JOIN
	tblPerson tblPrimaryPerson ON tblClient.PrimaryPersonId=tblPrimaryPerson.PersonId INNER JOIN
	tblAgency ON tblClient.AgencyId=tblAgency.AgencyId
WHERE
	( CAST(CONVERT(char(10), tblRegister.TransactionDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
	( CAST(CONVERT(char(10), tblRegister.TransactionDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
	(tblEntryType.EntryTypeId in (7,11,12,14,15,20,27) OR
	tblEntryType.Fee=1)  AND
	tblClient.AgencyId in (SELECT AgencyId FROM tblCommScen WHERE CommScenId 
			IN (' + @CommScenIds + ')) ' + @where + 
	' ORDER BY ' + @orderby + ' tblClient.ClientId ASC' 
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationGetAssignmentData]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_NegotiationGetAssignmentData 353,1,20

CREATE procedure [dbo].[stp_NegotiationGetAssignmentData]
(
	@userid int,
	@PageNumber int,
	@PageSize int
)
as
SET NOCOUNT ON 
declare @sqlTxt varchar(max)
declare @sqlFilters as varchar(max)
declare @DisplayColumns varchar(max)

declare @vtblFilters table
	(
		ClientID int,
		AccountID int,
		SSN varchar(50),
		ApplicantFullName varchar(101),
		ApplicantLastName varchar(50),
		ApplicantFirstName varchar(50),
		ApplicantState varchar(50),
		ApplicantCity varchar(50),
		ApplicantZipCode varchar(50),
		SDAAccount varchar(50),
		FundsAvailable money,
		OriginalCreditor varchar(50),
		CurrentCreditor varchar(50),
		CurrentCreditorState varchar(50),
		CurrentCreditorAccountNumber varchar(30),
		LeastDebtAmount money,
		CurrentAmount money,
		AccountStatus varchar(255),
		AccountAge int,
		ClientAge int,
		LastSettled int,
		NextDepositDate datetime,
		NextDepositAmount money,
		LastOffer datetime,
		OfferDirection varchar(50)
	)

DECLARE filterCursor CURSOR READ_ONLY FAST_FORWARD FOR 
	SELECT nf.AggregateClause FROM  tblNegotiationFilters AS nf INNER JOIN tblNegotiationFilterXref AS fx ON nf.FilterId = fx.FilterId 
	where fx.deleted = 0 and fx.filterid in (SELECT isnull(FilterID, 0) as FilterID FROM tblNegotiationFilterXref WHERE Deleted = 0 and EntityID in (Select top 1 NegotiationEntityID from tblNegotiationEntity where UserID = @userid))

OPEN filterCursor
	FETCH NEXT FROM filterCursor INTO @sqlFilters
	WHILE @@FETCH_STATUS = 0
		BEGIN
			insert into @vtblFilters
			exec('select ClientID ,AccountID ,SSN ,ApplicantFullName ,ApplicantLastName ,ApplicantFirstName ,ApplicantState ,
			ApplicantCity ,ApplicantZipCode ,SDAAccount ,FundsAvailable ,OriginalCreditor ,CurrentCreditor ,CurrentCreditorState ,
			CurrentCreditorAccountNumber ,LeastDebtAmount ,CurrentAmount ,AccountStatus ,AccountAge ,ClientAge ,LastSettled ,NextDepositDate ,
			NextDepositAmount ,LastOffer ,OfferDirection from vwNegotiationDistributionSource where ' + @sqlFilters)
			FETCH NEXT FROM filterCursor INTO @sqlFilters
		END

CLOSE filterCursor
DEALLOCATE filterCursor

--DELETE #vtblView 

SELECT distinct ClientID ,AccountID ,SSN ,ApplicantFullName ,ApplicantLastName ,ApplicantFirstName ,ApplicantState ,ApplicantCity ,ApplicantZipCode ,SDAAccount ,FundsAvailable ,OriginalCreditor ,CurrentCreditor ,CurrentCreditorState ,CurrentCreditorAccountNumber ,LeastDebtAmount ,CurrentAmount ,AccountStatus ,AccountAge ,ClientAge ,LastSettled ,NextDepositDate ,NextDepositAmount ,LastOffer ,OfferDirection  FROM
	(
		SELECT 	row_number() OVER (ORDER BY clientid) as RowNum, ClientID ,AccountID ,SSN ,ApplicantFullName ,ApplicantLastName ,ApplicantFirstName ,ApplicantState ,ApplicantCity ,ApplicantZipCode ,SDAAccount ,FundsAvailable ,OriginalCreditor ,CurrentCreditor ,CurrentCreditorState ,CurrentCreditorAccountNumber ,LeastDebtAmount ,CurrentAmount ,AccountStatus ,AccountAge ,ClientAge ,LastSettled ,NextDepositDate ,NextDepositAmount ,LastOffer ,OfferDirection 
		FROM @vtblFilters
	) as filter
WHERE RowNum between ((@PageNumber-1)*@PageSize) and ((@PageNumber*@PageSize))
Order By LastOffer desc
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyClientIntake]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AgencyClientIntake]
(
	@startdate datetime = '2006-01-01',
	@enddate datetime = null,
	@dateperiod varchar(1) = 'm',
	@userid int,
	@companyid int = -1
)
as
BEGIN

	declare @total varchar(1000)

	select @total = coalesce(@total + ', ', '') + cast(count(*) as varchar(20)) + ' [' + dbo.udf_DatePartName(@DatePeriod, dbo.udf_DatePartStart(@dateperiod,c.created) )  + ']'
	from tblclient c 
	join tbluseragencyaccess ua on ua.agencyid = c.agencyid and ua.userid = @userid
	join tblusercompanyaccess uca on uca.companyid = c.companyid and uca.userid = ua.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	where c.created >= @startDate and c.created < isnull(@enddate, getdate())
	group by dbo.udf_DatePartStart(@dateperiod,c.created) 
	order by dbo.udf_DatePartStart(@dateperiod,c.created) 

	exec('select ''Total Client Intake Count'' [Label], ' + @total)

END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNameValueRule]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetNameValueRule]
	(
		@ruletypename varchar(50),
		@rulename varchar(50) = null
	)

as

declare @ruletypeid int
set @ruletypeid=(select ruletypeid from tblruletype where [name]=@ruletypename)

select
	[name],
	[value]
from
	tblrulenamevalue
where
	ruletypeid=@ruletypeid
	and [name]=isnull(@rulename,[name])
GO
/****** Object:  StoredProcedure [dbo].[stp_CleanupCreditor_CombineCreditors]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_CleanupCreditor_CombineCreditors]
@NewCreditorId int,
@XMLCreditorIdList varchar(max),
@UserId int
AS
BEGIN
-- Creditor Id Table
declare @hXML int
EXEC sp_xml_preparedocument @hXML OUTPUT, @XMLCreditorIdList
Select *
into #t
From OPENXML(@hXML, '/creditors/creditor', 2)
With (creditorid varchar(10) '@creditorid')

-- get creditor groups
Select distinct CreditorGroupId 
Into #c
From tblCreditor
Where creditorid in (Select CreditorId From #t)
and  CreditorGroupId  is not null

-- Update creditorid in tables

--tblCreditorInstance
/*
Insert Into tblCreditorCleanupLog([NewValue], [OldValue], TableName, FieldName, KeyId, [By])
Select @NewCreditorId, CreditorId, 'tblCreditorInstance', 'CreditorId', CreditorInstanceId, @UserId
From tblCreditorInstance
Where CreditorId in (Select CreditorId From #t)
*/

Update tblCreditorInstance Set
CreditorId = @NewCreditorId,
LastModified = GetDate(),
LastModifiedBy = @UserId
Where CreditorId in (Select CreditorId From #t)

/*
Insert Into tblCreditorCleanupLog([NewValue], [OldValue], TableName, FieldName, KeyId, [By])
Select @NewCreditorId, ForCreditorId, 'tblCreditorInstance', 'ForCreditorId', CreditorInstanceId, @UserId
From tblCreditorInstance
Where ForCreditorId in (Select CreditorId From #t)
*/

Update tblCreditorInstance Set
ForCreditorId = @NewCreditorId,
LastModified = GetDate(),
LastModifiedBy = @UserId
Where ForCreditorId in (Select CreditorId From #t)

--tblHarassmentClient
/*
Insert Into tblCreditorCleanupLog([NewValue], [OldValue], TableName, FieldName, KeyId, [By])
Select @NewCreditorId, OriginalCreditorId, 'tblHarassmentClient', 'OriginalCreditorId', ClientSubmissionId, @UserId
From tblHarassmentClient
Where OriginalCreditorId in (Select CreditorId From #t)
*/

Update tblHarassmentClient Set
OriginalCreditorId = @NewCreditorId
Where OriginalCreditorId in (Select CreditorId From #t)

/*
Insert Into tblCreditorCleanupLog([NewValue], [OldValue], TableName, FieldName, KeyId, [By])
Select @NewCreditorId, CurrentCreditorId, 'tblHarassmentClient', 'CurrentCreditorId', ClientSubmissionId, @UserId
From tblHarassmentClient
Where CurrentCreditorId in (Select CreditorId From #t)
*/

Update tblHarassmentClient Set
CurrentCreditorId = @NewCreditorId 
Where CurrentCreditorId in (Select CreditorId From #t)

/*
Insert Into tblCreditorCleanupLog([NewValue], [OldValue], TableName, FieldName, KeyId, [By])
Select @NewCreditorId, CreditorId, 'tblLeadCreditorInstance', 'CreditorId', LeadCreditorInstance, @UserId
From tblLeadCreditorInstance
Where CreditorId in (Select CreditorId From #t)
*/

--tblLeadCreditorInstance
Update tblLeadCreditorInstance Set
CreditorId = @NewCreditorId,
Modified = GetDate(),
ModifiedBy = @UserId
Where CreditorId in (Select CreditorId From #t)


update tblleadcreditorinstance
set creditorgroupid = c.creditorgroupid, name = c.name, street = c.street, street2 = c.street2, city = c.city, stateid = c.stateid, zipcode = c.zipcode
from tblleadcreditorinstance ci
join tblcreditor c on c.creditorid = ci.creditorid
	and c.creditorid = @NewCreditorId
	

/*
Insert Into tblCreditorCleanupLog([NewValue], [OldValue], TableName, FieldName, KeyId, [By])
Select @NewCreditorId, CreditorId, 'tblCreditorPhone', 'CreditorId', CreditorPhoneId, @UserId
From tblCreditorPhone
Where CreditorId in (Select CreditorId From #t)
*/

--tblCreditorPhone
Update tblCreditorPhone Set
CreditorId = @NewCreditorId,
LastModified = GetDate(),
LastModifiedBy = @UserId
Where CreditorId in (Select CreditorId From #t)


update tblcreditorhistory
set newcreditorid = @NewCreditorId
where creditorid in (Select CreditorId From #t)


update tblcreditliabilitylookup
set creditorid = @NewCreditorId, CreditorIdUpdated = getdate(), CreditorIdUpdatedBy = @UserId
where creditorid in (Select CreditorId From #t)


Insert Into tblCreditorCleanupLog([NewValue], [OldValue], TableName, FieldName, KeyId, [By])
Select @NewCreditorId, CreditorId, 'tblCreditor', 'CreditorId', CreditorId, @UserId
From tblCreditor
Where CreditorId in (Select CreditorId From #t)
and CreditorId <> @NewCreditorId 

--combined creditors 
Delete from tblCreditor
Where CreditorId in (Select CreditorId From #t)
and CreditorId <> @NewCreditorId 

--Delete Creditor Groups with no creditors
Delete from tblCreditorGroup 
Where CreditorGroupId in 
(Select c.CreditorGroupId from #c c 
left join (Select CreditorGroupId as [CreditorGroupId] from tblCreditor Union Select CreditorGroupId from tblLeadCreditorInstance) t on t.CreditorGroupId = c.CreditorGroupId
where t.CreditorGroupId is null)

Drop table #c
Drop table #t

END
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertEmailRelayLog]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Revision	: <01 - 20 January 2010>
	Category	: [TimeMatter]
	Type        : {New}
	Decription	: Add to Email relay log
*/

CREATE procedure [dbo].[stp_InsertEmailRelayLog]
(
	@EMailLogID int = NULL,
	@FromMailID varchar(100) = NULL,
	@ToMailID varchar(100) = NULL,
	@CCMailID varchar(200) = NULL,
	@BCCMailID varchar(1000) = NULL,
	@MailSubject varchar(100) = NULL,
	@MailMessage varchar(MAX) = NULL,
	@CreatedBy int = NULL,
	@CreatedDate datetime = NULL,
	@LastModifiedBy int = NULL,
	@LastModifiedDate datetime = NULL,
	@Attachment varchar(200),
	@MailFooter varchar(500) = NULL,
	@ClientID int = NULL, 
	@UserGroupID int=NULL
)
AS

BEGIN

INSERT INTO dbo.tblEmailRelayLog
(
	FromMailID,
	ToMailID,
	CCMailID,
	BCCMailID,
	MailSubject,
	MailMessage,
	CreatedBy,
	CreatedDate,
	LastModifiedBy,
	LastModifiedDate,
	Attachment,
	MailFooter,
	ClientID,
	UserGroupID
)

VALUES
(
	@FromMailID,
	@ToMailID,
	@CCMailID,
	@BCCMailID,
	@MailSubject,
	@MailMessage,
	@Createdby,
	getdate(),
	NULL,
	NULL,
	@Attachment,
	@MailFooter,
	@ClientID,
	@UserGroupID
)


SELECT NEWID = SCOPE_IDENTITY()

END
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateBalanceLog]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_UpdateBalanceLog]
@Clientid int,
@BalanceDate datetime,
@Balanced bit
AS
Update tblBalanceLog Set
LastCheck = @BalanceDate,
Balanced = @Balanced
Where ClientId = @ClientId
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_getReportTemplates]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_getReportTemplates]
/*
	(
		@parameter1 int = 5,
		@parameter2 datatype OUTPUT
	)

*/
AS
BEGIN
	SELECT     
		InfoID
		, TemplateDocTypeID
		, TemplateTypeName
		, TemplateType
		, TemplateDocFolder
		, TemplateDisplayName
		, TemplateArguments
		, TemplatePackages
		, RequiredFieldsList
	FROM         
		tblLetters_TemplateInfo
	WHERE DisplayTemplate  = 1
END
GO
/****** Object:  Table [dbo].[tblRegister]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblRegister](
	[RegisterId] [int] IDENTITY(1,1) NOT NULL,
	[ClientId] [int] NOT NULL,
	[AccountID] [int] NULL,
	[TransactionDate] [datetime] NOT NULL,
	[CheckNumber] [varchar](50) NULL,
	[Description] [varchar](255) NULL,
	[Amount] [money] NOT NULL,
	[Balance] [money] NOT NULL CONSTRAINT [DF_tblRegister_Balance]  DEFAULT ((0)),
	[EntryTypeId] [int] NOT NULL,
	[IsFullyPaid] [bit] NOT NULL CONSTRAINT [DF_tblRegister_IsFullyPaid]  DEFAULT ((0)),
	[Bounce] [datetime] NULL,
	[BounceBy] [int] NULL,
	[Void] [datetime] NULL,
	[VoidBy] [int] NULL,
	[Hold] [datetime] NULL,
	[HoldBy] [int] NULL,
	[Clear] [datetime] NULL,
	[ClearBy] [int] NULL,
	[ImportID] [int] NULL,
	[MediatorID] [int] NULL,
	[OldTable] [varchar](50) NULL,
	[OldID] [int] NULL,
	[ACHMonth] [int] NULL,
	[ACHYear] [int] NULL,
	[FeeMonth] [int] NULL,
	[FeeYear] [int] NULL,
	[Created] [datetime] NOT NULL CONSTRAINT [DF_tblRegister_Created]  DEFAULT (getdate()),
	[CreatedBy] [int] NULL,
	[AdjustedRegisterID] [int] NULL,
	[OriginalAmount] [money] NULL,
	[PFOBalance] [money] NOT NULL CONSTRAINT [DF_tblRegister_PFOBalance]  DEFAULT ((0)),
	[SDABalance] [money] NOT NULL CONSTRAINT [DF_tblRegister_SDABalance]  DEFAULT ((0)),
	[RegisterSetID] [int] NULL,
	[InitialDraftYN] [bit] NULL,
	[CompanyID] [int] NULL,
	[BouncedReason] [int] NULL,
	[ClientDepositID] [int] NULL,
	[NotC21] [bit] NULL,
	[ReferenceRegisterID] [int] NULL,
 CONSTRAINT [PK_tblRegister] PRIMARY KEY CLUSTERED 
(
	[RegisterId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegister_5_1858873739__K9_K13_K11_K17_K2_K1_7_15] ON [dbo].[tblRegister] 
(
	[EntryTypeId] ASC,
	[Void] ASC,
	[Bounce] ASC,
	[Clear] ASC,
	[ClientId] ASC,
	[RegisterId] ASC
)
INCLUDE ( [Hold],
[Amount]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegister_7_1858873739__K10_K9_K13_K11_K7] ON [dbo].[tblRegister] 
(
	[IsFullyPaid] ASC,
	[EntryTypeId] ASC,
	[Void] ASC,
	[Bounce] ASC,
	[Amount] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegister_7_1858873739__K2_K1] ON [dbo].[tblRegister] 
(
	[ClientId] ASC,
	[RegisterId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegister_8_1858873739__K1_K8_K2] ON [dbo].[tblRegister] 
(
	[RegisterId] ASC,
	[Balance] ASC,
	[ClientId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegister_8_1858873739__K2_K4_K1] ON [dbo].[tblRegister] 
(
	[ClientId] ASC,
	[TransactionDate] ASC,
	[RegisterId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegister_8_1858873739__K2_K4_K11_K13_K1] ON [dbo].[tblRegister] 
(
	[ClientId] ASC,
	[TransactionDate] ASC,
	[Bounce] ASC,
	[Void] ASC,
	[RegisterId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegister_8_1858873739__K29_K4_K1_2_3_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_30_31_32_] ON [dbo].[tblRegister] 
(
	[AdjustedRegisterID] ASC,
	[TransactionDate] ASC,
	[RegisterId] ASC
)
INCLUDE ( [AccountID],
[ClientId],
[Void],
[Bounce],
[Clear],
[ClearBy],
[ImportID],
[MediatorID],
[OldTable],
[OldID],
[ACHMonth],
[Balance],
[IsFullyPaid],
[EntryTypeId],
[Amount],
[CheckNumber],
[Description],
[Hold],
[HoldBy],
[BounceBy],
[VoidBy],
[ACHYear],
[FeeMonth],
[Created],
[CreatedBy],
[FeeYear],
[OriginalAmount],
[PFOBalance],
[SDABalance],
[RegisterSetID],
[InitialDraftYN],
[CompanyID],
[BouncedReason]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegister_8_1858873739__K9_K1] ON [dbo].[tblRegister] 
(
	[EntryTypeId] ASC,
	[RegisterId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegister_8_1858873739__K9_K3_7] ON [dbo].[tblRegister] 
(
	[EntryTypeId] ASC,
	[AccountID] ASC
)
INCLUDE ( [Amount]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegister_8_1858873739__K9_K4_1_7] ON [dbo].[tblRegister] 
(
	[EntryTypeId] ASC,
	[TransactionDate] ASC
)
INCLUDE ( [RegisterId],
[Amount]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegister_8_1963310204__K2_K1_K4_K9_K3_K29_K7_K32_K31_K30_5_6_11_13_23_24_25_26_4864] ON [dbo].[tblRegister] 
(
	[ClientId] ASC,
	[RegisterId] ASC,
	[TransactionDate] ASC,
	[EntryTypeId] ASC,
	[AccountID] ASC,
	[AdjustedRegisterID] ASC,
	[Amount] ASC,
	[SDABalance] ASC,
	[PFOBalance] ASC,
	[OriginalAmount] ASC
)
INCLUDE ( [Description],
[CheckNumber],
[ACHMonth],
[Bounce],
[Void],
[FeeYear],
[FeeMonth],
[ACHYear]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRegister_8_1963310204__K2_K1_K8_6960] ON [dbo].[tblRegister] 
(
	[ClientId] ASC,
	[RegisterId] ASC,
	[Balance] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyCurrentClientStatus]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AgencyCurrentClientStatus]
(
	@UserID int,
	@CompanyID int = -1
)
as
begin

	select cs.name, count(c.clientid) [count]
	from tblclient c
	join tblclientstatus cs on cs.clientstatusid = c.currentclientstatusid
	join tbluseragencyaccess a on a.agencyid = c.agencyid and a.userid = @UserID
	join tblusercompanyaccess uca on uca.companyid = c.companyid and uca.userid = a.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	join tbluserclientaccess uc on uc.userid = uca.userid and c.created between uc.clientcreatedfrom and uc.clientcreatedto
	group by cs.name
	order by cs.name 

end
GO
/****** Object:  StoredProcedure [dbo].[stp_AssignNegotiator]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_AssignNegotiator]
(
	@clientid int
)
as
declare @AutoAssign bit
set @autoassign=(select autoassignmediator from tblclient where clientid=@clientid)
if @autoassign=1 begin
	declare	@hiredate1 datetime
	declare	@hiredate2 datetime
	declare	@percent1 float
	declare	@percent2 float 
	declare	@sdabal1 float 
	declare	@sdabal2 float 
	declare	@accountbal1 float 
	declare	@accountbal2 float 
	declare	@clientstatusids varchar(999)
	declare	@clientstatusidschoice bit
	declare	@agencyids varchar(999)
	declare	@agencyidschoice bit 
	declare	@accountstatusids varchar(999) 
	declare	@accountstatusidschoice bit

	set @hiredate1=(select convert(datetime,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='HireDate1')
	set @hiredate2=(select convert(datetime,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='HireDate2')
	set @percent1=(select convert(float,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='ThresholdPercent1')/100
	set @percent2=(select convert(float,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='ThresholdPercent2')/100
	set @sdabal1=null
	set @sdabal2=null
	set @accountbal1=(select convert(float,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='AccountBalance1')
	set @accountbal2=(select convert(float,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='AccountBalance2')
	set @clientstatusids=(select convert(varchar,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='ClientStatusIDs')
	set @clientstatusidschoice=(select convert(bit,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='ClientStatusChoice')
	set @agencyids=(select convert(varchar,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='AgencyIDs')
	set @agencyidschoice=(select convert(bit,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='AgencyChoice')
	set @accountstatusids=(select convert(varchar,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='AccountStatusIDs')
	set @accountstatusidschoice=(select convert(bit,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='AccountStatusChoice')

	declare	@clientstatusidsop varchar(10)
	set @clientstatusidsop = case when @clientstatusidschoice=1 then '' else 'not' end
	declare	@agencyidsop varchar(10)
	set @agencyidsop = case when @agencyidschoice=1 then '' else 'not' end
	declare	@accountstatusidsop varchar(10)
	set @accountstatusidsop = case when @accountstatusidschoice=1 then '' else 'not' end

	create table #tmpAccountStatusIds(AccountStatusID int)
	if @accountstatusids is null begin
		insert into #tmpAccountStatusIds select AccountStatusId from tblAccountStatus
	end else begin
		exec('insert into #tmpAccountStatusIds select AccountStatusId from tblAccountStatus where ' + @accountstatusidsop + ' AccountStatusId in(' + @accountstatusids + ')')
	end

	create table #tmpAgencyIds(AgencyId int)
	if @agencyids is null begin
		insert into #tmpagencyids select agencyid from tblagency
	end else begin
		
		exec('insert into #tmpAgencyIds select agencyid from tblagency where ' + @agencyidsop + ' agencyid in(' + @agencyids + ')')
	end

	create table #tmpClientStatusIds(ClientStatusId int) 
	if @clientstatusids is null begin
		insert into #tmpclientstatusids select clientstatusid from tblclientstatus
	end else begin
		exec('insert into #tmpClientStatusIds select clientstatusid from tblclientstatus where ' + @clientstatusidsop + ' clientstatusid in(' + @clientstatusids + ')')
	end

	if exists (
		select 
			c.clientid
		from
			tblclient c inner join
			tblaccount a on c.clientid = a.clientid  inner join
			tblregister sdabal on c.clientid=sdabal.clientid
		where
			c.agencyid in (select agencyid from #tmpagencyids) 
			and c.currentclientstatusid in (select clientstatusid from #tmpclientstatusids) 
			and a.accountstatusid in (select accountstatusid from #tmpaccountstatusids) 
			and sdabal.registerid = (select top 1 registerid from tblregister where tblregister.clientid=sdabal.clientid order by transactiondate desc, registerid desc)
			and sdabal.balance >= isnull(@sdabal1, sdabal.balance)
			and sdabal.balance <= isnull(@sdabal2, sdabal.balance)
			and c.created >= isnull(@hiredate1, c.created) 
			and c.created <= isnull(@hiredate2, c.created) 
			and a.currentamount >= isnull(@accountbal1, a.currentamount) 
			and a.currentamount <= isnull(@accountbal2, a.currentamount) 
			and isnull(a.currentamount * @percent1, sdabal.balance) <= sdabal.balance 
			and isnull(a.currentamount * @percent2, sdabal.balance) >= sdabal.balance
			and c.clientid=@clientid
	) begin
		declare @lastname varchar(2)
		set @lastname=(select lastname from tblclient c inner join tblperson p on c.primarypersonid=p.personid and c.clientid=@clientid)
		declare @userid int
		set @userid = (select userid from tblrulenegotiation where @lastname >= rangestart and @lastname <= rangeend)

		update tblclient set assignedmediator=@userid where clientid=@clientid
		print 'client assigned to negotiator ' + convert(varchar,@userid);

	end else begin
		update tblclient set assignedmediator=null where clientid=@clientid
		print 'client unassigned from negotiator'
	end
	drop table #tmpagencyids
	drop table #tmpclientstatusids
	drop table #tmpaccountstatusids
end else begin
	print 'client non-existant or has auto-assign mediator set to off'
end
GO
/****** Object:  Table [dbo].[tblCommRec]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblCommRec](
	[CommRecID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[CommRecTypeID] [int] NOT NULL,
	[Abbreviation] [varchar](10) NOT NULL,
	[Display] [varchar](50) NOT NULL,
	[IsCommercial] [bit] NOT NULL CONSTRAINT [DF_tblCommRec_IsCommercial]  DEFAULT ((0)),
	[IsLocked] [bit] NOT NULL CONSTRAINT [DF_tblCommRec_IsLocked]  DEFAULT ((0)),
	[IsTrust] [bit] NOT NULL CONSTRAINT [DF_tblCommRec_IsTrust]  DEFAULT ((0)),
	[Method] [varchar](50) NOT NULL,
	[BankName] [varchar](50) NULL,
	[RoutingNumber] [varchar](50) NULL,
	[AccountNumber] [varchar](50) NULL,
	[Type] [varchar](1) NULL,
	[Created] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
	[CompanyID] [int] NULL,
	[AgencyID] [int] NULL,
	[ParentCommRecID] [int] NULL,
	[IsGCA] [bit] NOT NULL DEFAULT ((0)),
	[AccountTypeID] [int] NULL,
 CONSTRAINT [PK_tblCommRec] PRIMARY KEY CLUSTERED 
(
	[CommRecID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_LexxCMS_creditor_get]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LexxCMS_creditor_get]
	(
		@acctID int
	)
AS
BEGIN
select 
	a.accountid
	,a.clientid
	,cci.creditorinstanceid
	,[CurrentName]=cc.name
	,[CurrentNameCreditorID] = cc.creditorid
	,[OriginalName]=oc.name
	,[OriginalNameCreditorID] = oc.creditorid
	,cci.accountnumber
	,cci.referencenumber
	,[OriginalBalance]=cci.originalamount
	,[CurrentBalance]=cci.amount
	from tblaccount a with(nolock)
		inner join tblcreditorinstance cci with(nolock) on cci.creditorinstanceid = a.currentcreditorinstanceid
		inner join tblcreditor cc with(nolock) on cc.creditorid = cci.creditorid
		inner join tblcreditorinstance oci with(nolock) on oci.creditorinstanceid = a.originalcreditorinstanceid
		inner join tblcreditor oc with(nolock) on oc.creditorid = oci.creditorid
	where a.accountid =@acctID
END




GRANT EXEC ON stp_LexxCMS_creditor_get TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_QueryGetServiceFeeRemainingReceivables]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_QueryGetServiceFeeRemainingReceivables]
	(
		@CommRecId int,
		@CommScenIds varchar(255),
		@date1 datetime=null,
		@date2 datetime=null,
		@where varchar (8000) = '',
		@orderby varchar (8000) = '',
		@period varchar (100) = ''
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

if not @orderby is null and not @orderby=''
	set @orderby= @orderby + ' , '

declare @CompanyName varchar(50)
set @CompanyName=(SELECT [Display] FROM tblCommRec WHERE CommRecId=@CommRecId)

create table #tmp(
	RegisterId int,
	ClientId int,
	AccountNumber varchar(255),
	HireDate datetime,
	CompanyName varchar(255),
	FirstName varchar(255),
	LastName varchar(255),
	FeeCategory varchar(255),
	OriginalBalance money,
	TotalPayments money,
	Rate money
)


print ('executing query - ' + CONVERT(CHAR(19), CURRENT_TIMESTAMP, 25))
exec('
INSERT INTO
	#tmp
SELECT 
	tblRegister.RegisterID,
	tblClient.ClientId,
	tblClient.AccountNumber,
	tblHireDate.HireDate,
	tblAgency.Name as CompanyName,
	tblPrimaryPerson.FirstName,
	tblPrimaryPerson.LastName,
	tblEntryType.[Name] as FeeCategory,
	-tblRegister.Amount as OriginalBalance,
	(SELECT 
		case when SUM(b.Amount) is null then 0 else sum(b.amount) end
	FROM 
		tblRegisterPayment b
	WHERE 
		b.FeeRegisterId=tblRegister.RegisterId
	) as TotalPayments,
	tblCommFee.[Percent] as Rate
FROM
	tblRegister INNER JOIN 
	tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
	tblClient ON tblRegister.ClientId=tblClient.ClientId INNER JOIN
	(SELECT distinct ClientId,Created as HireDate FROM tblRoadmap WHERE ClientStatusId=5) tblHireDate ON tblClient.ClientId=tblHireDate.ClientId INNER JOIN
	tblPerson tblPrimaryPerson ON tblClient.PrimaryPersonId=tblPrimaryPerson.PersonId INNER JOIN
	tblAgency ON tblClient.AgencyId=tblAgency.AgencyId INNER JOIN
	tblCommScen ON tblClient.AgencyId=tblCommScen.AgencyId AND tblHireDate.HireDate > tblCommScen.StartDate AND (tblHireDate.HireDate<tblCommScen.EndDate OR tblCommScen.EndDate is null) INNER JOIN
	tblCommStruct ON tblCommScen.CommScenId=tblCommStruct.CommScenId INNER JOIN
	tblCommFee ON (tblRegister.EntryTypeId=tblCommFee.EntryTypeId AND tblCommFee.CommStructId=tblCommStruct.CommStructId)
WHERE
	( CAST(CONVERT(char(10), tblRegister.TransactionDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
	( CAST(CONVERT(char(10), tblRegister.TransactionDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
	tblCommStruct.CommScenId in (' + @CommScenIds + ') AND
	tblCommStruct.CommRecId=' + @CommRecId + ' AND
	tblEntryType.Fee=1 ' + @where
)

print ('query done. selecting - ' + CONVERT(CHAR(19), CURRENT_TIMESTAMP, 25))

select
	@CompanyName as MyCompanyName,
	@period as Period,
	RegisterId,
	ClientId,
	AccountNumber,
	HireDate,
	CompanyName,
	FirstName,
	LastName,
	FeeCategory,
	OriginalBalance,
	TotalPayments,
	OriginalBalance-TotalPayments as RemainingBalance,
	Rate,
	(OriginalBalance-TotalPayments)*Rate as RemainingReceivables,
	(SELECT MAX(TransactionDate) FROM tblRegister WHERE EntryTypeId=3 and ClientId=#tmp.ClientId) as LastDepositDate
from
	#tmp
where
	((OriginalBalance-TotalPayments)*Rate) > 0

drop table #tmp
print ('finished - ' + CONVERT(CHAR(19), CURRENT_TIMESTAMP, 25))
GO
/****** Object:  StoredProcedure [dbo].[stp_Audit_GetCurrentUser]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Audit_GetCurrentUser]
as

select dbo.currentuser()
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNotes]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetNotes]
	(
		@returntop varchar (50) = '100 percent',
		@where varchar (8000) = '',
		@orderby varchar (8000) = '',
		@userid int
	)

as

declare @join varchar(2000)

-- filter search results if user belongs to specific company(s)
if exists (select 1 from tblusercompanyaccess where userid = @userid) begin
	set @join = ' join tblclient c on c.clientid = tblnote.clientid
				  join tblusercompanyaccess uc on uc.companyid = c.companyid and uc.userid = ' + cast(@userid as varchar(10))
end else
	set @join = ' '


exec
(
	'select top ' + @returntop + '
		tblnote.*,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname
	from
		tblnote left outer join
		tbluser as tblcreatedby on tblnote.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on tblnote.lastmodifiedby = tbllastmodifiedby.userid
	' + @join + ' ' + @where + ' ' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_CheckScan_SaveCheck]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_CheckScan_SaveCheck]
(
	@regID int,
	@clientID int,
	@frontPath varchar(max),
	@backPath varchar(max),
	@CheckRouting varchar(20),
	@CheckAccountNum varchar(20),
	@CheckAmount money,
	@CheckAuxOnus varchar(20),
	@CheckNumber varchar(50),
	@CheckType varchar(50),
	@CheckOnUs varchar(50),
	@CheckRoutingCheckSum varchar(1),
	@CheckMicrLine varchar(200),
	@userID int,
	@SaveID varchar(50)
)
as
BEGIN
	declare @checkid int
	
	INSERT INTO [tblICLChecks]
	([RegisterID],[clientID],[CheckFrontPath],[CheckBackPath],[Created],[CreatedBy],[Processed],[ProcessedBy],[Verified]
	,[VerifiedBy],[CheckRouting],[CheckAccountNum],[CheckAmount],[CheckAuxOnus],[CheckNumber],[CheckType],[CheckOnUs]	
	,[CheckRoutingCheckSum],[CheckMicrLine], [SaveGUID])
	VALUES
	(
		@regID	,@clientID,@frontPath,@backPath,getdate(),@userID
		,NULL,NULL,NULL,NULL,@CheckRouting,@CheckAccountNum,@CheckAmount
		,@CheckAuxOnus,@CheckNumber,@CheckType,@CheckOnUs,@CheckRoutingCheckSum,@CheckMicrLine,@SaveID 
	)

	Select @checkid = scope_identity()
	
	if (@CheckAmount > 0)
		BEGIN
			update [tblICLChecks] set verified=getdate(),verifiedby=@userID where check21id = @checkid
		END
	
	Select @checkid 
END

GRANT EXEC ON stp_CheckScan_SaveCheck TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_AntillaCommRpt]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Christopher Nott
-- Create date: Sept 5, 2007
-- Description:	Antilla Comm Report
-- =============================================
CREATE PROCEDURE [dbo].[stp_AntillaCommRpt] 
	
	@startdate datetime = null,
	@enddate datetime = null
	 
AS
BEGIN

IF (@startdate is null) and (@enddate is null) 
BEGIN
SET @startdate = dateadd(m, datediff(m, 0, dateadd(m, -1, getdate())), 0)
SET @enddate= dateadd(m, datediff(m, 0, getdate()),0) 
END

SET NOCOUNT ON;

DECLARE @MFComm TABLE(
	agency varchar(50),
	hiredate datetime,
	acctno int,
	cname varchar(255),
	feeAmt money,
	paid money,
	rate money,
	AgntDue money
)

INSERT INTO @MFComm(
	agency,
	hiredate,
	acctno,
	cname,
	feeAmt,
	paid,
	rate
) SELECT	a.code,
		convert(varchar, c1.created, 110),
		c1.accountnumber,
		p.firstname + ' ' + p.lastname as [Name],
		c1.MonthlyFee,
		paid = (
			SELECT	isnull(sum(rp.amount),0)
			FROM	tblRegisterPayment rp INNER JOIN 
					tblRegister r ON rp.feeregisterid = r.registerid
			WHERE	r.clientid = c1.clientid AND
					r.entrytypeid = 1 AND
					rp.paymentdate >= @startdate AND
					rp.paymentdate <= @enddate AND
					(rp.bounced < 1 and rp.voided <1)
		),
		rate = CASE 
					WHEN c1.MonthlyFee =  55 then .0909
					When c1.MonthlyFee =  65 then .0749
					ELSE 0 
					END
FROM	tblClient c1 INNER JOIN
		tblPerson p ON c1.primarypersonid = p.personid INNER JOIN
		tblagency a ON c1.agencyid = a.agencyid
--12.1.08.ug
--added agencyid 838 to match commission changes
WHERE	c1.agencyid in (838,839,842,843,844) and
--12.1.08.ug
--c1.currentclientstatusid not in (15,17,18) and
		c1.accountnumber is not null 

UPDATE @MFComm 
	SET AgntDue = ROUND(paid * rate,0)


SELECT * FROM @MFComm ORDER BY hiredate

END
GO
/****** Object:  StoredProcedure [dbo].[stp_AssignNegotiators]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_AssignNegotiators]

as

create table #tblClients
(
	clientid int,
	assignedmediator int,
	lastname varchar(50),
	sdabalance money,
	accounts int
)

declare	@hiredate1 datetime
declare	@hiredate2 datetime
declare	@percent1 float
declare	@percent2 float 
declare	@sdabal1 float 
declare	@sdabal2 float 
declare	@accountbal1 float 
declare	@accountbal2 float 
declare	@clientstatusids varchar(999)
declare	@clientstatusidschoice bit
declare	@agencyids varchar(999)
declare	@agencyidschoice bit 
declare	@accountstatusids varchar(999) 
declare	@accountstatusidschoice bit

set @hiredate1=(select convert(datetime,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='HireDate1')
set @hiredate2=(select convert(datetime,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='HireDate2')
set @percent1=(select convert(float,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='ThresholdPercent1')/100
set @percent2=(select convert(float,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='ThresholdPercent2')/100
set @sdabal1=null
set @sdabal2=null
set @accountbal1=(select convert(float,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='AccountBalance1')
set @accountbal2=(select convert(float,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='AccountBalance2')
set @clientstatusids=(select convert(varchar,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='ClientStatusIDs')
set @clientstatusidschoice=(select convert(bit,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='ClientStatusChoice')
set @agencyids=(select convert(varchar,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='AgencyIDs')
set @agencyidschoice=(select convert(bit,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='AgencyChoice')
set @accountstatusids=(select convert(varchar,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='AccountStatusIDs')
set @accountstatusidschoice=(select convert(bit,[value]) from tblrulenamevalue where ruletypeid=1 and [name]='AccountStatusChoice')


declare	@clientstatusidsop varchar(10)
set @clientstatusidsop = case when @clientstatusidschoice=1 then '' else 'not' end
declare	@agencyidsop varchar(10)
set @agencyidsop = case when @agencyidschoice=1 then '' else 'not' end
declare	@accountstatusidsop varchar(10)
set @accountstatusidsop = case when @accountstatusidschoice=1 then '' else 'not' end

declare @userid int
declare @rangestart varchar(2)
declare @rangeend varchar(2)

declare c cursor for 
select
	rn.userid,
	rn.rangestart,
	rn.rangeend
from
	tblrulenegotiation rn inner join
	tbluser u on rn.userid=u.userid

--remove all assignments for auto-assignable clients
update
	tblclient
set
	assignedmediator=null
where
	AutoAssignMediator=1

insert into 
	#tblclients 
	(
		clientid,
		assignedmediator,
		lastname,
		sdabalance,
		accounts
	)
exec stp_Report_AccountsOverPercentage_Fulfillment
	@hiredate1,
	@hiredate2,
	@percent1,
	@percent2,
	@sdabal1,
	@sdabal2,
	@accountbal1,
	@accountbal2,
	@clientstatusids,
	@clientstatusidsop,
	@agencyids,
	@agencyidsop,
	@accountstatusids,
	@accountstatusidsop

open c
fetch next from c into @userid,@rangestart,@rangeend
while @@fetch_status=0 begin

	update 
		tblclient 
	set 
		assignedmediator=@userid
	where
		clientid in 
		(
			select 
				clientid
			from 
				#tblclients 
			where 
				substring(lastname,1,2) >= @rangestart
				and substring(lastname,1,2) <= @rangeend
		)
		and autoassignmediator=1

	print 'assigned clients between ' + @rangestart + ' and ' + @rangeend + ' to user ' + convert(varchar,@userid)

	fetch next from c into @userid,@rangestart,@rangeend
end

close c
deallocate c

drop table #tblclients
GO
/****** Object:  StoredProcedure [dbo].[stp_Report_CreditorTrends]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_Report_CreditorTrends]
(
	@year int = Null,
	@month int = Null,
	@creditorName varchar(150) = Null
)
as
BEGIN
/*
	declare @credName varchar(150)
	declare @year int
	declare @month int

	set @credname = 'accounts'--Null
	set @year = 2010
	set @month = 1
	
	stp_Reporting_CreditorTrends 2010,1,null
*/
	if @year is null
		BEGIN
			set @year = year(getdate())
		END
	if @month is null
		BEGIN
			set @month = month(getdate())
		END

	if @creditorName is not null
		BEGIN
			set @creditorName = @creditorName + '%'
		END

	SELECT 
	cur.name,count(*)[TotalUnits]
	,sum(a.currentamount)[TotalDebtWithCreditor]
	,min(sett.settlementamount)[MinSettlementAmt]
	,max(sett.settlementamount)[MaxSettlementAmt]
	,avg(sett.settlementamount)[AvgSettlementAmt]
	,sum(sett.settlementamount)[TotalSettlementAmt]
	,min(sett.settlementamount/ISNULL(NULLIF(convert(float,a.currentamount),1),1))[MinSettlementPct]
	,max(sett.settlementamount/ISNULL(NULLIF(convert(float,a.currentamount),1),1))[MaxSettlementPct]
	,sum(sett.settlementamount)/sum(ISNULL(NULLIF(convert(float,a.currentamount),1),1))[AvgSettlementPct]
	,sum(settlementfee)[TotalSettlementFees]
	FROM tblSettlements AS sett 
	inner join tblaccount a on a.accountid = sett.creditoraccountid
	inner join tblcreditorinstance ci on a.currentcreditorinstanceid = ci.creditorinstanceid
	inner join tblcreditor cur on cur.creditorid = ci.creditorid
	WHERE   sett.status = 'a' and active = 1
	AND YEAR(sett.Created) = @year AND MONTH(sett.Created) = @month and (cur.name like @creditorName or @creditorName is null)
	group by cur.name
	order by cur.name
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCreditors]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetCreditors]
	(
		@return varchar (255) = '100 percent',
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as

exec
(
	'select top
		' + @return + '
		tblcreditor.*,
		tblstate.[name] as statename,
		tblstate.abbreviation as stateabbreviation,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname
	from
		tblcreditor left outer join
		tblstate on tblcreditor.stateid = tblstate.stateid left outer join
		tbluser as tblcreatedby on tblcreditor.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on tblcreditor.lastmodifiedby = tbllastmodifiedby.userid '
	+ @where + ' ' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterAuditLog]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Adds (add/update/delete) activities made to criteria filters.
*/

CREATE PROCEDURE [dbo].[stp_NegotiationFilterAuditLog]
@FilterId int = null,
@UserId int,
@AuditType varchar(10)
AS

DECLARE @MatchCount int
DECLARE @tblAuditLog TABLE 
(
FilterId int,
FilterType varchar(50),
FilterClause varchar(max),
FilterText varchar(max),
AggregateClause varchar(max),
AuditType varchar(15)
)

INSERT INTO @tblAuditLog
  SELECT TOP 1 FilterId,FilterType,FilterClause,FilterText,AggregateClause, AuditType
  FROM tblNegotiationFilterAudit ORDER BY AuditDate Desc


SELECT @MatchCount = Count(l.FilterId) 
FROM tblNegotiationFilters f
INNER JOIN @tblAuditLog l ON l.FilterId = f.FilterId
WHERE
l.FilterType = f.FilterType AND
l.FilterClause = f.FilterClause AND
l.FilterText = f.FilterText AND
l.AggregateClause = f.AggregateClause AND
l.AuditType = @AuditType AND
f.FilterId = @FilterId



if @MatchCount = 0 
BEGIN  
 INSERT INTO tblNegotiationFilterAudit
   SELECT @FilterId, FilterType, FilterClause,FilterText,AggregateClause,@AuditType, getDate(), @UserId
   FROM tblNegotiationFilters WHERE FilterId = @FilterId
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Agency_Dashboard_ClientRetentionRolling24]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_Agency_Dashboard_ClientRetentionRolling24]
(
	@userid int,
	@companyid int = -1
)
as
BEGIN
	/* development usage
	declare @userid int
	set @userid = 375
	*/
	declare @sSQL varchar(max)

	select 
		  a.ImportAbbr
		  ,convert(varchar,c.accountnumber) [Acct#]       
		  ,convert(varchar,c.created,110) [Created]
		  ,s.name [Status]
		  --,TermDate = isnull(convert(varchar,(select top(1) rm.created from tblroadmap rm where clientstatusid in (17,18) and rm.clientid = c.clientid order by roadmapid desc),110),'')
		  ,Retention = isnull(datediff(day,c.created,(select top(1) rm.created from tblroadmap rm where clientstatusid in (17) and rm.clientid = c.clientid order by roadmapid desc)),'')
	into #cr
	from tblclient c
	inner join tblClientStatus s on c.currentclientstatusid = s.clientstatusid
	inner join tblagency a on c.agencyid = a.agencyid
	Inner join tbluseragencyaccess uaa on uaa.agencyid = c.agencyid and uaa.userid = @userid
	inner join tblusercompanyaccess uca on uca.userid = uaa.userid and uca.companyid = c.companyid and (@companyid = -1 or uca.companyid = @companyid)
	inner join tbluserclientaccess uc on uc.userid = uca.userid and c.created between uc.clientcreatedfrom and uc.clientcreatedto
	where c.created >= dateadd(yy,-2,getdate())
	and c.accountnumber is not null
	order by c.created

	declare @Months int
	declare @LastNumber int
	declare @totalclients int

	select @totalclients = count(*) from #cr

	set @Months = 1
	set @LastNumber = 0

	--build case statement for 24 blocks of 30 days
	set @sSQL = 'select ''Cancelled''[Status],[TotalClients] = ' + cast(@totalclients as varchar) + char(13)
	WHILE @Months <= 24
		BEGIN
			set @sSQL = @sSQL + ',[Month ' + cast(@Months as varchar) + ']'
			set @sSQL = @sSQL + ' = (select count(*) from #cr where retention > ' + cast(@LastNumber as varchar) 
			set @sSQL = @sSQL + ' and retention <=' + cast(@months*30 as varchar) + ')' + char(13)
			set @LastNumber = @months*30
			set @months = @Months + 1
		END

	set @sSQl = @sSQL + ' Union all '	+ char(13)

	--build case statement for 24 blocks of 30 days
	set @months = 1
	set @sSQl = @sSQL +'select ''Remaining''[Status]'
	set @sSQl = @sSQL + ', ' + cast(@totalclients as varchar)+ ' [TotalClients]'
	set @LastNumber = 0
	
	WHILE @Months <= 24
		BEGIN
			declare @remaining int
			select @remaining  = @totalclients -(select count(*) from #cr where retention > @LastNumber  and retention <=@months*30 )
			set @sSQl = @sSQL + ', ' + cast(@remaining as varchar) +' [Month ' + cast(@Months as varchar) + ']' + char(13)
			set @totalclients = @remaining 
			set @LastNumber = @months*30
			set @months = @Months + 1
		END

	exec(@sSQl)
drop table #cr

END


GRANT EXEC ON stp_Agency_Dashboard_ClientRetentionRolling24 TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_SetNameValueRule]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_SetNameValueRule]
	(
		@userid int,
		@ruletypename varchar(50),
		@rulename varchar(50),
		@value sql_variant
	)

as

declare @ruletypeid int
set @ruletypeid=(select ruletypeid from tblruletype where [name]=@ruletypename)

declare @rulenamevalueid int
set @rulenamevalueid = (select rulenamevalueid from tblrulenamevalue where ruletypeid=@ruletypeid and [name]=@rulename)

if (@rulenamevalueid is null) begin
	insert into tblrulenamevalue(ruletypeid,[name],[value],lastmodifiedby)
	values (@ruletypeid,@rulename,@value,@userid)
end else begin
	update tblrulenamevalue
	set [value]=@value
	where rulenamevalueid=@rulenamevalueid
end
GO
/****** Object:  StoredProcedure [dbo].[stp_NewCreditors]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NewCreditors]
as
begin

declare @sql varchar(max)

select yr, mth, datename(month,cast(cast(mth as varchar(2))+'/1/2000' as datetime)) [mthyr], cnt 
into #temp
from (
	select year(created) [yr], month(created) [mth], count(*) [cnt]
	from tblcreditor
	where created > cast(cast(month(dateadd(month,-11,getdate())) as varchar(2)) + '/1/' + cast(year(dateadd(month,-11,getdate())) as varchar(40)) as datetime)
	and (validated is null or validated = 1)
	group by year(created), month(created)
) d

select @sql = coalesce(@sql + ', ', '') + cast(cnt as varchar(10)) + ' [' + mthyr + ']'
from #temp
order by yr, mth

exec('select ' + @sql)

drop table #temp

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPhoneCallReasons]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 04/28/2010
-- Description:	Get call reasons
-- =============================================
CREATE PROCEDURE [dbo].[stp_GetPhoneCallReasons] 
AS
BEGIN
	SET NOCOUNT ON;
	SELECT Value, SortOrder FROM tblPhoneCallReasons Order By SortOrder
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_UserType_IoU_Single]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_UserType_IoU_Single]
	(
		@functionid int,
		@usertypeid int,
		@permissiontypeid int,
		@value bit,
		@overwriteold bit=1
	)

as

declare @permissionid int
set @permissionid = (
	select top 1 tblpermission.permissionid 
	from tblgrouppermission inner join tblpermission on tblpermission.permissionid=tblgrouppermission.permissionid
	where 
		tblgrouppermission.usergroupid is null and 
		tblpermission.functionid=@functionid and 
		tblgrouppermission.usertypeid=@usertypeid and 
		tblpermission.permissiontypeid=@permissiontypeid
	order by
		tblpermission.permissionid desc
)

if @permissionid is not null
begin
	--Delete any duplicates. These should not exist.
	select 
		tblpermission.permissionid 
	into
		#tmp
	from 
		tblgrouppermission inner join
		tblpermission on tblgrouppermission.permissionid=tblpermission.permissionid
	where
		usertypeid = @usertypeid
		and usergroupid is null 
		and functionid = @functionid
		and permissiontypeid = @permissiontypeid
		and not tblpermission.permissionid = @permissionid

	delete from tblgrouppermission where permissionid in 
		(select permissionid from #tmp)

	delete from tblpermission where permissionid in 
		(select permissionid from #tmp)

	drop table #tmp
end  

if @value is null begin
	if @permissionid is not null
	begin
		--just delete it if it exists. 
		delete from tblpermission where permissionid=@permissionid
		delete from tblgrouppermission where permissionid=@permissionid
	end  
	--otherwise, do nothing
end else begin
	if @permissionid is null
	begin
		insert into tblpermission 
			(functionid, permissiontypeid, value)
		values
			(@functionid, @permissiontypeid, @value)

		insert into tblgrouppermission 
			(usergroupid, permissionid, usertypeid)
		values
			(null, scope_identity(), @usertypeid)
	end
	else if @overwriteold=1
	begin
		update tblpermission set
			value=@value
		where
			permissionid = @permissionid
	end
end
GO
/****** Object:  StoredProcedure [dbo].[stp_Agency_Dashboard_NewClients]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_Agency_Dashboard_NewClients]
(
	@UserID int,
	@CompanyID int = -1
)
as
BEGIN
	select count(*) 
	from tblclient c 
	join tbluseragencyaccess a on a.agencyid = c.agencyid and a.userid = @userid
	join tblusercompanyaccess uca on uca.companyid = c.companyid and uca.userid = a.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	join tbluserclientaccess ucc on ucc.userid = uca.userid and c.created between ucc.clientcreatedfrom and ucc.clientcreatedto
	where month(created) = month(getdate()) and year(created) = year(getdate())
END




GRANT EXEC ON stp_Agency_Dashboard_NewClients TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_QueryGetServiceFeeNewCharges]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_QueryGetServiceFeeNewCharges]
	(
		@CommRecId int,
		@CommScenIds varchar(255),
		@date1 datetime=null,
		@date2 datetime=null,
		@where varchar (8000) = '',
		@orderby varchar (8000) = '',
		@period varchar (100) = ''
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

if not @orderby is null and not @orderby=''
	set @orderby= 'ORDER BY '+@orderby 

declare @CompanyName varchar(50)
set @CompanyName=(SELECT [Display] FROM tblCommRec WHERE CommRecId=@CommRecId)

exec('
SELECT
	tblRegister.RegisterId,
	tblClient.ClientID,
	tblClient.AccountNumber,
	(SELECT Top 1 Created FROM tblRoadmap WHERE ClientId=tblClient.ClientId AND ClientStatusId=5) as HireDate,
	tblAgency.Name as CompanyName,
	''' + @CompanyName + ''' as MyCompanyName,
	tblPrimaryPerson.FirstName,
	tblPrimaryPerson.LastName,
	tblEntryType.[Name] as FeeCategory,
	''' + @period + ''' as Period,
	tblCommFeeCharge.FixedAmount as Amount,
	tblRegister.TransactionDate

FROM 
	tblRegister INNER JOIN
	tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
	tblClient ON tblRegister.ClientId=tblClient.ClientId INNER JOIN
	tblPerson tblPrimaryPerson ON tblClient.PrimaryPersonId=tblPrimaryPerson.PersonId INNER JOIN
	tblAgency ON tblClient.AgencyId=tblAgency.AgencyId INNER JOIN
	tblCommFeeCharge ON tblRegister.EntryTypeId=tblCommFeeCharge.EntryTypeId 
		AND tblCommFeeCharge.CommRecId=' + @CommRecId + '
	
WHERE
	( CAST(CONVERT(char(10), tblRegister.TransactionDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
	( CAST(CONVERT(char(10), tblRegister.TransactionDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
	tblClient.AgencyId in (SELECT AgencyId FROM tblCommScen WHERE CommScenId 
			IN (' + @CommScenIds + ')) ' + @where + 
	' ' + @orderby + ' '
)
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_UserTypeFunctionFunctions_Get]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[stp_Permissions_UserTypeFunctionFunctions_Get]
	(
		@usertypeid int,
		@parentfunctionid int
	)

as

select
	tblfunction.functionid,
	tblfunction.parentfunctionid,
	tblfunction.[name] as functionname,
	tblfunction.isoperation,
	tblpermission.permissiontypeid,
	tblpermission.value,
	issystem,
	(select count(*) from tblfunction a where a.parentfunctionid=tblfunction.functionid) as numchildren
from
	tblfunction inner join
	tblpermission on tblpermission.functionid=tblfunction.functionid inner join
	tblgrouppermission on tblgrouppermission.permissionid=tblpermission.permissionid 
where
	tblgrouppermission.usertypeid=@usertypeid and
	tblgrouppermission.usergroupid is null and
	tblfunction.parentfunctionid=@parentfunctionid

union

select
	functionid,
	parentfunctionid,
	name as functionname,
	isoperation,	
	null as permissiontypeid,
	null as value,
	issystem,
	(select count(*) from tblfunction a where a.parentfunctionid=tblfunction.functionid) as numchildren
from
	tblfunction
where
	tblfunction.parentfunctionid=@parentfunctionid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientSearches]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetClientSearches]
	(
		@returntop varchar (50) = '100 percent',
		@where varchar (8000) = '',
		@orderby varchar (8000) = '',
		@userid int
	)

as

declare @join varchar(2000)

-- filter search results if user belongs to specific company(s)
if exists (select 1 from tblusercompanyaccess where userid = @userid) begin
	set @join = ' join tblusercompanyaccess uc on uc.companyid = c.companyid and uc.userid = ' + cast(@userid as varchar(10))
end else
	set @join = ' '


exec
(
	'select top ' + @returntop + '
		tblclientsearch.*, cs.Name [ClientStatus]
	from
		tblclientsearch
	join 
		tblclient c on c.clientid = tblclientsearch.clientid
	join
		tblclientstatus cs on cs.clientstatusid = c.currentclientstatusid
	' + @join + ' ' + @where + ' ' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_PendingClients]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_PendingClients]
(
	@companyid int = null,
	@clientid int = null
)
as

-- pending clients
select c.clientid, c.accountnumber, l.leadapplicantid, p.firstname + ' ' + p.lastname [name], datediff(d,c.created,getdate()) [daysinservice],
	sum(d.depositamount) [deposittotal], sum(a.currentamount) [totaldebt], count(a.accountid) [nocreditors]
from tblclient c
join tblimportedclient i on i.importid = c.serviceimportid
join tblleadapplicant l on l.leadapplicantid = i.externalclientid 
	and l.statusid in (10,19) -- In Process, Return to Compliance
join tblperson p on p.personid = c.primarypersonid
join tblclientdepositday d on d.clientid = c.clientid
join tblaccount a on a.clientid = c.clientid
	and a.accountstatusid not in (54,55,169) -- Settled Account, Account Removed, Settled Account - Lawsuit Filed Against Creditor
where c.currentclientstatusid in (7,23,24) -- Recieved LSA, Returned to CID, Return to Compliance
	and c.accept is null
	and (@companyid is null or c.companyid = @companyid)
	and (@clientid is null or c.clientid = @clientid)
group by c.clientid, c.accountnumber, l.leadapplicantid, p.firstname, p.lastname, c.created


-- account detail
select c.clientid, g.name [creditor], a.currentamount
from tblclient c
join tblimportedclient i on i.importid = c.serviceimportid
join tblleadapplicant l on l.leadapplicantid = i.externalclientid 
	and l.statusid in (10,19) -- In Process, Return to Compliance
join tblperson p on p.personid = c.primarypersonid
join tblclientdepositday d on d.clientid = c.clientid
join tblaccount a on a.clientid = c.clientid
	and a.accountstatusid not in (54,55,169) -- Settled Account, Account Removed, Settled Account - Lawsuit Filed Against Creditor
join tblcreditorinstance ci on ci.creditorinstanceid = a.currentcreditorinstanceid
join tblcreditor cr on cr.creditorid = ci.creditorid
join tblcreditorgroup g on g.creditorgroupid = cr.creditorgroupid
where c.currentclientstatusid in (7,23,24) -- Recieved LSA, Returned to CID, Return to Compliance
	and c.accept is null
	and (@companyid is null or c.companyid = @companyid)
	and (@clientid is null or c.clientid = @clientid)
	
	
-- hardship info
select c.clientid, 
	case 
		when len(h.hardshipother) > 0 then h.hardshipother 
		when len(h.hardship) > 0 then h.hardship
		else 'None'
	end [hardship], 
	h.monthlyincome
from tblclient c
join tblimportedclient i on i.importid = c.serviceimportid
join tblleadapplicant l on l.leadapplicantid = i.externalclientid 
	and l.statusid in (10,19) -- In Process, Return to Compliance
left join tblleadhardship h on h.leadapplicantid = l.leadapplicantid
where c.currentclientstatusid in (7,23,24) -- Recieved LSA, Returned to CID, Return to Compliance
	and c.accept is null
	and (@companyid is null or c.companyid = @companyid)
	and (@clientid is null or c.clientid = @clientid)
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientFile_getCreditorInfo]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ClientFile_getCreditorInfo]
(
@accountid int
)
as
BEGIN
	/*
	declare @accountid int
	set @accountid = 17292
*/
	select 
		[Current] = cc.name
		,[Original] = isnull(oc.name,'')
		,[AccountNumber] = isnull(ci.accountnumber,'')
		,[ReferenceNumber] = isnull(ci.referencenumber,'')
		,[DateAcquired] = isnull(ci.acquired,'')
		,[CurrentAmt] = isnull(ci.amount,'')
		,[OriginalAmt] = isnull(ci.originalamount,'')
		,[Address] = case when cc.street2 is null or cc.street2 = ''
		then isnull(cc.street,'') + char(13) + cc.city + ', ' + s.abbreviation + ' ' + cc.zipcode
		else isnull(cc.street,'') + char(13) + cc.street2 + char(13) + cc.city + ', ' + s.abbreviation + ' ' + cc.zipcode
		end
		
	from tblcreditorinstance ci
	inner join tblcreditor cc on cc.creditorid = ci.creditorid
	inner join tblstate s on s.stateid = cc.stateid
	left outer join tblcreditor oc on oc.creditorid = ci.forcreditorid
	where accountid = @accountid
	order by acquired

END

GRANT EXEC ON stp_ClientFile_getCreditorInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_QueryGetServiceFeePayments]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_QueryGetServiceFeePayments]
	(
		@CommRecId int,
		@CommScenIds varchar(255),
		@date1 datetime=null,
		@date2 datetime=null,
		@where varchar (8000) = '',
		@orderby varchar (8000) = '',
		@period varchar (100) = ''
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

if not @orderby is null and not @orderby=''
	set @orderby= @orderby + ' , '

declare @CompanyName varchar(50)
set @CompanyName=(SELECT [Display] FROM tblCommRec WHERE CommRecId=@CommRecId)

exec('
SELECT 
	tblagency.agencyid,
	tblClient.ClientId,
	tblRegisterPayment.RegisterPaymentId,
	tblCommPay.CommPayId,
	tblClient.AccountNumber,
	(SELECT Top 1 Created FROM tblRoadmap WHERE ClientId=tblClient.ClientId AND ClientStatusId=5) as HireDate,
	tblAgency.Name as CompanyName,
	''' + @CompanyName + ''' as MyCompanyName,
	''' + @period + ''' as Period,
	'''' as SettlementNumber, 
	tblPrimaryPerson.FirstName,
	tblPrimaryPerson.LastName,
	tblEntryType.[Name] as FeeCategory,
	
	-tblRegister.Amount as OriginalBalance,

	-(	tblRegister.Amount +
		(SELECT 
			case when SUM(b.Amount) is null then 0 else sum(b.amount) end
		FROM 
			tblRegisterPayment b
		WHERE 
			b.FeeRegisterId=tblRegisterPayment.FeeRegisterId AND 
			b.RegisterPaymentId<tblRegisterPayment.RegisterPaymentId)
	) as BeginningBalance,
	
	(-(	tblRegister.Amount +
		(SELECT 
			case when SUM(b.Amount) is null then 0 else sum(b.amount) end
		FROM 
			tblRegisterPayment b
		WHERE 
			b.FeeRegisterId=tblRegisterPayment.FeeRegisterId AND 
			b.RegisterPaymentId<tblRegisterPayment.RegisterPaymentId)
	) - tblRegisterPayment.Amount) as EndingBalance,

	tblRegisterPayment.Amount as PaymentAmount,
	tblRegisterPayment.PaymentDate,

	tblCommPay.[Percent] as Rate,
	tblCommPay.Amount as Amount

FROM 
	tblCommBatch INNER JOIN 
	tblCommPay ON tblCommBatch.CommBatchId=tblCommPay.CommBatchId INNER JOIN
	tblRegisterPayment ON tblCommPay.RegisterPaymentId=tblRegisterPayment.RegisterPaymentId INNER JOIN
	tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructId INNER JOIN
	tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN
	tblRegister ON tblRegisterPayment.FeeRegisterId = tblRegister.RegisterId INNER JOIN
	tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
	tblClient ON tblRegister.ClientId=tblClient.ClientId INNER JOIN
	tblPerson tblPrimaryPerson ON tblClient.PrimaryPersonId=tblPrimaryPerson.PersonId INNER JOIN
	tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId
	WHERE
	( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
	( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
	tblCommStruct.CommScenId in (' + @CommScenIds + ') AND
	CommRecId=' + @CommRecId + 
	' ' + @where + '
	


UNION ALL


SELECT 

	tblagency.agencyid,
	tblClient.ClientId,
	tblRegisterPayment.RegisterPaymentId,
	tblCommPay.CommPayId,
	tblClient.AccountNumber,
	(SELECT Top 1 Created FROM tblRoadmap WHERE ClientId=tblClient.ClientId AND ClientStatusId=5) as HireDate,
	tblAgency.Name as CompanyName,
	''' + @CompanyName + ''' as MyCompanyName,
	''' + @period + ''' as Period,
	'''' as SettlementNumber, 
	tblPrimaryPerson.FirstName,
	tblPrimaryPerson.LastName,
	tblEntryType.[Name] as FeeCategory,
	-tblRegister.Amount as OriginalBalance,

	(-tblRegister.Amount -
		(SELECT 
			case when SUM(b.Amount) is null then 0 else sum(b.amount) end
		FROM 
			tblRegisterPayment b
		WHERE 
			b.FeeRegisterId=tblRegisterPayment.FeeRegisterId AND 
			b.RegisterPaymentId<=tblRegisterPayment.RegisterPaymentId)
	) as BeginningBalance,
	
	(-(	tblRegister.Amount +
		(SELECT 
			case when SUM(b.Amount) is null then 0 else sum(b.amount) end
		FROM 
			tblRegisterPayment b
		WHERE 
			b.FeeRegisterId=tblRegisterPayment.FeeRegisterId AND 
			b.RegisterPaymentId<=tblRegisterPayment.RegisterPaymentId)
	) + tblRegisterPayment.Amount) as EndingBalance,

	tblRegisterPayment.Amount as PaymentAmount,
	tblCommPay.ChargebackDate as PaymentDate,

	tblCommPay.[Percent] as Rate,
	tblCommPay.Amount

FROM 
	tblCommBatch INNER JOIN 
	(SELECT [Percent],CommChargeBackId,CommPayID,ChargeBackDate,RegisterPaymentId,CommStructID,-Amount as Amount,CommBatchId FROM tblCommChargeBack) tblCommPay on tblCommBatch.CommBatchId=tblCommPay.CommBatchId INNER JOIN 
	(SELECT RegisterPaymentId, PaymentDate, FeeRegisterId, -Amount as Amount from tblRegisterPayment) tblRegisterPayment ON tblCommPay.RegisterPaymentId=tblRegisterPayment.RegisterPaymentId INNER JOIN
	tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructId INNER JOIN
	tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN	
	tblRegister ON tblRegisterPayment.FeeRegisterId = tblRegister.RegisterId INNER JOIN
	tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
	tblClient ON tblRegister.ClientId=tblClient.ClientId INNER JOIN
	tblPerson tblPrimaryPerson ON tblClient.PrimaryPersonId=tblPrimaryPerson.PersonId INNER JOIN
	tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId
	
WHERE
	( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
	( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
	tblCommStruct.CommScenId in (' + @CommScenIds + ') AND
	CommRecId=' + @CommRecId + 
	' ' + @where + 
	' ORDER BY ' + @orderby + ' tblRegisterPayment.PaymentDate


'


)
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_UserTypeFunctions_Get]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_UserTypeFunctions_Get]
	(
		@usertypeid int,
		@definedonly bit = 0
	)

as

select
	tblfunction.functionid,
	tblfunction.parentfunctionid,
	tblfunction.[name] as functionname,
	tblfunction.isoperation,
	tblpermission.permissiontypeid,
	tblpermission.value,
	issystem
from
	tblfunction inner join
	tblpermission on tblpermission.functionid=tblfunction.functionid inner join
	tblgrouppermission on tblgrouppermission.permissionid=tblpermission.permissionid
where
	tblgrouppermission.usertypeid=@usertypeid and
	tblgrouppermission.usergroupid is null 
	
union

select
	functionid,
	parentfunctionid,
	name as functionname,
	isoperation,	
	null as permissiontypeid,
	null as value,
	issystem
from
	tblfunction
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertShadowDisbursement]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_InsertShadowDisbursement]
( 
	@RegisterID int,
	@Amount money
)
as
begin
-- shadow store -> disbusement account

declare @Name varchar(30), @TrustID int

select @TrustID = TrustID, @Name = [Name]
from tblTrust
where TrustID = 23


insert tblNachaRegister2 (NachaFileId, [Name], Amount, IsPersonal, CompanyID, ShadowStoreId, ClientID, TrustId, RegisterID, Created, Flow)
select -1, @Name, abs(@Amount), 0, c.CompanyID, c.AccountNumber, c.ClientID, c.TrustId, r.RegisterID, getdate(), 'debit'
from tblregister r
join tblclient c on c.clientid = r.clientid
where registerid = @RegisterID


end
GO
/****** Object:  Table [dbo].[tblTransferLog]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblTransferLog](
	[TransferLogID] [int] IDENTITY(1,1) NOT NULL,
	[DBTransferFrom] [nvarchar](50) NULL,
	[DBTransferTo] [nvarchar](50) NULL,
	[tblFrom] [nvarchar](50) NULL,
	[tblTo] [nvarchar](50) NULL,
	[TransferDate] [datetime] NULL,
	[ClientID] [int] NULL,
	[Amount] [money] NULL,
	[EntryTypeID] [int] NULL,
	[CompanyID] [int] NULL,
	[Notes] [nvarchar](150) NULL,
 CONSTRAINT [PK_tblTransferLog] PRIMARY KEY CLUSTERED 
(
	[TransferLogID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneyNewPayments]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AttorneyNewPayments]
(
	@companyid int,
	@from datetime,
	@to datetime
)
as
begin


select  
	case r.entrytypeid
		when 1 then 'Account Maintenance Fees'
		when 4 then 'Settlement Processing Fees'
	end [type], 
	count(*) [payments],
	-sum(cp.amount) [amount]
from tblcommpay cp
join tblcommbatch b on b.commbatchid = cp.commbatchid
	and b.batchdate between @from and @to
join tblregisterpayment rp on rp.registerpaymentid = cp.registerpaymentid
join tblregister r on r.registerid = rp.feeregisterid
	and r.entrytypeid in (1,4) -- maint, settlement
join tblcommstruct cs on cs.commstructid = cp.commstructid
	and cs.commrecid in (4,27) -- lexxiom recs
	and cs.companyid = @companyid
group by r.entrytypeid
order by [type]


end
GO
/****** Object:  Table [dbo].[tblClientDepositDay]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblClientDepositDay](
	[ClientDepositId] [int] IDENTITY(1,1) NOT NULL,
	[ClientId] [int] NOT NULL,
	[Frequency] [varchar](10) NOT NULL,
	[DepositDay] [int] NOT NULL,
	[Occurrence] [int] NULL,
	[DepositAmount] [money] NOT NULL,
	[DepositMethod] [varchar](5) NOT NULL DEFAULT ('Check'),
	[BankAccountId] [int] NULL,
	[Created] [datetime] NOT NULL DEFAULT (getdate()),
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
	[DeletedDate] [datetime] NULL,
	[DeletedBy] [int] NULL,
	[ReferenceClientDepositID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ClientDepositId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[SearchCreditor]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[SearchCreditor]
@CreditorName varchar(255) = '%',
@Address varchar(max) = '%' ,
@GroupName varchar(255) = '%',
@Phone varchar(max) = '%',
@CreditorGroupId int = null
AS
Begin
Select c.creditorid as [CreditorId], 
	isnull(c.Validated ,0) as [Validated],
	c.name as [CreditorName], 
	isnull(c.creditorAddressTypeId,0) as [CreditorAddressTypeId],
	isnull(c.Street,'') [Street], 
	isnull(c.Street2, '') [Street2],
	isnull(c.city,'') [City],
	isnull(c.stateid,0) [StateId],
	case when c.stateid is null then '' else ' ' + (Select abbreviation from tblstate where stateid = c.stateid ) end [State],
	isnull(zipCode, '') [ZipCode],  
	isnull(g.CreditorGroupId,0) as [CreditorGroupId], 
	g.name as [CreditorGroup],
	Phones = (select distinct isnull(p.areacode,'') + isnull(p.number,'') + ', ' 
				from tblcreditorphone cp
				inner join tblphone p on p.phoneid = cp.phoneid
				where cp.creditorid = c.creditorid
				and p.phonetypeid in (21,23)
				For XML Path(''))/*,
	Accounts = (select distinct isnull(cl.accountnumber,'') + ',' 
				from tblclient cl
				inner join tblaccount a on a.clientid = cl.clientid
				inner join tblcreditorinstance ci on ci.creditorinstanceid = a.currentcreditorinstanceid
				where ci.creditorid = c.creditorid
				For XML Path(''))*/
from tblCreditor c 
left join tblCreditorGroup g on g.creditorGroupId = c.creditorgroupid  
Where (isnull(@CreditorGroupId,0) = 0 or @CreditorGroupId = c.creditorgroupid)
and 
isnull(c.Name,'') like @CreditorName
and 
isnull(c.Street,'') + 
case when c.Street2 is null then '' else ' ' + c.Street2 end + 
case when c.city is null then '' else ' ' + c.City end + 
case when c.stateid is null then '' else ' ' + (Select abbreviation from tblstate where stateid = c.stateid ) end + 
case when c.ZipCode is null then '' else ' ' + c.ZipCode end like  @Address
and isnull(g.name,'') like @GroupName
and coalesce((select distinct isnull(p.areacode,'') + isnull(p.number,'') + ', '
from tblcreditorphone cp
inner join tblphone p on p.phoneid = cp.phoneid
where cp.creditorid = c.creditorid
and p.phonetypeid in (21,23)
For XML Path('')),'') like @phone
Order By c.name

End
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCreditorGroups]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetCreditorGroups]
(
	@creditor varchar(50),
	@street varchar(50) = null,
	@street2 varchar(50) = null,
	@city varchar(50) = null,
	@stateid int = null,
	@returnnewaddress bit = 1
)
as
begin

	declare @diff int, @count int
	set @diff = 3
	set @count = 0
	
	if @returnnewaddress = 0 begin
		set @diff = 99 -- don't return new address records
		set @count = 1 -- only return groups with matching addresses
	end
	
	select 
		g.creditorgroupid, 
		c.creditorid, 
		replace(isnull(c.street,'-'),',',' ') [street], 
		replace(isnull(c.street2,''),',',' ') [street2], 
		replace(isnull(c.city,''),',',' ') [city], 
		replace(isnull(c.zipcode,''),',',' ') [zipcode], 
		isnull(s.abbreviation,'') [state], 
		c.validated,
		1 [rating],
		replace(g.name,',',' ') [creditorgroup],
		isnull(c.stateid,-1) [stateid],
		c.created, 
		u.firstname + ' ' + u.lastname [createdby], 
		ug.name [dept]
	into #creditors
	from tblcreditorgroup g
	join tblcreditor c on c.creditorgroupid = g.creditorgroupid
	left join tblstate s on s.stateid = c.stateid 
	left join tbluser u on u.userid = c.createdby 
	left join tblusergroup ug on ug.usergroupid = u.usergroupid
	where (difference(ltrim(rtrim(g.name)), @creditor) > 3 or difference(@creditor, ltrim(rtrim(g.name))) > 3)
		and (@street is null or difference(ltrim(rtrim(c.street)), @street) > 3)
		and (@street2 is null or difference(ltrim(rtrim(c.street2)), @street2) > 3)
		and (@city is null or difference(ltrim(rtrim(c.city)), @city) > 3)
		and (@stateid is null or c.stateid = @stateid)


	insert #creditors (creditorgroupid,creditorid,street,street2,city,zipcode,[state],validated,rating,creditorgroup,stateid,created,createdby,dept)
	select creditorgroupid,creditorid,street,street2,city,zipcode,[state],validated,rating,creditorgroup,stateid,created,createdby,dept
	from (
		select 
			g.creditorgroupid, 
			c.creditorid, 
			replace(isnull(c.street,'-'),',',' ') [street], 
			replace(isnull(c.street2,''),',',' ') [street2], 
			replace(isnull(c.city,''),',',' ') [city], 
			replace(isnull(c.zipcode,''),',',' ') [zipcode], 
			isnull(s.abbreviation,'') [state], 
			c.validated,
			2 [rating],
			replace(g.name,',',' ') [creditorgroup],
			isnull(c.stateid,-1) [stateid],
			c.created, 
			u.firstname + ' ' + u.lastname [createdby], 
			ug.name [dept]
		from tblcreditorgroup g
		join tblcreditor c on c.creditorgroupid = g.creditorgroupid
		left join tblstate s on s.stateid = c.stateid 
		left join tbluser u on u.userid = c.createdby 
		left join tblusergroup ug on ug.usergroupid = u.usergroupid
		where (g.name like '%'+replace(@creditor,' ','%')+'%')
			and (@street is null or c.street like '%'+replace(@street,' ','%')+'%')
			and (@street2 is null or c.street2 like '%'+replace(@street2,' ','%')+'%')
			and (@city is null or c.city like '%'+replace(@city,' ','%')+'%')
			and (@stateid is null or c.stateid = @stateid)
	) d
	where not exists (select 1 from #creditors c where c.creditorid = d.creditorid)
		
	
	-- creditor groups
	select g.creditorgroupid, replace(g.name,',',' ') [creditorgroup], count(distinct c.creditorid) [NoCreditors],
		case when g.name = @creditor then 2 else 1 end [rating]
	into #groups
	from tblcreditorgroup g
	left join #creditors c on c.creditorgroupid = g.creditorgroupid
	where g.name like '%'+replace(@creditor,' ','%')+'%'
	group by g.creditorgroupid, g.name
	having count(distinct c.creditorid) >= @count

	insert #groups (creditorgroupid,creditorgroup,nocreditors,rating)
	select creditorgroupid,creditorgroup,nocreditors,rating
	from (
		select g.creditorgroupid, replace(g.name,',',' ') [creditorgroup], count(distinct c.creditorid) [NoCreditors],
		case when g.name = @creditor then 2 else 0 end [rating]
		from tblcreditorgroup g
		left join #creditors c on c.creditorgroupid = g.creditorgroupid
		where (difference(ltrim(rtrim(g.name)), @creditor) > 3 or difference(@creditor, ltrim(rtrim(g.name))) > 3)
		group by g.creditorgroupid, g.name
		having count(distinct c.creditorid) >= @count
	) d
	where not exists (select 1 from #groups g where g.creditorgroupid = d.creditorgroupid)

	select * from #groups
	order by [rating] desc, [NoCreditors] desc, [creditorgroup]		
	
	
	-- creditors
	select * from #creditors
		
	union all
	
	select distinct
		g.creditorgroupid, 
		-1 [creditorid], 
		'+ New Addess' [street], 
		'' [street2], 
		'' [city], 
		'' [zipcode], 
		'' [state], 
		null [validated],
		0 [rating],
		g.name [creditorgroup],
		-1 [stateid],
		'1/1/1900' [created],
		'' [createdby],
		'' [dept]
	from tblcreditorgroup g
	where (difference(ltrim(rtrim(g.name)), @creditor) > @diff or difference(@creditor, ltrim(rtrim(g.name))) > @diff
		or g.name like '%'+replace(@creditor,' ','%')+'%')
		and @diff <> 99
		
	order by creditorgroupid, validated desc, rating desc, city, street


	drop table #creditors
	drop table #groups
	
end
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertMatterClassification]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <04 - 23 December 2009>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Saving the tasks of a matter
*/
CREATE procedure [dbo].[stp_InsertMatterClassification]
(
	@MatterId int,
	@ClassificationId int,
	@UserId int
)

as

insert INTO tblMatterClassification
(
MatterId
,ClassificationID
,CreatedDate
,CreatedBy
)

values
(
@MatterId,
@ClassificationId,
getdate(),
@UserId
)
GO
/****** Object:  StoredProcedure [dbo].[usp_GetErrorInfo]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetErrorInfo]
AS
SELECT
    ERROR_NUMBER() AS ErrorNumber
    ,ERROR_SEVERITY() AS ErrorSeverity
    ,ERROR_STATE() AS ErrorState
    ,ERROR_PROCEDURE() AS ErrorProcedure
    ,ERROR_LINE() AS ErrorLine
    ,ERROR_MESSAGE() AS ErrorMessage;
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertImportedClient]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertImportedClient]
@JobId int,
@SourceId int,
@ExternalClientId varchar(50)
AS
BEGIN
Insert Into tblImportedClient(ImportJobId, SourceId, ExternalClientId)
Values (@JobId, @SourceId, @ExternalClientId)

Select SCOPE_IDENTITY() 
END
GO
/****** Object:  StoredProcedure [dbo].[sp_who_dms]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_who_dms]  --- 1995/11/28 15:48
       @loginame sysname = NULL --or 'active'
as

declare	 @spidlow	int,
		 @spidhigh	int,
		 @spid		int,
		 @sid		varbinary(85)

select	 @spidlow	=     0
		,@spidhigh	= 32767


if (	@loginame is not NULL
   AND	upper(@loginame collate Latin1_General_CI_AS) = 'ACTIVE'
   )
	begin

	select spid , ecid, status
              ,loginame=rtrim(loginame)
	      ,hostname ,blk=convert(char(5),blocked)
	      ,dbname = case
						when dbid = 0 then null
						when dbid <> 0 then db_name(dbid)
					end
		  ,cmd
		  ,request_id
	INTO #dms.tmpSys
	from  master.dbo.sysprocesses
	where spid >= @spidlow and spid <= @spidhigh AND
	      upper(cmd) <> 'AWAITING COMMAND'

	return (0)
	end

if (@loginame is not NULL
   AND	upper(@loginame collate Latin1_General_CI_AS) <> 'ACTIVE'
   )
begin
	if (@loginame like '[0-9]%')	-- is a spid.
	begin
		select @spid = convert(int, @loginame)
		select spid, ecid, status,
			   loginame=rtrim(loginame),
			   hostname,blk = convert(char(5),blocked),
			   dbname = case
							when dbid = 0 then null
							when dbid <> 0 then db_name(dbid)
						end
			  ,cmd
			  ,request_id
		from  master.dbo.sysprocesses
		where spid = @spid
	end
	else
	begin
		select @sid = suser_sid(@loginame)
		if (@sid is null)
		begin
			raiserror(15007,-1,-1,@loginame)
			return (1)
		end
		select spid, ecid, status,
			   loginame=rtrim(loginame),
			   hostname ,blk=convert(char(5),blocked),
			   dbname = case
							when dbid = 0 then null
							when dbid <> 0 then db_name(dbid)
						end
			   ,cmd
			   ,request_id
		from  master.dbo.sysprocesses
		where sid = @sid
	end
	return (0)
end


-- loginame arg is null
select spid,
	   ecid,
	   status,
       loginame=rtrim(loginame),
	   hostname,
	   blk=convert(char(5),blocked),
	   dbname = case
					when dbid = 0 then null
					when dbid <> 0 then db_name(dbid)
				end
	   ,cmd
	   ,request_id
from  master.dbo.sysprocesses
where spid >= @spidlow and spid <= @spidhigh



return (0) -- sp_who
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_Sidebar_getAssociated]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_Sidebar_getAssociated]
	(
		@Companyid int
	)
AS
BEGIN
	select 
		a.FirstName
		,a.MiddleName
		,a.LastName
		,a.suffix
		, st.State as [States] 
	from tblAttorney a 
		join tblAttyRelation r on r.AttorneyID = a.AttorneyID and r.CompanyID =  @Companyid  and r.AttyRelation = 'Associated' 
		inner join tblAttyStates st on a.attorneyid = st.attorneyid 
	order by st.State
END

GRANT EXEC ON stp_LetterTemplates_Sidebar_getAssociated TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_PayChargebackAmount]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayChargebackAmount]
	(
		@registerpaymentid int
	)

as

--------------------------------------------------------------------------------
-- LOGIC FOR PAYING CHARGEBACKS AMOUNTS
-- (1) insert all commpayids into chargeback table from tblcommpay where
--     register payment matches
--------------------------------------------------------------------------------

declare @body nvarchar(3000)
declare @subject nvarchar(100)
declare @username nvarchar(50)
declare @clientid int
declare @accountnumber nvarchar(10)

SELECT @username = SYSTEM_USER

SELECT
	@clientid = c.ClientID,
	@accountnumber = c.AccountNumber
FROM
	tblRegisterPayment as rp inner join
	tblRegister as r on r.RegisterID = rp.FeeRegisterID inner join
	tblClient as c on c.ClientID = r.ClientID
WHERE
	rp.RegisterPaymentID = @registerpaymentid


if not EXISTS(SELECT * FROM tblCommChargeback WHERE RegisterPaymentID = @registerpaymentid)
begin
	insert into
		tblcommchargeback
		(
			commpayid,
			chargebackdate,
			registerpaymentid,
			commstructid,
			[percent],
			amount
		)
	select
		commpayid,
		getdate(),
		registerpaymentid,
		commstructid,
		[percent],
		amount
	from
		tblcommpay
	where
		registerpaymentid = @registerpaymentid

	set @subject = 'Chargeback Issued'
	set @body = 'A chargeback on payment ' + cast(@registerpaymentid as nvarchar(50)) + ' was issued for client ' + @accountnumber + ' (' + cast(@clientid as nvarchar(10)) + ') at ' + cast(getdate() as nvarchar(11)) + ' by ' + @username + '.'
end
else
begin
	set @subject = 'Duplicate Chargeback Attemped'
	set @body = 'A duplicate chargeback on payment ' + cast(@registerpaymentid as nvarchar(50)) + ' was attemped for client ' + @accountnumber + ' (' + cast(@clientid as nvarchar(10)) + ') at ' + cast(getdate() as nvarchar(11)) + ' by ' + @username + '.'
end

--exec msdb.dbo.sp_send_dbmail @recipients = 'ctanner@dmsi.local; cnott@dmsi.local', @body = @body, @subject = @subject
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportCreditLiability]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ImportCreditLiability]
(
	@CreditLiabilityID int,
	@LeadApplicantID int,
	@ImportedBy int
)
as
begin
	-- CreditorID must exist in lookup table at this point

	insert tblLeadCreditorInstance (leadapplicantid,creditorgroupid,creditorid,accountnumber,balance,name,street,street2,city,stateid,zipcode,phone,created,createdby,modified,modifiedby)
	select @LeadApplicantID,c.CreditorGroupID,c.CreditorID,l.accountnumber,l.unpaidbalance,c.name,c.street,isnull(c.street2,''),c.city,c.stateid,c.zipcode,case when isnumeric(k.contact) = 1 then k.contact else null end,getdate(),@ImportedBy,getdate(),@ImportedBy
	from tblCreditLiability l
	join tblCreditLiabilityLookup k on k.CreditLiabilityLookupID = l.CreditLiabilityLookupID
	join tblCreditor c on c.CreditorID = k.CreditorID
	where l.CreditLiabilityID = @CreditLiabilityID

	update tblCreditLiability
	set DateImported = getdate(), ImportedBy = @ImportedBy
	where CreditLiabilityID = @CreditLiabilityID

end
GO
/****** Object:  StoredProcedure [dbo].[stp_AddAttorneyState]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AddAttorneyState]
(
	@AttorneyID int
,	@State char(2)
,	@StateBarNum varchar(30)
)
as
begin
/*
	History:
	jhernandez		12/07/07	Created.
*/

if not exists (select 1 from tblAttyStates where AttorneyID = @AttorneyID and State = @State) begin
	insert tblAttyStates (AttorneyId, State, StateBarNum) values (@AttorneyId, @State, @StateBarNum)
end
else begin
	-- Update the record. StateBarNum is the only field that could have changed.
	update tblAttyStates set StateBarNum = @StateBarNum where AttorneyID = @AttorneyID and State = @State
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPaymentsMadeWithRegister]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetPaymentsMadeWithRegister]
	(
		@registerid int
	)

as

select
	tblregisterpayment.registerpaymentid,
	tblregisterpayment.paymentdate,
	tblregisterpayment.feeregisterid,
	tblfeeregister.entrytypeid as feeregisterentrytypeid,
	tblfeeentrytype.name as feeregisterentrytypename,
	tblfeeregister.transactiondate as feeregistertransactiondate,
	tblfeeregister.checknumber as feeregisterchecknumber,
	tblfeeregister.amount as feeregisteramount,
	tblfeeregister.isfullypaid as feeregisterisfullypaid,
	tblregisterpayment.amount,
	tblregisterpayment.voided,
	tblregisterpayment.bounced,
	tblregisterpaymentdeposit.registerpaymentdepositid,
	tblregisterpaymentdeposit.depositregisterid,
	tbldepositregister.entrytypeid as depositregisterentrytypeid,
	tbldepositentrytype.name as depositregisterentrytypename,
	tbldepositregister.transactiondate as depositregistertransactiondate,
	tbldepositregister.checknumber as depositregisterchecknumber,
	tbldepositregister.amount as depositregisteramount,
	tbldepositregister.isfullypaid as depositregisterisfullypaid,
	tblregisterpaymentdeposit.amount as registerpaymentdepositamount,
	tblregisterpaymentdeposit.voided as registerpaymentdepositvoided,
	tblregisterpaymentdeposit.bounced as registerpaymentdepositbounced
from
	tblregisterpayment inner join
	tblregister tblfeeregister on tblregisterpayment.feeregisterid = tblfeeregister.registerid inner join
	tblentrytype tblfeeentrytype on tblfeeregister.entrytypeid = tblfeeentrytype.entrytypeid inner join
	tblregisterpaymentdeposit on tblregisterpaymentdeposit.registerpaymentid = tblregisterpayment.registerpaymentid inner join
	tblregister tbldepositregister on tblregisterpaymentdeposit.depositregisterid = tbldepositregister.registerid inner join
	tblentrytype tbldepositentrytype on tbldepositregister.entrytypeid = tbldepositentrytype.entrytypeid
where
	tblregisterpayment.registerpaymentid in
	(
		select
			registerpaymentid
		from
			tblregisterpaymentdeposit
		where
			depositregisterid = @registerid
	)
order by
	tblregisterpayment.paymentdate, tblregisterpayment.registerpaymentid
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterDetailDelete]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data>
	Description: Removed  attributes for a specified criteria filter
*/


CREATE PROCEDURE [dbo].[stp_NegotiationFilterDetailDelete]
@FilterId int
AS
SET NOCOUNT ON

BEGIN
 DELETE tblNegotiationFilterDetail 
 WHERE FilterId = @FilterId  
END
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_getSettlementInfo]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_settlementimport_getSettlementInfo]
(
	@clientAccountNumber numeric
	, @creditorAcctLastFour varchar(4)
)
as
BEGIN

/* development
	stp_settlementimport_getSettlementInfo 6070327,7061
	declare @clientAccountNumber numeric
	declare @creditorAcctLastFour varchar(4)

	set @clientAccountNumber = 6070327
	set @creditorAcctLastFour =  '7061'

*/
	declare @ssql varchar(max)

	set @ssql = 'select distinct top 1 ' + char(13)
	set @ssql = @ssql + '[Negotiator] = u.username  ' + char(13)
	set @ssql = @ssql + ', [ClientName] = p.firstname + '' '' + p.lastname ' + char(13)
	set @ssql = @ssql + ', [CurrentCreditor] = currcred.name ' + char(13)
	set @ssql = @ssql + ', [OriginalCreditor] = origcred.name ' + char(13)
	set @ssql = @ssql + ', [Code] = ast.Code ' + char(13)	
	set @ssql = @ssql + ', [LastModified] = a.LastModified ' + char(13)
	set @ssql = @ssql + ', [Created] = s.created ' + char(13)
	set @ssql = @ssql + 'from tblsettlements s  ' + char(13)
	set @ssql = @ssql + 'inner join tblaccount a on s.creditoraccountid=a.accountid ' + char(13)
	set @ssql = @ssql + 'left join tblcreditorinstance curr on curr.creditorinstanceid = a.currentcreditorinstanceid ' + char(13)
	set @ssql = @ssql + 'inner join tblcreditor currcred on currcred.creditorid = curr.creditorid ' + char(13)
	set @ssql = @ssql + 'left join tblcreditorinstance orig on orig.creditorinstanceid = a.originalcreditorinstanceid ' + char(13)
	set @ssql = @ssql + 'inner join tblcreditor origcred on origcred.creditorid = orig.creditorid ' + char(13)
	set @ssql = @ssql + 'inner join tbluser u on s.createdby = u.userid ' + char(13)
	set @ssql = @ssql + 'inner join tblclient c on c.clientid = s.clientid  ' + char(13)
	set @ssql = @ssql + 'inner join tblperson p on p.personid = c.primarypersonid ' + char(13)
	set @ssql = @ssql + 'inner join tblAccountStatus ast on ast.AccountStatusID = a.AccountStatusID ' + char(13)
	set @ssql = @ssql + 'where  ' + char(13)
	set @ssql = @ssql + 's.clientid in (select clientid from tblclient where accountnumber = ' + convert(varchar,@clientAccountNumber) + ') ' + char(13)
	set @ssql = @ssql + 'and status = ''a'' ' + char(13)
	set @ssql = @ssql + 'and curr.accountnumber like ''%' + convert(varchar,@creditorAcctLastFour) + char(39) + char(13)
	--set @ssql = @ssql + 'and settlementduedate =  ' + char(39) + @SettlementDueDate + char(39) +  char(13)
	set @ssql = @ssql + 'order by s.created desc ' 

	--print (@ssql)
	exec(@ssql)
END


GRANT EXEC ON stp_settlementimport_getSettlementInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_Sidebar_getPrimaryAndOfCounsel]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_Sidebar_getPrimaryAndOfCounsel]

	(
		@Companyid int
	)
AS
BEGIN
	SELECT 
		a.FirstName
		, a.MiddleName
		, a.LastName
		, ats.State as [States]
		, a.AttorneyID
		, a.Phone1
		, r.AttyRelation
		, a.Suffix 
	FROM tblAttyRelation AS r
		INNER JOIN tblAttorney AS a ON r.AttorneyID = a.AttorneyID 
		INNER JOIN  tblAttyStates AS ats ON a.AttorneyID = ats.AttorneyID 
	WHERE 
		(r.CompanyID =  @Companyid ) 
		AND (r.AttyRelation IN ('Primary', 'Of Counsel','Employee')) 
	order by 
		r.AttyRelation desc
END

GRANT EXEC ON stp_LetterTemplates_Sidebar_getPrimaryAndOfCounsel TO PUBLIC
GO
/****** Object:  Table [dbo].[tblPerson]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblPerson](
	[PersonID] [int] IDENTITY(1,1) NOT NULL,
	[ClientID] [int] NOT NULL,
	[SSN] [varchar](50) NULL,
	[FirstName] [varchar](50) NOT NULL,
	[LastName] [varchar](50) NOT NULL,
	[Gender] [varchar](1) NULL,
	[DateOfBirth] [datetime] NULL,
	[LanguageID] [int] NOT NULL,
	[EmailAddress] [varchar](50) NULL,
	[Street] [varchar](255) NULL,
	[Street2] [varchar](255) NULL,
	[City] [varchar](50) NULL,
	[StateID] [int] NULL,
	[ZipCode] [varchar](50) NULL,
	[Relationship] [varchar](50) NOT NULL,
	[CanAuthorize] [bit] NOT NULL CONSTRAINT [DF_tblPerson_CanAuthorize]  DEFAULT ((0)),
	[Created] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
	[WebCity] [varchar](50) NULL,
	[WebStateID] [int] NULL,
	[WebZipCode] [varchar](50) NULL,
	[WebAreaCode] [varchar](50) NULL,
	[WebTimeZoneID] [int] NULL,
	[ThirdParty] [bit] NOT NULL CONSTRAINT [DF_tblPerson_ThirdParty]  DEFAULT ((0)),
	[IsDeceased] [bit] NULL,
 CONSTRAINT [PK_tblPerson] PRIMARY KEY CLUSTERED 
(
	[PersonID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNumAccountOverThresholdForClient]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetNumAccountOverThresholdForClient]
	(
		@clientid int,
		@availableamount money,
		@mediationthreshold money
	)

as


declare @vAvailableAmount varchar(255)
set @vAvailableAmount=convert(varchar(255),@availableamount)

declare @vMediationThreshold varchar(255)
set @vMediationThreshold=convert(varchar(255),@mediationthreshold)

exec
(
	'select
		count(tblaccount.accountid)
	from
		tblaccount inner join
		tblcreditorinstance on tblaccount.currentcreditorinstanceid = tblcreditorinstance.creditorinstanceid
	where
		not amount = 0 and
		clientid = ' + @clientid + ' and
		(' + @vavailableamount + ' / amount) >= ' + @vmediationthreshold
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterDetailSelect]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Retrieves Criteria Filter Details. This is mainly used by Criteria Builder
*/

CREATE PROCEDURE [dbo].[stp_NegotiationFilterDetailSelect]
@FilterId int
AS

 SELECT
FilterId,
sequence,
FieldName,
Operation,
OperationVisible,
FirstInput,
FirstInputVisible,
JoinClause,
joinClauseVisible,
PctOf,
PctOfVisible,
PctField,
PctFieldVisible
FROM  tblNegotiationFilterDetail 
WHERE FilterId = @FilterId
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationPaging_Test]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
[stp_NegotiationPaging_Test] 'TEST','[AccountID],[ClientID], [ApplicantFullName],[ApplicantLastName],[ApplicantFirstName],[currentcreditoraccountnumber] , [FundsAvailable], [CurrentCreditor], [AccountStatus], [CurrentAmount], LastOffer, OfferDirection','( (RTrim(LTrim(CurrentCreditor)) = ''Arrow Financial Service LLC'')) AND ( ( LTRIM(CurrentCreditor) LIKE  ''[A-J]%'' )) AND ((((((((((( (FundsAvailable >= (0.1 * CurrentAmount))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Capital One'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Chase'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''First Premier Bank'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Jefferson Capital'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Mann Bracken, LLC'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Merrick Bank'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Midland Credit Management, Inc.'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Washington Mutual'') or (((CurrentCreditor = ''Providan'' )  OR (CurrentCreditor = ''Providian'' ) ))))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''World Financial Network National Bank''))))) and (substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''Y'') OR not( ( LTRIM(CurrentCreditor) LIKE  ''[A-Z]%'' )) AND ((((((((((( (FundsAvailable >= (0.1 * CurrentAmount))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Capital One'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Chase'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''First Premier Bank'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Jefferson Capital'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Mann Bracken, LLC'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Merrick Bank'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Midland Credit Management, Inc.'')))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''Washington Mutual'') or (((CurrentCreditor = ''Providan'' )  OR (CurrentCreditor = ''Providian'' ) ))))) and not (( (RTrim(LTrim(CurrentCreditor)) = ''World Financial Network National Bank''))))) and (substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''Y'')','clientid,lastoffer desc',1,50

*/


CREATE procedure [dbo].[stp_NegotiationPaging_Test]
@TableName varchar(max), @DisplayColumns varchar(max),@Where varchar(max), @OrderBy varchar(max), @PageNum int, @PageSize int
as
--declare @where nvarchar(max) set @where = '(substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''Y'') AND (( (((CurrentCreditor LIKE ''%Attorney at Law Hosto and Buchan PLLC%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchan%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchan, P.L.L.C.%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchan, P.L.L.C. Attorneys at Law%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchan, PLLC%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchan%'' )  OR (CurrentCreditor LIKE ''%Hosto & BuchanT.L.L.C. Attornety at Law%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchman PLLC%'' )  OR (CurrentCreditor LIKE ''%Hosto & Buchan, P.L.L.C. Attorneys at Law%'' )  OR (CurrentCreditor LIKE ''%Hosto and Buchan, P.L.L.C. Attorneys at Law%'' )  OR (CurrentCreditor LIKE ''%Hosto Buchan and Lawrence%'' )  OR (CurrentCreditor LIKE ''%Hosto Buchan Prater and Lawrence%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater & Lawrence, P.L.L.C.%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater and Lawrence%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater and Lawrence P.L.L.C.%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater and Lawrence,  P.L.L.C.%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater and Lawrence, P.L.L. C.%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater and Lawrence, P.L.L.C%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater and lawrence, P.L.L.C.%'' )  OR (CurrentCreditor LIKE ''%Hosto, Buchan, Prater, and Lawrence, P.L.L.C.%'' )  OR (CurrentCreditor LIKE ''%Hosto,Buchan,Prater and Lawrence, P.L.L.C%'' ) )))) AND ((substring(ApplicantLastName, 1, 1) = '' '' OR substring(ApplicantLastName, 1, 1) = ''"'' OR substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''Q'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''X'' OR substring(ApplicantLastName, 1, 1) = ''Y'' OR substring(ApplicantLastName, 1, 1) = ''Z'') AND (( ( LTRIM(CurrentCreditor) LIKE  ''[A-J]%'' ))) AND ((substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''Y'') AND (not( ( LTRIM(CurrentCreditor) LIKE  ''[A-Z]%'' ))) AND (((( (CurrentAmount >= (0.1 * CurrentAmount))) and not ( (((CurrentCreditor = ''Cap One'' )  OR (CurrentCreditor = ''Cap. One'' )  OR (CurrentCreditor = ''Cap.One'' )  OR (CurrentCreditor = ''Capial One'' )  OR (CurrentCreditor = ''Capita One'' )  OR (CurrentCreditor = ''Capital  One'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital One (Pre Charge off)'' )  OR (CurrentCreditor = ''Capital One Auto Finance'' )  OR (CurrentCreditor = ''Capital One Bank'' )  OR (CurrentCreditor = ''Capital One Card Ctr'' )  OR (CurrentCreditor = ''Capital One Credit Cards'' )  OR (CurrentCreditor = ''Capital One Installment Loans'' )  OR (CurrentCreditor = ''Capital One Recovery'' )  OR (CurrentCreditor = ''Capital One Services'' )  OR (CurrentCreditor = ''Capital One Services Inc.'' )  OR (CurrentCreditor = ''Capital One Services, Inc'' )  OR (CurrentCreditor = ''Capital One(settled)'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital Recovery Service'' )  OR (CurrentCreditor = ''Capital Recovery Service, LLC'' )  OR (CurrentCreditor = ''Capital Recovery Services'' )  OR (CurrentCreditor = ''Capitol One'' )  OR (CurrentCreditor = ''Captial One'' )  OR (CurrentCreditor = ''Captial One Bank'' ) )) or (((CurrentCreditor = ''Capital  One'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital One (Pre Charge off)'' )  OR (CurrentCreditor = ''Capital One Auto Finance'' )  OR (CurrentCreditor = ''Capital One Bank'' )  OR (CurrentCreditor = ''Capital One Card Ctr'' )  OR (CurrentCreditor = ''Capital One Credit Cards'' )  OR (CurrentCreditor = ''Capital One Installment Loans'' )  OR (CurrentCreditor = ''Capital One Recovery'' )  OR (CurrentCreditor = ''Capital One Services'' )  OR (CurrentCreditor = ''Capital One Services Inc.'' )  OR (CurrentCreditor = ''Capital One Services, Inc'' )  OR (CurrentCreditor = ''Capital One'' ) ))) and not ( (((CurrentCreditor = ''Bank One/ Chase'' )  OR (CurrentCreditor = ''Bank One/Chase'' )  OR (CurrentCreditor = ''BP (Chase)'' )  OR (CurrentCreditor = ''Chase'' )  OR (CurrentCreditor = ''Chase / Bank One'' )  OR (CurrentCreditor = ''Chase / First USA'' )  OR (CurrentCreditor = ''Chase / mann bracken'' )  OR (CurrentCreditor = ''Chase Bank'' )  OR (CurrentCreditor = ''Chase Bank USA, N.A.'' )  OR (CurrentCreditor = ''Chase card services'' )  OR (CurrentCreditor = ''Chase Cardmember Services'' )  OR (CurrentCreditor = ''Chase County Community Hospital'' )  OR (CurrentCreditor = ''Chase Credit Card'' )  OR (CurrentCreditor = ''Chase First USA'' )  OR (CurrentCreditor = ''Chase Legal Department'' )  OR (CurrentCreditor = ''Chase Litigation dept'' )  OR (CurrentCreditor = ''Chase Manhattan Bank'' )  OR (CurrentCreditor = ''Chase Receivables'' )  OR (CurrentCreditor = ''Chase Recievables'' )  OR (CurrentCreditor = ''Chase Recovery'' )  OR (CurrentCreditor = ''Chase Student Loan Servicing, LLC'' )  OR (CurrentCreditor = ''Chase Visa'' )  OR (CurrentCreditor = ''Chase-Disney'' )  OR (CurrentCreditor = ''Chase'' )  OR (CurrentCreditor = ''Circuit City/Chase'' )  OR (CurrentCreditor = ''Disney Rewards (Chase)'' )  OR (CurrentCreditor = ''JP Morgan Chase'' )  OR (CurrentCreditor = ''JP Morgan Chase Bank'' )  OR (CurrentCreditor = ''JP Morgan Chase Legal Department'' )  OR (CurrentCreditor = ''JP MORGAN CHASE LEGAL DEPT'' )  OR (CurrentCreditor = ''JP Morgan Chase Legal Dept.'' )  OR (CurrentCreditor = ''JPMorgan Chase Legal  Dept.'' )  OR (CurrentCreditor = ''JPMorgan Chase Legal Department'' )  OR (CurrentCreditor = ''New York Life chase'' )  OR (CurrentCreditor = ''United Mileage Plus / Chase'' ) ))) and not ( (((CurrentCreditor = ''First  Premier'' )  OR (CurrentCreditor = ''First Premeir Bank'' )  OR (CurrentCreditor = ''First Premier'' )  OR (CurrentCreditor = ''First Premier'' )  OR (CurrentCreditor = ''First Premier Bank'' )  OR (CurrentCreditor = ''First Premier Bank.'' )  OR (CurrentCreditor = ''First Premier Bank'' )  OR (CurrentCreditor = ''First Premiere Bank'' ) ))) and not ( (((CurrentCreditor = ''Jefferson Capital'' )  OR (CurrentCreditor = ''Jefferson Capital Systems'' )  OR (CurrentCreditor = ''Jefferson Capital Systems, LLC'' ) ))) and not ( (((CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Chase / mann bracken'' )  OR (CurrentCreditor = ''Mann  Bracken'' )  OR (CurrentCreditor = ''Mann  Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann  Bracken LLC'' )  OR (CurrentCreditor = ''Mann  Bracken, LLC'' )  OR (CurrentCreditor = ''Mann &  Bracken LLC'' )  OR (CurrentCreditor = ''Mann &  Bracken LLC'' )  OR (CurrentCreditor = ''Mann & Bracken'' )  OR (CurrentCreditor = ''Mann & Bracken LLC'' )  OR (CurrentCreditor = ''Mann & Braken'' )  OR (CurrentCreditor = ''Mann and Bracken'' )  OR (CurrentCreditor = ''Mann Backen, LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Bracken  LLC'' )  OR (CurrentCreditor = ''Mann Bracken , LLC'' )  OR (CurrentCreditor = ''Mann Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Bracken Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken L.L.C.'' )  OR (CurrentCreditor = ''Mann Bracken LLC'' )  OR (CurrentCreditor = ''Mann Bracken,  LLC'' )  OR (CurrentCreditor = ''Mann Bracken, L.L.C.'' )  OR (CurrentCreditor = ''Mann Bracken, LCC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC, Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken, LLC.'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Braken'' )  OR (CurrentCreditor = ''Mann Braken,LLC'' )  OR (CurrentCreditor = ''Mann Brocken'' )  OR (CurrentCreditor = ''Mann, Bracken, Layng & Knezo, Attorneys at Law'' )  OR (CurrentCreditor = ''Mannbracken'' ) ))) and not ( (((CurrentCreditor = ''Merrick   Bank'' )  OR (CurrentCreditor = ''Merrick  Bank'' )  OR (CurrentCreditor = ''Merrick Bank'' )  OR (CurrentCreditor = ''Merrick Bank Card'' )  OR (CurrentCreditor = ''Merrick Bank.'' )  OR (CurrentCreditor = ''Merrick Bank'' ) ))) and not ( (RTrim(LTrim(CurrentCreditor)) = ''WAMU'') or (((CurrentCreditor = ''Washington  Mutual'' )  OR (CurrentCreditor = ''Washington Mutal'' )  OR (CurrentCreditor = ''Washington Mutal Bank'' )  OR (CurrentCreditor = ''Washington Mutua'' )  OR (CurrentCreditor = ''Washington Mutual'' )  OR (CurrentCreditor = ''Washington Mutual'' ) )) or (((CurrentCreditor = ''Providian'' )  OR (CurrentCreditor = ''Providian Bancorp'' )  OR (CurrentCreditor = ''Providian Financial'' )  OR (CurrentCreditor = ''Providian National Bank'' ) ))) and not ( (((CurrentCreditor = ''MCM  Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''Midland'' )  OR (CurrentCreditor = ''Midland Credit'' )  OR (CurrentCreditor = ''Midland Credit Agency'' )  OR (CurrentCreditor = ''Midland Credit Management'' )  OR (CurrentCreditor = ''Midland Credit Management Inc.'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc.'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc.'' )  OR (CurrentCreditor = ''Midland Credit MGMT Inc.'' )  OR (CurrentCreditor = ''Midland Funding LLC'' )  OR (CurrentCreditor = ''Midland Marketing'' ) ))) and not ( (((CurrentCreditor LIKE ''%Chadwicks-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Chadwicks/WFNNB%'' )  OR (CurrentCreditor LIKE ''%Express-WFNNB%'' )  OR (CurrentCreditor LIKE ''%King Size/WFNNB%'' )  OR (CurrentCreditor LIKE ''%La Redoute-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Maurices-WFNNB%'' )  OR (CurrentCreditor LIKE ''%New York and Company-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Peebles-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Sports Authority WFNNB%'' )  OR (CurrentCreditor LIKE ''%Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Dress Barn%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Express%'' )  OR (CurrentCreditor LIKE ''%WFNNB - J. Crew%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Jessica London%'' )  OR (CurrentCreditor LIKE ''%WFNNB - King Size%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Lane Bryant%'' )  OR (CurrentCreditor LIKE ''%WFNNB - My World Mastercard%'' )  OR (CurrentCreditor LIKE ''%WFNNB - New York and Company%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Peebles%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Roamans%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB Brylane Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB Friedmans%'' )  OR (CurrentCreditor LIKE ''%WFNNB Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB Victorias Secret%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Avenue%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Dressbarn%'' )  OR (CurrentCreditor LIKE ''%WFNNB- King Size%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Spiegel%'' )  OR (CurrentCreditor LIKE ''%WFNNB-American%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Avenue%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Brylane Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Dress Barn%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Express%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Fina%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Goody%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Gordmans%'' )  OR (CurrentCreditor LIKE ''%WFNNB-La Redoute%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Lane Bryant%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Metrostyle%'' )  OR (CurrentCreditor LIKE ''%WFNNB-New York and Company%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Roamans%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Shop at Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Spiegel%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Stage Stores%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Value City%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Victorica%'' )  OR (CurrentCreditor LIKE ''%WFNNB/Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB%'' )  OR (CurrentCreditor LIKE ''%WFNNB / Woman Within%'' ) ))) and not ( (CurrentCreditor LIKE ''%Zwickers%'' ) or (CurrentCreditor LIKE ''%Eskanos%'' ) or (CurrentCreditor LIKE ''%winn%'' ) or (CurrentCreditor LIKE ''%patenude%'' ) or (CurrentCreditor LIKE ''%peter roach%'' )))  ) AND ( substring(ApplicantLastName, 1, 1) = '' '' OR substring(ApplicantLastName, 1, 1) = ''"'' OR substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''Q'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''X'' OR substring(ApplicantLastName, 1, 1) = ''Y'' OR substring(ApplicantLastName, 1, 1) = ''Z'')) OR (substring(ApplicantLastName, 1, 1) = '' '' OR substring(ApplicantLastName, 1, 1) = ''"'' OR substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''Q'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''X'' OR substring(ApplicantLastName, 1, 1) = ''Y'' OR substring(ApplicantLastName, 1, 1) = ''Z'') AND (( ( LTRIM(CurrentCreditor) LIKE  ''[A-J]%'' ))) AND (((( (CurrentAmount >= (0.1 * CurrentAmount))) and not ( (((CurrentCreditor = ''Cap One'' )  OR (CurrentCreditor = ''Cap. One'' )  OR (CurrentCreditor = ''Cap.One'' )  OR (CurrentCreditor = ''Capial One'' )  OR (CurrentCreditor = ''Capita One'' )  OR (CurrentCreditor = ''Capital  One'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital One (Pre Charge off)'' )  OR (CurrentCreditor = ''Capital One Auto Finance'' )  OR (CurrentCreditor = ''Capital One Bank'' )  OR (CurrentCreditor = ''Capital One Card Ctr'' )  OR (CurrentCreditor = ''Capital One Credit Cards'' )  OR (CurrentCreditor = ''Capital One Installment Loans'' )  OR (CurrentCreditor = ''Capital One Recovery'' )  OR (CurrentCreditor = ''Capital One Services'' )  OR (CurrentCreditor = ''Capital One Services Inc.'' )  OR (CurrentCreditor = ''Capital One Services, Inc'' )  OR (CurrentCreditor = ''Capital One(settled)'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital Recovery Service'' )  OR (CurrentCreditor = ''Capital Recovery Service, LLC'' )  OR (CurrentCreditor = ''Capital Recovery Services'' )  OR (CurrentCreditor = ''Capitol One'' )  OR (CurrentCreditor = ''Captial One'' )  OR (CurrentCreditor = ''Captial One Bank'' ) )) or (((CurrentCreditor = ''Capital  One'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital One (Pre Charge off)'' )  OR (CurrentCreditor = ''Capital One Auto Finance'' )  OR (CurrentCreditor = ''Capital One Bank'' )  OR (CurrentCreditor = ''Capital One Card Ctr'' )  OR (CurrentCreditor = ''Capital One Credit Cards'' )  OR (CurrentCreditor = ''Capital One Installment Loans'' )  OR (CurrentCreditor = ''Capital One Recovery'' )  OR (CurrentCreditor = ''Capital One Services'' )  OR (CurrentCreditor = ''Capital One Services Inc.'' )  OR (CurrentCreditor = ''Capital One Services, Inc'' )  OR (CurrentCreditor = ''Capital One'' ) ))) and not ( (((CurrentCreditor = ''Bank One/ Chase'' )  OR (CurrentCreditor = ''Bank One/Chase'' )  OR (CurrentCreditor = ''BP (Chase)'' )  OR (CurrentCreditor = ''Chase'' )  OR (CurrentCreditor = ''Chase / Bank One'' )  OR (CurrentCreditor = ''Chase / First USA'' )  OR (CurrentCreditor = ''Chase / mann bracken'' )  OR (CurrentCreditor = ''Chase Bank'' )  OR (CurrentCreditor = ''Chase Bank USA, N.A.'' )  OR (CurrentCreditor = ''Chase card services'' )  OR (CurrentCreditor = ''Chase Cardmember Services'' )  OR (CurrentCreditor = ''Chase County Community Hospital'' )  OR (CurrentCreditor = ''Chase Credit Card'' )  OR (CurrentCreditor = ''Chase First USA'' )  OR (CurrentCreditor = ''Chase Legal Department'' )  OR (CurrentCreditor = ''Chase Litigation dept'' )  OR (CurrentCreditor = ''Chase Manhattan Bank'' )  OR (CurrentCreditor = ''Chase Receivables'' )  OR (CurrentCreditor = ''Chase Recievables'' )  OR (CurrentCreditor = ''Chase Recovery'' )  OR (CurrentCreditor = ''Chase Student Loan Servicing, LLC'' )  OR (CurrentCreditor = ''Chase Visa'' )  OR (CurrentCreditor = ''Chase-Disney'' )  OR (CurrentCreditor = ''Chase'' )  OR (CurrentCreditor = ''Circuit City/Chase'' )  OR (CurrentCreditor = ''Disney Rewards (Chase)'' )  OR (CurrentCreditor = ''JP Morgan Chase'' )  OR (CurrentCreditor = ''JP Morgan Chase Bank'' )  OR (CurrentCreditor = ''JP Morgan Chase Legal Department'' )  OR (CurrentCreditor = ''JP MORGAN CHASE LEGAL DEPT'' )  OR (CurrentCreditor = ''JP Morgan Chase Legal Dept.'' )  OR (CurrentCreditor = ''JPMorgan Chase Legal  Dept.'' )  OR (CurrentCreditor = ''JPMorgan Chase Legal Department'' )  OR (CurrentCreditor = ''New York Life chase'' )  OR (CurrentCreditor = ''United Mileage Plus / Chase'' ) ))) and not ( (((CurrentCreditor = ''First  Premier'' )  OR (CurrentCreditor = ''First Premeir Bank'' )  OR (CurrentCreditor = ''First Premier'' )  OR (CurrentCreditor = ''First Premier'' )  OR (CurrentCreditor = ''First Premier Bank'' )  OR (CurrentCreditor = ''First Premier Bank.'' )  OR (CurrentCreditor = ''First Premier Bank'' )  OR (CurrentCreditor = ''First Premiere Bank'' ) ))) and not ( (((CurrentCreditor = ''Jefferson Capital'' )  OR (CurrentCreditor = ''Jefferson Capital Systems'' )  OR (CurrentCreditor = ''Jefferson Capital Systems, LLC'' ) ))) and not ( (((CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Chase / mann bracken'' )  OR (CurrentCreditor = ''Mann  Bracken'' )  OR (CurrentCreditor = ''Mann  Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann  Bracken LLC'' )  OR (CurrentCreditor = ''Mann  Bracken, LLC'' )  OR (CurrentCreditor = ''Mann &  Bracken LLC'' )  OR (CurrentCreditor = ''Mann &  Bracken LLC'' )  OR (CurrentCreditor = ''Mann & Bracken'' )  OR (CurrentCreditor = ''Mann & Bracken LLC'' )  OR (CurrentCreditor = ''Mann & Braken'' )  OR (CurrentCreditor = ''Mann and Bracken'' )  OR (CurrentCreditor = ''Mann Backen, LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Bracken  LLC'' )  OR (CurrentCreditor = ''Mann Bracken , LLC'' )  OR (CurrentCreditor = ''Mann Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Bracken Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken L.L.C.'' )  OR (CurrentCreditor = ''Mann Bracken LLC'' )  OR (CurrentCreditor = ''Mann Bracken,  LLC'' )  OR (CurrentCreditor = ''Mann Bracken, L.L.C.'' )  OR (CurrentCreditor = ''Mann Bracken, LCC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC, Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken, LLC.'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Braken'' )  OR (CurrentCreditor = ''Mann Braken,LLC'' )  OR (CurrentCreditor = ''Mann Brocken'' )  OR (CurrentCreditor = ''Mann, Bracken, Layng & Knezo, Attorneys at Law'' )  OR (CurrentCreditor = ''Mannbracken'' ) ))) and not ( (((CurrentCreditor = ''Merrick   Bank'' )  OR (CurrentCreditor = ''Merrick  Bank'' )  OR (CurrentCreditor = ''Merrick Bank'' )  OR (CurrentCreditor = ''Merrick Bank Card'' )  OR (CurrentCreditor = ''Merrick Bank.'' )  OR (CurrentCreditor = ''Merrick Bank'' ) ))) and not ( (RTrim(LTrim(CurrentCreditor)) = ''WAMU'') or (((CurrentCreditor = ''Washington  Mutual'' )  OR (CurrentCreditor = ''Washington Mutal'' )  OR (CurrentCreditor = ''Washington Mutal Bank'' )  OR (CurrentCreditor = ''Washington Mutua'' )  OR (CurrentCreditor = ''Washington Mutual'' )  OR (CurrentCreditor = ''Washington Mutual'' ) )) or (((CurrentCreditor = ''Providian'' )  OR (CurrentCreditor = ''Providian Bancorp'' )  OR (CurrentCreditor = ''Providian Financial'' )  OR (CurrentCreditor = ''Providian National Bank'' ) ))) and not ( (((CurrentCreditor = ''MCM  Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''Midland'' )  OR (CurrentCreditor = ''Midland Credit'' )  OR (CurrentCreditor = ''Midland Credit Agency'' )  OR (CurrentCreditor = ''Midland Credit Management'' )  OR (CurrentCreditor = ''Midland Credit Management Inc.'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc.'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc.'' )  OR (CurrentCreditor = ''Midland Credit MGMT Inc.'' )  OR (CurrentCreditor = ''Midland Funding LLC'' )  OR (CurrentCreditor = ''Midland Marketing'' ) ))) and not ( (((CurrentCreditor LIKE ''%Chadwicks-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Chadwicks/WFNNB%'' )  OR (CurrentCreditor LIKE ''%Express-WFNNB%'' )  OR (CurrentCreditor LIKE ''%King Size/WFNNB%'' )  OR (CurrentCreditor LIKE ''%La Redoute-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Maurices-WFNNB%'' )  OR (CurrentCreditor LIKE ''%New York and Company-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Peebles-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Sports Authority WFNNB%'' )  OR (CurrentCreditor LIKE ''%Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Dress Barn%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Express%'' )  OR (CurrentCreditor LIKE ''%WFNNB - J. Crew%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Jessica London%'' )  OR (CurrentCreditor LIKE ''%WFNNB - King Size%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Lane Bryant%'' )  OR (CurrentCreditor LIKE ''%WFNNB - My World Mastercard%'' )  OR (CurrentCreditor LIKE ''%WFNNB - New York and Company%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Peebles%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Roamans%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB Brylane Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB Friedmans%'' )  OR (CurrentCreditor LIKE ''%WFNNB Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB Victorias Secret%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Avenue%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Dressbarn%'' )  OR (CurrentCreditor LIKE ''%WFNNB- King Size%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Spiegel%'' )  OR (CurrentCreditor LIKE ''%WFNNB-American%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Avenue%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Brylane Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Dress Barn%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Express%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Fina%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Goody%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Gordmans%'' )  OR (CurrentCreditor LIKE ''%WFNNB-La Redoute%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Lane Bryant%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Metrostyle%'' )  OR (CurrentCreditor LIKE ''%WFNNB-New York and Company%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Roamans%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Shop at Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Spiegel%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Stage Stores%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Value City%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Victorica%'' )  OR (CurrentCreditor LIKE ''%WFNNB/Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB%'' )  OR (CurrentCreditor LIKE ''%WFNNB / Woman Within%'' ) ))) and not ( (CurrentCreditor LIKE ''%Zwickers%'' ) or (CurrentCreditor LIKE ''%Eskanos%'' ) or (CurrentCreditor LIKE ''%winn%'' ) or (CurrentCreditor LIKE ''%patenude%'' ) or (CurrentCreditor LIKE ''%peter roach%'' )))  ) AND ( substring(ApplicantLastName, 1, 1) = '' '' OR substring(ApplicantLastName, 1, 1) = ''"'' OR substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''Q'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''X'' OR substring(ApplicantLastName, 1, 1) = ''Y'' OR substring(ApplicantLastName, 1, 1) = ''Z'')) OR (substring(ApplicantLastName, 1, 1) = '' '' OR substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''Q'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''X'' OR substring(ApplicantLastName, 1, 1) = ''Y'' OR substring(ApplicantLastName, 1, 1) = ''Z'') AND (( ( LTRIM(CurrentCreditor) LIKE  ''[K-Z]%'' ))) AND (((( (CurrentAmount >= (0.1 * CurrentAmount))) and not ( (((CurrentCreditor = ''Cap One'' )  OR (CurrentCreditor = ''Cap. One'' )  OR (CurrentCreditor = ''Cap.One'' )  OR (CurrentCreditor = ''Capial One'' )  OR (CurrentCreditor = ''Capita One'' )  OR (CurrentCreditor = ''Capital  One'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital One (Pre Charge off)'' )  OR (CurrentCreditor = ''Capital One Auto Finance'' )  OR (CurrentCreditor = ''Capital One Bank'' )  OR (CurrentCreditor = ''Capital One Card Ctr'' )  OR (CurrentCreditor = ''Capital One Credit Cards'' )  OR (CurrentCreditor = ''Capital One Installment Loans'' )  OR (CurrentCreditor = ''Capital One Recovery'' )  OR (CurrentCreditor = ''Capital One Services'' )  OR (CurrentCreditor = ''Capital One Services Inc.'' )  OR (CurrentCreditor = ''Capital One Services, Inc'' )  OR (CurrentCreditor = ''Capital One(settled)'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital Recovery Service'' )  OR (CurrentCreditor = ''Capital Recovery Service, LLC'' )  OR (CurrentCreditor = ''Capital Recovery Services'' )  OR (CurrentCreditor = ''Capitol One'' )  OR (CurrentCreditor = ''Captial One'' )  OR (CurrentCreditor = ''Captial One Bank'' ) )) or (((CurrentCreditor = ''Capital  One'' )  OR (CurrentCreditor = ''Capital One'' )  OR (CurrentCreditor = ''Capital One (Pre Charge off)'' )  OR (CurrentCreditor = ''Capital One Auto Finance'' )  OR (CurrentCreditor = ''Capital One Bank'' )  OR (CurrentCreditor = ''Capital One Card Ctr'' )  OR (CurrentCreditor = ''Capital One Credit Cards'' )  OR (CurrentCreditor = ''Capital One Installment Loans'' )  OR (CurrentCreditor = ''Capital One Recovery'' )  OR (CurrentCreditor = ''Capital One Services'' )  OR (CurrentCreditor = ''Capital One Services Inc.'' )  OR (CurrentCreditor = ''Capital One Services, Inc'' )  OR (CurrentCreditor = ''Capital One'' ) ))) and not ( (((CurrentCreditor = ''Bank One/ Chase'' )  OR (CurrentCreditor = ''Bank One/Chase'' )  OR (CurrentCreditor = ''BP (Chase)'' )  OR (CurrentCreditor = ''Chase'' )  OR (CurrentCreditor = ''Chase / Bank One'' )  OR (CurrentCreditor = ''Chase / First USA'' )  OR (CurrentCreditor = ''Chase / mann bracken'' )  OR (CurrentCreditor = ''Chase Bank'' )  OR (CurrentCreditor = ''Chase Bank USA, N.A.'' )  OR (CurrentCreditor = ''Chase card services'' )  OR (CurrentCreditor = ''Chase Cardmember Services'' )  OR (CurrentCreditor = ''Chase County Community Hospital'' )  OR (CurrentCreditor = ''Chase Credit Card'' )  OR (CurrentCreditor = ''Chase First USA'' )  OR (CurrentCreditor = ''Chase Legal Department'' )  OR (CurrentCreditor = ''Chase Litigation dept'' )  OR (CurrentCreditor = ''Chase Manhattan Bank'' )  OR (CurrentCreditor = ''Chase Receivables'' )  OR (CurrentCreditor = ''Chase Recievables'' )  OR (CurrentCreditor = ''Chase Recovery'' )  OR (CurrentCreditor = ''Chase Student Loan Servicing, LLC'' )  OR (CurrentCreditor = ''Chase Visa'' )  OR (CurrentCreditor = ''Chase-Disney'' )  OR (CurrentCreditor = ''Chase'' )  OR (CurrentCreditor = ''Circuit City/Chase'' )  OR (CurrentCreditor = ''Disney Rewards (Chase)'' )  OR (CurrentCreditor = ''JP Morgan Chase'' )  OR (CurrentCreditor = ''JP Morgan Chase Bank'' )  OR (CurrentCreditor = ''JP Morgan Chase Legal Department'' )  OR (CurrentCreditor = ''JP MORGAN CHASE LEGAL DEPT'' )  OR (CurrentCreditor = ''JP Morgan Chase Legal Dept.'' )  OR (CurrentCreditor = ''JPMorgan Chase Legal  Dept.'' )  OR (CurrentCreditor = ''JPMorgan Chase Legal Department'' )  OR (CurrentCreditor = ''New York Life chase'' )  OR (CurrentCreditor = ''United Mileage Plus / Chase'' ) ))) and not ( (((CurrentCreditor = ''First  Premier'' )  OR (CurrentCreditor = ''First Premeir Bank'' )  OR (CurrentCreditor = ''First Premier'' )  OR (CurrentCreditor = ''First Premier'' )  OR (CurrentCreditor = ''First Premier Bank'' )  OR (CurrentCreditor = ''First Premier Bank.'' )  OR (CurrentCreditor = ''First Premier Bank'' )  OR (CurrentCreditor = ''First Premiere Bank'' ) ))) and not ( (((CurrentCreditor = ''Jefferson Capital'' )  OR (CurrentCreditor = ''Jefferson Capital Systems'' )  OR (CurrentCreditor = ''Jefferson Capital Systems, LLC'' ) ))) and not ( (((CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Chase / mann bracken'' )  OR (CurrentCreditor = ''Mann  Bracken'' )  OR (CurrentCreditor = ''Mann  Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann  Bracken LLC'' )  OR (CurrentCreditor = ''Mann  Bracken, LLC'' )  OR (CurrentCreditor = ''Mann &  Bracken LLC'' )  OR (CurrentCreditor = ''Mann &  Bracken LLC'' )  OR (CurrentCreditor = ''Mann & Bracken'' )  OR (CurrentCreditor = ''Mann & Bracken LLC'' )  OR (CurrentCreditor = ''Mann & Braken'' )  OR (CurrentCreditor = ''Mann and Bracken'' )  OR (CurrentCreditor = ''Mann Backen, LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Bracken  LLC'' )  OR (CurrentCreditor = ''Mann Bracken , LLC'' )  OR (CurrentCreditor = ''Mann Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann Bracken ,LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Bracken Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken L.L.C.'' )  OR (CurrentCreditor = ''Mann Bracken LLC'' )  OR (CurrentCreditor = ''Mann Bracken,  LLC'' )  OR (CurrentCreditor = ''Mann Bracken, L.L.C.'' )  OR (CurrentCreditor = ''Mann Bracken, LCC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken, LLC, Attorneys at Law'' )  OR (CurrentCreditor = ''Mann Bracken, LLC.'' )  OR (CurrentCreditor = ''Mann Bracken, LLC'' )  OR (CurrentCreditor = ''Mann Bracken'' )  OR (CurrentCreditor = ''Mann Braken'' )  OR (CurrentCreditor = ''Mann Braken,LLC'' )  OR (CurrentCreditor = ''Mann Brocken'' )  OR (CurrentCreditor = ''Mann, Bracken, Layng & Knezo, Attorneys at Law'' )  OR (CurrentCreditor = ''Mannbracken'' ) ))) and not ( (((CurrentCreditor = ''Merrick   Bank'' )  OR (CurrentCreditor = ''Merrick  Bank'' )  OR (CurrentCreditor = ''Merrick Bank'' )  OR (CurrentCreditor = ''Merrick Bank Card'' )  OR (CurrentCreditor = ''Merrick Bank.'' )  OR (CurrentCreditor = ''Merrick Bank'' ) ))) and not ( (RTrim(LTrim(CurrentCreditor)) = ''WAMU'') or (((CurrentCreditor = ''Washington  Mutual'' )  OR (CurrentCreditor = ''Washington Mutal'' )  OR (CurrentCreditor = ''Washington Mutal Bank'' )  OR (CurrentCreditor = ''Washington Mutua'' )  OR (CurrentCreditor = ''Washington Mutual'' )  OR (CurrentCreditor = ''Washington Mutual'' ) )) or (((CurrentCreditor = ''Providian'' )  OR (CurrentCreditor = ''Providian Bancorp'' )  OR (CurrentCreditor = ''Providian Financial'' )  OR (CurrentCreditor = ''Providian National Bank'' ) ))) and not ( (((CurrentCreditor = ''MCM  Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''MCM Midland Credit Management'' )  OR (CurrentCreditor = ''Midland'' )  OR (CurrentCreditor = ''Midland Credit'' )  OR (CurrentCreditor = ''Midland Credit Agency'' )  OR (CurrentCreditor = ''Midland Credit Management'' )  OR (CurrentCreditor = ''Midland Credit Management Inc.'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc.'' )  OR (CurrentCreditor = ''Midland Credit Management, Inc.'' )  OR (CurrentCreditor = ''Midland Credit MGMT Inc.'' )  OR (CurrentCreditor = ''Midland Funding LLC'' )  OR (CurrentCreditor = ''Midland Marketing'' ) ))) and not ( (((CurrentCreditor LIKE ''%Chadwicks-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Chadwicks/WFNNB%'' )  OR (CurrentCreditor LIKE ''%Express-WFNNB%'' )  OR (CurrentCreditor LIKE ''%King Size/WFNNB%'' )  OR (CurrentCreditor LIKE ''%La Redoute-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Maurices-WFNNB%'' )  OR (CurrentCreditor LIKE ''%New York and Company-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Peebles-WFNNB%'' )  OR (CurrentCreditor LIKE ''%Sports Authority WFNNB%'' )  OR (CurrentCreditor LIKE ''%Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Dress Barn%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Express%'' )  OR (CurrentCreditor LIKE ''%WFNNB - J. Crew%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Jessica London%'' )  OR (CurrentCreditor LIKE ''%WFNNB - King Size%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Lane Bryant%'' )  OR (CurrentCreditor LIKE ''%WFNNB - My World Mastercard%'' )  OR (CurrentCreditor LIKE ''%WFNNB - New York and Company%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Peebles%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Roamans%'' )  OR (CurrentCreditor LIKE ''%WFNNB - Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB Brylane Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB Friedmans%'' )  OR (CurrentCreditor LIKE ''%WFNNB Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB Victorias Secret%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Avenue%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Dressbarn%'' )  OR (CurrentCreditor LIKE ''%WFNNB- King Size%'' )  OR (CurrentCreditor LIKE ''%WFNNB- Spiegel%'' )  OR (CurrentCreditor LIKE ''%WFNNB-American%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Avenue%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Brylane Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Dress Barn%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Express%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Fina%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Goody%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Gordmans%'' )  OR (CurrentCreditor LIKE ''%WFNNB-La Redoute%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Lane Bryant%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Metrostyle%'' )  OR (CurrentCreditor LIKE ''%WFNNB-New York and Company%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Roamans%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Shop at Home%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Spiegel%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Stage Stores%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Value City%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB-Victorica%'' )  OR (CurrentCreditor LIKE ''%WFNNB/Victoria%'' )  OR (CurrentCreditor LIKE ''%WFNNB%'' )  OR (CurrentCreditor LIKE ''%WFNNB / Woman Within%'' ) ))) and not ( (CurrentCreditor LIKE ''%Zwickers%'' ) or (CurrentCreditor LIKE ''%Eskanos%'' ) or (CurrentCreditor LIKE ''%winn%'' ) or (CurrentCreditor LIKE ''%patenude%'' ) or (CurrentCreditor LIKE ''%peter roach%'' )))  ) AND ( substring(ApplicantLastName, 1, 1) = '' '' OR substring(ApplicantLastName, 1, 1) = ''"'' OR substring(ApplicantLastName, 1, 1) = ''A'' OR substring(ApplicantLastName, 1, 1) = ''B'' OR substring(ApplicantLastName, 1, 1) = ''C'' OR substring(ApplicantLastName, 1, 1) = ''D'' OR substring(ApplicantLastName, 1, 1) = ''E'' OR substring(ApplicantLastName, 1, 1) = ''F'' OR substring(ApplicantLastName, 1, 1) = ''G'' OR substring(ApplicantLastName, 1, 1) = ''H'' OR substring(ApplicantLastName, 1, 1) = ''I'' OR substring(ApplicantLastName, 1, 1) = ''J'' OR substring(ApplicantLastName, 1, 1) = ''K'' OR substring(ApplicantLastName, 1, 1) = ''L'' OR substring(ApplicantLastName, 1, 1) = ''M'' OR substring(ApplicantLastName, 1, 1) = ''N'' OR substring(ApplicantLastName, 1, 1) = ''O'' OR substring(ApplicantLastName, 1, 1) = ''P'' OR substring(ApplicantLastName, 1, 1) = ''Q'' OR substring(ApplicantLastName, 1, 1) = ''R'' OR substring(ApplicantLastName, 1, 1) = ''S'' OR substring(ApplicantLastName, 1, 1) = ''T'' OR substring(ApplicantLastName, 1, 1) = ''U'' OR substring(ApplicantLastName, 1, 1) = ''V'' OR substring(ApplicantLastName, 1, 1) = ''W'' OR substring(ApplicantLastName, 1, 1) = ''X'' OR substring(ApplicantLastName, 1, 1) = ''Y'' OR substring(ApplicantLastName, 1, 1) = ''Z''))))'
declare @start as int set @start = (@PageNum-1)*@PageSize
declare @end as int set @end = @PageNum*@PageSize-1

EXEC
('
	declare @vtblNDS table
	(
		ClientID int,
		AccountID int,
		SSN varchar(50),
		ApplicantFullName varchar(101),
		ApplicantLastName varchar(50),
		ApplicantFirstName varchar(50),
		ApplicantState varchar(50),
		ApplicantCity varchar(50),
		ApplicantZipCode varchar(50),
		SDAAccount varchar(50),
		FundsAvailable money,
		OriginalCreditor varchar(50),
		CurrentCreditor varchar(50),
		CurrentCreditorState varchar(50),
		CurrentCreditorAccountNumber varchar(30),
		LeastDebtAmount money,
		CurrentAmount money,
		AccountStatus varchar(255),
		AccountAge int,
		ClientAge int,
		LastSettled int,
		NextDepositDate datetime,
		NextDepositAmount money,
		LastOffer datetime,
		OfferDirection varchar(50),
		RowNo numeric
	)

	INSERT INTO
		@vtblNDS
	SELECT distinct
		ns.ClientID
		,ns.AccountID
		,ns.SSN
		,ns.ApplicantFullName
		,ns.ApplicantLastName
		,ns.ApplicantFirstName
		,ns.ApplicantState
		,ns.ApplicantCity
		,ns.ApplicantZipCode
		,ns.SDAAccount
		,ns.FundsAvailable
		,ns.OriginalCreditor
		,ns.CurrentCreditor
		,ns.CurrentCreditorState
		,ns.CurrentCreditorAccountNumber
		,ns.LeastDebtAmount
		,ns.CurrentAmount
		,ns.AccountStatus
		,ns.AccountAge
		,ns.ClientAge
		,ns.LastSettled
		,ns.NextDepositDate
		,ns.NextDepositAmount
		,convert(varchar(10),s.created,101) as LastOffer
		,ns.OfferDirection
		,Row_Number() OVER (Partition by s.clientid, s.creditoraccountid Order by s.clientid, s.creditoraccountid) as RowNo
	FROM
		vwNegotiationDistributionSource as ns left outer join
		(
			select 
				created
				,clientid
				,creditoraccountid 
			from 
				tblsettlements 
			where  
				status <> ''A''
		) as s on  s.clientid = ns.clientid and s.creditoraccountid=ns.accountid


	SELECT
		'+ @DisplayColumns + '
	FROM
		(
			SELECT
				row_number() OVER (ORDER BY ' + @OrderBy + ') as RowNum,
				*
			FROM
				@vtblNDS
			WHERE (rowno = 1) and 
				(' + @where + ')
		) as drv
	WHERE
		RowNum between ' + @start + ' and ' + @end 
)
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_Litigation_getAttorneySignatureInfoByAttorneyID]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_Litigation_getAttorneySignatureInfoByAttorneyID]
(
		@clientid int,
		@attorneyid int
	)
AS
BEGIN
	declare @companyid int

	select @companyid = c.companyid from tblClient c where c.clientid = @clientid
	
	declare @attyName varchar(150)
	declare @attySigPath varchar(150)

	SELECT     
	@attyName = a.firstname + case when a.middlename is null or a.middlename = '' then ' ' else ' ' + a.middlename + ' ' end + a.lastname + case when a.suffix is null or a.suffix = '' then ' ' else ' ' + a.suffix + ' ' end
	, @attySigPath = a.sigpath
	FROM tblAttorney AS a INNER JOIN
	tblAttyStates AS [as] ON a.AttorneyID = [as].AttorneyID INNER JOIN
	tblAttyRelation AS ar ON a.AttorneyID = ar.AttorneyID
	where 
		ar.AttyRelation = 'Associated' 
		and a.attorneyid = @attorneyid
		and not a.sigpath is null 
	ORDER BY [as].State, ar.CompanyID

	if (@attySigPath is null)
		BEGIN
			select
				@attyName = contact1
				, @attySigPath = sigpath
			FROM tblCompany
			Where CompanyID = @companyid
		END

	select @attyName[AttorneyName],@attySigPath[SigPath]
END
GO
/****** Object:  StoredProcedure [dbo].[stp_getNegativeCommissions]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[stp_getNegativeCommissions] 
AS
Begin

Declare @mastertable table(
MasterId int identity(1,1) 	Primary Key,
CompanyID int,
TrustID int,
CommScenID int,
CommRecID int,
ParentCommRecID int,
[Order] int, 
CommPaid money,
ChargeBack money)

SELECT
	CompanyID,
	TrustID,
	ID,
	[Type],
	CommScenID,
	CommRecID,
	ParentCommRecID,
	[Order],
	Amount,
	[Date]
Into #t
FROM
(
	SELECT
		cs.CompanyID,
		case when v.converted is null then c.TrustID
			 when v.converted > rp.paymentdate then v.OrigTrustID
			 else c.TrustID 
		end [TrustID],
		cp.CommPayID as ID,
		'CP' as [Type],
		cs.CommScenID,
		cs.CommRecID,
		cs.ParentCommRecID,
		cs.[Order],
		cp.Amount,
		rp.PaymentDate [Date]
	FROM
		tblCommPay as cp
		inner join tblRegisterPayment as rp on rp.RegisterPaymentID = cp.RegisterPaymentID
		inner join tblRegister as r on r.RegisterID = rp.FeeRegisterID
		inner join tblClient as c on c.ClientID = r.ClientID
		inner join tblCommStruct as cs on cs.CommStructID = cp.CommStructID
		left join vw_ClientTrustConvDate v on v.clientid = c.clientid
	WHERE
		cp.CommBatchID is null

	UNION ALL

	SELECT
		cs.CompanyID,
		case when v.converted is null then c.TrustID
			 when v.converted > rp.paymentdate then v.OrigTrustID
			 else c.TrustID 
		end [TrustID],
		cc.CommChargebackID as ID,
		'CB' as [Type],
		cs.CommScenID,
		cs.CommRecID,
		cs.ParentCommRecID,
		cs.[Order],
		-cc.Amount,
		cc.chargebackdate [Date]
	FROM
		tblCommChargeback as cc
		inner join tblRegisterPayment as rp on rp.RegisterPaymentID = cc.RegisterPaymentID
		inner join tblRegister as r on r.RegisterID = rp.FeeRegisterID
		inner join tblClient as c on c.ClientID = r.ClientID
		inner join tblCommStruct as cs on cs.CommStructID = cc.CommStructID
		left join vw_ClientTrustConvDate v on v.clientid = c.clientid
	WHERE
		cc.CommBatchID is null
) as d

Insert @mastertable(
	CompanyID,	
	TrustID, 
	CommScenID, 
	CommRecID,	
	ParentCommRecID, 
	[Order],
	CommPaid,
	ChargeBack)
SELECT
	CompanyID,
	TrustID,
	CommScenID,
	CommRecID,
	ParentCommRecID,
	[Order],
	sum(Case When [Type] = 'CP' Then Amount Else 0 End) [Paid Amount],
	sum(Case When [Type] <> 'CP' Then Amount Else 0 End) [CB Amount]
From #t
GROUP BY
	CompanyID,
	TrustID,
	CommScenID,
	CommRecID,
	ParentCommRecID,
	[Order]
Having sum(Amount) <= 0
order by
	CompanyID,
	TrustID,
	CommScenID,
	CommRecID,
	ParentCommRecID,
	[Order]

select distinct isnull(m.CommRecId,0) [RecId],
isnull(cr.Display, 'N/A') [RecipientName] 
from @masterTable m
left join tblCommRec cr on cr.commrecid = m.commrecid
Order By 2

select m.masterid [MasterId],
isnull(t.DisplayName, 'N/A') [Trust],
isnull(c.ShortCoName, 'N/A') [Company],
isnull(m.CommScenId, 0) [CommScenId],
isnull(pcr.Abbreviation, 'N/A') [ParentCommRec],
isnull(cr.CommRecId, 0) [CommRecId],
isnull(cr.Abbreviation, 'N/A') [CommRec],
m.CommPaid [CommPaid],
m.ChargeBack [ChargeBack]
from @masterTable m
left join tblTrust t on t.trustid = m.trustid
left join tblCompany c on c.companyid = m.companyid
left join tblCommRec pcr on pcr.commrecid = m.parentcommrecid
left join tblCommRec cr on cr.commrecid = m.commrecid
Order By 1,2,3,4,5,6,7

select t1.masterId [MasterId], 
	   t.Type [Type], 
	   t.id [TypeId], 
	   t.Amount [Amount], 
	   t.[Date] [Udate], 
	   convert(varchar, t.[Date], 101) [Date] 
from #t t
inner join @mastertable t1 on t1.companyid = t.companyid 
and t1.trustid = t.trustid 
and t1.commscenid = t.commscenid 
and t1.commrecid = t.commrecid 
and t1.parentcommrecid = t.parentcommrecid 
and t1.[order] = t.[order]
order by t1.masterid, t.[date] desc

drop table #t

End
GO
/****** Object:  StoredProcedure [dbo].[stp_GetSettlementCreditorInfo]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetSettlementCreditorInfo]
	(
		@accountid int
	)

as

SELECT
	cic.CreditorInstanceID,
	a.AccountID,
	cc.Name as CreditorName,
	co.Name as ForCreditorName,
	cic.Acquired,
	a.OriginalAmount,
	a.CurrentAmount,
	cic.AccountNumber,
	cic.ReferenceNumber,
	cc.CreditorID as CreditorID,
	co.CreditorID as ForCreditorID,
	case when a.verified is null then 0 else 1 end as verified
FROM
	tblAccount as a with(nolock) inner join
	tblCreditorInstance as cic with(nolock) on cic.CreditorInstanceID = a.CurrentCreditorInstanceID left outer join
	tblCreditorInstance as cio with(nolock) on cio.CreditorInstanceID = a.OriginalCreditorInstanceID left outer join
	tblCreditor as cc with(nolock) on cc.CreditorID = cic.CreditorID left outer join
	tblCreditor as co with(nolock) on co.CreditorID = cio.CreditorID
WHERE
	a.AccountID = @accountid
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_FindUsersByEmail]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_FindUsersByEmail]
    @ApplicationName       nvarchar(256),
    @EmailToMatch          nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    IF( @EmailToMatch IS NULL )
        INSERT INTO #PageIndexForUsers (UserId)
            SELECT u.UserId
            FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
            WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND m.Email IS NULL
            ORDER BY m.LoweredEmail
    ELSE
        INSERT INTO #PageIndexForUsers (UserId)
            SELECT u.UserId
            FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
            WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND m.LoweredEmail LIKE LOWER(@EmailToMatch)
            ORDER BY m.LoweredEmail

    SELECT  u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY m.LoweredEmail

    SELECT  @TotalRecords = COUNT(*)
    FROM    #PageIndexForUsers
    RETURN @TotalRecords
END
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetCommissionBatchTransfersByClient]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetCommissionBatchTransfersByClient]
	(
		@CommBatchIDs varchar(1500),
		@CommRecID int,
		@ClientID int
	)

as

exec
(
'SELECT
	EntryType,
	[Percent],
	Amount
FROM
	(
		SELECT
			(
				SELECT
					Name
				FROM
					tblEntryType
				WHERE
					EntryTypeID = register.EntryTypeID
			) as EntryType,
			[Percent],
			comm.Amount as Amount
		FROM
			tblCommPay as comm inner join
			tblRegisterPayment as registerpay on registerpay.RegisterPaymentID = comm.RegisterPaymentID inner join
			tblRegister as register on register.RegisterID = registerpay.FeeRegisterID inner join
			tblClient as client on client.ClientID = register.ClientID left join
			tblPerson as person on person.PersonID = client.PrimaryPersonID
		WHERE
			comm.CommBatchID in (' + @CommBatchIDs + ') and
			client.ClientID = ' + @ClientID + ' and
			CommStructID in
			(
				SELECT
					CommStructID
				FROM
					tblCommStruct
				WHERE
					CommRecID = ' + @CommRecID + '
			)

		UNION ALL

		SELECT
			(
				SELECT
					Name
				FROM
					tblEntryType
				WHERE
					EntryTypeID = register.EntryTypeID
			) as EntryType,
			[Percent],
			(-comm.Amount) as Amount
		FROM
			tblCommChargeback as comm inner join
			tblRegisterPayment as registerpay on registerpay.RegisterPaymentID = comm.RegisterPaymentID inner join
			tblRegister as register on register.RegisterID = registerpay.FeeRegisterID inner join
			tblClient as client on client.ClientID = register.ClientID left join
			tblPerson as person on person.PersonID = client.PrimaryPersonID
		WHERE
			comm.CommBatchID in (' + @CommBatchIDs + ') and
			client.ClientID = ' + @ClientID + ' and
			CommStructID in
			(
				SELECT
					CommStructID
				FROM
					tblCommStruct
				WHERE
					CommRecID = ' + @CommRecID + '
			)
	) as derivedtable
ORDER BY
	EntryType'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterDetailInsert]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
Author: Bereket S. Data
Description: Adds new criteria filter attributes. This is also mainly used by criteria builder.
*/

CREATE PROCEDURE [dbo].[stp_NegotiationFilterDetailInsert]
@FilterId int,
@FilterType varchar(10),
@sequence int,
@FieldName varchar(50),
@Operation varchar(15),
@OperationVisible varchar(6),
@FirstInput varchar(max),
@FirstInputVisible varchar(6),
@JoinClause varchar(10),
@JoinClauseVisible varchar(6),
@PctOf varchar(10),
@PctOfVisible varchar(6),
@PctField varchar(50),
@PctFieldVisible varchar(6)

AS

DECLARE @MaxFilterDetailId int
DECLARE @MatchSearch int

SET NOCOUNT ON

SELECT @MatchSearch = Count(FilterId)
FROM tblNegotiationFilterDetail
WHERE 
FieldName = @FieldName AND 
Operation = Operation AND
FirstInput = @FirstInput AND
PctOf = @PctOf AND
PctField= @PctField AND
FilterId = @FilterId

if @MatchSearch < = 0
BEGIN

 INSERT INTO tblNegotiationFilterDetail
 (
FilterId,
FilterType,
sequence,
FieldName,
Operation,
OperationVisible,
FirstInput,
FirstInputVisible,
JoinClause,
joinClauseVisible,
PctOf,
PctOfVisible,
PctField,
PctFieldVisible,
  Created
 )
 VALUES
 (
@FilterId,
@FilterType,
@sequence,
@FieldName,
@Operation,
@OperationVisible,
@FirstInput,
@FirstInputVisible,
@JoinClause,
@JoinClauseVisible,  
@PctOf,
@PctOfVisible,
@PctField,
@PctFieldVisible,
getDate() 
 )

DELETE tblNegotiationFilterDetail WHERE FieldName = '0'
--UPDATE tblNegotiationFilterDetail SET JoinClause = 'and' WHERE JoinClause = '' AND FilterId = @FilterId
--SELECT @MaxFilterDetailId = max(FilterDetailId) 
--FROM tblNegotiationFilterDetail WHERE FilterId = @FilterId
--UPDATE tblNegotiationFilterDetail SET JoinClause = '' WHERE FilterDetailId = @MaxFilterDetailId


END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAgencyList]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetAgencyList]
(
	@CompanyID int = -1
)
as
begin
/*
	11/20/07	jhernandez		Created
	01/23/08	jhernandez		Return a column with the agency's most recent scenario for the 
								given company. Optional
*/

create table #tblScen
(
	AgencyID int,
	CommScenID int
)

insert #tblScen 
(
	AgencyID,
	CommScenID
)
select
	c.AgencyID,
	max(c.CommScenID)
from
	tblCommScen c
	join tblCommStruct s on s.CommScenID = c.CommScenID and s.CompanyID = @CompanyID
group by
	c.AgencyID


select
	a.AgencyID,
	a.Name,
	t.CommScenID
from
	tblAgency a
	left join #tblScen t on t.AgencyID = a.AgencyID
order by 
	a.AgencyID


drop table #tblScen



end
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_UserFunctions_Get]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_UserFunctions_Get]
	(
		@userid int,
		@definedonly bit = 0
	)

as



select
	tblfunction.functionid,
	tblfunction.parentfunctionid,
	tblfunction.[name] as functionname,
	tblfunction.isoperation,
	issystem,
	tblpermission.permissiontypeid,
	tblpermission.value
from
	tblfunction inner join
	tblpermission on tblpermission.functionid=tblfunction.functionid inner join
	tbluserpermission on tbluserpermission.permissionid=tblpermission.permissionid
where
	tbluserpermission.userid=@userid 
	
union

select
	functionid,
	parentfunctionid,
	name as functionname,
	isoperation,	
	issystem,
	null as permissiontypeid,
	null as value
from
	tblfunction
GO
/****** Object:  StoredProcedure [dbo].[stp_Tool_DeleteConstraintsForTable]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Tool_DeleteConstraintsForTable]
	(@TableName varchar (255))

AS


-- Retrieve a list of constraints for @TableName and stuff into temp table

SELECT
	tblAllConstraints.ConstraintName,
	tblAllConstraints.TableName
INTO
	#tblConstraints
FROM
	(
		SELECT
			Name AS ConstraintName,
			(Select Name From sysobjects Where ID = s.parent_obj) AS TableName
		FROM
			sysobjects s
		WHERE
			xtype in ('C', 'F', 'PK', 'UQ', 'D')
	)
	AS tblAllConstraints
WHERE
	tblAllConstraints.TableName = @TableName


-- Loop through all constraint information in #tblConstraint and delete them

DECLARE @ConstraintName varchar (255)

DECLARE cursor_DeleteConstraintsForTable CURSOR FOR SELECT ConstraintName FROM #tblConstraints

OPEN cursor_DeleteConstraintsForTable

FETCH NEXT FROM cursor_DeleteConstraintsForTable INTO @ConstraintName
WHILE @@FETCH_STATUS = 0
BEGIN

	EXEC ('ALTER TABLE [' + @TableName + '] DROP CONSTRAINT [' + @ConstraintName + ']')

	FETCH NEXT FROM cursor_DeleteConstraintsForTable INTO @ConstraintName
END

CLOSE cursor_DeleteConstraintsForTable
DEALLOCATE cursor_DeleteConstraintsForTable

DROP TABLE #tblConstraints
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_GroupFunctionFunctions_Get]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_GroupFunctionFunctions_Get]
	(
		@usergroupid int,
		@parentfunctionid int
	)

as

select
	tblfunction.functionid,
	tblfunction.parentfunctionid,
	tblfunction.[name] as functionname,
	tblfunction.isoperation,
	issystem,
	tblpermission.permissiontypeid,
	tblpermission.value,
	(select count(*) from tblfunction a where a.parentfunctionid=tblfunction.functionid and not issystem=1) as numchildren
from
	tblfunction inner join
	tblpermission on tblpermission.functionid=tblfunction.functionid inner join
	tblgrouppermission on tblgrouppermission.permissionid=tblpermission.permissionid 
where
	tblgrouppermission.usergroupid=@usergroupid and
	tblfunction.parentfunctionid=@parentfunctionid

union

select
	functionid,
	parentfunctionid,
	name as functionname,
	isoperation,	
	issystem,
	null as permissiontypeid,
	null as value,
	(select count(*) from tblfunction a where a.parentfunctionid=tblfunction.functionid and not issystem=1) as numchildren
from
	tblfunction
where
	tblfunction.parentfunctionid=@parentfunctionid
GO
/****** Object:  StoredProcedure [dbo].[stp_LogStoreException]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_LogStoreException]
(
	@ClientID int = null
,	@Exception varchar(2000)
,	@StackTrace varchar(8000) = null
,	@Method varchar(50)
)
as
begin
/*
	History:
	jhernandez		05/23/08	Created.
*/

insert tblStoreExceptionLog (ClientID,Exception,StackTrace,Method)
values (@ClientID,@Exception,@StackTrace,@Method)


end
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneysByState]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AttorneysByState]
(
	@State char(2)
,	@CompanyID int
)
as
begin
/*
	History:
	jhernandez		12/06/07		Used for setting state primaries. Note, 
									attorneys are assigned to states independently from their associations
									to a company. When setting a state primary for a company, the attorney
									must already be associated with that company through a relation.
*/

select 
	a.AttorneyID
,	a.LastName + ', ' + a.FirstName + ' ' + isnull(a.MiddleName,'') [Name]
from 
	tblAttyStates s 
join tblAttorney a
	on s.AttorneyID = a.AttorneyID
join tblAttyRelation r
	on r.AttorneyID = a.AttorneyID
	 and r.CompanyID = @CompanyID
where
	s.State = @State
order by
	a.LastName, a.FirstName, a.MiddleName


end
GO
/****** Object:  StoredProcedure [dbo].[stp_ProjectedPayments]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ProjectedPayments]
as
begin

declare @LastProjection varchar(10), @StartDate datetime, @EndDate datetime

select @LastProjection = convert(varchar(10), max(ProjectedOn), 101) from tblPotentialCommPay
select @StartDate = cast(convert(varchar(10), dateadd(day,-4,getdate()), 101) as datetime)
select @EndDate = cast(convert(varchar(10), dateadd(day,5,getdate()), 101) as datetime)


select commrec, company, date, amount
into #payments
from (
	-- actual payments
	SELECT
		cr.display [commrec], 
		comp.name [company],
		convert(varchar(10),rp.paymentdate,101) [date],
		sum(cp.amount) [amount]
	FROM
		tblCommPay as cp
		join tblRegisterPayment as rp on rp.RegisterPaymentID = cp.RegisterPaymentID
		join tblRegister as r on r.RegisterID = rp.FeeRegisterID
		join tblClient as c on c.ClientID = r.ClientID
		join tblcompany comp on comp.companyid = c.companyid
		join tblCommStruct as cs on cs.CommStructID = cp.CommStructID 
		join tblcommrec cr on cr.commrecid = cs.commrecid
	WHERE
		rp.paymentdate between @startdate and @enddate
	group by
		cr.display, comp.name, convert(varchar(10),rp.paymentdate,101)

	union all

	-- latest projected payments
	select cr.display, c.name, convert(varchar(10),fordate,101), sum(amount)
	from tblpotentialcommpay p
	join tblcompany c on c.companyid = p.companyid
	join tblcommrec cr on cr.commrecid = p.commrecid
	where convert(varchar(10), ProjectedOn, 101) = @LastProjection
	group by cr.display, c.name, p.fordate
) d


select distinct date
from #payments
order by date

select distinct commrec
from #payments
order by commrec

select distinct company
from #payments
order by company

select commrec, date, sum(amount) [amount]
from #payments
group by commrec, date
order by commrec, date

select commrec, company, date, sum(amount) [amount]
from #payments
group by commrec, company, date
order by commrec, company, date

-- projections
select c.name [company], cr.display [commrec], p.fordate, projectedon, amount
from tblPotentialCommPay p
join tblcompany c on c.companyid = p.companyid
join tblcommrec cr on cr.commrecid = p.commrecid
where p.fordate between @startdate and @enddate
order by c.name, cr.display, projectedon desc, fordate


drop table #payments

end
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportCreditorInsert]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ImportCreditorInsert]
@Name varchar(50),
@Street varchar(255) = null,
@Street2 varchar(255) = null,
@City varchar(50) = null,
@StateId int = null,
@ZipCode varchar(50) = null,
@CreatedBy int,
@Created datetime = null,
@LastModifiedBy int,
@LastModified datetime = null,
@AddressTypeId int = 105,
@GroupId int = null,
@Validated bit = 0
AS
BEGIN

Insert Into tblCreditor(
[Name], Street, Street2, City, StateID, ZipCode,
Created, CreatedBy, LastModified, LastModifiedBy, CreditorAddressTypeId, CreditorGroupId, Validated)
Values(
@Name, @Street, @Street2, @City, @StateId, @ZipCode,
isnull(@Created,GetDate()), @CreatedBy, isnull(@LastModified,GetDate()), @LastModifiedBy, @AddressTypeId, @GroupId, @Validated)

Select SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_InsertPrinted]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_InsertPrinted]
(
@PrintDocTypeID varchar(20)
,@PrintClientID int
,@PrintDocumentPath varchar(max)
,@UserID int
,@pageCount int = NULL
)
as
BEGIN
	INSERT INTO [tblLetters_Printed]([PrintDocTypeID],[PrintClientID],[PrintDocumentPath],[PrintDate],[PrintBy],[PrintDocumentPageCount])
	VALUES(@PrintDocTypeID,@PrintClientID,@PrintDocumentPath,getdate(),@UserID,@pageCount)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_ReassignCreditorGroup]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ReassignCreditorGroup]
@CreditorGroupId int,
@XMLCreditorIdList varchar(max),
@UserId int
AS
BEGIN
-- Creditor Id Table
declare @hXML int
EXEC sp_xml_preparedocument @hXML OUTPUT, @XMLCreditorIdList
Select *
into #t
From OPENXML(@hXML, '/creditors/creditor', 2)
With (creditorid varchar(10) '@creditorid')

-- get creditor groups
Select distinct CreditorGroupId 
Into #c
From tblCreditor
Where creditorid in (Select CreditorId From #t)
and  CreditorGroupId  is not null


/*
-- Save Log
Insert Into tblCreditorCleanupLog([NewValue], [OldValue], TableName, FieldName, KeyId, [By])
Select @CreditorGroupId, CreditorGroupId, 'tblCreditor', 'CreditorGroupId', CreditorId, @UserId
From tblCreditor
Where CreditorId in (Select CreditorId From #t)
*/

-- Update creditors
Update tblCreditor Set 
CreditorGroupId = @CreditorGroupId,
LastModified = GetDate(),
LastModifiedBy = @UserId
Where CreditorId in (Select CreditorId From #t)

--Delete Creditor Groups with no creditors
Delete from tblCreditorGroup 
Where CreditorGroupId in 
(Select c.CreditorGroupId from #c c 
left join (Select CreditorGroupId as [CreditorGroupId] from tblCreditor Union Select CreditorGroupId from tblLeadCreditorInstance) t on t.CreditorGroupId = c.CreditorGroupId
where t.CreditorGroupId is null)

Drop table #c
Drop table #t

END
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_Group_IoU_Single]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_Group_IoU_Single]
	(
		@functionid int,
		@usergroupid int,
		@permissiontypeid int,
		@value bit,
		@overwriteold bit=1
	)

as

declare @permissionid int
set @permissionid = (
	select top 1 tblpermission.permissionid 
	from tblgrouppermission inner join tblpermission on tblpermission.permissionid=tblgrouppermission.permissionid
	where 
		tblgrouppermission.usergroupid=@usergroupid and 
		tblpermission.functionid=@functionid and 
		tblpermission.permissiontypeid=@permissiontypeid 
	order by
		tblpermission.permissionid desc
)

if @permissionid is not null
begin
	--Delete any duplicates. These should not exist.

	select 
		tblpermission.permissionid 
	into
		#tmp
	from 
		tblgrouppermission inner join
		tblpermission on tblgrouppermission.permissionid=tblpermission.permissionid
	where
		usergroupid = @usergroupid
		and functionid = @functionid
		and permissiontypeid = @permissiontypeid
		and not tblpermission.permissionid = @permissionid

	delete from tblgrouppermission where permissionid in 
		(select permissionid from #tmp)

	delete from tblpermission where permissionid in 
		(select permissionid from #tmp)

	drop table #tmp
end  

if @value is null begin
	if @permissionid is not null
	begin
		--just delete it if it exists. 
		delete from tblpermission where permissionid=@permissionid
		delete from tblgrouppermission where permissionid=@permissionid
	end  
	--otherwise, do nothing
end else begin
	if @permissionid is null
	begin
		insert into tblpermission 
			(functionid, permissiontypeid, value)
		values
			(@functionid, @permissiontypeid, @value)

		insert into tblgrouppermission 
			(usergroupid, permissionid, usertypeid)
		values
			(@usergroupid, scope_identity(), null)
	end
	else if @overwriteold=1
	begin
		update tblpermission set
			value=@value
		where
			permissionid = @permissionid
	end
end
GO
/****** Object:  StoredProcedure [dbo].[stp_getMultiDepositRules]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_getMultiDepositRules]
(
	@ClientID int,
	@additionalWhereClause varchar(max)
)
as
BEGIN
	exec('
		SELECT     
			dr.RuleACHId
			, ba.AccountNumber AS BankAccountNumber
			, ba.RoutingNumber AS BankRoutingNumber
			, rn.CustomerName AS BankName
			, dr.DepositAmount
			, dr.DepositDay
			, dr.StartDate
			, dr.EndDate
			, cd.Depositday [OriginalDepositDay]
			, cd.Deleteddate [DeletedDate]
			, dr.Locked
		FROM         
			tblDepositRuleAch AS dr 
			INNER JOIN tblClientBankAccount AS ba ON dr.BankAccountID = ba.BankAccountId 
			INNER JOIN tblRoutingNumber AS rn ON ba.RoutingNumber = rn.RoutingNumber
			Left join tblClientDepositDay as cd on cd.clientdepositid = dr.clientdepositid
		WHERE 
			dr.ClientDepositId in (select ClientDepositID from [tblClientDepositDay] where clientid = ' + @ClientID + ')' 
			+ @additionalWhereClause + ' Order By dr.StartDate desc, dr.EndDate desc'
		)
END


GRANT EXEC ON stp_getMultiDepositRules TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_AddAttorneyRelation]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AddAttorneyRelation]
(
	@AttorneyID int
,	@CompanyID int
,	@AttyRelation varchar(50)
,	@UserID int
,	@EmployedState char(2)
)
as
begin
/*
	History:
	jhernandez		12/01/07		Created.
	jhernandez		12/07/07		Added logic to add and update. Relations are unqiue by
									attorney id and company id.
	jhernandez		03/04/08		New columns, Employed, Created(By), LastModidified(By)
	jhernandez		03/12/08		Not using Employed, IsPrimary, AllowEmployedUpdate params
*/

if not exists (select 1 from tblAttyRelation where AttorneyID = @AttorneyID and CompanyID = @CompanyID)  begin
	-- Add new relation
	insert into tblAttyRelation (
		AttorneyID
	,	CompanyID
	,	AttyRelation
	,	EmployedState
	,	CreatedBy
	,	LastModifiedBy
	)
	values (
		@AttorneyID
	,	@CompanyID
	,	@AttyRelation
	,	@EmployedState
	,	@UserID
	,	@UserID
	)
end
else begin 	

	update 
		tblAttyRelation 
	set 
		AttyRelation = @AttyRelation,
		EmployedState = case when @EmployedState = '' then EmployedState else @EmployedState end, 
		LastModified = getdate(), 
		LastModifiedBy = @UserID 
	where 
		AttorneyID = @AttorneyID
		and CompanyID = @CompanyID 
		and (EmployedState <> @EmployedState or AttyRelation <> @AttyRelation)
end


end
GO
/****** Object:  Table [dbo].[tblNachaFile]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblNachaFile](
	[NachaFileId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Date] [datetime] NOT NULL,
	[EffectiveDate] [datetime] NOT NULL,
	[DateSent] [datetime] NULL,
 CONSTRAINT [PK_tblNachaFile] PRIMARY KEY CLUSTERED 
(
	[NachaFileId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertCreditor]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_InsertCreditor]
(
	@CreditorGroupID int,
	@Name varchar(250),
	@Street varchar(50),
	@Street2 varchar(50),
	@City varchar(50),
	@StateID int,
	@ZipCode varchar(20),
	@UserID int
)
as
begin

if exists (select 1 from tblcreditor where creditorgroupid = @CreditorGroupID and street = @Street and isnull(street2,'') = @Street2 and city = @City and isnull(stateid,0) = isnull(@StateID,0) and zipcode = @ZipCode) begin
	select creditorid from tblcreditor where creditorgroupid = @CreditorGroupID and street = @Street and isnull(street2,'') = @Street2 and city = @City and stateid = @StateID and zipcode = @ZipCode
end
else begin
	insert tblcreditor (creditorgroupid,name,street,street2,city,stateid,zipcode,created,createdby,lastmodified,lastmodifiedby)
	values (@CreditorGroupID,@Name,@Street,@Street2,@City,@StateID,@ZipCode,getdate(),@UserID,getdate(),@UserID)
	
	select scope_identity()
end


end
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Applications_CreateApplication]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Applications_CreateApplication]
    @ApplicationName      nvarchar(256),
    @ApplicationId        uniqueidentifier OUTPUT
AS
BEGIN
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName

    IF(@ApplicationId IS NULL)
    BEGIN
        DECLARE @TranStarted   bit
        SET @TranStarted = 0

        IF( @@TRANCOUNT = 0 )
        BEGIN
	        BEGIN TRANSACTION
	        SET @TranStarted = 1
        END
        ELSE
    	    SET @TranStarted = 0

        SELECT  @ApplicationId = ApplicationId
        FROM dbo.aspnet_Applications WITH (UPDLOCK, HOLDLOCK)
        WHERE LOWER(@ApplicationName) = LoweredApplicationName

        IF(@ApplicationId IS NULL)
        BEGIN
            SELECT  @ApplicationId = NEWID()
            INSERT  dbo.aspnet_Applications (ApplicationId, ApplicationName, LoweredApplicationName)
            VALUES  (@ApplicationId, @ApplicationName, LOWER(@ApplicationName))
        END


        IF( @TranStarted = 1 )
        BEGIN
            IF(@@ERROR = 0)
            BEGIN
	        SET @TranStarted = 0
	        COMMIT TRANSACTION
            END
            ELSE
            BEGIN
                SET @TranStarted = 0
                ROLLBACK TRANSACTION
            END
        END
    END
END
GO
/****** Object:  StoredProcedure [dbo].[LookingGlass]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[LookingGlass]


as
DECLARE @ProcessID int 
DECLARE @Handle VARBINARY(255)

CREATE TABLE #DmsWho1
(
	ProcessID INT,
	UserID INT,
	UserName VARCHAR(255),
	[Status] VARCHAR(255),
	Reads INT,
	Writes INT,
	CPU_Time INT,
	Elapsed_Time INT,
	ROW_COUNT INT,	
	LastSQL VARCHAR(8000),
	[handle] VARBINARY(255)	
)

INSERT INTO #DmsWho1 
SELECT pu.SPID,
	   pu.UserID,
	   u.UserName,
	   [Status] = MAX(UPPER(COALESCE
	   (
			r.[status],
			tt.[task_state],
			s.[status],
			''
	    ))),
	   Reads = MAX(COALESCE
	   (
			NULLIF(r.[reads], 0),
			NULLIF(s.[reads], 0),
			c.[num_reads],
			0
	   )),
	   [Writes] = MAX(COALESCE
	   (
			NULLIF(r.[writes], 0),
			NULLIF(s.[writes], 0),
			c.[num_writes],
			0
	   )),
	   [CPU_Time] = MAX(COALESCE
	   (
			NULLIF(tt.[CPU_Time], 0),
			NULLIF(r.[cpu_time], 0), 
			NULLIF(s.[cpu_time], 0),
			s.[total_scheduled_time], 
			0
	    )),
	    [Elapsed_Time] = MAX(COALESCE
		(
			r.[total_elapsed_time],
			s.[total_elapsed_time]
		)),
		[Row_Count] = MAX(s.[row_count]),
	   NULL,
	   r.sql_handle
FROM tblSysProcessUser pu
INNER JOIN tblUser u ON pu.UserID = u.UserID
INNER JOIN sys.dm_exec_requests r ON pu.SPID = r.[session_id]
LEFT OUTER JOIN sys.dm_exec_sessions s ON pu.SPID = s.[session_id]
LEFT OUTER JOIN sys.dm_os_waiting_tasks wt ON pu.SPID = wt.[session_id]
LEFT OUTER JOIN sys.dm_exec_connections c ON c.[session_id] = pu.SPID
LEFT OUTER JOIN
	(
		SELECT ot.[session_id],
			   ot.[task_state],
			   [CPU_Time] = MAX(oth.[usermode_time])
		FROM sys.dm_os_tasks ot
		INNER JOIN sys.dm_os_workers ow ON ot.[worker_address] = ow.[worker_address]
		INNER JOIN sys.dm_os_threads oth ON ow.[thread_address] = oth.[thread_address]
		GROUP BY ot.[session_id], ot.[task_state]
	) tt ON pu.SPID = tt.[session_id]
GROUP BY pu.SPID, pu.UserID, u.UserName, r.sql_handle

declare dmswhoCUR cursor local for select ProcessID, Handle from #DmsWho1 
open dmswhoCUR
fetch next from dmswhoCUR into @ProcessID, @Handle
while @@fetch_status = 0
	BEGIN
		UPDATE #DmsWho1 
		SET [LastSQL] = (
							SELECT [text] 
							FROM sys.dm_exec_sql_text(@Handle)
						)
		WHERE ProcessID = @ProcessID	     
	  fetch next from dmswhoCUR into @ProcessID, @Handle
      END
	
close dmswhoCUR
deallocate dmswhoCUR


SELECT ProcessID, UserID, UserName, [Status], Reads, Writes, CPU_Time, Elapsed_Time, ROW_COUNT, LastSQL FROM #DmsWho1
DROP TABLE #DmsWho1
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterDetailCleanUp]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Used to cleanup attributes when adding/updating filter details for a given criteria filter
*/

CREATE PROCEDURE [dbo].[stp_NegotiationFilterDetailCleanUp]
@FilterId int
AS

DECLARE @MaxFilterDetailId int

DELETE tblNegotiationFilterDetail WHERE FieldName = '0' AND FilterId = @FilterId
UPDATE tblNegotiationFilterDetail SET JoinClause = 'and' WHERE JoinClause = '' AND FilterId = @FilterId
SELECT @MaxFilterDetailId = max(FilterDetailId) 
FROM tblNegotiationFilterDetail WHERE FilterId = @FilterId
UPDATE tblNegotiationFilterDetail SET JoinClause = '' WHERE FilterDetailId = @MaxFilterDetailId
GO
/****** Object:  StoredProcedure [dbo].[stp_getCallClient]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_getCallClient]
@CallIdKey varchar(20)
AS
Select * From 
tblClientCall p 
where  callidkey = @CallIdKey
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_Function_Delete]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[stp_Permissions_Function_Delete]
	(
		@functionid int
	)

as

--delete controls which are the only for this function
delete from tblcontrol where 
	controlid in (select tblcontrolfunction.controlid from tblcontrolfunction where tblcontrolfunction.functionid=@functionid) and
	(select count (*) from tblcontrolfunction where controlid=tblcontrol.controlid and not functionid=@functionid)=0

--delete the links to those controls
delete from tblcontrolfunction where functionid=@functionid

--delete the function
delete from tblfunction where functionid=@functionid

--delete any defined permissions for this function
delete from tbluserpermission where permissionid in(select permissionid from tblpermission where functionid=@functionid)
delete from tblgrouppermission where permissionid in(select permissionid from tblpermission where functionid=@functionid)
delete from tblpermission where functionid=@functionid
GO
/****** Object:  StoredProcedure [dbo].[stp_PotentialPayments]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_PotentialPayments]
(
	@userid int
)
as
begin

select
	 clientid
	,created
	,c.agencyid
	,depositday
	,c.companyid
	,depositamount
	,monthlyfee
	,sdabalance
	,[NETMONTHLY] = isnull((select depositamount - monthlyfee from tblclient c2 where c2.clientid = c.clientid),0)
	,[MaintBal] = isnull(((select sum(amount) from tblregister r where entrytypeid = 1 and r.clientid = c.clientid and (bounce is null and void is null)) 
		+ (select sum(rp.amount) from tblregisterpayment rp inner join tblregister r on rp.feeregisterid = r.registerid and r.entrytypeid = 1 
			and r.clientid = c.clientid and (bounced =0 and voided =0))),0)
	,[FirstPay] = isnull(((select sum(amount) from tblregister r where entrytypeid = 42 and r.clientid = c.clientid and (bounce is null and void is null)) 
		+ (select sum(rp.amount) from tblregisterpayment rp inner join tblregister r on rp.feeregisterid = r.registerid and r.entrytypeid = 42 
			and r.clientid = c.clientid and (bounced =0 and voided =0))),0)
	,[Retainer] = isnull(((select sum(amount) from tblregister r where entrytypeid = 2 and r.clientid = c.clientid and (bounce is null and void is null)) 
		+ (select sum(rp.amount) from tblregisterpayment rp inner join tblregister r on rp.feeregisterid = r.registerid and r.entrytypeid = 2 
			and r.clientid = c.clientid and (bounced =0 and voided =0))),0)
	,[Settlement] = isnull(((select sum(amount) from tblregister r where entrytypeid = 4 and r.clientid = c.clientid and (bounce is null and void is null)) 
		+ (select sum(rp.amount) from tblregisterpayment rp inner join tblregister r on rp.feeregisterid = r.registerid and r.entrytypeid = 4 
			and r.clientid = c.clientid and (bounced =0 and voided =0))),0)
into #ctemp
from tblclient c
join tbluseragencyaccess ua on ua.agencyid = c.agencyid and ua.userid = @userid
join tblusercompanyaccess uca on uca.userid = ua.userid and uca.companyid = c.companyid
where c.currentclientstatusid not in (15,17,18) 
and c.depositstartdate < dateadd(day,30,getdate())
and c.depositday > 0


ALTER TABLE #ctemp ADD 
	Avail decimal(18,2)
	,POT_FP DECIMAL(18,2)
	,NETAFTERFP DECIMAL(18,2)
	,POT_RET DECIMAL(18,2)
	,NETAFTERRET DECIMAL(18,2)
	,POT_SETT DECIMAL(18,2)
	,NETAFTERSETT DECIMAL(18,2)
	,POT_FPComm DECIMAL(18,2)
	,POT_RETComm DECIMAL(18,2)
	,POT_SETTComm DECIMAL(18,2)
	
UPDATE #CTEMP SET 
	 AVAIL = CASE WHEN sdabalance+netmonthly+maintbal > 0 then sdabalance+netmonthly+maintbal else 0 end

UPDATE #CTEMP SET
	 POT_FP = CASE WHEN AVAIL > FIRSTPAY*-1 THEN (FIRSTPAY*-1) ELSE AVAIL END

UPDATE #CTEMP SET NETAFTERFP = AVAIL - POT_FP

UPDATE #CTEMP SET POT_RET = CASE WHEN NETAFTERFP >0 AND NETAFTERFP > RETAINER*-1 THEN ISNULL((RETAINER*-1),0)
								 WHEN NETAFTERFP >0 AND NETAFTERFP < RETAINER*-1 THEN ISNULL(NETAFTERFP,0)
								 ELSE 0 END

UPDATE #CTEMP SET NETAFTERRET = NETAFTERFP - POT_RET

UPDATE #CTEMP SET POT_SETT = CASE WHEN NETAFTERRET >0 AND NETAFTERRET > Settlement*-1 THEN ISNULL((Settlement*-1),0)
								 WHEN NETAFTERRET >0 AND NETAFTERRET < Settlement*-1 THEN ISNULL(NETAFTERRET,0)
								 ELSE 0 END

UPDATE #CTEMP SET NETAFTERSETT = NETAFTERRET - POT_SETT

--UPDATE #CTEMP SET 
--	POT_FPComm = POT_FP*1
--	,POT_RETComm = POT_RET*.60
--	,POT_SETTComm = CASE WHEN COMPANYID = 2 THEN POT_SETT*.05
--						 WHEN COMPANYID IN (3,4) THEN POT_SETT*.15
--					END


update #ctemp
set POT_FPComm = (POT_FP * f.[percent])
from #ctemp c
join tblcommscen s on s.agencyid = c.agencyid and s.startdate <= c.created and (s.enddate is null or s.enddate >= cast(convert(char(10), c.created, 101) as datetime))
join tblcommstruct cs on cs.commscenid = s.commscenid and cs.companyid = c.companyid 
join tblcommfee f on f.commstructid = cs.commstructid and f.entrytypeid = 42
join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid

update #ctemp
set POT_RETComm = (POT_RET * f.[percent])
from #ctemp c
join tblcommscen s on s.agencyid = c.agencyid and s.startdate <= c.created and (s.enddate is null or s.enddate >= cast(convert(char(10), c.created, 101) as datetime))
join tblcommstruct cs on cs.commscenid = s.commscenid and cs.companyid = c.companyid 
join tblcommfee f on f.commstructid = cs.commstructid and f.entrytypeid = 2
join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid

update #ctemp
set POT_SETTComm = (POT_SETT * f.[percent])
from #ctemp c
join tblcommscen s on s.agencyid = c.agencyid and s.startdate <= c.created and (s.enddate is null or s.enddate >= cast(convert(char(10), c.created, 101) as datetime))
join tblcommstruct cs on cs.commscenid = s.commscenid and cs.companyid = c.companyid 
join tblcommfee f on f.commstructid = cs.commstructid and f.entrytypeid = 4
join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid


--select 
--	Clientid
--	,companyid
--	,depositday
--	,sdabalance 
--	,depositamount	
--	,monthlyfee 
--	,netmonthly 
--	,MaintBal
--	,firstpay 
--	,retainer
--	,settlement
--	,Avail
--	,POT_FP
--	,NETAFTERFP
--	,POT_RET
--	,NETAFTERRET
--	,POT_SETT
--	,NETAFTERSETT
--	,POT_FPComm
--	,POT_RETComm
--	,POT_SETTComm
--from #ctemp
--order by clientid

SELECT  --DEPOSITDAY, companyid, count(*) as [DRAFTS], SUM(POT_FPComm) AS [FP], SUM(POT_RETComm+POT_SettComm)AS [OTHERCOMM], SUM(POT_FPComm+POT_RETComm+POT_SettComm) [Payments]
	depositday, c.name [company], SUM(POT_FPComm+POT_RETComm+POT_SettComm) [Payments]
FROM #ctemp t
JOIN tblcompany c on c.companyid = t.companyid
WHERE t.DEPOSITDAY IS NOT NULL
GROUP BY t.DEPOSITDAY, c.name
ORDER BY t.DEPOSITDAY, c.name


drop table #ctemp

end
GO
/****** Object:  StoredProcedure [dbo].[stp_SettlementImport_ImportSettlements]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SettlementImport_ImportSettlements]
(
@year int,
@month int,
@userID int
)
as
BEGIN
	/*
	declare @year int
	declare @month int

	set @year = 2009
	set @month = 7
	*/

	declare @guid uniqueidentifier
	set @guid= NEWID()

	INSERT INTO [tblSettlementTrackerImports]([TrackerImportBatchID],[Team],[Negotiator],[AgencyID],[LawFirm],[Date],[Status],[Due],[ClientAcctNumber],[Name],[CreditorAccountNum],[OriginalCreditor],[CurrentCreditor],[BALANCE],[SettlementAmt],[SettlementPercent],[FundsAvail],[Note],[sent],[paid],[days],[ClientSavings],[SettlementFees],[SettlementSavingsPct],[ImportDate],[ImportBy],[SettlementID])
	select distinct
		[TrackerImportBatchID] , [Team] , [Negotiator] , [AgencyID] , [LawFirm] , [Date], [Status] 
		, [Due] , [ClientAcctNum] , [Client Name] , [CreditorAcctNum] , [OriginalCreditor], [CurrentCreditor] 
		, [Balance] , [SettlementAmount] , [SettlementPct] , [FundsAvail] , [Note] , [sent] , [Paid] 
		, [Days] , [Client Savings], [SettlementFees] , [SettlementFeePct], [ImportDate] , [ImportBy],[SettlementID]
		from (
		SELECT DISTINCT 
		 [TrackerImportBatchID] = CONVERT(varchar(255), @guid)
		, [Team] = isnull(dbo.udf_Negotiators_getGroup(ne.NegotiationEntityID),'HOUSE(SP)') 
		, [Negotiator] =neg.username
		, [AgencyID] = c.AgencyID
		, [LawFirm] = co.ShortCoName
		, [Date] = convert(varchar(10),sett.Created,101)
		, [Status] = [as].Code 
		, [Due] = convert(varchar(10),sett.SettlementDueDate,101)
		, [ClientAcctNum] = c.AccountNumber
		, [Client Name] = p.FirstName + ' ' + p.LastName 
		, [CreditorAcctNum] = curr.AccountNumber 
		, [OriginalCreditor] = origname.Name 
		, [CurrentCreditor] = currname.Name 
		, [Balance] = a.CurrentAmount
		, [SettlementAmount] = sett.SettlementAmount
		, [SettlementPct] = case when sett.SettlementAmount > 0 then sett.SettlementAmount/a.CurrentAmount else 0 end
		, [FundsAvail] = c.SDABalance - c.PFOBalance -(SELECT ISNULL(SUM(Amount), 0) AS Expr1 FROM tblRegister WHERE (ClientId = c.ClientID) AND (EntryTypeId = 3) AND (Hold > GETDATE()) AND (Void IS NULL) AND (Bounce IS NULL) AND (Clear IS NULL)) -(SELECT ISNULL(SUM(Amount), 0) AS Expr1 FROM tblRegister AS tblRegister_3 WHERE (ClientId = c.ClientID) AND (EntryTypeId = 43) AND (Hold > GETDATE()) AND (Void IS NULL) AND (Bounce IS NULL) AND (Clear IS NULL))
		, [Note] = ''
		, [sent] = ''
		, [Paid] = case when [as].Code = 'SA' then a.settled else Null end
		, [Days] = DateDiff(d,sett.Created,getdate())
		, [Client Savings] = a.CurrentAmount - sett.SettlementAmount
		, [SettlementFees] = (a.CurrentAmount - sett.SettlementAmount)*c.SettlementFeePercentage
		, [SettlementFeePct] = c.SettlementFeePercentage
		, [ImportDate] = getdate()
		, [ImportBy] = @userID
		, sett.SettlementID
	FROM tblCompany AS co RIGHT OUTER JOIN
		tblCreditor AS origname RIGHT OUTER JOIN
		tblCreditorInstance AS orig ON origname.CreditorID = orig.CreditorID RIGHT OUTER JOIN
		tblClient AS c INNER JOIN
		tblSettlements AS sett ON c.ClientID = sett.ClientID LEFT OUTER JOIN
		tblNegotiationEntity AS ne ON sett.CreatedBy = ne.UserID LEFT OUTER JOIN
		tblAccount AS a INNER JOIN
		tblAccountStatus AS [as] ON a.AccountStatusID = [as].AccountStatusID ON sett.CreditorAccountID = a.AccountID LEFT OUTER JOIN
		tblCreditor AS currname RIGHT OUTER JOIN
		tblCreditorInstance AS curr ON currname.CreditorID = curr.CreditorID ON a.CurrentCreditorInstanceID = curr.CreditorInstanceID ON 
		orig.CreditorInstanceID = a.OriginalCreditorInstanceID LEFT OUTER JOIN
		tblPerson AS p ON c.PrimaryPersonID = p.PersonID ON co.CompanyID = c.CompanyID LEFT OUTER JOIN
		tblUser AS neg ON neg.UserID = ne.UserID
	WHERE   sett.status = 'a' and active = 1
	AND YEAR(sett.Created) = @year AND MONTH(sett.Created) = @month
	) as batchData 
	order by team, creditoracctnum
	
	update tblSettlementTrackerImports 
	set negotiator = u.firstname + ' ' + u.lastname
	from tblSettlementTrackerImports sti
	inner join tblsettlements s on s.settlementid = sti.settlementid
	inner join tbluser u on u.userid = s.createdby

END




GRANT EXEC ON stp_SettlementImport_ImportSettlements TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetAllUsers]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetAllUsers]
    @ApplicationName       nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0


    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
    SELECT u.UserId
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u
    WHERE  u.ApplicationId = @ApplicationId AND u.UserId = m.UserId
    ORDER BY u.UserName

    SELECT @TotalRecords = @@ROWCOUNT

    SELECT u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY u.UserName
    RETURN @TotalRecords
END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_deleteCoApp]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_enrollment_deleteCoApp]
(
	@coAppID int
)
as
BEGIN
	DELETE FROM tblleadcoapplicant where LeadCoApplicantID = @coAppID
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SaveCommFee]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SaveCommFee]
(
	@CommStructID int,
	@EntryTypeID int,
	@Percent money,
	@IsPercent bit,
	@UserID int,
	@Order int = 0
)
as
begin

insert tblCommFee 
(
	CommStructID,
	EntryTypeID,
	[Percent],
	Created,
	CreatedBy,
	LastModified,
	LastModifiedBy--,
	--[Order],
	--IsPercent
)
values
(
	@CommStructID,
	@EntryTypeID,
	@Percent,
	getdate(),
	@UserID,
	getdate(),
	@UserID--,
	--@Order,
	--@IsPercent
)


end
GO
/****** Object:  StoredProcedure [dbo].[get_CreditorInstancesForAccount]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[get_CreditorInstancesForAccount]
(
	@accountId int
)

AS

SET NOCOUNT ON

SELECT
	*
FROM
	tblCreditorInstance
WHERE
	AccountId=@accountId
order by
	acquired,
	creditorinstanceid
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_User_IoU_Single]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_User_IoU_Single]
	(
		@functionid int,
		@userid int,
		@permissiontypeid int,
		@value bit
	)

as

declare @permissionid int
set @permissionid = (
	select top 1 tblpermission.permissionid 
	from tbluserpermission inner join tblpermission on tblpermission.permissionid=tbluserpermission.permissionid
	where 
		tbluserpermission.userid=@userid and 
		tblpermission.functionid=@functionid and 
		tblpermission.permissiontypeid=@permissiontypeid
	order by
		tblpermission.permissionid desc
)

if @permissionid is not null
begin
	--Delete any duplicates. These should not exist.

	select 
		tblpermission.permissionid 
	into
		#tmp
	from 
		tbluserpermission inner join
		tblpermission on tbluserpermission.permissionid=tblpermission.permissionid
	where
		userid = @userid
		and functionid = @functionid
		and permissiontypeid = @permissiontypeid
		and not tblpermission.permissionid = @permissionid

	delete from tbluserpermission where permissionid in 
		(select permissionid from #tmp)

	delete from tblpermission where permissionid in 
		(select permissionid from #tmp)

	drop table #tmp
end  

if @value is null begin
	if @permissionid is not null
	begin
		--just delete it if it exists. 
		delete from tblpermission where permissionid=@permissionid
		delete from tbluserpermission where permissionid=@permissionid
	end  
	--otherwise, do nothing
end else begin
	if @permissionid is null
	begin
		insert into tblpermission 
			(functionid, permissiontypeid, value)
		values
			(@functionid, @permissiontypeid, @value)

		insert into tbluserpermission 
			(userid, permissionid)
		values
			(@userid, scope_identity())
	end
	else
	begin
		update tblpermission set
			value=@value
		where
			permissionid = @permissionid
	end
end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetComms]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetComms]
	(
		@clientid int,
		@relationid int = null,
		@relationtypeid int = null,
		@orderby varchar(50)='bylastnamE asc',
		@clientonly bit=0
	)

as


create table #tmpNotes
(
	noteid int,
	subject varchar(255),
	[value] varchar(5000),
	[by] varchar(255),
	bylastname varchar(255),
	[date] datetime,
	usertype varchar(255),
	color varchar(50)
)

insert into #tmpNotes
(
	noteid,
	subject,
	[value],
	[by],
	bylastname,
	[date],
	usertype,
	color
)
exec stp_getnotes2 @clientid,@relationid,@relationtypeid,'u.lastname asc',@clientonly

create table #tmpPhoneCalls
(
	phonecallid int,
	personid int,
	userid int,
	clientid int,
	phonenumber varchar(50),
	direction bit,
	subject varchar(255),
	body varchar(5000),
	starttime datetime,
	endtime datetime,
	person varchar(255),
	personlastname varchar(255),
	[by] varchar(255), 
	bylastname varchar(255),
	createdbyname varchar(255),
	lastmodifiedbyname varchar(255),
	usertype varchar(255),
	color varchar(50)
)

insert into #tmpPhoneCalls
(
	phonecallid,
	personid,
	userid,
	clientid,
	phonenumber,
	direction,
	subject,
	body,
	starttime,
	endtime,
	person,
	personlastname,
	[by], 
	bylastname,
	createdbyname,
	lastmodifiedbyname,
	usertype,
	color
)
exec stp_getphonecalls2 @clientid,@relationid,@relationtypeid,'u.lastname asc',@clientonly

exec('
select 
	0 as CommType,
	NoteID as PK,
	Subject,
	[Value],
	[By],
	ByLastName,
	[Date] as Date1,
	[Date] as Date2,
	UserType,
	Color
from 
	#tmpnotes

union

select
	1 as CommType,
	PhoneCallID as PK,
	Subject,
	Body as [Value],
	[By],
	ByLastName,
	StartTime as Date1,
	EndTime as Date2,
	UserType,
	Color,
	Person,
	PersonLastName,
	Direction
	
order by
	' + @orderby
)
drop table #tmpnotes
drop table #tmpphonecalls
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_GroupFunctions_Get]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_GroupFunctions_Get]
	(
		@usergroupid int,
		@definedonly bit = 0
	)

as

select
	tblfunction.functionid,
	tblfunction.parentfunctionid,
	tblfunction.[name] as functionname,
	tblfunction.isoperation,
	issystem,
	tblpermission.permissiontypeid,
	tblpermission.value
from
	tblfunction inner join
	tblpermission on tblpermission.functionid=tblfunction.functionid inner join
	tblgrouppermission on tblgrouppermission.permissionid=tblpermission.permissionid
where
	tblgrouppermission.usergroupid=@usergroupid 

union

select
	functionid,
	parentfunctionid,
	name as functionname,
	isoperation,	
	issystem,
	null as permissiontypeid,
	null as value
from
	tblfunction
GO
/****** Object:  StoredProcedure [dbo].[stp_fix_missing_docscans]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_fix_missing_docscans
CREATE procedure [dbo].[stp_fix_missing_docscans]
as
BEGIN
	declare @sqlInsert varchar(max)
	declare @tot int

	set @tot = 0

	DECLARE insertScan_Cursor CURSOR FOR
	select [ScanInsert] ='insert into tblDocScan (docid, origin, receiveddate,created,createdby) values('
	+ char(39) + dr.docid + char(39) + ',NULL,'
	+ char(39) + cast(dr.relatedDate as varchar) + char(39) + ','
	+ char(39) + cast(dr.relatedDate as varchar)  + char(39) + ','
	+ char(39) +cast( dr.relatedBy as varchar) + char(39) + ')'
	from tblDocRelation dr left outer join tblDocScan ds on dr.docid = ds.docid
	where ds.docid is null and dr.RelationType = 'account'
	and year(dr.relateddate) = year(getdate())
	and month(dr.relateddate) = month(getdate())
	and day(dr.relateddate) = day(getdate())

	OPEN insertScan_Cursor

	FETCH NEXT FROM insertScan_Cursor
	INTO @sqlInsert
	SET NOCOUNT ON 
	WHILE @@FETCH_STATUS = 0
		BEGIN
			execute(@sqlinsert)
			set @tot = @tot + 1
			FETCH NEXT FROM insertScan_Cursor
			INTO @sqlInsert
		END;
	CLOSE insertScan_Cursor;
	DEALLOCATE insertScan_Cursor;
	SET NOCOUNT OFF 
	PRINT 'Total Scans Inserted : ' + cast(@tot as varchar(10))
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMatterTypes]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <02 - 05 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Decription  : Listing the Lookup table for MatterTypes     
					
*/
CREATE Procedure [dbo].[stp_GetMatterTypes]
(

	@RowNumber int=null, 
	@UserGroupId int,
	@UserID int=null 
)

AS

BEGIN

select MatterTypeId, MatterTypeCode 
From 

tblMatterType T, tblMatterGroup G Where T.MatterGroupID=G.MatterGroupID
and G.MatterGroupID in (Select MatterGroupID from tblMatterGroupUserGroupXRef 
Where UserGroupId=ISNULL(@UserGroupId,UserGroupId)) and T.IsActive=1

order by MatterTypeCode asc


END
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientFile_getCreditorNames]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ClientFile_getCreditorNames]
(
@clientID int
)
as
BEGIN
	/*
	declare @clientID int
	set @clientID = 1671
	*/
	select 
		a.accountid
		,[CreditorName] = cc.name 
		,[AccountStatus] = act.description 
	from tblaccount a 
	inner join tblcreditorinstance ci on a.currentcreditorinstanceid = ci.creditorinstanceid
	inner join tblcreditor cc on cc.creditorid = ci.creditorid
	inner join tblaccountstatus act on act.accountstatusid = a.accountstatusid
	where clientid = @clientid
	order by a.created
END




GRANT EXEC ON stp_ClientFile_getCreditorNames TO PUBLIC
GO
/****** Object:  Table [dbo].[tblClientBankAccount]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblClientBankAccount](
	[BankAccountId] [int] IDENTITY(1,1) NOT NULL,
	[ClientId] [int] NOT NULL,
	[RoutingNumber] [varchar](9) NOT NULL,
	[AccountNumber] [varchar](75) NULL,
	[BankType] [varchar](1) NULL CONSTRAINT [DF_tblClientBankAccount_BankType]  DEFAULT ('C'),
	[Created] [datetime] NOT NULL CONSTRAINT [DF__tblClient__Creat__6761A89B]  DEFAULT (getdate()),
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
	[PrimaryAccount] [bit] NOT NULL CONSTRAINT [DF__tblClient__Prima__6855CCD4]  DEFAULT ((0)),
	[Disabled] [datetime] NULL,
	[DisabledBy] [int] NULL,
	[ReferenceBankAccountID] [int] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_getSettlementAcceptanceFormData]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_LetterTemplates_getSettlementAcceptanceFormData]
(
	@SettlementID as int
)
as
BEGIN
	SELECT     TOP (1) 
		s.CreditorAccountID
		, s.ClientID
		, p.FirstName
		, p.LastName
		, p.Street
		, p.Street2
		, p.City
		, tblState.Abbreviation
		, p.ZipCode
		, tblClient.AccountNumber
		, tblUser.FirstName + ' ' + tblUser.LastName AS Mediator
		, tblAgency.Name AS Agency
		, origcred.Name AS OriginalCreditor
		, currcred.Name AS CurrentCreditor
		, tblCreditorInstance_1.AccountNumber AS CreditorAcctNum
		, tblCreditorInstance.ReferenceNumber
		, isnull(s.SettlementDueDate,'') as SettlementDueDate
		, tblAccount.CurrentAmount
		, s.SettlementAmount
		, isnull(s.SettlementAmtAvailable,'0.00') as [SettlementAmtAvailable]
		, isnull(s.SettlementAmtBeingSent,'0.00') as [SettlementAmtBeingSent]
		, isnull(s.SettlementAmtStillOwed,'0.00') as [SettlementAmtStillOwed]
		, isnull(s.SettlementSavings,'0.00') as [SettlementSavings]
		, isnull(s.SettlementFee,'0.00') as [SettlementFee]
		, isnull(s.SettlementCost,'0.00') as [SettlementCost]
		, isnull(s.OvernightDeliveryAmount,'0.00') as [OvernightDeliveryAmount]
		, isnull(tblAccount.SettlementFeeCredit,'0.00') as [SettlementFeeCredit]
		, isnull(s.SettlementFeeAmtAvailable,'0.00') as [SettlementFeeAmtAvailable]
		, isnull(s.SettlementFeeAmtBeingPaid,'0.00') as [SettlementFeeAmtBeingPaid]
		, isnull(s.SettlementFeeAmtStillOwed,'0.00') as [SettlementFeeAmtStillOwed]
	FROM  tblCreditor AS origcred INNER JOIN
		  tblCreditorInstance AS tblCreditorInstance_1 ON origcred.CreditorID = tblCreditorInstance_1.CreditorID RIGHT OUTER JOIN
		  tblCreditor AS currcred INNER JOIN
		  tblCreditorInstance ON currcred.CreditorID = tblCreditorInstance.CreditorID INNER JOIN
		  tblSettlements AS s INNER JOIN
		  tblClient ON s.ClientID = tblClient.ClientID INNER JOIN
		  tblPerson AS p ON tblClient.ClientID = p.ClientID INNER JOIN
		  tblState ON p.StateID = tblState.StateID INNER JOIN
		  tblUser ON s.CreatedBy = tblUser.UserID INNER JOIN
		  tblAgency ON tblClient.AgencyID = tblAgency.AgencyID INNER JOIN
		  tblAccount ON s.CreditorAccountID = tblAccount.AccountID ON tblCreditorInstance.CreditorInstanceID = tblAccount.CurrentCreditorInstanceID ON 
		  tblCreditorInstance_1.CreditorInstanceID = tblAccount.OriginalCreditorInstanceID
	WHERE     (s.SettlementID = @SettlementID)
		ORDER BY tblCreditorInstance.Created DESC
END



GRANT EXEC ON stp_LetterTemplates_getSettlementAcceptanceFormData TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertDefaultFees]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 05/09/2008
-- Description:	Inserts Default Fees in Comm Fee
-- =============================================
CREATE PROCEDURE [dbo].[stp_InsertDefaultFees] 
	@EntryTypeID int, 
	@CommStructID int 
AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO tblCommFee(CommStructID, EntryTypeID, [Percent], Created, CreatedBy, LastModified, LastModifiedBy) 
	VALUES (@CommStructID, @EntryTypeID, 1, GETDATE(), 493, GETDATE(), 493)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationsGetSettlementsByStatus]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_NegotiationsGetSettlementsByStatus]
(
	@SettlementStatusID nvarchar(500),
	@UserID int = null
)

as

if @UserID is null
begin
	EXEC
	('
		declare @vtblRoadMaps table
		(
			RoadmapID int,
			SettlementID int
		)

		INSERT INTO
			@vtblRoadMaps
		SELECT
			max(RoadmapID) as RoadmapID,
			SettlementID
		FROM
			tblNegotiationRoadmap
		GROUP BY
			SettlementID

		SELECT distinct
			s.SettlementID,
			c.Name AS [Creditor Name],
			p.FirstName + '' '' + p.LastName AS [Client Name],
			s.CreditorAccountBalance,
			s.SettlementAmount,
			s.SettlementPercent,
			s.SettlementSavings,
			s.SettlementDueDate,
			nss.[Name] as SettlementStatus,
			nr.Created as [StatusDate],
			cl.AccountNumber,
			substring(ci.accountnumber,len(ci.accountnumber)-4,4) as CreditorAccountNumber
		FROM         
			@vtblRoadMaps as nr2
			inner join tblNegotiationRoadmap as nr on nr.RoadmapID = nr2.RoadmapID and (nr.SettlementStatusID in (' + @SettlementStatusID + '))
			inner join tblNegotiationSettlementStatus as nss on nss.SettlementStatusID = nr.SettlementStatusID
			inner join tblSettlements as s on s.SettlementID = nr.SettlementID and s.active = 1
			inner join tblClient as cl on s.ClientID = cl.ClientID
			inner join tblPerson as p on p.PersonID = cl.PrimaryPersonID
			inner join tblAccount as a on a.AccountID = s.CreditorAccountID
			inner join tblCreditorInstance as ci on ci.CreditorInstanceID = a.CurrentCreditorInstanceID
			inner join tblCreditor as c on c.CreditorID = ci.CreditorID
			inner join tblSettlementProcessing as sp on sp.SettlementID = s.SettlementID
		ORDER BY
			s.SettlementDueDate asc
	')
end
else
begin
	EXEC
	('
		declare @vtblRoadMaps table
		(
			RoadmapID int,
			SettlementID int
		)

		INSERT INTO
			@vtblRoadMaps
		SELECT
			max(RoadmapID) as RoadmapID,
			SettlementID
		FROM
			tblNegotiationRoadmap
		GROUP BY
			SettlementID

		SELECT distinct
			s.SettlementID,
			c.Name AS [Creditor Name],
			p.FirstName + '' '' + p.LastName AS [Client Name],
			s.CreditorAccountBalance,
			s.SettlementAmount,
			s.SettlementPercent,
			s.SettlementSavings,
			s.SettlementDueDate,
			nss.[Name] as SettlementStatus,
			nr.Created as [StatusDate],
			cl.AccountNumber,
			substring(ci.accountnumber,len(ci.accountnumber)-4,4) as CreditorAccountNumber
		FROM         
			@vtblRoadMaps as nr2
			inner join tblNegotiationRoadmap as nr on nr.RoadmapID = nr2.RoadmapID and (nr.SettlementStatusID in (' + @SettlementStatusID + '))
			inner join tblNegotiationSettlementStatus as nss on nss.SettlementStatusID = nr.SettlementStatusID
			inner join tblSettlements as s on s.SettlementID = nr.SettlementID and s.active = 1
			inner join tblClient as cl on s.ClientID = cl.ClientID
			inner join tblPerson as p on p.PersonID = cl.PrimaryPersonID
			inner join tblAccount as a on a.AccountID = s.CreditorAccountID
			inner join tblCreditorInstance as ci on ci.CreditorInstanceID = a.CurrentCreditorInstanceID
			inner join tblCreditor as c on c.CreditorID = ci.CreditorID
			inner join tblSettlementProcessing as sp on sp.SettlementID = s.SettlementID
		WHERE
			sp.UserID = ' + @UserID + '
		ORDER BY
			s.SettlementDueDate asc
	')
end

GRANT EXEC ON stp_NegotiationsGetSettlementsByStatus TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_UserFunctionFunctions_Get]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_UserFunctionFunctions_Get]
	(
		@userid int,
		@parentfunctionid int
	)

as

select
	tblfunction.functionid,
	tblfunction.parentfunctionid,
	tblfunction.[name] as functionname,
	tblfunction.isoperation,
	issystem,
	tblpermission.permissiontypeid,
	tblpermission.value,
	(select count(*) from tblfunction a where a.parentfunctionid=tblfunction.functionid and not issystem=1) as numchildren
from
	tblfunction inner join
	tblpermission on tblpermission.functionid=tblfunction.functionid inner join
	tbluserpermission on tbluserpermission.permissionid=tblpermission.permissionid
where
	tbluserpermission.userid=@userid and
	parentfunctionid=@parentfunctionid
	
union

select
	functionid,
	parentfunctionid,
	name as functionname,
	isoperation,	
	issystem,
	null as permissiontypeid,
	null as value,
	(select count(*) from tblfunction a where a.parentfunctionid=tblfunction.functionid) as numchildren
from
	tblfunction
where
	parentfunctionid=@parentfunctionid
GO
/****** Object:  StoredProcedure [dbo].[stp_CollectGCACredits]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_CollectGCACredits]
as

insert tblNachaRegister2 (
	   Name,AccountNumber,RoutingNumber,[Type],Amount,IsPersonal,CompanyID,ShadowStoreID,ClientID,TrustID,RegisterID,RegisterPaymentID,Flow)
select 
	   Name,AccountNumber,RoutingNumber,[Type],Amount,IsPersonal,CompanyID,ShadowStoreID,ClientID,TrustID,RegisterID,RegisterPaymentID,Flow
from (
	select r.display[name],r.accountnumber,r.routingnumber,isnull(r.[type],'C')[type],rp.amount,0[ispersonal],n.companyid,n.shadowstoreid,n.clientid,n.trustid,n.registerid,n.registerpaymentid,'credit'[flow]
	from tblnacharegister2 n
	join vw_ClientTrustConvDate t on t.clientid = n.clientid
		and t.trustid = n.trustid
		and t.origtrustid = 20
	join vw_ClientCompanyConvDate c on c.clientid = n.clientid
		and c.companyid = n.companyid
	join tblcommrec r on r.companyid = c.origcompanyid
		and r.istrust = 1
	join tblregisterpayment rp on rp.registerpaymentid = n.registerpaymentid 
		and rp.voided = 1
		and rp.paymentdate < t.converted
	where n.flow = 'credit'
	and n.registerpaymentid not in (
		select registerpaymentid
		from tblnacharegister2
		where flow = 'debit'
		and registerpaymentid > 0
	)
) d
where not exists (select 1 from tblnacharegister2 nr2 where nr2.name = d.name 
		and nr2.registerpaymentid = d.registerpaymentid	
		and nr2.flow = d.flow)
GO
/****** Object:  StoredProcedure [dbo].[wstp_UpdateWChargeBacks]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 07/01/2009
-- Description:	Update for warehouse Charge Backs
-- =============================================
CREATE PROCEDURE [dbo].[wstp_UpdateWChargeBacks] 
AS
BEGIN
	SET NOCOUNT ON;
/*
This is the update/insert process for tblChargeBacks in the
LexxiomWarehouse database
Created by Jim Hope 12/08/2008
Updated by Jim Hope 06/30/2009
*/
declare @BatchDate smalldatetime
declare @AgencyID int
declare @AgencyName varchar(150)
declare @CommRecID int
declare @CommissionRecipient varchar(150)
declare @CompanyID int
declare @Company varchar(150)
declare @ClientName varchar(150)
declare @RegisterID int
declare @EntryTypeID int
declare @EntryType varchar(50)
declare @FeeAmount money
declare @PaymentAmount money
declare @InitialDraft bit
declare @StateChanged smalldatetime
declare @State varchar(50)
declare @BouncedReason varchar(200)
declare @AccountStatusID int
declare @AccountStatus varchar(150)
declare @AccountBalance money
declare @AccountNumber varchar(150)
declare @Creditor varchar(150)
declare @CommBatchID int
declare @CommScenID int
declare @CommissionPaid money
declare @RowAdded datetime

declare @Yesterday smalldatetime
declare @NewDay varchar(20)
declare @ClientID int
declare @BatchID int
declare @bounce smalldatetime
declare @void smalldatetime
declare @Exists int

set @Exists = -1

set @yesterday = dateadd(day, -1, getdate())
set @NewDay = cast(datepart(month, @yesterday) as varchar(2)) + '/' + cast(datepart(day, @yesterday) as varchar(2)) + '/' + cast(datepart(year, @yesterday) as varchar(4)) + ' 00:00:000'
set @yesterday = @newday

--Get the client ID, bounced or void for the cursor
declare c_ClientID cursor for
select c.clientid, b.commbatchid, r.Bounce, r.void
				from  [DMS].[dbo].[tblcommchargeback] cb
				join  [DMS].[dbo].[tblregisterpayment] rp on rp.registerpaymentid = cb.registerpaymentid
				join  [DMS].[dbo].[tblregister] r on r.registerid = rp.feeregisterid
				join  [DMS].[dbo].[tblentrytype] e on e.entrytypeid = r.entrytypeid
				join  [DMS].[dbo].[tblclient] c on c.clientid = r.clientid
				join  [DMS].[dbo].[tblperson] p on p.personid = c.primarypersonid
				join  [DMS].[dbo].[tblcommbatch] b on b.commbatchid = cb.commbatchid 
				join  [DMS].[dbo].[tblcommstruct] cs on cs.commstructid = cb.commstructid
				join  [DMS].[dbo].[tblcommrec] cr on cr.commrecid = cs.commrecid
				join  [DMS].[dbo].[tblcompany] comp on comp.companyid = cs.companyid
				join  [DMS].[dbo].[tblcommscen] s on s.commscenid = cs.commscenid
				join  [DMS].[dbo].[tblagency] a on a.agencyid = s.agencyid
				left join  [DMS].[dbo].[tblbouncedreasons] br on br.bouncedid = r.bouncedreason
				left join  [DMS].[dbo].[tblaccount] acct on acct.accountid = r.accountid
				left join  [DMS].[dbo].[tblcreditorinstance] ci on ci.creditorinstanceid = acct.currentcreditorinstanceid
				left join  [DMS].[dbo].[tblcreditor] cred on cred.creditorid = ci.creditorid
				left join  [DMS].[dbo].[tblaccountstatus] stat on stat.accountstatusid = acct.accountstatusid
				where cb.ChargebackDate >= @yesterday

/*loop through the clients and update the ones in the table
	already and insert ones that are not in the table*/
open c_ClientID

fetch next from c_ClientID into @ClientID, @BatchID, @bounce, @void
while @@fetch_status = 0
	--Insert/Update routines
	begin
		 select @Exists = CommBatchID from [LexxiomWarehouse].[dbo].[tblChargeBacks] where CommBatchID = @BatchID
			if @Exists > 1
				begin
					if @bounce > '01/01/1900'
						begin
							update [LexxiomWarehouse].[dbo].[tblChargeBacks] set [StateChanged] = @bounce, [State] = 'Bounced' where CommBatchID = @BatchID
						end
					if @Void > '01/01/1900'
						begin
							update  [LexxiomWarehouse].[dbo].[tblChargeBacks] set [StateChanged] = @void, [State] = 'Void' where CommBatchID = @BatchID
						end
			end
			if @Exists <= 0 
				begin
					select @BatchDate = convert(varchar,b.batchdate,101), 
					@AgencyID = a.agencyid, 
					@AgencyName  =a.name,
					@CommRecID = cr.commrecid, 
					@CommissionRecipient = cr.display, 
					@CompanyID = comp.companyid, 
					@Company = comp.name,
					@ClientName = p.firstname + ' ' + p.lastname,
					@RegisterID = r.registerid, 
					@EntrytypeID = r.entrytypeid, 
					@EntryType = e.name,
					@FeeAmount = r.amount, 
					@PaymentAmount = rp.amount, 
					@InitialDraft = r.initialDraftYN, 
					@StateChanged = case When r.void is not null then r.void else (case when  r.bounce is not null then r.bounce end) end,
					@State = case
						when r.void is not null then 'Void'
						when r.bounce is not null then 'Bounced'
						else 
							(case 
								when rp.bounced is not null then 'Bounced' 
							    when rp.voided is not null then 'Void'
							 end)
					end,
					@BouncedReason = r.bouncedreason,  
					@AccountStatusID = stat.accountstatusid, 
					@AccountStatus = stat.description, 
					@AccountBalance = ci.amount, 
					@AccountNumber = ci.accountnumber, 
					@Creditor = cred.name,
					@CommbatchID = b.commbatchid, 
					@CommScenID = cs.commscenid, 
					@CommissionPaid = -cb.amount, 
					@RowAdded = getdate()
					from  [DMS].[dbo].[tblcommchargeback] cb
					join  [DMS].[dbo].[tblregisterpayment] rp on rp.registerpaymentid = cb.registerpaymentid
					join  [DMS].[dbo].[tblregister] r on r.registerid = rp.feeregisterid
					join  [DMS].[dbo].[tblentrytype] e on e.entrytypeid = r.entrytypeid
					join  [DMS].[dbo].[tblclient] c on c.clientid = r.clientid
					join  [DMS].[dbo].[tblperson] p on p.personid = c.primarypersonid
					join  [DMS].[dbo].[tblcommbatch] b on b.commbatchid = cb.commbatchid 
					join  [DMS].[dbo].[tblcommstruct] cs on cs.commstructid = cb.commstructid
					join  [DMS].[dbo].[tblcommrec] cr on cr.commrecid = cs.commrecid
					join  [DMS].[dbo].[tblcompany] comp on comp.companyid = cs.companyid
					join  [DMS].[dbo].[tblcommscen] s on s.commscenid = cs.commscenid
					join  [DMS].[dbo].[tblagency] a on a.agencyid = s.agencyid
					left join  [DMS].[dbo].[tblbouncedreasons] br on br.bouncedid = r.bouncedreason
					left join  [DMS].[dbo].[tblaccount] acct on acct.accountid = r.accountid
					left join  [DMS].[dbo].[tblcreditorinstance] ci on ci.creditorinstanceid = acct.currentcreditorinstanceid
					left join  [DMS].[dbo].[tblcreditor] cred on cred.creditorid = ci.creditorid
					left join  [DMS].[dbo].[tblaccountstatus] stat on stat.accountstatusid = acct.accountstatusid
					where cb.ChargebackDate >= @yesterday
					
					insert into [LexxiomWarehouse].[dbo].[tblchargebacks](
						BatchDate,
						AgencyID,
						AgencyName,
						CommRecID,
						CommissionRecipient,
						CompanyID,
						Company,
						ClientName,
						RegisterID,
						EntryTypeID,
						FeeAmount,
						PaymentAmount,
						InitialDraftYN,
						StateChanged,
						[State],
						BouncedReason,
						AccountStatusID,
						AccountStatus,
						AccountBalance,
						AccountNumber,
						Creditor,
						CommBatchID,
						CommScenID,
						ComissionPaid,
						RowAdded)
					VALUES(
						@BatchDate, 
						@AgencyID,
						@AgencyName, 
						@CommRecID, 
						@CommissionRecipient, 
						@CompanyID, 
						@Company, 
						@ClientName, 
						@RegisterID, 
						@EntryTypeID, 
						@FeeAmount,
						@PaymentAmount,  
						@InitialDraft,
						@StateChanged, 
						@State, 
						@BouncedReason, 
						@AccountStatusID,
						@AccountStatus, 
						@AccountBalance, 
						@AccountNumber, 
						@Creditor, 
						@CommBatchID, 
						@CommScenID, 
						@CommissionPaid, 
						@RowAdded) 
				end
		set @Exists = -1
fetch next from c_ClientID into @ClientID, @BatchID, @bounce, @void
	end

close c_ClientID
deallocate c_ClientID
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Profile_GetProfiles]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Profile_GetProfiles]
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @PageIndex              int,
    @PageSize               int,
    @UserNameToMatch        nvarchar(256) = NULL,
    @InactiveSinceDate      datetime      = NULL
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
        SELECT  u.UserId
        FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p
        WHERE   ApplicationId = @ApplicationId
            AND u.UserId = p.UserId
            AND (@InactiveSinceDate IS NULL OR LastActivityDate <= @InactiveSinceDate)
            AND (     (@ProfileAuthOptions = 2)
                   OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                   OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
                 )
            AND (@UserNameToMatch IS NULL OR LoweredUserName LIKE LOWER(@UserNameToMatch))
        ORDER BY UserName

    SELECT  u.UserName, u.IsAnonymous, u.LastActivityDate, p.LastUpdatedDate,
            DATALENGTH(p.PropertyNames) + DATALENGTH(p.PropertyValuesString) + DATALENGTH(p.PropertyValuesBinary)
    FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p, #PageIndexForUsers i
    WHERE   u.UserId = p.UserId AND p.UserId = i.UserId AND i.IndexId >= @PageLowerBound AND i.IndexId <= @PageUpperBound

    SELECT COUNT(*)
    FROM   #PageIndexForUsers

    DROP TABLE #PageIndexForUsers
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetRegisters]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetRegisters]
	(
		@returntop varchar (8000) ='100 percent',
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as

exec
(
	'select top
		' + @returntop + '
		tblregister.*,
		(case when tblregister.amount < 0 then abs(tblregister.amount) else 0 end) as debit,
		(case when tblregister.amount >= 0 then abs(tblregister.amount) else 0 end) as credit,
		tblentrytype.[name] as entrytypename
	from
		tblregister inner join
		tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid '
	+ @where + ' '
	+ @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_PayCommissionRecTEST]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayCommissionRecTEST]
(
	@commscenid int,
	@parentcommrecid int = null,
	@companyid int
)
as

declare @commstructid int
declare @commrecid int
declare @amount money
declare @paymentamount money
declare @amountpaid money
declare @entrytypeid int
declare @percent money


-- (1) prepare loop for recipients against current parent and scenario
declare cursor_PayCommissionRec cursor local for
	select
		commstructid,
		commrecid
	from
		tblcommstruct
	where
		companyid = @companyid and
		(
			(commscenid = @commscenid and parentcommrecid = @parentcommrecid) or
			(commscenid = @commscenid and parentcommrecid is null and @parentcommrecid is null)
		)
	order by
		[order]

open cursor_PayCommissionRec

fetch next from cursor_PayCommissionRec into @commstructid, @commrecid
while @@fetch_status = 0

	begin
		--print 'commscenid: ' + cast(@commscenid as varchar(10)) + ' commstructid: ' + cast(@commstructid as varchar(10)) + ' parentcommrecid: ' + cast(isnull(@parentcommrecid,-1) as varchar(10)) + ' commrecid: ' + cast(@commrecid as varchar(10))

		set @amount = null
		set @paymentamount = 100
		set @amountpaid = null
		set @entrytypeid = 1
		set @percent = null


		-- find percent owed for this entrytype and commstruct
		select
			@percent = [percent]
		from
			tblcommfee
		where
			entrytypeid = @entrytypeid and
			commstructid = @commstructid

		--print 'percent: ' + cast(isnull(@percent,-1) as varchar(10))

		-- assuming we found a fee payment amount, fee entrytype and percent for the commstruct...
		if not @paymentamount is null and not @entrytypeid is null and not @percent is null
			begin

				-- calculate the amount for this candidate
				set @amount = round(@paymentamount * @percent, 2)

				print 'commscenid: ' + cast(@commscenid as varchar(10)) + ' commstructid: ' + cast(@commstructid as varchar(10)) + ' parentcommrecid: ' + cast(isnull(@parentcommrecid,-1) as varchar(10)) + ' commrecid: ' + cast(@commrecid as varchar(10)) + ' percent: ' + cast(isnull(@percent,-1) as varchar(10)) + ' paid: ' + cast(@amount as varchar(10))
			end
--			else begin 
--				print 'the above commstructid is not paid out for this entrytype'
--			end

		-- recursively run this same proc again with this recipient as parent
		exec stp_PayCommissionRecTEST @commscenid, @commrecid, @companyid

		fetch next from cursor_PayCommissionRec into @commstructid, @commrecid
	end

close cursor_PayCommissionRec
deallocate cursor_PayCommissionRec
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCommunicationForClient]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <04 - 18 March 2010>
      Category    : [TimeMatter]
      Type        : {Update}
      Decription  : Get All communications for the client
				    use IsDeleted
*/
CREATE procedure [dbo].[stp_GetCommunicationForClient]
	(
		@returntop varchar (50) = '100 percent',
		@clientid int,
		@shortvalue int = 150,
		@criteria varchar (8000) = '1=1',
		@userid int = null,
		@type varchar(100) = 'type=''note'' OR type=''email'' OR type=''phonecall'''
	)

as

--create our results table
create table #tblResults
([type] varchar(20),
[date] datetime,
[by] varchar(255),
message varchar(5000),
shortmessage varchar(5000),
fieldid int,
direction bit,
userid int
)

exec
(
'insert into #tblResults 
	select 
		''note'' as type,
		tblnote.lastmodified as [date],
		case when ug.name ='''' then tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> ''
			 when ug.name is null then tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> ''
			 else tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> '' + ug.name  end as [by],
		tblnote.[value] as message,
		substring(tblnote.[value], 0, ' + @shortvalue + ') + (case when len(tblnote.[value]) >= ' + @shortvalue + ' then ''...'' else '''' end) as shortmessage, tblnote.noteid as fieldid,
		null as direction,
		tblnote.createdby
	from
		tblnote left outer join
		tbluser as tbllastmodifiedby on tblnote.lastmodifiedby = tbllastmodifiedby.userid
		left outer join tblusergroup as ug on ug.usergroupid = tblnote.usergroupid left outer join
		tblnoterelation nr on tblnote.noteid=nr.noteid left outer join 
		tblrelationtype rt on rt.relationtypeid = nr.relationtypeid left outer join 
		tblmatter mtr on nr.relationid=mtr.matterid left outer join
		tblclient ct on nr.relationid=ct.clientid
	where
		(IsNull(mtr.IsDeleted,0)=0) and (tblnote.clientid = ' + @clientid + ') and (' + @criteria + ')'
)

exec 
(
'insert into #tblResults 
	select 
		''email'' as type,
		tblEmailRelayLog.CreatedDate as [date],
		case when ug.name ='''' then tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> ''
			 when ug.name is null then tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> ''
			 else tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> '' + ug.name  end as [by],
		tblEmailRelayLog.[MailSubject] as message,
		substring(tblEmailRelayLog.[MailSubject], 0, ' + @shortvalue + ') + (case when len(tblEmailRelayLog.[MailSubject]) >= ' + @shortvalue + ' then ''...'' else '''' end) as shortmessage, tblEmailRelayLog.EMailLogID as fieldid,
		null as direction,
		tblEmailRelayLog.createdby
	from
		tblEmailRelayLog left outer join
		tbluser as tbllastmodifiedby on tblEmailRelayLog.createdby = tbllastmodifiedby.userid
		left outer join tblusergroup as ug on ug.usergroupid = tblEmailRelayLog.usergroupid left outer join
		tblEmailRelayRelation rl on tblEmailRelayLog.EMailLogID = rl.EMailLogID left outer join 
		tblrelationtype rt on rt.relationtypeid = rl.relationtypeid left outer join
		tblmatter mtr on rl.relationid=mtr.matterid left outer join
		tblclient ct on rl.relationid=ct.clientid
	where
		(IsNull(mtr.IsDeleted,0)=0) and (tblEmailRelayLog.clientid = ' + @clientid + ') and (' + @criteria + ')'
)

exec
(
'insert into #tblResults 
	select 
		''phonecall'' as type,
		tblphonecall.lastmodified as [date],
		case when ug.name ='''' then tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> ''
			 when ug.name is null then tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> ''
			 else tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> '' + ug.name  end as [by],
		tblphonecall.[subject] as message,
		substring(tblphonecall.[subject], 0, ' + @shortvalue + ') + (case when len(tblphonecall.[subject]) >= ' + @shortvalue + ' then ''...'' else '''' end) as shortmessage, 
		tblphonecall.phonecallid as fieldid,
		tblphonecall.direction,
		tblphonecall.createdby
	from
		tblphonecall left outer join
		tbluser as tbllastmodifiedby on tblphonecall.lastmodifiedby = tbllastmodifiedby.userid
		left outer join tblusergroup as ug on ug.usergroupid = tblphonecall.usergroupid left outer join
		tblphonecallrelation pr on tblphonecall.phonecallid=pr.phonecallid left outer join 
		tblrelationtype rt on rt.relationtypeid = pr.relationtypeid left outer join 
		tblmatter mtr on pr.relationid=mtr.matterid left outer join
		tblclient ct on pr.relationid=ct.clientid
	where
		(IsNull(mtr.IsDeleted,0)=0) and (tblphonecall.clientid=' + @clientid + ') and (' + @criteria + ')'
)

if @returntop='100 percent' begin
exec
(
'select distinct
		* 
	from 
		#tblResults 
	where 
		 '+ @type + ' 
	order by 
		date desc, 
		fieldid desc')


end else begin
	exec
(
'select distinct top ' + @returntop + '
		* 
	from 
		#tblResults 
	where 
		 '+ @type + ' 
	order by 
		date desc, 
		fieldid desc')
end

drop table #tblResults
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientServiceInfo]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetClientServiceInfo]
(
	@ClientID int
)
as
begin

select 
	AcctsToSettle = (select count(a.accountid) from tblaccount a 
		where a.clientid = c.clientid 
		and a.accountstatusid <> 55 
		and not (a.accountstatusid = 54 
		and exists(select r.registerid from tblregister r where r.entrytypeid = 4 and r.accountid = a.accountid and r.void is null and r.isfullypaid = 1))), 
	TotalDebt = isnull((select sum(a.currentamount) from tblaccount a 
		where a.clientid = c.clientid 
		and a.accountstatusid <> 55 
		and not (a.accountstatusid = 54 
		and exists(select r.registerid from tblregister r where r.entrytypeid = 4 and r.accountid = a.accountid and r.void is null and r.isfullypaid = 1))),0), 
	c.MonthlyFee [PerAcctFee], 
	c.MaintenanceFeeCap [ServiceFeeCap]
from 
	tblclient c
where 
	c.clientid = @ClientID

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPendingValidations]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetPendingValidations]
as
begin

SELECT c.CreditorID, g.name, c.street, c.street2, c.city, isnull(c.stateid,-1) [stateid], 
	c.zipcode, c.validated, s.abbreviation, c.CreditorGroupID, c.CreditorAddressTypeID, 
	c.Created, u.firstname + ' ' + u.lastname [createdby], ug.name [dept]
FROM tblcreditor c 
JOIN tblCreditorGroup g ON g.CreditorGroupID = c.CreditorGroupID 
LEFT JOIN tblState s ON s.StateID = c.StateID 
LEFT JOIN tbluser u ON u.userid = c.createdby 
LEFT JOIN tblusergroup ug on ug.usergroupid = u.usergroupid
WHERE c.validated = 0 
ORDER BY c.Created

end
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Personalization_GetApplicationId]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Personalization_GetApplicationId] (
    @ApplicationName NVARCHAR(256),
    @ApplicationId UNIQUEIDENTIFIER OUT)
AS
BEGIN
    SELECT @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTransactionByType_Payments]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetTransactionByType_Payments]
	(
		@clientid int
	)

as


select
	tblregisterpayment.registerpaymentid,
	tblregisterpayment.paymentdate,
	tblregisterpayment.feeregisterid,
	tblfeeregister.entrytypeid as feeregisterentrytypeid,
	tblfeeentrytype.name as feeregisterentrytypename,
	tblfeeregister.transactiondate as feeregistertransactiondate,
	tblfeeregister.checknumber as feeregisterchecknumber,
	tblfeeregister.amount as feeregisteramount,
	tblfeeregister.isfullypaid as feeregisterisfullypaid,
	tblregisterpayment.amount,
	tblregisterpayment.voided,
	tblregisterpayment.bounced,
	tblregisterpaymentdeposit.registerpaymentdepositid,
	tblregisterpaymentdeposit.depositregisterid,
	tbldepositregister.entrytypeid as depositregisterentrytypeid,
	tbldepositentrytype.name as depositregisterentrytypename,
	tbldepositregister.transactiondate as depositregistertransactiondate,
	tbldepositregister.checknumber as depositregisterchecknumber,
	tbldepositregister.amount as depositregisteramount,
	tbldepositregister.isfullypaid as depositregisterisfullypaid,
	tblregisterpaymentdeposit.amount as registerpaymentdepositamount,
	tblregisterpaymentdeposit.voided as registerpaymentdepositvoided,
	tblregisterpaymentdeposit.bounced as registerpaymentdepositbounced
from
	tblregisterpayment inner join
	tblregister tblfeeregister on tblregisterpayment.feeregisterid = tblfeeregister.registerid inner join
	tblentrytype tblfeeentrytype on tblfeeregister.entrytypeid = tblfeeentrytype.entrytypeid inner join
	tblregisterpaymentdeposit on tblregisterpaymentdeposit.registerpaymentid = tblregisterpayment.registerpaymentid inner join
	tblregister tbldepositregister on tblregisterpaymentdeposit.depositregisterid = tbldepositregister.registerid inner join
	tblentrytype tbldepositentrytype on tbldepositregister.entrytypeid = tbldepositentrytype.entrytypeid
where
	tblfeeregister.clientid = @clientid
order by
	tblregisterpayment.paymentdate
GO
/****** Object:  StoredProcedure [dbo].[stp_CopyCommScen]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_CopyCommScen]
(
	@commscenid int, -- source scenario
	@commrecid int, -- commrec to replace
	@newcommrecid int, 
	@oldenddate datetime, -- source scenario end date
	@startdate datetime, -- new scenario start date
	@enddate datetime, -- new scenario end date
	@userid int 
)
as
begin

declare @newcommscenid int, @commstructid int, @newcommstructid int

-- set end date of old scenario
if @oldenddate is not null begin
	update tblcommscen set enddate = @oldenddate, LastModified = getdate(), LastModifiedBy = @UserID
	where commscenid = @commscenid
end

-- add new scenario
insert tblcommscen (agencyid,startdate,enddate,[default],created,createdby,lastmodified,lastmodifiedby)
select agencyid, @startdate, @enddate, 0, getdate(), @userid, getdate(), @userid
from tblcommscen
where commscenid = @commscenid

select @newcommscenid = scope_identity()

declare cur cursor for select commstructid from tblcommstruct where commscenid = @commscenid

open cur
fetch next from cur into @commstructid

while @@fetch_status = 0 begin

	-- add new commstruct
	insert tblcommstruct (commscenid,commrecid,parentcommrecid,[order],created,createdby,lastmodified,lastmodifiedby,companyid)
	select @newcommscenid, case when commrecid = @commrecid then @newcommrecid else commrecid end, parentcommrecid, [order], getdate(), @userid, getdate(), @userid, companyid
	from tblcommstruct
	where commstructid = @commstructid

	select @newcommstructid = scope_identity()

	-- add new fee structure
	insert tblcommfee (commstructid,entrytypeid,[percent],created,createdby,lastmodified,lastmodifiedby)
	select @newcommstructid, entrytypeid, [percent], created, @userid, lastmodified, @userid
	from tblcommfee
	where commstructid = @commstructid

	fetch next from cur into @commstructid
end

close cur
deallocate cur


end
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationCriteriaLookup]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Retrives account information based on a search criteria that is passed as a parameter.
	             NOTE: This stored procedure is mainly used by critier builder to give user that ability to
	                   search field values.
*/

CREATE PROCEDURE [dbo].[stp_NegotiationCriteriaLookup]
@ExecWhere varchar(Max),
@ExecField varchar(60)
AS

BEGIN
   EXEC ('SELECT DISTINCT rtrim(ltrim(' + @ExecField + ')) as [Description]  
          FROM dbo.vwNegotiationDistributionSource  
          WHERE ' +   @ExecWhere 
         )
END
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_getSettlementClientInfo]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_settlementimport_getSettlementClientInfo]
(
	@clientaccountnumber numeric
)
as
BEGIN
	select top 1 
		c.agencyid
		,c.settlementfeepercentage
		, co.shortconame[LawFirm]
		, c.currentclientstatusid
		,c.SDABalance - c.PFOBalance - (SELECT ISNULL(SUM(Amount), 0) AS Expr1 FROM dbo.tblRegister WHERE (ClientId = c.ClientID) AND (EntryTypeId = 3) AND (Hold > GETDATE()) AND (Void IS NULL) AND (Bounce IS NULL) AND (Clear IS NULL)) - (SELECT ISNULL(SUM(Amount), 0) AS Expr1 FROM dbo.tblRegister AS tblRegister_3 WHERE (ClientId = c.ClientID) AND (EntryTypeId = 43) AND (Hold > GETDATE()) AND (Void IS NULL) AND (Bounce IS NULL) AND (Clear IS NULL)) [FundsAvail]
	from 
		tblclient c inner join tblcompany co on c.companyid = co.companyid
	where 
		accountnumber = @clientaccountnumber
END

GRANT EXEC ON stp_settlementimport_getSettlementClientInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationsSearchGetSettlementsWaitingOnSIF]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NegotiationsSearchGetSettlementsWaitingOnSIF]
(
	@UserID numeric,
	@SearchTerm varchar(500)
)
as
BEGIN

	/* development		
	declare @UserID int
	declare @SearchTerm varchar(500)
	set @UserID = 353
	set @SearchTerm = '%car%'
	*/
	declare @vtblResults table (SettlementID int, clientid int,
	creditoraccountid int,ClientAccountNumber numeric,[Creditor Name] varchar(500),creditorid int,
	[Client Name] varchar(500), CreditorAccountBalance money,SettlementAmount money, SettlementSavings money, 
	SettlementDueDate datetime,CreditorAccountNumber varchar(500), CreditorReferenceNumber varchar(500))

	declare	@vtblRoadMaps table(RoadmapID numeric, SettlementID numeric)
	insert into @vtblRoadMaps
	SELECT max(RoadmapID) as RoadmapID, nr.SettlementID
	FROM tblNegotiationRoadmap nr inner join tblsettlements s on s.settlementid = nr.settlementid 
	where s.settlementduedate >= getdate()
	GROUP BY nr.SettlementID
	option (fast 100)
	
	declare @groupId int
	select @groupId = usergroupid from tbluser where userid = @userid 
	if @groupID = 11 or @groupID = 6
		BEGIN
			insert into @vtblResults
			SELECT top 500   
				s.SettlementID, 
				s.clientid,
				s.creditoraccountid,
				cl.accountnumber as ClientAccountNumber,
				c.Name AS [Creditor Name],
				c.creditorid,
				p.FirstName + ' ' + p.LastName AS [Client Name], 
				s.CreditorAccountBalance,
				s.SettlementAmount, 
				s.SettlementSavings, 
				s.SettlementDueDate,
				substring(ci.accountnumber,len(ci.accountnumber)-4,4) as CreditorAccountNumber, 
				ci.referencenumber as CreditorReferenceNumber
				FROM @vtblRoadMaps AS nr2 INNER JOIN
					tblNegotiationRoadmap AS nr ON nr.RoadmapID = nr2.RoadmapID INNER JOIN
					tblNegotiationSettlementStatus AS nss ON nss.SettlementStatusID = nr.SettlementStatusID INNER JOIN
					tblSettlements AS s ON s.SettlementID = nr.SettlementID and s.active = 1 INNER JOIN
					tblPerson AS p ON p.ClientID = s.ClientID INNER JOIN
					tblAccount AS a ON a.AccountID = s.CreditorAccountID INNER JOIN
					tblCreditorInstance AS ci ON ci.CreditorInstanceID = a.CurrentCreditorInstanceID INNER JOIN
					tblCreditor AS c ON c.CreditorID = ci.CreditorID inner join
					tblclient as cl on p.clientid = cl.clientid
			WHERE     (nr.SettlementStatusID IN (5)) AND (p.Relationship = 'Prime') --and (s.CreatedBy = @UserID)
			ORDER BY s.SettlementDueDate ASC
			option (fast 100)
		END
	ELSE
		BEGIN
			insert into @vtblResults
			SELECT     
				s.SettlementID, 
				s.clientid,
				s.creditoraccountid,
				cl.accountnumber as ClientAccountNumber,
				c.Name AS [Creditor Name],
				c.creditorid,
				p.FirstName + ' ' + p.LastName AS [Client Name], 
				s.CreditorAccountBalance,
				s.SettlementAmount, 
				s.SettlementSavings, 
				s.SettlementDueDate,
				substring(ci.accountnumber,len(ci.accountnumber)-4,4) as CreditorAccountNumber, 
				ci.referencenumber as CreditorReferenceNumber
			FROM  @vtblRoadMaps AS nr2 INNER JOIN
				tblNegotiationRoadmap AS nr ON nr.RoadmapID = nr2.RoadmapID INNER JOIN
				tblNegotiationSettlementStatus AS nss ON nss.SettlementStatusID = nr.SettlementStatusID INNER JOIN
				tblSettlements AS s ON s.SettlementID = nr.SettlementID and s.active = 1 INNER JOIN
				tblPerson AS p ON p.ClientID = s.ClientID INNER JOIN
				tblAccount AS a ON a.AccountID = s.CreditorAccountID INNER JOIN
				tblCreditorInstance AS ci ON ci.CreditorInstanceID = a.CurrentCreditorInstanceID INNER JOIN
				tblCreditor AS c ON c.CreditorID = ci.CreditorID inner join
				tblclient as cl on p.clientid = cl.clientid
			WHERE     (nr.SettlementStatusID IN (5)) AND (p.Relationship = 'Prime')  and (s.CreatedBy = @UserID)
			ORDER BY s.SettlementDueDate ASC
			option (fast 10)
		END
	

	if @SearchTerm is null 
		select * from @vtblResults order by [client name]
	else
		select * from @vtblResults
		where	
			ClientAccountNumber like @searchTerm or 
			[Client Name] like @searchTerm or 
			[Creditor Name] like @searchTerm  or 
			[CreditorReferenceNumber] like @searchTerm  or 
			ClientAccountNumber like @searchTerm 
		order by [client name]
END
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertCallClient]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertCallClient]
@CallIdKey varchar(20),
@ClientId int
AS
Begin
	if Not Exists(Select ClientId From tblCallClient Where CallIdKey = @CallIdKey )
	Begin
		Insert Into tblCallClient(CallIdKey, ClientId)
		Values (@CallIdKey, @Clientid)
		Select scope_identity()
	End
End
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCommunicationForUser]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetCommunicationForUser]
	(
		@returntop varchar (50) = '100 percent',
		@userid int,
		@shortvalue int = 150
	)

as


exec
(
	'select
		''Note'' as type,
		t.lastmodified as [date],
		tblclient.clientid,
		tblperson.firstname + '' '' + tblperson.lastname as [client],
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as [by],
		t.[value] as message,
		substring(t.[value], 0, ' + @shortvalue + ') + ''...'' as shortmessage,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedby,
		t.noteid
	from
		(
		select top ' + @returntop + '
			*
		from
			tblnote
		where
			(tblnote.lastmodifiedby = ' + @userid + ')
		)
		as t inner join
		tblclient on t.clientid = tblclient.clientid inner join
		tblperson on tblclient.primarypersonid = tblperson.personid left outer join
		tbluser as tblcreatedby on t.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on t.lastmodifiedby = tbllastmodifiedby.userid
	order by
		t.noteid desc'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertImportClientJob]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertImportClientJob]
@SourceId int 
AS
BEGIN
Insert Into tblImportClientJob(SourceId) Values (@SourceId)

Select SCOPE_IDENTITY() 
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Statistic_TrustAccount]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Statistic_TrustAccount]

as

select
	c.trustid,
	t.[name] as trustname,
	sum(r.balance) as balance
from
	tblregister r inner join
	(
	select
		nr.clientid,
		max(registerid) as registerid
	from
		tblregister nr inner join
		(
			select
				clientid,
				max(transactiondate) as transactiondate
			from
				tblregister 
			where
				bounce is null and
				void is null
			group by
				clientid
		)
		as nnr on nr.clientid = nnr.clientid and nr.transactiondate = nnr.transactiondate
	group by
		nr.clientid
	)
	as nr on r.registerid = nr.registerid inner join
	tblclient c on r.clientid = c.clientid inner join
	tbltrust t on c.trustid=t.trustid
where
	r.balance > 0 
group by
	c.trustid, t.[name]
order by
	c.trustid, t.[name]
GO
/****** Object:  StoredProcedure [dbo].[stp_LogStoreRequest]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_LogStoreRequest]
(
	@ClientID int
,	@RequestType varchar(20)
,	@StatusDesc varchar(50)
,	@Notes varchar(500)
,	@RequestedBy int
)
as
begin
/*
	History:
	jhernandez		05/23/08	Logs a store request, that is, attempts to create, modify, or
								remove a virtual account with CheckSite
	jhernandez		06/02/08	Update client record with Plaza's trust id if a successful
								virtual account got created. These clients will now start
								transmitting through that bank.
	jhernandez		06/18/08	Bug fix: Hard coding trust id to 22
*/

insert tblStoreRequestLog (ClientID,RequestType,StatusDesc,Notes,RequestedBy)
values (@ClientID,@RequestType,@StatusDesc,@Notes,@RequestedBy)


if @RequestType = 'OpenAccount' and @StatusDesc = 'Succeeded' begin
	update tblClient 
	set TrustID = 22, LastModified = getdate(), LastModifiedBy = @RequestedBy
	where ClientID = @ClientID
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_Statistic_Commission]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Statistic_Commission]
(
	@date1 datetime = null,
	@date2 datetime = null,
	@companyid int = null,
	@agencyid int = null
)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

SELECT
	t.commrecname,
	count(commpayid) as [count],
	sum(t.amount) as amount
FROM
	(
		SELECT 
			tblCommPay.CommPayID,
			tblCommRec.Abbreviation as CommRecName,
			tblCommPay.Amount
		FROM 
			tblCommBatch INNER JOIN 
			tblCommPay ON tblCommBatch.CommBatchId=tblCommPay.CommBatchId INNER JOIN
			tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructId 
				AND (@companyid is null or tblCommStruct.CompanyID = @companyid) INNER JOIN
			tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId INNER JOIN
			tblCommScen s on s.CommScenID = tblCommBatch.CommScenID
				AND (@agencyid is null or s.AgencyID = @agencyid)
			
		WHERE
			( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) >= @date1) AND
			( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) <= @date2)

		UNION ALL

		SELECT 
			tblCommPay.CommPayID,
			tblCommRec.Abbreviation as CommRecName,
			tblCommPay.Amount
		FROM 
			tblCommBatch INNER JOIN 
			(SELECT [Percent],CommChargeBackId,CommPayID,ChargeBackDate,RegisterPaymentId,CommStructID,-Amount as Amount,CommBatchId FROM tblCommChargeBack) tblCommPay on tblCommBatch.CommBatchId=tblCommPay.CommBatchId INNER JOIN 
			tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructId 
				AND (@companyid is null or tblCommStruct.CompanyID = @companyid) INNER JOIN
			tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId INNER JOIN
			tblCommScen s on s.CommScenID = tblCommBatch.CommScenID
				AND (@agencyid is null or s.AgencyID = @agencyid)
		WHERE
			( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) >= @date1) AND
			( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) <= @date2)

	) t
GROUP BY
	t.commrecname
GO
/****** Object:  Table [dbo].[tblDepositRuleAch]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblDepositRuleAch](
	[RuleACHId] [int] IDENTITY(1,1) NOT NULL,
	[StartDate] [datetime] NOT NULL,
	[EndDate] [datetime] NULL,
	[DepositDay] [int] NOT NULL,
	[DepositAmount] [money] NOT NULL,
	[Created] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
	[ClientDepositId] [int] NOT NULL,
	[BankAccountId] [int] NOT NULL,
	[OldRuleId] [int] NULL,
	[Locked] [bit] NOT NULL DEFAULT ((0)),
	[ReferenceRuleACHID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_GetClientCreditors]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_GetClientCreditors]
(
@clientid int
)
as
	BEGIN
		select 
	CurrentCreditorInstanceID
	, AccountID	
	, Name 
	, Original	
	, AcctLast4

from
(
	select 
		CreditorInstanceID[CurrentCreditorInstanceID]
		, Accountid
		,cc.name
		,case when oc.name = '' then cc.name else oc.name end[Original]
		,'#' + Right(ci.AccountNumber, 4)[AcctLast4]
		, ci.Created
		, ROW_NUMBER() OVER(PARTITION BY cc.name ORDER BY ci.Created DESC) [roNum]
	from 
		tblCreditorInstance ci 
		inner join tblCreditor cc 
		on ci.CreditorID = cc.CreditorID 
		left join tblCreditor oc 
		on ci.ForCreditorID = oc.CreditorID
	where 
		accountid in (select accountid from tblAccount WHERE (ClientID = @clientid) ) 
		and (cc.validated = 1 or cc.validated is null)
) as tblData
 order by [Name]
	END

GRANT EXEC ON stp_LetterTemplates_GetClientCreditors TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetSettlement]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create Procedure [dbo].[stp_GetSettlement]
@SettlmentID int
as
	BEGIN
		select
			tblsettlements.*,
			tblaccount.clientid,
			tblaccount.originalamount,
			tblaccount.currentamount,
			tblaccount.currentcreditorinstanceid,
			tblcreditorinstance.accountnumber,
			tblcreditorinstance.creditorid as currentcreditorid,
			tblcreditor.name as currentcreditorname,
			tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
			tbllastmodifiedby.lastname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
		from
			tblsettlements  with(nolock) inner join
			tblaccount with(nolock) on tblsettlements.creditoraccountid = tblaccount.accountid inner join
			tblcreditorinstance with(nolock) on tblaccount.currentcreditorinstanceid = tblcreditorinstance.creditorinstanceid inner join
			tblcreditor with(nolock) on tblcreditorinstance.creditorid = tblcreditor.creditorid left outer join
			tbluser as tblcreatedby with(nolock) on tblsettlements.createdby = tblcreatedby.userid left outer join
			tbluser as tbllastmodifiedby with(nolock) on tblsettlements.lastmodifiedby = tbllastmodifiedby.userid
		where
			tblsettlements.settlementid = @SettlmentID
	END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_FindUsersByName]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_FindUsersByName]
    @ApplicationName       nvarchar(256),
    @UserNameToMatch       nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
        SELECT u.UserId
        FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND u.LoweredUserName LIKE LOWER(@UserNameToMatch)
        ORDER BY u.UserName


    SELECT  u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY u.UserName

    SELECT  @TotalRecords = COUNT(*)
    FROM    #PageIndexForUsers
    RETURN @TotalRecords
END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_deleteCreditor]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_enrollment_deleteCreditor]
(
	@creditorInstanceID int
)
as
BEGIN
	DELETE FROM [tblLeadCreditorInstance]
	WHERE LeadCreditorInstance = @creditorInstanceID
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_Control_Make]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_Control_Make]
	(
		@PageName varchar(255),
		@FunctionName varchar(255),
		@ControlName varchar(255),
		@PermissionTypeId int,
		@Action bit
	)

as

--get the functionid (create if neccessary)
declare @functionId int
set @functionId=(SELECT FunctionId from tblfunction where [fullname]=@functionname)
if @functionId is null
begin
	INSERT INTO tblFunction ([Name],FullName, IsSystem) values (@FunctionName,@FunctionName, 0)
	set @functionId = SCOPE_IDENTITY()
end

--get the pageid (create if neccessary)
declare @pageId int
set @pageId=(SELECT pageid from tblpage where [servername]=@pagename)
if @pageId is null
begin
	declare @isMasterPage bit
	if @pagename like '%_master' begin set @ismasterpage = 1 end else begin set @ismasterpage=0 end
	INSERT INTO tblpage (servername,[Name], IsMasterPage) values (@pagename,@pagename, @ismasterpage)
	set @pageId = SCOPE_IDENTITY()
end

--create the control for this page if not existant
declare @controlid int
set @controlid = (select controlid from tblcontrol where pageid=@pageid and servername=@controlname)
if @controlid is null
begin
	insert into tblcontrol
		(pageid,servername,permissiontypeid, action) 
	values 
		(@pageid,@controlname,@permissiontypeid,@action)
	set @controlid = scope_identity()
end

--add the control to the function if not existant
declare @controlfunctionid int
set @controlfunctionid=(select controlfunctionid from tblcontrolfunction where controlid=@controlid and functionid=@functionid)
if @controlfunctionid is null
begin
	insert into tblcontrolfunction (controlid,functionid) values (@controlid,@functionid)
end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTasksb]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <05 - 15 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Decription  : Alternative Listing the tasks      
					use IsDeleted
*/
CREATE procedure [dbo].[stp_GetTasksb]
	(
		@returntop varchar (50) = '100 percent',
		@shortdescription int = 30,
		@where varchar (1000) = '',
		@orderby varchar (1000) = ''
	)
as
set @where = @where + ' and tblmatter.IsDeleted=0 '
exec 
(
'select top ' + @returntop + '
		tblclienttask.clientid,
		tblperson.firstname + '' '' + tblperson.lastname as clientname,
		tbltasktype.name as tasktypename,
		
		tbltasktypecategory.tasktypecategoryid,
		tbltasktypecategory.name as tasktypecategoryname,
		tbltaskresolution.name as taskresolutionname,
		tbltask.*,
		substring(tbltask.description, 0, ' + @shortdescription + ') + ''...'' as shortdescription,
		tblassignedto.firstname + '' '' + tblassignedto.lastname as assignedtoname,
		tblassignedto.manager  as assignedtoismanager,
		tblassignedto.UserTypeId as assignedtoUserTypeId,
		tblassignedtousertype.[name] as assignedtousertypename,
		tblassignedtousergroup.UserGroupId as assignedtousergroupid,
		tblassignedtousergroup.[name] as assignedtousergroupname,
		tblresolvedby.firstname + '' '' + tblresolvedby.lastname as resolvedbyname,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname
		,tblmattertask.*

	from
		tbltask left outer join
		tblclienttask on tbltask.taskid = tblclienttask.taskid left outer join
		tblclient on tblclienttask.clientid = tblclient.clientid left outer join
		tblperson on tblclient.primarypersonid = tblperson.personid left outer join
		tbltasktype on tbltask.tasktypeid = tbltasktype.tasktypeid left outer join
		tbltasktypecategory on tbltasktype.tasktypecategoryid = tbltasktypecategory.tasktypecategoryid left outer join
		tbltaskresolution on tbltask.taskresolutionid = tbltaskresolution.taskresolutionid left outer join
		tbluser as tblassignedto on tbltask.assignedto = tblassignedto.userid left outer join
		tbluser as tblresolvedby on tbltask.resolvedby = tblresolvedby.userid left outer join
		tbluser as tblcreatedby on tbltask.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on tbltask.lastmodifiedby = tbllastmodifiedby.userid
		left outer join tblmattertask on tblmattertask.taskid = tbltask.taskid	
		left outer join tblUserType as tblassignedtousertype on tblassignedtousertype.usertypeid =tblassignedto.usertypeid
		left outer join tbluserGroup as tblassignedtousergroup on tblassignedtousergroup.usergroupid = tbltask.AssignedToGroupId
		left outer join tblmatter on tblmattertask.matterid=tblmatter.matterid

	'  + @where + ' ' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAccountsByCreditorID]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetAccountsByCreditorID]
(
	@CreditorID int
)
as
begin

	select distinct c.clientid, c.accountnumber, a.accountid
	from tblcreditorinstance ci
	join tblaccount a on a.accountid = ci.accountid
	join tblclient c on c.clientid = a.clientid
	where ci.creditorid = @CreditorID 
		or ci.forcreditorid = @CreditorID
	order by c.accountnumber

end
GO
/****** Object:  StoredProcedure [dbo].[stp_ActiveScenarioList]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ActiveScenarioList]
as
begin

select s.commscenid,'(' + cast(s.commscenid as varchar(10)) + ') ' 
	+ '(' + cast(s.agencyid as varchar(10)) + ') ' + a.name + ' ' 
	+ convert(varchar(10),s.startdate,101) + '-' 
	+ convert(varchar(10),isnull(s.enddate,'1/1/2050'),101) + ' (' 
	+ convert(varchar(5),s.retentionfrom) + '-' + convert(varchar(5),s.retentionto) 
	+ ')' [scenario] 
from tblcommscen s 
join tblagency a on a.agencyid = s.agencyid 
left join tblcommbatch b on b.commscenid = s.commscenid 
group by s.commscenid, s.agencyid, a.name, s.startdate, s.enddate, s.retentionfrom, s.retentionto 
having max(b.batchdate) > dateadd(mm,-3,getdate()) 
order by s.agencyid, s.startdate, s.enddate, s.retentionfrom, s.retentionto

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetSingleStatementForClient]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetSingleStatementForClient]

@clientid int,
@From smalldatetime,
@To smalldatetime

as

SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

select
	@clientid as ClientID,
	tcl.AccountNumber as ClientNumber,
	0 as registerfirst,
    r.registerid as id,
	r.transactiondate as date,
	r.checknumber,
	r.entrytypeid,
	et.[name] as entrytypename,
	r.originalamount,
	r.amount,
	r.sdabalance,
	r.pfobalance,
	r.description,
	r.accountid,
	c.name as accountcreditorname,
	ci.accountnumber,
	a.currentamount as accountcurrentamount,
	r.adjustedregisterid,
	ar.transactiondate as adjustedregistertransactiondate,
	ar.amount as adjustedregisteramount,
	ar.originalamount as adjustedregisteroriginalamount,
	ar.entrytypeid as adjustedregisterentrytypeid,
	--aret.name as adjustedregisterentrytypename,
	ar.accountid as adjustedregisteraccountid,
	arc.name as adjustedregisteraccountcreditorname,
	arci.accountnumber as adjustedregisteraccountnumber,
	r.achmonth,
	r.achyear,
	r.feemonth,
	r.feeyear,
	case when r.bounce is null and r.void is null then 0 else 1 end as bouncedorvoided,
	n.numnotes,
    pc.numphonecalls

into #tempresults

from
	tblregister r
	inner join tblentrytype et on r.entrytypeid = et.entrytypeid 
	left join tblClient tcl on r.ClientID = tcl.ClientID
	left join tblaccount a on r.accountid = a.accountid 
	left join tblcreditorinstance ci on a.originalcreditorinstanceid = ci.creditorinstanceid 
	left join tblcreditor c on ci.creditorid = c.creditorid 
	left join tblregister ar on r.adjustedregisterid = ar.registerid 
	left join tblaccount ara on ar.accountid = ara.accountid 
	left join tblcreditorinstance arci on ara.originalcreditorinstanceid = arci.creditorinstanceid 
	left join tblcreditor arc on arci.creditorid = arc.creditorid 
	left join tblentrytype aret on ar.entrytypeid = aret.entrytypeid 
	left join
	(
		select count(distinct noteid) as numnotes, relationid
		from tblnoterelation
		where relationtypeid = 4
		group by relationid
	)
	as n on r.registerid = n.relationid left join
	(
		select count(distinct phonecallid) as numphonecalls, relationid
		from tblphonecallrelation
		where relationtypeid = 4
		group by relationid
	)
	as pc on r.registerid = pc.relationid
	where r.ClientID = @clientid
	and (r.Bounce IS NULL 
	and r.Void IS NULL)
	and r.transactiondate between @From and @To

union all
select
	@clientid as ClientID,
	tcl.AccountNumber as ClientNumber,
	1 as registerfirst,
    rp.registerpaymentid as id,
    rp.paymentdate as date,
    '' as checknumber,
    -1 as entrytypeid,
    'Payment' as entrytypename,
    null as originalamount,
    rp.amount,
    rp.sdabalance,
    rp.pfobalance,
    null as description,
    null as accountid,
    null as accountcreditorname,
    null as accountnumber,
    null as accountcurrentamount,
    r.registerid as adjustedregisterid,
    r.transactiondate as adjustedregistertransactiondate,
    r.amount as adjustedregisteramount,
    r.originalamount as adjustedregisteroriginalamount,
    r.entrytypeid as adjustedregisterentrytypeid,
    --ret.name as adjustedregisterentrytypename,
    r.accountid as adjustedregisteraccountid,
    c.name as adjustedregisteraccountcreditorname,
    ci.accountnumber as adjustedregisteraccountnumber,
    null as achmonth,
    null as achyear,
    null as feemonth,
    null as feeyear,
    case when bounced = 0 and voided = 0 then 0 else 1 end as bouncedorvoided,
    n.numnotes,
    pc.numphonecalls
from
    tblregisterpayment rp
	inner join tblregister r on rp.feeregisterid = r.registerid 
	left join tblClient tcl on r.ClientID = tcl.ClientID
	left join tblaccount a on r.accountid = a.accountid 
	left join tblcreditorinstance ci on a.originalcreditorinstanceid = ci.creditorinstanceid 
	left join tblcreditor c on ci.creditorid = c.creditorid 
	left join tblentrytype ret on r.entrytypeid = ret.entrytypeid 
	left join
    (
	    select count(distinct noteid) as numnotes, relationid
		from tblnoterelation
		where relationtypeid = 5
		group by relationid
    )
    as n on rp.registerpaymentid = n.relationid left join
    (
		select count(distinct phonecallid) as numphonecalls, relationid
		from tblphonecallrelation
		where relationtypeid = 5
		group by relationid
    )
	as pc on rp.registerpaymentid = pc.relationid 
	where r.ClientID = @clientid
	and (rp.Bounced = 0 
	and rp.Voided = 0)
	and rp.paymentdate between @From and @To
	
	order by Date, RegisterFirst, ID

	insert into tblSingleStatementResults
	(
		ClientID,
		AccountNumber,
		RegisterFirst,
		registerID,
		TransactionDate,
		CheckNo,
		EntryTypeID,
		EntryTypeName,
		OrigionalAmt,
		Amount,
		SDABalance,
		PFOBalance,
		description,
		AccountID,
		CreditorName,
		CreditorAcctNo,
		CurrentAmount,
		AdjustRegisterID,
		AdjTransactionDate,
		AdjRegAmount,
		AdjRegOrigAmount,
		AdjRegEntryTypeID,
		AdjRegAcctID,
		AdjRegAcctCreditorName,
		AdjRegAcctAcctNo,
		ACHMonth,
		ACHYear,
		FeeMonth,
		FeeYear,
		BounceOrVoid,
		NumNotes,
		NumPhoneCalls
	)
	select * from #tempresults

drop table #tempresults
GO
/****** Object:  StoredProcedure [dbo].[stp_GetQuerySettings]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetQuerySettings]
	(
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as

exec
(
	'select
		tblquerysetting.*
	from
		tblquerysetting '
	+ @where + ' ' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationMasterFilterExclusion]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Check for any overlap that may be caused by intended criteria addition.  
				 The indended criteria to be added is passed as a paramter (@filterClause).   				 

*/

CREATE PROCEDURE [dbo].[stp_NegotiationMasterFilterExclusion]
@SourceFilterId int,
@filterClause varchar(max)

AS
SET NOCOUNT ON
DECLARE @LocalfilterClause varchar(max)
DECLARE @FilterId int
DECLARE @PreviousFilterId int
DECLARE @tblOrFilter TABLE (FilterId int,filterClause varchar(max), isRead int)
CREATE TABLE #tblAssignedList(FilterId int, AccountId int)

SET @FilterId = null
SET @LocalfilterClause = null

if @SourceFilterId > 0 
 BEGIN
	INSERT INTO @tblOrFilter
	  SELECT FilterId, FilterClause, '0' FROM tblNegotiationFilters WHERE FilterId NOT IN(@SourceFilterId) and FilterType = 'root'
 END
else
 BEGIN
	INSERT INTO @tblOrFilter
	  SELECT FilterId, FilterClause, '0' FROM tblNegotiationFilters WHERE FilterType = 'root'
 END
   
SELECT TOP 1 @LocalfilterClause = filterClause, @FilterId = FilterId FROM @tblOrFilter WHERE isRead = 0

WHILE @FilterId > 0
 BEGIN
    SET @PreviousFilterId = @FilterId    
	EXEC 
	('
		INSERT INTO #tblAssignedList       
		SELECT DISTINCT ' + @FilterId + ', AccountId 
		FROM dbo.vwNegotiationDistributionSource        
		WHERE 1=1 AND ( ' + @filterClause + ' )  AND  ( ' + @LocalfilterClause + ')'
	)	 

	UPDATE @tblOrFilter SET isRead = 1 WHERE FilterId = @FilterId
    SELECT TOP 1 @LocalfilterClause = filterClause, @FilterId = FilterId FROM @tblOrFilter WHERE isRead = 0
    if @PreviousFilterId = @FilterId
     BEGIN
       SET @FilterId = 0
     END
 END

 SELECT DISTINCT isnull(FilterId,0) as FilterId FROM #tblAssignedList
DROP TABLE #tblAssignedList
GO
/****** Object:  StoredProcedure [dbo].[stp_HomepageChartEnrollmentEnrolled]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_HomepageChartEnrollmentEnrolled]
 (
  @refwhere varchar (8000) ='',
  @dategrouping int = 0
 )
 
as
 

declare @datefield varchar (500)
declare @field varchar(50)
set @field='tblenrollment.created'

if @dategrouping = 0 -- daily grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar, ' + @field + ', 101))'
	end
else if @dategrouping = 1 -- weekly grouping
	begin
		set @datefield = 'dateadd(day, 1 - datepart(dw, ( convert(varchar, ' + @field + ', 101) )), ( convert(varchar, ' + @field + ', 101) ))'
	end
else if @dategrouping = 2 -- monthly grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar(2), month(' + @field + ')) + N''/1/'' + convert(varchar(4), year(' + @field + ')))'
	end
else if @dategrouping = 3 -- yearly grouping
	begin
		set @datefield = 'convert(datetime, N''1/1/'' + convert(varchar(12), year(' + @field + ')))'
	end
 
exec
(
'select
   ' + @datefield + ' as [time],
   count(tblenrollment.enrollmentid) as CountEnrollment
from
	tblenrollment inner join
	tblclient on tblenrollment.clientid=tblclient.clientid
where 
	committed=1 '
	+ @refwhere + ' 
group by
   ' + @datefield + '
having
   not ' + @datefield + ' is null
order by 
   ' + @datefield
)
GO
/****** Object:  StoredProcedure [dbo].[stp_LexxCMS_creditor_getHistory]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LexxCMS_creditor_getHistory]
(	
	@acctID int
)
as
BEGIN
	--370353
	--declare @acctid int
	--set @acctid = 370353

	declare @tblHist table(historyDate datetime,HistoryType int,HistoryTypePath varchar(max),HistoryDescription varchar(max))

	insert into @tblHist 
	select created,0,[HistoryTypePath]=''
	,case when offerdirection = 'made' then 'Made offer to creditor for $' else 'Received offer from creditor for $' end + cast(settlementamount as varchar) + '.'
	from tblsettlements with (nolock)
	where creditoraccountid = @acctid
	option (fast 5)

	insert into @tblHist 
	select distinct 
	relateddate 
	,1
	,[HistoryTypePath]= '\\'+ c.storageserver + '\' + c.storageroot + '\'+ c.accountnumber  + '\' +
		case when dr.subfolder is null then 'ClientDocs\' else 'CreditorDocs\' + dr.subfolder end +
		c.accountnumber + '_' +  dr.doctypeid + '_'+  dr.docid + '_'  + dr.datestring + '.pdf'
	,'Printed ' + lt.templatedisplayname + ' for  creditor.'
	from tbldocrelation dr
	inner join tblletters_templateinfo lt with (nolock) on lt.templatedoctypeid = dr.doctypeid
	inner join tbldocumenttype dt with (nolock) on lt.templatedoctypeid = dt.typeid
	inner join tblaccount a on a.accountid = dr.relationid
	inner join tblclient c on c.clientid = a.clientid
	where relationid =@acctid
	option (fast 5)

	select * from @tblHist order by historydate 
END


GRANT EXEC ON stp_LexxCMS_creditor_getHistory TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_CommissionsPaidOut]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_CommissionsPaidOut 29,'6/1/08','8/31/08',2

CREATE procedure [dbo].[stp_CommissionsPaidOut]
(
	@commrecid int
,	@startdate datetime
,	@enddate datetime
,	@companyid int
)
as

declare @StoneWallSwitchDate DATETIME
declare @AvertSwitchDate DATETIME
declare @AvertSwitchDate1 DATETIME
declare @vtblData table(CommissionAmt float, ChargebackAmt float, PaidOut float)

set @StoneWallSwitchDate = CAST('5/16/2007 11:59PM' AS DATETIME)
set @AvertSwitchDate = CAST('7/31/2008 11:59PM' AS DATETIME)
set @AvertSwitchDate1 = CAST('8/20/2008 11:59PM' AS DATETIME)

declare @CommRec varchar(50),@company varchar(50)
select @CommRec = Display from tblCommRec where CommRecID = @commrecid
select @company = name from tblcompany where companyid = @companyid

insert into @vtblData 
select sum(co.amount),0,0
from tblcommbatch b
inner join tblcommpay co on b.commbatchid = co.commbatchid
inner join tblcommstruct st on st.commstructid = co.commstructid
inner join tblregisterpayment rp on rp.registerpaymentid = co.registerpaymentid
inner join tblregister r on r.registerid = rp.feeregisterid
inner join tblclient c on c.clientid = r.clientid
where b.batchdate between @startdate and @enddate
and st.companyid = @companyid
and st.commrecid = CASE 
					  WHEN (c.created > @StoneWallSwitchDate AND @commrecid = 5) THEN 24
					  WHEN (c.created > case when batchdate >= @AvertSwitchDate1 then @AvertSwitchDate else @AvertSwitchDate1 end AND @commrecid = 17) THEN 29
					  ELSE @commrecid
				   END  
    

insert into @vtblData 
select 0,sum(co.amount),0
from tblcommbatch b
inner join tblcommchargeback co on b.commbatchid = co.commbatchid
inner join tblcommstruct st on st.commstructid = co.commstructid
inner join tblregisterpayment rp on rp.registerpaymentid = co.registerpaymentid
inner join tblregister r on r.registerid = rp.feeregisterid
inner join tblclient c on c.clientid = r.clientid
where b.batchdate between @startdate and @enddate
and st.companyid = @companyid
and st.commrecid = CASE 
                      WHEN (c.created > @StoneWallSwitchDate AND @commrecid = 5) THEN 24
                      WHEN (c.created > case when batchdate >= @AvertSwitchDate1 then @AvertSwitchDate else @AvertSwitchDate1 end AND @commrecid = 17) THEN 29
                      ELSE @commrecid
                   END  
insert into @vtblData 
select 0,0,sum(nr.amount)
from tblnacharegister nr
join tblcompany c on c.companyid = nr.companyid
	and c.companyid = @companyid
join tblnachafile f on f.nachafileid = nr.nachafileid
	and f.date between @startdate and @enddate
where nr.name = @CommRec
	and nr.nachafileid <> 985


select @CommRec [name], @company [company], sum(commissionamt) as [Commissions], sum(chargebackamt)  as [ChargeBacks], sum(commissionamt)-sum(chargebackamt) as [Diff], sum(paidout) as [PaidOut]
from @vtblData
GO
/****** Object:  Table [dbo].[tblImportedClient]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblImportedClient](
	[ImportId] [int] IDENTITY(1,1) NOT NULL,
	[ImportJobId] [int] NOT NULL,
	[SourceId] [int] NOT NULL,
	[ExternalClientId] [varchar](50) NOT NULL,
	[Created] [datetime] NOT NULL DEFAULT (getdate()),
PRIMARY KEY CLUSTERED 
(
	[ImportId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_GetCreditorInfo]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_GetCreditorInfo]
(
	@creditorInstanceID int
)
as
	BEGIN

		SELECT 
			ci.AccountNumber AS 'cAcctNo'
			, isnull(cg.Name,c.Name) AS 'cName'
			, c.Street AS 'cStreet'
			, ISNULL(c.Street2,'') AS 'cStreet2'
			, c.City AS 'cCity'
			, s.Abbreviation AS 'cState'
			, c.ZipCode AS 'cZip'
			, ISNULL(ci.ReferenceNumber,'') AS [ReferenceNumber]
			, isnull(a.CurrentAmount,'0.00') as [CurrentAmount] 
			,case when not ci.forcreditorid is null and oc.name <> '' then oc.name else c.name end [OrigCred]
		FROM tblCreditor AS c 
			INNER JOIN tblCreditorInstance AS ci with(nolock) ON ci.CreditorID = c.CreditorID 
			INNER JOIN tblAccount AS a with(nolock) ON ci.AccountID = a.AccountID LEFT OUTER JOIN tblState AS s with(nolock) ON s.StateID = c.StateID 
			LEFT OUTER join tblcreditor as oc with(nolock) on ci.forcreditorid = oc.creditorid
			LEFT OUTER join tblcreditorgroup as cg with(nolock) on c.creditorgroupid = cg.creditorgroupid
		WHERE 	
			(ci.CreditorInstanceID =  @creditorInstanceID)
	END

GRANT EXEC ON stp_LetterTemplates_GetCreditorInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAccounts]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetAccounts]
	(
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as

exec
(
	'select
		tblaccount.*,
		tblcreditorinstance.creditorid,
		tblcreditorinstance.forcreditorid,
		tblcreditorinstance.acquired,
		tblcreditorinstance.accountnumber,
		tblcreditorinstance.referencenumber,
		tblcreditor.[name] as creditorname,
		tblcreditor.street as creditorstreet,
		tblcreditor.street2 as creditorstreet2,
		tblcreditor.city as creditorcity,
		tblcreditor.stateid as creditorstateid,
		tblstate.[name] as creditorstatename,
		tblstate.abbreviation as creditorstateabbreviation,
		tblcreditor.zipcode as creditorzipcode,
		tblforcreditor.[name] as forcreditorname,
		tblforcreditor.street as forcreditorstreet,
		tblforcreditor.street2 as forcreditorstreet2,
		tblforcreditor.city as forcreditorcity,
		tblforcreditor.stateid as forcreditorstateid,
		tblforstate.[name] as forcreditorstatename,
		tblforstate.abbreviation as forcreditorstateabbreviation,
		tblforcreditor.zipcode as forcreditorzipcode,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname,
		tblsettledby.firstname + '' '' + tblsettledby.lastname as settledbyname,
		isnull(n.numnotes,0) + isnull(pc.numphonecalls,0) as numcomms,
		tblcreditor.validated as creditorvalidated,
		tblforcreditor.validated as forcreditorvalidated,
		tblcreditor.creditorgroupid as creditorgroupid,
		tblforcreditor.creditorgroupid as forcreditorgroupid
	from
		tblaccount inner join
		tblcreditorinstance on tblaccount.currentcreditorinstanceid = tblcreditorinstance.creditorinstanceid inner join
		tblcreditor on tblcreditorinstance.creditorid = tblcreditor.creditorid left outer join
		tblcreditor as tblforcreditor on tblcreditorinstance.forcreditorid = tblforcreditor.creditorid left outer join
		tblstate on tblcreditor.stateid = tblstate.stateid left outer join
		tblstate as tblforstate on tblforcreditor.stateid = tblforstate.stateid left outer join
		tbluser as tblcreatedby on tblaccount.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on tblaccount.lastmodifiedby = tbllastmodifiedby.userid left outer join
		tbluser as tblsettledby on tblaccount.settledby = tblsettledby.userid left outer join
		(
			select
				isnull(count(distinct noteid),0) as numnotes,
				relationid
			from
				tblnoterelation
			where
				relationtypeid = 2
			group by
				relationid
		)
		as n on tblaccount.accountid = n.relationid left outer join
		(
			select
				isnull(count(distinct phonecallid),0) as numphonecalls,
				relationid
			from
				tblphonecallrelation
			where
				relationtypeid = 2
			group by
				relationid
		)
		as pc on tblaccount.accountid = pc.relationid
	' + @where + ' ' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationBaseFilterSelect]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
Author: Bereket S. Data
Description: This strored Procedure Builds an aggregate Query that a child will 
inherit in a parent-child filter relation
*/

CREATE PROCEDURE [dbo].[stp_NegotiationBaseFilterSelect]
@FilterId int
AS

SET NOCOUNT ON

DECLARE @PrevLocalFilterId int
DECLARE @LocalFilterId int
DECLARE @FilterClause varchar(max)
DECLARE @AndFilter varchar(max)
DECLARE @tblFilterIdList TABLE (FilterId int)
DECLARE @tblFilters TABLE (FilterId int, FilterClause varchar(max), isRead int)

/***************   GETS ANCESTORS **********************/

SET @FilterClause = null
SET @LocalFilterId = null

SELECT @LocalFilterId = ParentFilterId,@FilterClause = FilterClause FROM tblNegotiationFilters WHERE FilterId = @FilterId
INSERT INTO @tblFilterIdList (FilterId) VALUES (@FilterId)
IF not @LocalFilterId is null
 BEGIN
	WHILE not @LocalFilterId is null 
	  BEGIN
		INSERT INTO @tblFilterIdList (FilterId) VALUES (@LocalFilterId)
		SELECT @LocalFilterId = ParentFilterId FROM tblNegotiationFilters WHERE FilterId = @LocalFilterId   
	  END
  END

/***************  BUILD FILTER BASE **********************/

SET @FilterClause = null
SET @LocalFilterId = null
SET @PrevLocalFilterId = null

INSERT INTO @tblFilters
  SELECT f.filterId, f.filterClause, '0'
  FROM  @tblFilterIdList l 
  INNER JOIN tblNegotiationFilters f ON f.filterId = l.filterId  
  ORDER BY f.FilterId

SELECT TOP 1 @FilterClause = filterClause, @LocalFilterId=filterId FROM @tblFilters WHERE isRead = 0
WHILE @LocalFilterId > 0
  BEGIN
    SET @PrevLocalFilterId = @LocalFilterId		  
    if not @AndFilter is null
      BEGIN
			SET @AndFilter = @AndFilter + ' AND ' + @FilterClause 
      END
    else
      BEGIN
			SET @AndFilter = @FilterClause 
	  END
    UPDATE @tblFilters SET isRead = 1 WHERE filterId = @LocalFilterId	   
    SELECT TOP 1 @FilterClause = filterClause, @LocalFilterId=filterId FROM @tblFilters WHERE isRead = 0
    IF @PrevLocalFilterId = @LocalFilterId   
     BEGIN  
      SET @LocalFilterId = 0	 
     END
   END

SELECT  '(' + isnull(@AndFilter, '1=1') + ')' as 'AndFilter'
GO
/****** Object:  StoredProcedure [dbo].[sp_generate_inserts]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_generate_inserts]
(
	@table_name varchar(776),  		-- The table/view for which the INSERT statements will be generated using the existing data
	@target_table varchar(776) = NULL, 	-- Use this parameter to specify a different table name into which the data will be inserted
	@include_column_list bit = 1,		-- Use this parameter to include/ommit column list in the generated INSERT statement
	@from varchar(800) = NULL, 		-- Use this parameter to filter the rows based on a filter condition (using WHERE)
	@include_timestamp bit = 0, 		-- Specify 1 for this parameter, if you want to include the TIMESTAMP/ROWVERSION column's data in the INSERT statement
	@debug_mode bit = 0,			-- If @debug_mode is set to 1, the SQL statements constructed by this procedure will be printed for later examination
	@owner varchar(64) = NULL,		-- Use this parameter if you are not the owner of the table
	@ommit_images bit = 0,			-- Use this parameter to generate INSERT statements by omitting the 'image' columns
	@ommit_identity bit = 0,		-- Use this parameter to ommit the identity columns
	@top int = NULL,			-- Use this parameter to generate INSERT statements only for the TOP n rows
	@cols_to_include varchar(8000) = NULL,	-- List of columns to be included in the INSERT statement
	@cols_to_exclude varchar(8000) = NULL,	-- List of columns to be excluded from the INSERT statement
	@disable_constraints bit = 0,		-- When 1, disables foreign key constraints and enables them after the INSERT statements
	@ommit_computed_cols bit = 0		-- When 1, computed columns will not be included in the INSERT statement
	
)
AS
BEGIN

/***********************************************************************************************************
Procedure:	sp_generate_inserts  (Build 22) 
		(Copyright © 2002 Narayana Vyas Kondreddi. All rights reserved.)
                                          
Purpose:	To generate INSERT statements from existing data. 
		These INSERTS can be executed to regenerate the data at some other location.
		This procedure is also useful to create a database setup, where in you can 
		script your data along with your table definitions.

Written by:	Narayana Vyas Kondreddi
	        http://vyaskn.tripod.com

Acknowledgements:
		Divya Kalra	-- For beta testing
		Mark Charsley	-- For reporting a problem with scripting uniqueidentifier columns with NULL values
		Artur Zeygman	-- For helping me simplify a bit of code for handling non-dbo owned tables
		Joris Laperre   -- For reporting a regression bug in handling text/ntext columns

Tested on: 	SQL Server 7.0 and SQL Server 2000

Date created:	January 17th 2001 21:52 GMT

Date modified:	May 1st 2002 19:50 GMT

Email: 		vyaskn@hotmail.com

NOTE:		This procedure may not work with tables with too many columns.
		Results can be unpredictable with huge text columns or SQL Server 2000's sql_variant data types
		Whenever possible, Use @include_column_list parameter to ommit column list in the INSERT statement, for better results
		IMPORTANT: This procedure is not tested with internation data (Extended characters or Unicode). If needed
		you might want to convert the datatypes of character variables in this procedure to their respective unicode counterparts
		like nchar and nvarchar
		

Example 1:	To generate INSERT statements for table 'titles':
		
		EXEC sp_generate_inserts 'titles'

Example 2: 	To ommit the column list in the INSERT statement: (Column list is included by default)
		IMPORTANT: If you have too many columns, you are advised to ommit column list, as shown below,
		to avoid erroneous results
		
		EXEC sp_generate_inserts 'titles', @include_column_list = 0

Example 3:	To generate INSERT statements for 'titlesCopy' table from 'titles' table:

		EXEC sp_generate_inserts 'titles', 'titlesCopy'

Example 4:	To generate INSERT statements for 'titles' table for only those titles 
		which contain the word 'Computer' in them:
		NOTE: Do not complicate the FROM or WHERE clause here. It's assumed that you are good with T-SQL if you are using this parameter

		EXEC sp_generate_inserts 'titles', @from = "from titles where title like '%Computer%'"

Example 5: 	To specify that you want to include TIMESTAMP column's data as well in the INSERT statement:
		(By default TIMESTAMP column's data is not scripted)

		EXEC sp_generate_inserts 'titles', @include_timestamp = 1

Example 6:	To print the debug information:
  
		EXEC sp_generate_inserts 'titles', @debug_mode = 1

Example 7: 	If you are not the owner of the table, use @owner parameter to specify the owner name
		To use this option, you must have SELECT permissions on that table

		EXEC sp_generate_inserts Nickstable, @owner = 'Nick'

Example 8: 	To generate INSERT statements for the rest of the columns excluding images
		When using this otion, DO NOT set @include_column_list parameter to 0.

		EXEC sp_generate_inserts imgtable, @ommit_images = 1

Example 9: 	To generate INSERT statements excluding (ommiting) IDENTITY columns:
		(By default IDENTITY columns are included in the INSERT statement)

		EXEC sp_generate_inserts mytable, @ommit_identity = 1

Example 10: 	To generate INSERT statements for the TOP 10 rows in the table:
		
		EXEC sp_generate_inserts mytable, @top = 10

Example 11: 	To generate INSERT statements with only those columns you want:
		
		EXEC sp_generate_inserts titles, @cols_to_include = "'title','title_id','au_id'"

Example 12: 	To generate INSERT statements by omitting certain columns:
		
		EXEC sp_generate_inserts titles, @cols_to_exclude = "'title','title_id','au_id'"

Example 13:	To avoid checking the foreign key constraints while loading data with INSERT statements:
		
		EXEC sp_generate_inserts titles, @disable_constraints = 1

Example 14: 	To exclude computed columns from the INSERT statement:
		EXEC sp_generate_inserts MyTable, @ommit_computed_cols = 1
***********************************************************************************************************/

SET NOCOUNT ON

--Making sure user only uses either @cols_to_include or @cols_to_exclude
IF ((@cols_to_include IS NOT NULL) AND (@cols_to_exclude IS NOT NULL))
	BEGIN
		RAISERROR('Use either @cols_to_include or @cols_to_exclude. Do not use both the parameters at once',16,1)
		RETURN -1 --Failure. Reason: Both @cols_to_include and @cols_to_exclude parameters are specified
	END

--Making sure the @cols_to_include and @cols_to_exclude parameters are receiving values in proper format
IF ((@cols_to_include IS NOT NULL) AND (PATINDEX('''%''',@cols_to_include) = 0))
	BEGIN
		RAISERROR('Invalid use of @cols_to_include property',16,1)
		PRINT 'Specify column names surrounded by single quotes and separated by commas'
		PRINT 'Eg: EXEC sp_generate_inserts titles, @cols_to_include = "''title_id'',''title''"'
		RETURN -1 --Failure. Reason: Invalid use of @cols_to_include property
	END

IF ((@cols_to_exclude IS NOT NULL) AND (PATINDEX('''%''',@cols_to_exclude) = 0))
	BEGIN
		RAISERROR('Invalid use of @cols_to_exclude property',16,1)
		PRINT 'Specify column names surrounded by single quotes and separated by commas'
		PRINT 'Eg: EXEC sp_generate_inserts titles, @cols_to_exclude = "''title_id'',''title''"'
		RETURN -1 --Failure. Reason: Invalid use of @cols_to_exclude property
	END


--Checking to see if the database name is specified along wih the table name
--Your database context should be local to the table for which you want to generate INSERT statements
--specifying the database name is not allowed
IF (PARSENAME(@table_name,3)) IS NOT NULL
	BEGIN
		RAISERROR('Do not specify the database name. Be in the required database and just specify the table name.',16,1)
		RETURN -1 --Failure. Reason: Database name is specified along with the table name, which is not allowed
	END

--Checking for the existence of 'user table' or 'view'
--This procedure is not written to work on system tables
--To script the data in system tables, just create a view on the system tables and script the view instead

IF @owner IS NULL
	BEGIN
		IF ((OBJECT_ID(@table_name,'U') IS NULL) AND (OBJECT_ID(@table_name,'V') IS NULL)) 
			BEGIN
				RAISERROR('User table or view not found.',16,1)
				PRINT 'You may see this error, if you are not the owner of this table or view. In that case use @owner parameter to specify the owner name.'
				PRINT 'Make sure you have SELECT permission on that table or view.'
				RETURN -1 --Failure. Reason: There is no user table or view with this name
			END
	END
ELSE
	BEGIN
		IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = @table_name AND (TABLE_TYPE = 'BASE TABLE' OR TABLE_TYPE = 'VIEW') AND TABLE_SCHEMA = @owner)
			BEGIN
				RAISERROR('User table or view not found.',16,1)
				PRINT 'You may see this error, if you are not the owner of this table. In that case use @owner parameter to specify the owner name.'
				PRINT 'Make sure you have SELECT permission on that table or view.'
				RETURN -1 --Failure. Reason: There is no user table or view with this name		
			END
	END

--Variable declarations
DECLARE		@Column_ID int, 		
		@Column_List varchar(8000), 
		@Column_Name varchar(128), 
		@Start_Insert varchar(786), 
		@Data_Type varchar(128), 
		@Actual_Values varchar(8000),	--This is the string that will be finally executed to generate INSERT statements
		@IDN varchar(128)		--Will contain the IDENTITY column's name in the table

--Variable Initialization
SET @IDN = ''
SET @Column_ID = 0
SET @Column_Name = ''
SET @Column_List = ''
SET @Actual_Values = ''

IF @owner IS NULL 
	BEGIN
		SET @Start_Insert = 'INSERT INTO ' + '[' + RTRIM(COALESCE(@target_table,@table_name)) + ']' 
	END
ELSE
	BEGIN
		SET @Start_Insert = 'INSERT ' + '[' + LTRIM(RTRIM(@owner)) + '].' + '[' + RTRIM(COALESCE(@target_table,@table_name)) + ']' 		
	END


--To get the first column's ID

SELECT	@Column_ID = MIN(ORDINAL_POSITION) 	
FROM	INFORMATION_SCHEMA.COLUMNS (NOLOCK) 
WHERE 	TABLE_NAME = @table_name AND
(@owner IS NULL OR TABLE_SCHEMA = @owner)



--Loop through all the columns of the table, to get the column names and their data types
WHILE @Column_ID IS NOT NULL
	BEGIN
		SELECT 	@Column_Name = QUOTENAME(COLUMN_NAME), 
		@Data_Type = DATA_TYPE 
		FROM 	INFORMATION_SCHEMA.COLUMNS (NOLOCK) 
		WHERE 	ORDINAL_POSITION = @Column_ID AND 
		TABLE_NAME = @table_name AND
		(@owner IS NULL OR TABLE_SCHEMA = @owner)



		IF @cols_to_include IS NOT NULL --Selecting only user specified columns
		BEGIN
			IF CHARINDEX( '''' + SUBSTRING(@Column_Name,2,LEN(@Column_Name)-2) + '''',@cols_to_include) = 0 
			BEGIN
				GOTO SKIP_LOOP
			END
		END

		IF @cols_to_exclude IS NOT NULL --Selecting only user specified columns
		BEGIN
			IF CHARINDEX( '''' + SUBSTRING(@Column_Name,2,LEN(@Column_Name)-2) + '''',@cols_to_exclude) <> 0 
			BEGIN
				GOTO SKIP_LOOP
			END
		END

		--Making sure to output SET IDENTITY_INSERT ON/OFF in case the table has an IDENTITY column
		IF (SELECT COLUMNPROPERTY( OBJECT_ID(QUOTENAME(COALESCE(@owner,USER_NAME())) + '.' + @table_name),SUBSTRING(@Column_Name,2,LEN(@Column_Name) - 2),'IsIdentity')) = 1 
		BEGIN
			IF @ommit_identity = 0 --Determing whether to include or exclude the IDENTITY column
				SET @IDN = @Column_Name
			ELSE
				GOTO SKIP_LOOP			
		END
		
		--Making sure whether to output computed columns or not
		IF @ommit_computed_cols = 1
		BEGIN
			IF (SELECT COLUMNPROPERTY( OBJECT_ID(QUOTENAME(COALESCE(@owner,USER_NAME())) + '.' + @table_name),SUBSTRING(@Column_Name,2,LEN(@Column_Name) - 2),'IsComputed')) = 1 
			BEGIN
				GOTO SKIP_LOOP					
			END
		END
		
		--Tables with columns of IMAGE data type are not supported for obvious reasons
		IF(@Data_Type in ('image'))
			BEGIN
				IF (@ommit_images = 0)
					BEGIN
						RAISERROR('Tables with image columns are not supported.',16,1)
						PRINT 'Use @ommit_images = 1 parameter to generate INSERTs for the rest of the columns.'
						PRINT 'DO NOT ommit Column List in the INSERT statements. If you ommit column list using @include_column_list=0, the generated INSERTs will fail.'
						RETURN -1 --Failure. Reason: There is a column with image data type
					END
				ELSE
					BEGIN
					GOTO SKIP_LOOP
					END
			END

		--Determining the data type of the column and depending on the data type, the VALUES part of
		--the INSERT statement is generated. Care is taken to handle columns with NULL values. Also
		--making sure, not to lose any data from flot, real, money, smallmomey, datetime columns
		SET @Actual_Values = @Actual_Values  +
		CASE 
			WHEN @Data_Type IN ('char','varchar','nchar','nvarchar') 
				THEN 
					'COALESCE('''''''' + REPLACE(RTRIM(' + @Column_Name + '),'''''''','''''''''''')+'''''''',''NULL'')'
			WHEN @Data_Type IN ('datetime','smalldatetime') 
				THEN 
					'COALESCE('''''''' + RTRIM(CONVERT(char,' + @Column_Name + ',109))+'''''''',''NULL'')'
			WHEN @Data_Type IN ('uniqueidentifier') 
				THEN  
					'COALESCE('''''''' + REPLACE(CONVERT(char(255),RTRIM(' + @Column_Name + ')),'''''''','''''''''''')+'''''''',''NULL'')'
			WHEN @Data_Type IN ('text','ntext') 
				THEN  
					'COALESCE('''''''' + REPLACE(CONVERT(char(8000),' + @Column_Name + '),'''''''','''''''''''')+'''''''',''NULL'')'					
			WHEN @Data_Type IN ('binary','varbinary') 
				THEN  
					'COALESCE(RTRIM(CONVERT(char,' + 'CONVERT(int,' + @Column_Name + '))),''NULL'')'  
			WHEN @Data_Type IN ('timestamp','rowversion') 
				THEN  
					CASE 
						WHEN @include_timestamp = 0 
							THEN 
								'''DEFAULT''' 
							ELSE 
								'COALESCE(RTRIM(CONVERT(char,' + 'CONVERT(int,' + @Column_Name + '))),''NULL'')'  
					END
			WHEN @Data_Type IN ('float','real','money','smallmoney')
				THEN
					'COALESCE(LTRIM(RTRIM(' + 'CONVERT(char, ' +  @Column_Name  + ',2)' + ')),''NULL'')' 
			ELSE 
				'COALESCE(LTRIM(RTRIM(' + 'CONVERT(char, ' +  @Column_Name  + ')' + ')),''NULL'')' 
		END   + '+' +  ''',''' + ' + '
		
		--Generating the column list for the INSERT statement
		SET @Column_List = @Column_List +  @Column_Name + ','	

		SKIP_LOOP: --The label used in GOTO

		SELECT 	@Column_ID = MIN(ORDINAL_POSITION) 
		FROM 	INFORMATION_SCHEMA.COLUMNS (NOLOCK) 
		WHERE 	TABLE_NAME = @table_name AND 
		ORDINAL_POSITION > @Column_ID AND
		(@owner IS NULL OR TABLE_SCHEMA = @owner)


	--Loop ends here!
	END

--To get rid of the extra characters that got concatenated during the last run through the loop
SET @Column_List = LEFT(@Column_List,len(@Column_List) - 1)
SET @Actual_Values = LEFT(@Actual_Values,len(@Actual_Values) - 6)

IF LTRIM(@Column_List) = '' 
	BEGIN
		RAISERROR('No columns to select. There should at least be one column to generate the output',16,1)
		RETURN -1 --Failure. Reason: Looks like all the columns are ommitted using the @cols_to_exclude parameter
	END

--Forming the final string that will be executed, to output the INSERT statements
IF (@include_column_list <> 0)
	BEGIN
		SET @Actual_Values = 
			'SELECT ' +  
			CASE WHEN @top IS NULL OR @top < 0 THEN '' ELSE ' TOP ' + LTRIM(STR(@top)) + ' ' END + 
			'''' + RTRIM(@Start_Insert) + 
			' ''+' + '''(' + RTRIM(@Column_List) +  '''+' + ''')''' + 
			' +''VALUES(''+ ' +  @Actual_Values  + '+'')''' + ' ' + 
			COALESCE(@from,' FROM ' + CASE WHEN @owner IS NULL THEN '' ELSE '[' + LTRIM(RTRIM(@owner)) + '].' END + '[' + rtrim(@table_name) + ']' + '(NOLOCK)')
	END
ELSE IF (@include_column_list = 0)
	BEGIN
		SET @Actual_Values = 
			'SELECT ' + 
			CASE WHEN @top IS NULL OR @top < 0 THEN '' ELSE ' TOP ' + LTRIM(STR(@top)) + ' ' END + 
			'''' + RTRIM(@Start_Insert) + 
			' '' +''VALUES(''+ ' +  @Actual_Values + '+'')''' + ' ' + 
			COALESCE(@from,' FROM ' + CASE WHEN @owner IS NULL THEN '' ELSE '[' + LTRIM(RTRIM(@owner)) + '].' END + '[' + rtrim(@table_name) + ']' + '(NOLOCK)')
	END	

--Determining whether to ouput any debug information
IF @debug_mode =1
	BEGIN
		PRINT '/*****START OF DEBUG INFORMATION*****'
		PRINT 'Beginning of the INSERT statement:'
		PRINT @Start_Insert
		PRINT ''
		PRINT 'The column list:'
		PRINT @Column_List
		PRINT ''
		PRINT 'The SELECT statement executed to generate the INSERTs'
		PRINT @Actual_Values
		PRINT ''
		PRINT '*****END OF DEBUG INFORMATION*****/'
		PRINT ''
	END
		
PRINT '--INSERTs generated by ''sp_generate_inserts'' stored procedure written by Vyas'
PRINT '--Build number: 22'
PRINT '--Problems/Suggestions? Contact Vyas @ vyaskn@hotmail.com'
PRINT '--http://vyaskn.tripod.com'
PRINT ''
PRINT 'SET NOCOUNT ON'
PRINT ''


--Determining whether to print IDENTITY_INSERT or not
IF (@IDN <> '')
	BEGIN
		PRINT 'SET IDENTITY_INSERT ' + QUOTENAME(COALESCE(@owner,USER_NAME())) + '.' + QUOTENAME(@table_name) + ' ON'
		PRINT 'GO'
		PRINT ''
	END


IF @disable_constraints = 1 AND (OBJECT_ID(QUOTENAME(COALESCE(@owner,USER_NAME())) + '.' + @table_name, 'U') IS NOT NULL)
	BEGIN
		IF @owner IS NULL
			BEGIN
				SELECT 	'ALTER TABLE ' + QUOTENAME(COALESCE(@target_table, @table_name)) + ' NOCHECK CONSTRAINT ALL' AS '--Code to disable constraints temporarily'
			END
		ELSE
			BEGIN
				SELECT 	'ALTER TABLE ' + QUOTENAME(@owner) + '.' + QUOTENAME(COALESCE(@target_table, @table_name)) + ' NOCHECK CONSTRAINT ALL' AS '--Code to disable constraints temporarily'
			END

		PRINT 'GO'
	END

PRINT ''
PRINT 'PRINT ''Inserting values into ' + '[' + RTRIM(COALESCE(@target_table,@table_name)) + ']' + ''''


--All the hard work pays off here!!! You'll get your INSERT statements, when the next line executes!
EXEC (@Actual_Values)

PRINT 'PRINT ''Done'''
PRINT ''


IF @disable_constraints = 1 AND (OBJECT_ID(QUOTENAME(COALESCE(@owner,USER_NAME())) + '.' + @table_name, 'U') IS NOT NULL)
	BEGIN
		IF @owner IS NULL
			BEGIN
				SELECT 	'ALTER TABLE ' + QUOTENAME(COALESCE(@target_table, @table_name)) + ' CHECK CONSTRAINT ALL'  AS '--Code to enable the previously disabled constraints'
			END
		ELSE
			BEGIN
				SELECT 	'ALTER TABLE ' + QUOTENAME(@owner) + '.' + QUOTENAME(COALESCE(@target_table, @table_name)) + ' CHECK CONSTRAINT ALL' AS '--Code to enable the previously disabled constraints'
			END

		PRINT 'GO'
	END

PRINT ''
IF (@IDN <> '')
	BEGIN
		PRINT 'SET IDENTITY_INSERT ' + QUOTENAME(COALESCE(@owner,USER_NAME())) + '.' + QUOTENAME(@table_name) + ' OFF'
		PRINT 'GO'
	END

PRINT 'SET NOCOUNT OFF'


SET NOCOUNT OFF
RETURN 0 --Success. We are done!
END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_leaddocuments]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_enrollment_leaddocuments]
(
	@leadApplicantID int,
	@expirationDays int = 30
)
as
begin
	-- update expired docs
	-- could hit assuresign web service instead to check on and expire docs
	update tblleaddocuments
	set currentstatus = 'Expired'
	where leadapplicantid = @leadApplicantID
	and completed is null
	and submitted < dateadd(d,-@expirationDays,getdate())
	and currentstatus <> 'Expired'

	-- get doc info
	select documentid, submitted, u.firstname + ' ' + u.lastname [submittedby], signatoryemail, currentstatus, completed
	from tblleaddocuments d
	left join tbluser u on u.userid = d.submittedby
	where d.leadapplicantid = @leadApplicantID
		and d.documenttypeid = 6 -- LSA
	order by d.submitted desc

end
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationsGetSettlementsStatusWaitingOnSIF]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NegotiationsGetSettlementsStatusWaitingOnSIF]
(
	@UserID int
)
as
BEGIN
	declare @vtblRoadMaps table
	(
	roadmapID int,
	settlementID int
	)
	INSERT INTO
		@vtblRoadMaps
	SELECT
		max(RoadmapID) as RoadmapID,
		SettlementID
	FROM
		tblNegotiationRoadmap
	GROUP BY
		SettlementID
		
	SELECT     s.SettlementID, c.Name AS [Creditor Name], p.FirstName + ' ' + p.LastName AS [Client Name], s.CreditorAccountBalance, s.SettlementAmount, 
						  s.SettlementSavings, s.SettlementDueDate,substring(ci.accountnumber,len(ci.accountnumber)-4,4) as accountNumber
	FROM         @vtblRoadMaps AS nr2 INNER JOIN
						  tblNegotiationRoadmap AS nr ON nr.RoadmapID = nr2.RoadmapID INNER JOIN
						  tblNegotiationSettlementStatus AS nss ON nss.SettlementStatusID = nr.SettlementStatusID INNER JOIN
						  tblSettlements AS s ON s.SettlementID = nr.SettlementID and s.active = 1 INNER JOIN
						  tblPerson AS p ON p.ClientID = s.ClientID INNER JOIN
						  tblAccount AS a ON a.AccountID = s.CreditorAccountID INNER JOIN
						  tblCreditorInstance AS ci ON ci.CreditorInstanceID = a.CurrentCreditorInstanceID INNER JOIN
						  tblCreditor AS c ON c.CreditorID = ci.CreditorID
	WHERE     (nr.SettlementStatusID IN (5)) AND (p.Relationship = 'Prime') AND (s.CreatedBy = @UserID)
	ORDER BY s.SettlementDueDate ASC
END


GRANT EXEC ON stp_NegotiationsGetSettlementsStatusWaitingOnSIF TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetFeesPaidWithRegister]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetFeesPaidWithRegister]
	(
		@registerid int
	)

as


-- find all feeregisters that were paid with this register (which is a credit)
select
	tblregisterpayment.registerpaymentid,
	tblregisterpayment.paymentdate,
	tblregisterpayment.amount as registerpaymentamount,
	tblregister.*,
	tblentrytype.name as entrytypename
from
	tblregisterpayment inner join
	tblregister on tblregisterpayment.feeregisterid = tblregister.registerid inner join
	tblregisterpaymentdeposit on tblregisterpayment.registerpaymentid = tblregisterpaymentdeposit.registerpaymentid inner join
	tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid
where
	tblregisterpaymentdeposit.depositregisterid = @registerid
order by
	tblregisterpayment.paymentdate
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationPreviewMaster]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Retrieves  top 10 accounts for the purpose of giving a user a birds-eye-view of accounts affected.
*/


CREATE PROCEDURE [dbo].[stp_NegotiationPreviewMaster]
@filterClause varchar(max),
@GridFilterId int 

AS
SET NOCOUNT ON

DECLARE @LocalfilterClause varchar(max)
DECLARE @FilterId int
DECLARE @OrFilter as varchar(max)
DECLARE @PreviousFilterId int
DECLARE @tblOrFilter TABLE (FilterId int,filterClause varchar(max), isRead int)
CREATE TABLE #tblAssignedList(AccountId int)

if @GridFilterId = 0
  BEGIN
   SET @GridFilterId = null
  END

SET @FilterId = null
SET @LocalfilterClause = null
SET @OrFilter = null

if not @GridFilterId is null
  BEGIN
   EXEC 
  ('
   SELECT DISTINCT TOP 10 ClientId, SSN, LTrim(ApplicantFullName) as ApplicantFullName ,ApplicantCity,ApplicantState,ApplicantZipCode,FundsAvailable,LeastDebtAmount
   FROM dbo.vwNegotiationDistributionSource
   WHERE 1=1 AND  ( ' + @filterClause + ' ) ORDER BY LTrim(ApplicantFullName) asc' 
  )  
  END
else
  BEGIN
		  INSERT INTO @tblOrFilter
		   SELECT FilterId, filterClause, '0' FROM tblNegotiationFilters Where FilterType = 'root'
		   
		SELECT TOP 1 @LocalfilterClause = filterClause, @filterId = filterId FROM @tblOrFilter WHERE isRead = 0

		WHILE @filterId > 0
		 BEGIN
			SET @PreviousFilterId = @filterId    
			If not @OrFilter is null       
			   BEGIN
				  SET @OrFilter = @OrFilter + ' OR ' + '(' + @LocalfilterClause + ')'
			   END
			else
			   BEGIN
				  SET @OrFilter =  '( ' + @LocalfilterClause + ')'
			   END
			UPDATE @tblOrFilter SET isRead = 1 WHERE FilterId = @FilterId
			SELECT TOP 1 @LocalfilterClause = filterClause, @filterId = FilterId FROM @tblOrFilter WHERE isRead = 0
			if @PreviousFilterId = @filterId
			 BEGIN
			   SET @filterId = 0
			 END
		 END   
	   if not @OrFilter is null
	   BEGIN
		EXEC 
		('
		  INSERT INTO #tblAssignedList       
		  SELECT AccountId 
		  FROM dbo.vwNegotiationDistributionSource
		  WHERE 1=1 AND  ( ' + @OrFilter + ' )'
		 )	
		END

	   EXEC 
	  ('
	   SELECT DISTINCT TOP 10 ClientId, SSN, LTrim(ApplicantFullName) as ApplicantFullName ,ApplicantCity,ApplicantState,ApplicantZipCode,FundsAvailable,LeastDebtAmount
	   FROM dbo.vwNegotiationDistributionSource
	   WHERE 1=1 AND  ( ' + @filterClause + ' ) AND
	   AccountId NOT IN (SELECT AccountId FROM #tblAssignedList) ORDER BY LTrim(ApplicantFullName) asc'	   
	  )    
 END

DROP TABLE #tblAssignedList
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getFirmPaidLost]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_reports_getFirmPaidLost]
	(
		@year int,
		@month int
	)
AS
BEGIN

select 
	[LawFirm] 
	, [PaidUnits] =  sum(case when c.settlementfeepercentage = 0 and paid is not null then 1 else 0 end )
	, [PaidFeesLost] = sum(case when c.settlementfeepercentage = 0 and paid is not null then s.settlementsavings*.33 else 0 end )
	, [TotalUnits] = sum(case when c.settlementfeepercentage = 0 then 1 else 0 end )
	, [TotalPotentialLost] = sum(case when c.settlementfeepercentage = 0 then s.settlementsavings*.33 else 0 end )
FROM tblSettlementTrackerImports sti
inner join tblsettlements s on s.settlementid = sti.settlementid
inner join tblclient c on c.clientid = s.clientid
where 
	year(sti.[date]) = @year 
	and month(sti.[date]) = @month
group by LawFirm
END


GRANT EXEC ON stp_settlementimport_reports_getFirmPaidLost TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPendingLeadDocuments]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetPendingLeadDocuments]
(
	@ExpirationDays int = 30,
	@LeadApplicantID int = null
)
as
begin
	-- Returns EchoSign docs waiting for signature. Used by EchoSignHelper console app to retrieve signed documents.

	select DocumentID
	from tblleaddocuments
	where completed is null
	and submitted > dateadd(d,-@ExpirationDays,getdate())
	and currentstatus = 'Waiting on signatures'
	and authtoken is null -- EchoSign docs dont have an AuthToken
	and documenttypeid = 6 -- LSA
	and (@LeadApplicantID is null or @LeadApplicantID = leadapplicantid)

end
GO
/****** Object:  StoredProcedure [dbo].[stp_CleanupCreditor_getSameCreditors]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[stp_CleanupCreditor_getSameCreditors]
@Name varchar(250),
@Street varchar(50),
@City varchar(50),
@StateId int,
@ZipCode varchar(50)
AS
Select * 
from tblcreditor
where
[Name] = @Name  and
isnull([Street],'') = @Street and
isnull([City],'') = @City and 
isnull(StateId,0) = @StateId and 
substring(isnull(ZipCode,''),0,6) = @ZipCode
order by creditorgroupid desc, validated desc, creditorid desc
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTasksForClient]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetTasksForClient]
	(
		@returntop varchar (50) = '100 percent',
		@clientid int,
		@shortdescription int = 30,
		@criteria varchar (8000) = '1=1'
	)

as


exec
(
	'select top ' + @returntop + '
		tblclienttask.clientid,
		tblperson.firstname + '' '' + tblperson.lastname as clientname,
		tbltasktype.name as tasktypename,
		tbltasktypecategory.tasktypecategoryid,
		tbltasktypecategory.name as tasktypecategoryname,
		tbltaskresolution.name as taskresolutionname,
		tbltask.*,
		substring(tbltask.description, 0, ' + @shortdescription + ') + ''...'' as shortdescription,
		tblassignedto.firstname + '' '' + tblassignedto.lastname as assignedtoname,
		tblresolvedby.firstname + '' '' + tblresolvedby.lastname as resolvedbyname,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname
	from
		tbltask left outer join
		tblclienttask on tbltask.taskid = tblclienttask.taskid left outer join
		tblclient on tblclienttask.clientid = tblclient.clientid left outer join
		tblperson on tblclient.primarypersonid = tblperson.personid left outer join
		tbltasktype on tbltask.tasktypeid = tbltasktype.tasktypeid left outer join
		tbltasktypecategory on tbltasktype.tasktypecategoryid = tbltasktypecategory.tasktypecategoryid left outer join
		tbltaskresolution on tbltask.taskresolutionid = tbltaskresolution.taskresolutionid left outer join
		tbluser as tblassignedto on tbltask.assignedto = tblassignedto.userid left outer join
		tbluser as tblresolvedby on tbltask.resolvedby = tblresolvedby.userid left outer join
		tbluser as tblcreatedby on tbltask.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on tbltask.lastmodifiedby = tbllastmodifiedby.userid
	where
		(tblclienttask.clientid = ' + @clientid + ') and (' + @criteria + ')
	order by
		due'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterSelect]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data>
	Description: Retrieves existing Negotiation Criteria Filters
*/

CREATE PROCEDURE [dbo].[stp_NegotiationFilterSelect]
@FilterId int = null,
@FilterType varchar(10)= null
AS

if @FilterId = 0
BEGIN
SET @FilterId = NULL
END

if @FilterType = ''
BEGIN
SET @FilterType = NULL
END

BEGIN
 SELECT DISTINCT f.FilterId,f.Description, f.FilterClause, f.FilterText, f.FilterType, isnull(f1.ParentFilterId,f.FilterId) as ParentFilterId
 FROM tblNegotiationFilters f
 LEFT JOIN tblNegotiationFilters f1 ON f.FilterId = isnull(f1.ParentFilterId, f1.FilterId)
 WHERE f.FilterId = isnull(@FilterId,f.FilterId)  
 AND f.FilterType = isnull(@FilterType, f.FilterType) 
 ORDER BY f.[Description]
END
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyUpdateDetail]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[stp_AgencyUpdateDetail]
(
	@agentId int,
	@Location varchar(60),
	@ContactName varchar(50),
	@Address varchar(50),
	@AptSuite varchar(50),
	@City varchar(50),
	@State varchar(2),
	@Zip varchar(11),
	@HPhone varchar(50),
	@OPhone varchar(50),
	@CPhone varchar(50),
	@APhone varchar(50),
	@Fax varchar(50),
	@Pager varchar(50),
	@EMail varchar(50),
	@SSNTIN varchar(15),
	@LoginId varchar(50),
	@IsActive bit,
	@CheckNo int,
	@IsAttorney bit,
	@EnrollPer float(8),
	@MaintPer float(8),
	@SettPer float(8),
	@DMSEnrollPer float(8),
	@DMSMaintPer float(8),
	@DMSSettPer float(8)
)

AS

SET NOCOUNT ON

UPDATE SalesAgentHdr SET
	Location=@Location,
	ContactName=@ContactName,
	Address=@Address,
	AptSuite=@AptSuite,
	City=@City,
	State=@State,
	Zip=@Zip,
	HPhone=@HPhone,
	OPhone=@OPhone,
	CPhone=@CPhone,
	APhone=@APhone,
	Fax=@Fax,
	Pager=@Pager,
	EMail=@EMail,
	SSNTIN=@SSNTIN,
	LoginId=@LoginId,
	Suspend = CASE @IsActive
		WHEN 0 THEN 'Y'
		ELSE 'N'	
		END,
	CheckNo=@CheckNo,
	IsAttorney=@IsAttorney,
	EnrollPer=@EnrollPer,
	MaintPer=@MaintPer,
	SettPer=@SettPer,
	DMSEnrollPer=@DMSEnrollPer,
	DMSMaintPer=@DMSMaintPer,
	DMSSettPer=@DMSSettPer
WHERE
	SalesAgentHdr_Id=@agentId
GO
/****** Object:  StoredProcedure [dbo].[stp_NewCommScenExists]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NewCommScenExists]
(
	@ClientID int,
	@NewCompanyID int
)
as
begin
-- Used when moving clients to a new company. Checks if the scenario the client uses has a commission
-- structure for their new company.

declare @clientenrolled datetime,
		@retention int,
		@agencyid int,
		@commscenid int

select
	@clientenrolled = created,
	@agencyid = agencyid
from
	tblclient
where
	clientid = @clientid	

	
select @retention = datediff(m,@clientenrolled,getdate())

if (day(@clientenrolled) > day(getdate())) begin
	set @retention = @retention - 1
end	


select
	@commscenid = commscenid
from
	tblcommscen
where
	agencyid = @agencyid and
	startdate <= @clientenrolled and
	(
		enddate is null or
		enddate >= cast(convert(char(10), @clientenrolled, 101) as datetime)
	) and
	@retention between retentionfrom and retentionto


-- exception: allow old DRF(840) clients to use default scenario
if (@agencyid = 840 and @clientenrolled < '6/1/06') begin
	return 1
end


if exists (select 1 from tblcommstruct where commscenid = @commscenid and companyid = @NewCompanyID)
	return 1
else
	return 0


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPaymentCommissionDiff]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GetPaymentCommissionDiff] 
@StartDate DateTime = NULL,
@EndDate DateTime = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
select 
	r.ClientId AS [Client Id],
	c.AgencyId AS [Agency Id],
	p.RegisterPaymentId AS [Payment Id],
	p.PaymentDate AS [Payment Date],
	r.RegisterId AS [Fee Id],
	r.EntryTypeId AS [Fee Type],
	round(isnull(p.amount, 0),2) AS [Amount Paid], 
	round(coalesce(sum(cp.amount), 0),2) AS [Commission Paid]
from
	tblRegisterPayment p
Inner join tblRegister r on (r.RegisterId = p.FeeRegisterId)
Inner join tblClient c on (c.ClientId = r.ClientId)
Left join tblCommpay cp on (cp.RegisterPaymentId = p.RegisterPaymentId)
where
	p.voided = 0 and
	p.bounced = 0 and
	p.PaymentDate Between IsNull(@StartDate, Cast('1900-01-01' AS DATETIME)) and IsNull(@EndDate, GetDate())
Group by r.ClientId, c.AgencyId, p.RegisterPaymentId, p.PaymentDate, r.RegisterId, r.EntryTypeId, isnull(p.amount, 0)
Having round(isnull(p.amount, 0),2) <> round(coalesce(sum(cp.amount), 0),2)
Order By r.Clientid, p.RegisterPaymentId
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Audit_CreateTable]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_Audit_CreateTable]
(
	@tablename varchar(50), 
	@pkcolumn varchar(50) = null
)

AS

if @pkcolumn is null
	set @pkcolumn = substring(@tablename,4,len(@tablename)) + 'ID'

print 'Primary key column is ' + @pkcolumn

declare @audittableid int

set @audittableid=(select audittableid from tblaudittable where [name]=@tablename)
if @audittableid is null begin
	insert into tblaudittable([name],pkcolumn) values (@tablename,@pkcolumn)
	set @audittableid=scope_identity()
end

declare @column varchar(50)
declare @isbigvalue bit

declare c cursor for
	select 
		column_name,
		(case 
			when data_type in ('text', 'ntext', 'image') then 1
			else 0
		end) as IsBigValue
	from 
		information_schema.columns
	where 
		table_name=@tablename
		and not column_name like ('created%')
		and not column_name like ('lastmodified%')
		and not column_name = 'UC'
		and not column_name = 'DC'
		and not column_name = @pkcolumn
open c
fetch next from c into @column, @isbigvalue
while @@fetch_status=0 begin
	if not exists (select auditcolumnid from tblauditcolumn where audittableid=@audittableid and [name]=@column) begin
		insert into tblauditcolumn(audittableid,[name],isbigvalue)
		values (@audittableid,@column,@isbigvalue)	
	end

	fetch next from c into @column, @isbigvalue
end
close c
deallocate c
GO
/****** Object:  StoredProcedure [dbo].[stp_QueryGetDemographics]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_QueryGetDemographics]
	(
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as

if not @orderby is null and not @orderby=''
	set @orderby= ' order by '+@orderby 

exec('
select 

	tblclient.clientid ,
	tblperson.firstname,
	tblperson.lastname,
	(select TOP 1 firstname FROM tblperson WHERE clientid = tblclient.clientid AND relationship <> ''Prime'') + '' '' +  (select TOP 1 lastname FROM tblperson WHERE clientid = tblclient.clientid AND relationship <> ''Prime'') [CoApp],
	tblperson.city,
	tblstate.name as state,
	tblstate.stateid,
	tbllanguage.name as language,
	tbllanguage.languageid,
	tblclientstatus.name as status,
	tblperson.ssn,
	tblclient.depositmethod,
	tblclient.depositamount,
	tblperson.gender,
	tblclient.created,
	tblperson.zipcode,
	tblclient.accountnumber,
	tblperson.street,
	tblperson.emailaddress,
	c.name [company],
	(select top 1 ''('' + areacode + '') '' + left(number,3) + ''-'' + right(number,4) from tblphone p join tblpersonphone pp on pp.phoneid = p.phoneid where p.phonetypeid = 27 and pp.personid = tblperson.personid) [homephone],
	(select top 1 ''('' + areacode + '') '' + left(number,3) + ''-'' + right(number,4) from tblphone p join tblpersonphone pp on pp.phoneid = p.phoneid where p.phonetypeid = 21 and pp.personid = tblperson.personid) [workphone],
	(select top 1 ''('' + areacode + '') '' + left(number,3) + ''-'' + right(number,4) from tblphone p join tblpersonphone pp on pp.phoneid = p.phoneid where p.phonetypeid = 31 and pp.personid = tblperson.personid) [cellphone]
from
	tblclient inner join	
	tblperson on tblperson.personid=tblclient.primarypersonid inner join
	tblstate on tblperson.stateid=tblstate.stateid inner join
	tblclientstatus on tblclient.currentclientstatusid=tblclientstatus.clientstatusid inner join
	tbllanguage on tblperson.languageid=tbllanguage.languageid inner join
	tblcompany c on c.companyid = tblclient.companyid

 where 1=1 ' +  @where + @orderby 
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationDashboardGetByID]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_NegotiationDashboardGetByID]
(
	@filterid int,
	@query nvarchar(MAX) = null,
	@orderby nvarchar(500) = null,
	@groupby nvarchar(500) = null
)

AS

if @query is null
begin
	set @query = '*'
end

if @groupby is null
begin
	set @groupby = ''
end
else
begin
	set @groupby = 'GROUP BY ' + @groupby
end

if @orderby is null
begin
	set @orderby = ''
end
else
begin
	set @orderby = 'ORDER BY ' + @orderby
end

declare @filterclause varchar(MAX)

set @filterclause = null


if @filterid is not null
begin
	SELECT
		@filterclause = AggregateClause
	FROM
		tblNegotiationFilters
	WHERE
		FilterID = @filterid
end

if @filterclause is null or len(@filterclause) = 0
begin
	set @filterclause = '1 = 0'
end

EXEC 
('
	SELECT
		' + @query + '
	FROM
		vwNegotiationDistributionSource
	WHERE
		' + @filterclause + '
	' + @groupby + '
	' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_CopyTableData]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[stp_CopyTableData]
(
	@database1 varchar(50),	
	@table1 varchar(50),
	@database2 varchar(50),
	@table2 varchar(50)
)

AS

--Get the list of columns to copy
create table #tmpColumns1(c varchar(50))
create table #tmpColumns2(c varchar(50))

exec
(' 
use ' + @database2 + '
insert into #tmpColumns1(c) select column_name from information_schema.columns where table_name=''' + @table1 + '''
')

exec
(' 
use ' + @database1 + '
insert into #tmpColumns2(c) select column_name from information_schema.columns where table_name=''' + @table2 + '''
')

declare @colList varchar(8000)
set @colList=''
declare @col varchar(50)
declare c cursor for select t1.c from #tmpcolumns1 t1 inner join #tmpcolumns2 t2 on t1.c=t2.c
open c
fetch next from c into @col
while @@fetch_status=0 begin
	if len(@colList)>0 set @colList = @colList + ','
	set @colList=@colList + '[' + @col + ']'
	fetch next from c into @col
end
close c
deallocate c

drop table #tmpcolumns1
drop table #tmpcolumns2

exec('truncate table ' + @database2 + '.dbo.' + @table2)

exec('
set identity_insert ' + @database2 + '.dbo.' + @table2 + ' on
insert into ' + @database2 + '.dbo.' + @table2 + '(' + @collist + ') select ' + @collist + ' from ' + @database1 + '.dbo.' + @table1 + '
set identity_insert ' + @database2 + '.dbo.' + @table2 + ' off
')
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_DocumentsToPrintByDate]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_LetterTemplates_DocumentsToPrintByDate]
(
	@PrintDate datetime = null
)
as
BEGIN
	if @PrintDate is null
		BEGIN
			set @PrintDate = getdate()
		END


	select c.accountnumber,lt.TemplateDisplayName 
	,'\\' + c.StorageServer + '\' + c.StorageRoot + '\' + c.AccountNumber 
	+ case when dr.subfolder is null or dr.subfolder = 'ClientDocs' then '\ClientDocs\' else '\creditordocs\' + dr.SubFolder  end 
	+ c.AccountNumber + '_' + dr.DocTypeID + '_' + dr.DocID + '_' + dr.DateString + '.pdf' AS docPath 
	from tblletters_templateinfo lt
	inner join tbldocrelation dr on dr.doctypeid = lt.templatedoctypeid
	inner join tblclient c on c.clientid = dr.clientid
	where convert(varchar(10),dr.relateddate,101) = convert(varchar(10),@PrintDate,101) 
	and deleteddate is null
	and relationtype <> 'note'
	order by c.clientid,dr.relateddate desc,lt.TemplateDisplayName
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCommPaysForPayment]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetCommPaysForPayment]
	(
		@registerpaymentid int
	)

as


select
	tblcommpay.*,
	tblcommstruct.commscenid,
	tblcommstruct.commrecid,
	tblcommstruct.parentcommrecid,
	tblcommstruct.[order] as commstructorder,
	tblcommrec.commrectypeid,
	tblcommrec.display,
	tblcommrectype.[name] as commrectypename
from
	tblcommpay inner join
	tblcommstruct on tblcommpay.commstructid = tblcommstruct.commstructid inner join
	tblcommrec on tblcommstruct.commrecid = tblcommrec.commrecid inner join
	tblcommrectype on tblcommrec.commrectypeid = tblcommrectype.commrectypeid
where
	tblcommpay.registerpaymentid = @registerpaymentid
GO
/****** Object:  StoredProcedure [dbo].[stp_AuditBankAccountDelete]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_AuditBankAccountDelete]
@BankAccountId int,
@UserId int
AS
Begin
declare @colid int

Select @colid = ac.AuditColumnId from tblAuditColumn ac
where ac.[name] = 'bankaccountid'
and ac.audittableid in 
(Select at.audittableid from tblaudittable at where at.name = 'tblclientbankaccount')

if @colid is not null
begin
	insert into tblAudit(AuditColumnId, PK,[Value], DC, UC, Deleted)
	values (@colid, @BankAccountId, null, getdate(), @UserId, 1)
end

End
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationDashBoardSummary]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Retrieves dashboard items for master criteria filters.   
			     All master criteria filter have theri filter type set to 'root'. 
			     NOTE: All master criteria filters created through criteria builder have their ParentFilterId set to null.

*/

CREATE PROCEDURE [dbo].[stp_NegotiationDashBoardSummary]
@FilterId int,
@GridFilterClause varchar(max) = null

AS
SET NOCOUNT ON

if @FilterId = 0
BEGIN
	SET @FilterId = null
END

DECLARE @FilterClause varchar(max)
DECLARE @LocalFilterId int
DECLARE @PreviousFilterId int
DECLARE @AggregateClause varchar(max)

DECLARE @tblAggregate TABLE (FilterClause varchar(max))
DECLARE @tblDashBoard TABLE (FilterId int, ClientCount int,
						   AccountCount int, 
						   StateCount int,
						   ZipCodeCount int,
						   CreditorCount int,
				           StatusCount int,
						   TotalSDAAmount money)

DECLARE @tblFilterList TABLE(FilterId int, 
                               filterClause varchar(max), 
                               isRead int)

SET @FilterClause = null
SET @LocalFilterId = null
SET @PreviousFilterId = null
SET @FilterClause = null


SET  @GridFilterClause = isnull(@GridFilterClause,'1=1')

if not @GridFilterClause = '1=1' And @FilterId is Null
  BEGIN
			 INSERT INTO @tblDashBoard
				EXEC 
				  ('
				   SELECT 0 as MasterListId,Count(Distinct ClientId) As ClientCount, 
				   Count(AccountId) as AccountCount, 
				   Count(Distinct ApplicantState) as StateCount, 
				   Count(Distinct ApplicantZipCode) as ZipCodeCount,
				   Count(Distinct CurrentCreditor) as CreditorCount,
				   Count(Distinct AccountStatus) as StatusCount,
				   Sum(FundsAvailable) as FundsAvailable   
				   FROM dbo.vwNegotiationDistributionSource
				   WHERE 1=1 AND  ( ' + @GridFilterClause + ' ) ' 
				  )  		
  END
else if @FilterId is null 
  BEGIN
   INSERT INTO @tblFilterList
    SELECT FilterId,FilterClause,'0' FROM tblNegotiationFilters WHERE FilterId = isnull(@FilterId,FilterId) and FilterType = 'root'
	SELECT TOP 1 @FilterClause = filterClause, @LocalFilterId = FilterId FROM @tblFilterList WHERE isRead = 0

		WHILE @LocalFilterId > 0
		 BEGIN
			 SET @PreviousFilterId = @LocalFilterId
			 
			 INSERT INTO @tblDashBoard
				EXEC 
				  ('
				   SELECT ' + @LocalFilterId + ' as MasterListId,Count(Distinct ClientId) As ClientCount, 
				   Count(AccountId) as AccountCount, 
				   Count(Distinct ApplicantState) as StateCount, 
				   Count(Distinct ApplicantZipCode) as ZipCodeCount,
				   Count(Distinct CurrentCreditor) as CreditorCount,
				   Count(Distinct AccountStatus) as StatusCount,
				   Sum(FundsAvailable) as FundsAvailable   
				   FROM dbo.vwNegotiationDistributionSource
				   WHERE 1=1 AND  ( ' + @FilterClause + ' ) ' 
				  )  		

			 UPDATE @tblFilterList SET isRead = 1 WHERE FilterId = @LocalFilterId    
			 SELECT TOP 1 @FilterClause = FilterClause, @LocalFilterId = FilterId FROM @tblFilterList WHERE isRead = 0
			 if @PreviousFilterId = @LocalFilterId
			 BEGIN
			   SET @LocalFilterId = 0
			 END
		 END   
  END
else
 BEGIN
     SET @AggregateClause = NULL
	 -- INSERT INTO @tblAggregate
     -- exec stp_NegotiationBaseFilterSelect @FilterId

     SELECT @AggregateClause = AggregateClause from tblNegotiationFilters WHERE FilterId = @FilterId
	 INSERT INTO @tblDashBoard
		EXEC 
		  ('
		   SELECT ' + @FilterId + ' as MasterListId,Count(Distinct ClientId) As ClientCount, 
		   Count(AccountId) as AccountCount, 
		   Count(Distinct ApplicantState) as StateCount, 
		   Count(Distinct ApplicantZipCode) as ZipCodeCount,
		   Count(Distinct CurrentCreditor) as CreditorCount,
		   Count(Distinct AccountStatus) as StatusCount,
		   Sum(FundsAvailable) as FundsAvailable		   
		   FROM dbo.vwNegotiationDistributionSource
		   WHERE 1=1 AND  ( ' + @AggregateClause + ' ) AND (' +  @GridFilterClause + ')'
		  )  		   
 END


SELECT * FROM @tblDashBoard
GO
/****** Object:  StoredProcedure [dbo].[stp_Query_DuplicatesDetail]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_Query_DuplicatesDetail] 
(
	@ClientIDs varchar (50)=''
)

as

create table #clientids(clientid int)
exec('insert into #clientids select clientid from tblclient where clientid in (' + @clientids + ')')


select 
	p.personid,
	p.firstname,
	p.lastname,
	p.ssn,
	p.gender,
	p.dateofbirth,
	l.[name] as [language],
	p.street,
	p.street2,
	p.city,
	s.[name] as state,
	s.stateid as stateid,
	p.zipcode,
	c.*,
	c.trustid,
	c.accountnumber,
	c.depositmethod,
	c.depositday,
	c.depositamount,
	c.bankname,
	c.bankroutingnumber,
	c.bankcity,
	bs.[name] as bankstate,
	bs.stateid as bankstateid,
	c.monthlyfee,
	c.monthlyfeeday,
	c.monthlyfeestartdate
from 
	tblclient c inner join 
	tblperson p on c.primarypersonid=p.personid left outer join
	tbllanguage l on p.languageid=l.languageid left outer join
	tblstate s on p.stateid=s.stateid left outer join
	tbltrust t on c.trustid=t.trustid left outer join
	tblstate bs on c.bankstateid=bs.stateid
where
	c.clientid in (select clientid from #clientids)


select 
	p.clientid,
	p.personid,
	p.firstname,
	p.lastname,
	p.ssn,
	p.gender,
	p.dateofbirth,
	l.[name] as [language],
	p.street,
	p.street2,
	p.city,
	s.[name] as state,
	p.zipcode
from 
	tblclient c inner join 
	tblperson p on c.clientid=p.clientid left outer join
	tbllanguage l on p.languageid=l.languageid left outer join
	tblstate s on p.stateid=s.stateid 
where
	c.clientid in (select clientid from #clientids)
	and not p.personid=c.primarypersonid

select
	c.name,
	a.*
from
	tblaccount a inner join
	tblcreditorinstance ci on a.currentcreditorinstanceid=ci.creditorinstanceid inner join
	tblcreditor c on ci.creditorid=c.creditorid
where
	clientid in (select clientid from #clientids)

select
	n.*
from
	tblnote n 
where
	n.clientid in (select clientid from #clientids)

select
	pc.*
from
	tblphonecall pc 
where
	pc.personid in 
		(select personid from tblperson where clientid in 
			(select clientid from #clientids)
		)

select
	*,
	et.name as entrytype
from
	tblregister t inner join
	tblentrytype et on t.entrytypeid=et.entrytypeid
where
	clientid in (select clientid from #clientids)

drop table #clientids
GO
/****** Object:  StoredProcedure [dbo].[stp_SD_ClientRetention_Running24]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 01/05/2010
-- Description:	Running cancellation report begin date 12/01/09
-- =============================================
CREATE PROCEDURE [dbo].[stp_SD_ClientRetention_Running24] 
(
	@userid int = -1,
	@AgencyID int = 856,
	@MonthCreated int = 12,
	@YearCreated int = 2009
)
as
BEGIN


--*****development use
--	declare @userid int
--	declare @YearCreated int
--	declare @MonthCreated int
--	declare @AgencyID int
--	set @userid = 1268
--	set @MonthCreated = 12
--	set @YearCreated = 2009
--	set @AgencyID = 856

--	stp_SD_ClientRetention_Running12 1268, 1,2009

	--script vars
	declare @sSQL varchar(max)
	declare @pstart datetime
	declare @pend datetime

	select @pstart = cast(cast(@YearCreated as varchar) + '-' + cast(@MonthCreated as varchar) + '-01' as datetime)
	select @pend = cast(cast(@YearCreated as varchar) + '-' + cast(@MonthCreated as varchar) + '-' + cast(day(dateadd(d,-1,dateadd(m,1,@pstart))) as varchar) as datetime)

	print @pstart
	print @pend

	select 
		  a.ImportAbbr
		  ,convert(varchar,c.accountnumber) [Acct#]       
		  ,convert(varchar,c.created,110) [Created]
		  ,s.name [Status]
		  --,TermDate = isnull(convert(varchar,(select top(1) rm.created from tblroadmap rm where clientstatusid in (17,18) and rm.clientid = c.clientid order by roadmapid desc),110),'')
		  ,Retention = isnull(datediff(day,c.created,(select top(1) rm.created from tblroadmap rm where clientstatusid in (17) and rm.clientid = c.clientid order by roadmapid desc)),'')
	into #cr
	from tblclient c
		inner join tblClientStatus s on c.currentclientstatusid = s.clientstatusid
		inner join tblagency a on c.agencyid = a.agencyid
		--Inner join tbluseragencyaccess uaa on uaa.agencyid = c.agencyid and uaa.userid = @userid
		--inner join tblusercompanyaccess uca on uca.userid = uaa.userid and uca.companyid = c.companyid and (@companyid = -1 or uca.companyid = @companyid)
		--inner join tbluserclientaccess ucc on ucc.userid = uaa.userid and c.created between ucc.clientcreatedfrom and ucc.clientcreatedto
	where c.created >= @pstart 
		and c.created < @pend
		and c.accountnumber is not null
		and a.agencyid = @AgencyID
	order by c.created

	--update #cr set retention = datediff(day, created, getdate()) where retention =0
	--select * from #cr

	declare @Months int
	declare @LastNumber int
	declare @totalclients int

	select @totalclients = count(*) from #cr

	print @totalclients

	set @Months = 1
	set @LastNumber = 0

	set @sSQL = 'select ''Cancelled''[Status],[TotalClients] = ' + cast(@totalclients as varchar) + char(13)
	while @Months <= datediff(m,@pstart,getdate())
		BEGIN
			set @sSQL = @sSQL + ',[Month ' + cast(@Months as varchar) + ']'
			set @sSQL = @sSQL + ' = (select count(*) from #cr where retention > ' + cast(@LastNumber as varchar) 
			set @sSQL = @sSQL + ' and retention <=' + cast(@months*30 as varchar) + ')' + char(13)
			set @LastNumber = @months*30
			set @months = @Months + 1
		END

	set @sSQl = @sSQL + ' Union all '	+ char(13)

	set @months = 1
	set @sSQl = @sSQL +'select ''Remaining''[Status]'
	set @sSQl = @sSQL + ', ' + cast(@totalclients as varchar)+ ' [TotalClients]'
	set @LastNumber = 0
	
	while @Months <= datediff(m,@pstart,getdate())
		BEGIN
			declare @remaining int

			select @remaining  = @totalclients -(select count(*) from #cr where retention > @LastNumber  and retention <=@months*30 )
				
			set @sSQl = @sSQL + ', ' + cast(@remaining as varchar) +' [Month ' + cast(@Months as varchar) + ']' + char(13)
			
			set @totalclients = @remaining 
			set @LastNumber = @months*30
			set @months = @Months + 1
		END

	exec(@sSQl)

	drop table #cr

END

GRANT EXEC ON stp_SD_ClientRetention_Running24 TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCommissionBatchedForRegister]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetCommissionBatchedForRegister]
	(
		@registerid int
	)

as

declare @numcommission int
declare @sumcommission money


-- find all batched commission for this register (as having been paid)
select
	@numcommission = isnull(count(cp.commpayid), 0),
	@sumcommission = isnull(sum(cp.amount), 0)
from
	tblcommpay cp inner join
	tblregisterpayment rp on cp.registerpaymentid = rp.registerpaymentid
where
	rp.feeregisterid = @registerid and
	not cp.commbatchid is null


-- find all batched commission for this register (as used for payment)
select
	@numcommission = @numcommission + isnull(count(cp.commpayid), 0),
	@sumcommission = @sumcommission + isnull(sum(cp.amount), 0)
from
	tblcommpay cp inner join
	tblregisterpaymentdeposit rpd on cp.registerpaymentid = rpd.registerpaymentid
where
	rpd.depositregisterid = @registerid and
	not cp.commbatchid is null


-- return values
select
	@numcommission as numcommission,
	@sumcommission as sumcommission
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_GetLeadApplicantInfo]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_LetterTemplates_GetLeadApplicantInfo]
(
	@applicantID int
)
as
BEGIN
	SELECT TOP 1   
		la.LeadApplicantID
		, la.FullName
		, la.LeadPhone
		, la.ZipCode
		, lc.Description AS Concerns
		, lb.Description AS Behind
		, ls.Name AS Source
		, co.Name AS Company
		, lang.Name AS Language
		, ld.Description AS Delivery
		, la.FirstAppointmentDate AS [First Appt]
		, tz.Abbreviation AS [Time Zone]
		, assignTo.FirstName + ' ' + assignTo.LastName AS [Assign To]
		, ISNULL(status.Description, 'None') AS [Status]
		, la.Address1
		, la.City
		, st.Abbreviation
		, la.HomePhone
		, la.BusinessPhone
		, la.CellPhone
		, la.FaxNumber
		, la.Email
		, la.SSN
		, CONVERT(varchar(10), la.DOB, 101) AS DOB
		, ISNULL(lr.Description,'NA') AS ReasonDesc
	FROM  
		tblLeadApplicant AS la LEFT OUTER JOIN
		tblLeadStatus AS status ON la.StatusID = status.StatusID LEFT OUTER JOIN
		tblState AS st ON la.StateID = st.StateID LEFT OUTER JOIN
		tblLeadBehind AS lb ON la.BehindID = lb.BehindID LEFT OUTER JOIN
		tblUser AS assignTo ON la.RepID = assignTo.UserID LEFT OUTER JOIN
		tblLeadConcerns AS lc ON la.ConcernsID = lc.ConcernsID LEFT OUTER JOIN
		tblLeadSources AS ls ON la.LeadSourceID = ls.LeadSourceID LEFT OUTER JOIN
		tblLeadDelivery AS ld ON la.DeliveryID = ld.DeliveryID LEFT OUTER JOIN
		tblCompany AS co ON la.CompanyID = co.CompanyID LEFT OUTER JOIN
		tblLanguage AS lang ON la.LanguageID = lang.LanguageID LEFT OUTER JOIN
		tblTimeZone AS tz ON la.TimeZoneId = tz.TimeZoneID LEFT OUTER JOIN
		tblLeadReasons AS lr ON lr.StatusID = status.StatusID
	WHERE la.LeadApplicantID  = @applicantID
	ORDER BY la.created desc
END
GO
/****** Object:  StoredProcedure [dbo].[SearchAllTables]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SearchAllTables]
(
	@SearchStr nvarchar(100)
)
AS
BEGIN
	CREATE TABLE #Results (ColumnName nvarchar(370), ColumnValue nvarchar(3630))

	SET NOCOUNT ON

	DECLARE @TableName nvarchar(256), @ColumnName nvarchar(128), @SearchStr2 nvarchar(110)
	SET  @TableName = ''
	SET @SearchStr2 = QUOTENAME('%' + @SearchStr + '%','''')

	WHILE @TableName IS NOT NULL
	BEGIN
		SET @ColumnName = ''
		SET @TableName = 
		(
			SELECT MIN(QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME))
			FROM 	INFORMATION_SCHEMA.TABLES
			WHERE 		TABLE_TYPE = 'BASE TABLE'
				AND	QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) > @TableName
				AND	OBJECTPROPERTY(
						OBJECT_ID(
							QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME)
							 ), 'IsMSShipped'
						       ) = 0
		)

		WHILE (@TableName IS NOT NULL) AND (@ColumnName IS NOT NULL)
		BEGIN
			SET @ColumnName =
			(
				SELECT MIN(QUOTENAME(COLUMN_NAME))
				FROM 	INFORMATION_SCHEMA.COLUMNS
				WHERE 		TABLE_SCHEMA	= PARSENAME(@TableName, 2)
					AND	TABLE_NAME	= PARSENAME(@TableName, 1)
					AND	DATA_TYPE IN ('char', 'varchar', 'nchar', 'nvarchar')
					AND	QUOTENAME(COLUMN_NAME) > @ColumnName
			)
	
			IF @ColumnName IS NOT NULL
			BEGIN
				INSERT INTO #Results
				EXEC
				(
					'SELECT ''' + @TableName + '.' + @ColumnName + ''', LEFT(' + @ColumnName + ', 3630) 
					FROM ' + @TableName + ' (NOLOCK) ' +
					' WHERE ' + @ColumnName + ' LIKE ' + @SearchStr2
				)
			END
		END	
	END

	SELECT ColumnName, ColumnValue FROM #Results
END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterAppend]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Appends applicable filter clause for a specified criteria filter 
*/

CREATE PROCEDURE [dbo].[stp_NegotiationFilterAppend]
@FilterId int,
@Description varchar(150),
@FilterText varchar(max),
@FilterClause varchar(max)=null,
@UserId int = null

AS

UPDATE tblNegotiationFilters
SET
  filterClause = isnull(@filterClause,filterClause),
  --Description = Description + ' ' + @Description,  
  FilterText = FilterText + ' ' +  @FilterText,
  modified = getDate() 
  WHERE FilterId = @FilterId

exec stp_NegotiationFilterAggregateUpdate @FilterId

SELECT @FilterId
GO
/****** Object:  StoredProcedure [dbo].[stp_QueryGetServiceFeePaymentsAll]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_QueryGetServiceFeePaymentsAll]
	(
		@date1 datetime=null,
		@date2 datetime=null,
		@where varchar (8000) = '',
		@orderby varchar (8000) = '',
		@period varchar (100) = ''
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

if not @orderby is null and not @orderby=''
	set @orderby=@orderby+' , ' 

exec('
SELECT 
	tblCommStruct.CommRecId,
	tblagency.agencyid,
	tblCommStruct.CommScenId,
	tblCommRec.Abbreviation as CommRecipName,
	tblCommPay.CommPayId,
	tblClient.AccountNumber,
	(SELECT Top 1 Created FROM tblRoadmap WHERE ClientId=tblClient.ClientId AND ClientStatusId=5) as HireDate,
	tblAgency.Name as CompanyName,
	tblPrimaryPerson.FirstName,
	tblPrimaryPerson.LastName,
	tblEntryType.[Name] as FeeCategory,
	''' + @period + ''' as Period,
	'''' as SettlementNumber, 
	-tblRegister.Amount as OriginalBalance,

	-(	tblRegister.Amount +
		(SELECT 
			case when SUM(b.Amount) is null then 0 else sum(b.amount) end
		FROM 
			tblRegisterPayment b
		WHERE 
			b.FeeRegisterId=tblRegisterPayment.FeeRegisterId AND 
			b.RegisterPaymentId<tblRegisterPayment.RegisterPaymentId)
	) as BeginningBalance,
	(-(	tblRegister.Amount +
		(SELECT 
			case when SUM(b.Amount) is null then 0 else sum(b.amount) end
		FROM 
			tblRegisterPayment b
		WHERE 
			b.FeeRegisterId=tblRegisterPayment.FeeRegisterId AND 
			b.RegisterPaymentId<tblRegisterPayment.RegisterPaymentId)
	)- tblRegisterPayment.Amount ) as EndingBalance,

	tblRegisterPayment.Amount as PaymentAmount,
	tblRegisterPayment.PaymentDate,

	tblCommPay.[Percent] as Rate,
	tblCommPay.Amount

FROM 
	tblCommBatch INNER JOIN 
	tblCommPay ON tblCommBatch.CommBatchId=tblCommPay.CommBatchId INNER JOIN
	tblRegisterPayment ON tblCommPay.RegisterPaymentId=tblRegisterPayment.RegisterPaymentId INNER JOIN
	tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructId INNER JOIN
	tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN	
	tblRegister ON tblRegisterPayment.FeeRegisterId = tblRegister.RegisterId INNER JOIN
	tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
	tblClient ON tblRegister.ClientId=tblClient.ClientId INNER JOIN
	tblPerson tblPrimaryPerson ON tblClient.PrimaryPersonId=tblPrimaryPerson.PersonId INNER JOIN
	tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId INNER JOIN
	tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId
	
WHERE
	( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
	( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) 
	 ' + @where + 
	'

UNION ALL



SELECT 
	tblCommStruct.CommRecId,
	tblagency.agencyid,
	tblCommStruct.CommScenId,
	tblCommRec.Abbreviation as CommRecipName,
	tblCommPay.CommPayId,
	tblClient.AccountNumber,
	(SELECT Top 1 Created FROM tblRoadmap WHERE ClientId=tblClient.ClientId AND ClientStatusId=5) as HireDate,
	tblAgency.Name as CompanyName,
	tblPrimaryPerson.FirstName,
	tblPrimaryPerson.LastName,
	tblEntryType.[Name] as FeeCategory,
	''' + @period + ''' as Period,
	'''' as SettlementNumber, 
	-tblRegister.Amount as OriginalBalance,

	(	-tblRegister.Amount -
		(SELECT 
			case when SUM(b.Amount) is null then 0 else sum(b.amount) end
		FROM 
			tblRegisterPayment b
		WHERE 
			b.FeeRegisterId=tblRegisterPayment.FeeRegisterId AND 
			b.RegisterPaymentId<=tblRegisterPayment.RegisterPaymentId)
	) as BeginningBalance,

	(-(	tblRegister.Amount +
		(SELECT 
			case when SUM(b.Amount) is null then 0 else sum(b.amount) end
		FROM 
			tblRegisterPayment b
		WHERE 
			b.FeeRegisterId=tblRegisterPayment.FeeRegisterId AND 
			b.RegisterPaymentId<=tblRegisterPayment.RegisterPaymentId)
	) + tblRegisterPayment.Amount) as EndingBalance,

	tblRegisterPayment.Amount as PaymentAmount,
	tblCommPay.ChargebackDate as PaymentDate,
	tblCommPay.[Percent] as Rate,
	tblCommPay.Amount as Amount

FROM 
	tblCommBatch INNER JOIN 
	(SELECT [Percent],CommChargeBackId,CommPayID,ChargeBackDate,RegisterPaymentId,CommStructID,-Amount as Amount,CommBatchId FROM tblCommChargeBack) tblCommPay on tblCommBatch.CommBatchId=tblCommPay.CommBatchId INNER JOIN 
	(SELECT RegisterPaymentId, PaymentDate, FeeRegisterId, -Amount as Amount from tblRegisterPayment) tblRegisterPayment ON tblCommPay.RegisterPaymentId=tblRegisterPayment.RegisterPaymentId INNER JOIN
	tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructId INNER JOIN
	tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN	
	tblRegister ON tblRegisterPayment.FeeRegisterId = tblRegister.RegisterId INNER JOIN
	tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
	tblClient ON tblRegister.ClientId=tblClient.ClientId INNER JOIN
	tblPerson tblPrimaryPerson ON tblClient.PrimaryPersonId=tblPrimaryPerson.PersonId INNER JOIN
	tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId INNER JOIN
	tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId 
	
WHERE
	( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
	( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) 
	 ' + @where + 
	'


 ORDER BY ' + @orderby + ' tblRegisterPayment.PaymentDate'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_GetLSAVariableStateData]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_GetLSAVariableStateData]
(
	@companyid int,
	@stateid int
)
as
BEGIN

	declare @rowcnt int

SELECT DISTINCT @rowcnt = count(*)
FROM  tblCompanyStatePrimary AS csp INNER JOIN
tblAttorney AS a ON csp.AttorneyID = a.AttorneyID INNER JOIN
tblCompany AS co ON csp.CompanyID = co.CompanyID INNER JOIN
tblCompanyPhones AS cp ON co.CompanyID = cp.CompanyID INNER JOIN
tblCompanyAddresses AS ca ON co.CompanyID = ca.CompanyID INNER JOIN
tblState AS sst ON ca.State = sst.Abbreviation INNER JOIN
tblState AS cspst ON csp.State = cspst.Abbreviation
WHERE (co.CompanyID = @companyid) AND (cp.PhoneType = 46) AND (ca.AddressTypeID = 3) and (cspst.stateid = @stateid)

print @rowcnt
if @rowcnt <> 0
	begin
		SELECT DISTINCT 
			cspst.Name AS ClientState
			, co.Name AS SettlementAttorneyFirmName
			, NULL AS RetainerFeeAmount
			, a.FirstName + ' ' + CASE WHEN a.MiddleName IS NULL THEN a.LastName ELSE a.MiddleName + ' ' + a.LastName + ' ' END + ISNULL(a.Suffix, '') AS AssociatedAttorneyInClientsState
			, '(' + left(cp.PhoneNumber, 3) + ')' + SUBSTRING(cp.PhoneNumber, 4, 3) + '-' + right(cp.PhoneNumber, 4) AS CustomerServicePhoneNumber
			, CASE WHEN ca.Address2 IS NULL THEN ca.Address1 ELSE ca.Address1 + ', ' + ca.Address2 END + ', ' + ca.City + ', ' + ca.State + '  ' + ca.Zipcode AS SettlementAttorneyAddress
			, sst.Name AS SettlementAttorneyLicensedState
			,cspst.stateid,csp.companyid
		FROM         tblCompanyStatePrimary AS csp INNER JOIN
			tblAttorney AS a ON csp.AttorneyID = a.AttorneyID INNER JOIN
			tblCompany AS co ON csp.CompanyID = co.CompanyID INNER JOIN
			tblCompanyPhones AS cp ON co.CompanyID = cp.CompanyID INNER JOIN
			tblCompanyAddresses AS ca ON co.CompanyID = ca.CompanyID INNER JOIN
			tblState AS sst ON ca.State = sst.Abbreviation INNER JOIN
			tblState AS cspst ON csp.State = cspst.Abbreviation
		WHERE     (co.CompanyID = @companyid) AND (cp.PhoneType = 46) AND (ca.AddressTypeID = 3) and (cspst.stateid = @stateid)
		ORDER BY ClientState
	end
else
		SELECT DISTINCT    
		'' AS ClientState
		, co.Name AS SettlementAttorneyFirmName
		, NULL AS RetainerFeeAmount
		, '' AS AssociatedAttorneyInClientsState
		, '(' + left(cp.PhoneNumber, 3) + ')' + SUBSTRING(cp.PhoneNumber, 4, 3) + '-' + right(cp.PhoneNumber, 4) AS CustomerServicePhoneNumber
		,  CASE WHEN ca.Address2 IS NULL THEN ca.Address1 ELSE ca.Address1 + ', ' + ca.Address2 END + ', ' + ca.City + ', ' + ca.State + '  ' + ca.Zipcode AS SettlementAttorneyAddress
		, st.Name AS SettlementAttorneyLicensedState
		, co.companyid, -1 [stateid]
	FROM tblCompany AS co INNER JOIN
		tblCompanyAddresses AS ca ON co.CompanyID = ca.CompanyID and ca.addresstypeid = 3
		INNER JOIN tblState AS st ON ca.State = st.Abbreviation  
		INNER JOIN tblCompanyPhones AS cp ON co.CompanyID = cp.CompanyID and cp.phonetype = 46
	where co.companyid = @companyid



END

GRANT EXEC ON stp_LetterTemplates_GetLSAVariableStateData TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientFile_getAllCommunications]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ClientFile_getAllCommunications]
(
@clientid int
)
as 
BEGIN

	/*
	declare @clientid int
	set @clientid = 1658
	*/	
	--create our results table
	declare @tblComms table (CommType varchar(20),[Date] datetime,[By] varchar(255),[Message] varchar(max),direction bit,userid int)
	declare @accountnumber int

	select @accountnumber=accountnumber from tblclient where clientid = @clientid

	insert into @tblComms 
	select 
		'note' as CommType,
		tblnote.lastmodified as [Date],
		tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname + char(13) + ug.name as [by],
		tblnote.[value] as [message],
		null as direction,
		tblnote.createdby
	from
		tblnote left outer join
		tbluser as tbllastmodifiedby on tblnote.lastmodifiedby = tbllastmodifiedby.userid
		inner join tblusergroup as ug on ug.usergroupid = tblnote.usergroupid
	where
		(tblnote.clientid = @clientid )

	insert into @tblComms 
		select 
			'phonecall' as CommType,
			tblphonecall.lastmodified as [date],
			tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname + char(13) + ug.name as [by],
			tblphonecall.[subject] + '.' + tblphonecall.[body] as message,
			tblphonecall.direction,
			tblphonecall.createdby
		from
			tblphonecall left outer join
			tbluser as tbllastmodifiedby on tblphonecall.lastmodifiedby = tbllastmodifiedby.userid
			inner join tblusergroup as ug on ug.usergroupid = tblphonecall.usergroupid
		where
			tblphonecall.clientid=@clientid


	insert into @tblComms 
	SELECT 
		 CommType
		, [Date]
		, Staff + ' (Litigation Personnel)'[By]
		, [Message] = [Description] + '.' + convert(varchar(max),[Content])
		, Null[Direction]
		, Null[UserID]
		
	FROM 
		(
			SELECT 
				mat_no as AccountNumber
				, 'note' as CommType
				, [desc] as [Description]
				, memo as [Content]
				, staff
				, dateadd(s, (time - 1)/100, dateadd(d, [date], '12-28-1800')) as [date]
				, [date] as CommDate
				, time as CommTime
				, 'tm8user.notes' as CommTable 
			FROM 
				timematters.timematters.tm8user.notes 

			UNION ALL 

			SELECT 
				mat_no as AccountNumber
				, 'phonecall' as CommType
				, subject as [Description]
				, memo as [Content]
				, staff
				, dateadd(s, (time - 1)/100, dateadd(d, [date], '12-28-1800')) as [date]
				, [date] as CommDate, time as CommTime, 'tm8user.phone' as CommTable 
			FROM 
				timematters.timematters.tm8user.phone 

			UNION ALL 

			SELECT 
				mat_no as AccountNumber
				, 'mail' as CommType
				, [desc] as [Description]
				, memo as [Content]
				, staff
				, dateadd(s, (time - 1)/100, dateadd(d, [date], '12-28-1800')) as [date]
				, [date] as CommDate
				, time as CommTime
				, 'tm8user.mail' as CommTable 
			FROM 
				timematters.timematters.tm8user.mail
	) as LitCommunications 
	WHERE AccountNumber = cast(@accountnumber as varchar) 

	select CommType[Type],[Date],[By],[Message]  from @tblComms order by date 
END

GRANT EXEC ON stp_ClientFile_getAllCommunications TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPhoneCallsForCommunication]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <03 - 26 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Returns the Matter Phone Calls for Communication        
*/
CREATE procedure [dbo].[stp_GetPhoneCallsForCommunication]
	(
		@clientid int,
		@relationid int = null,
		@relationtypeid int = null,
		@orderby varchar(50)='u.lastname asc',
		@clientonly bit=0
	)

as

declare @relationcriteria varchar(1000)

if @clientonly=1 begin
	set @relationcriteria = ' and not exists (select phonecallrelationid from tblphonecallrelation npcr where npcr.phonecallid=pc.phonecallid and not npcr.relationtypeid=1)'
end else begin
	set @relationcriteria = ''
end

declare @sql varchar(5000)

set @sql='
	select distinct 
		pc.phonecallid,
		pc.personid,
		pc.userid,
		pc.clientid,
		pc.phonenumber,
		pc.direction,
		pc.subject,
		pc.body,
		pc.starttime,
		pc.endtime,
		p.firstname + '' '' + p.lastname as person,
		p.lastname as personlastname,
		u.firstname + '' '' + u.lastname + ''</br>'' + ug.Name as [by] , 
		u.lastname as bylastname,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname,
		ut.name as usertype,
		(case
			when not rc.color is null then rc.color
			when not uc.color is null then uc.color			
			when not gc.color is null then gc.color
			when not tc.color is null then tc.color
		end ) as color,
		(case
			when not rc.textcolor is null then rc.textcolor
			when not uc.textcolor is null then uc.textcolor			
			when not gc.textcolor is null then gc.textcolor
			when not tc.textcolor is null then tc.textcolor
		end ) as textcolor,
		pcr.relationtypeid
	from 
		tblphonecall pc left outer join
		tblperson p on pc.personid = p.personid left outer join
		tbluser u on pc.userid = u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tbluser as tblcreatedby on pc.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on pc.lastmodifiedby = tbllastmodifiedby.userid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype=''User Type'' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype=''User Group'' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype=''User'' left outer join
		(
			select
				npc.phonecallid,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblphonecallrelation pcr 
				inner join tblphonecall npc on pcr.phonecallid=npc.phonecallid
				inner join tblrulecommcolor rcc on rcc.entityid=pcr.relationtypeid
			where
				npc.clientid=' + convert(varchar, @clientid) + '
				and rcc.entitytype=''Relation Type''
			group by
				npc.phonecallid
		) rc on rc.phonecallid=pc.phonecallid
		inner join tblusergroup as ug on ug.usergroupid = pc.usergroupid
	'

--if not @relationid is null  
	set @sql=@sql + 
		' left outer join tblphonecallrelation pcr on pc.phonecallid=pcr.phonecallid'

set @sql = @sql +
	' where 
		pc.clientid=' + convert(varchar,@clientid) + 
		@relationcriteria 

if not @relationid is null begin
	set @sql = @sql + 
		' and pcr.relationtypeid=' + convert(varchar,@relationtypeid) + '
		and pcr.relationid=' + convert(varchar,@relationid)
end

set @sql = @sql + 
	' order by ' + 
		@orderby

exec(@sql)

drop table #tmprelations

select 
	pc.phonecallid,
	pcr.relationtypeid,
	pcr.relationid,
	rt.name as relationtypename,
	dbo.getentitydisplay(rt.relationtypeid,relationid) as relationname,
	rt.iconurl,
	rt.navigateurl
from
	tblphonecallrelation pcr inner join
	tblphonecall pc on pcr.phonecallid=pc.phonecallid inner join
	tblrelationtype rt on pcr.relationtypeid=rt.relationtypeid
where 
	pc.clientid=@clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_DashboardGetDefaultProfile]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_DashboardGetDefaultProfile]
(
	@scenario nvarchar(50)
)

as
BEGIN
set nocount on
set ansi_warnings off

exec stp_DashboardGetProfile -1, @scenario
END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationDashBoardDrill]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Retrieves drilldown summary for a specified field request

*/

CREATE PROCEDURE [dbo].[stp_NegotiationDashBoardDrill]
@FilterId int,
@DrillType varchar(50)

AS
SET NOCOUNT ON

DECLARE @filterClause varchar(max)

SELECT @filterClause = AggregateClause FROM tblNegotiationFilters WHERE FilterId = @FilterId


if @DrillType = 'AccountType'
 BEGIN
 EXEC 
  ('
   SELECT AccountStatus as Description, Count(AccountId) as Count
   FROM dbo.vwNegotiationDistributionSource
   WHERE 1=1 AND  ( ' + @filterClause + ' )
   GROUP BY   AccountStatus 
   ORDER BY AccountStatus '
  )     
 END

else if @DrillType = 'States'
 BEGIN
 EXEC 
  ('
   SELECT ApplicantState as Description, Count(AccountId) as Count
   FROM dbo.vwNegotiationDistributionSource
   WHERE 1=1 AND  ( ' + @filterClause + ' )
   GROUP BY   ApplicantState
   ORDER BY  ApplicantState'
  )     
 END

else if @DrillType = 'Creditors'
 BEGIN
 EXEC 
  ('
   SELECT rtrim(ltrim(CurrentCreditor)) as Description, Count(AccountId) as Count
   FROM dbo.vwNegotiationDistributionSource
   WHERE 1=1 AND  ( ' + @filterClause + ' )
   GROUP BY   rtrim(ltrim(CurrentCreditor)) 
   ORDER BY rtrim(ltrim(CurrentCreditor))'
  )     
 END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationPagingTotalRecords]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_NegotiationPagingTotalRecords]
@TableName varchar(max), @Where varchar(max)
as
EXEC 
('
SELECT count(*) 
FROM ' + @TableName + ' WHERE ' + @Where 
)
GO
/****** Object:  StoredProcedure [dbo].[stp_GetStatsOverviewForClient]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetStatsOverviewForClient]
	(
		@clientid int
	)

as

-- discretionary variables
declare @numaccounts int
declare @sumaccounts money
declare @registerbalance money
declare @frozenbalance money
declare @pfobalance money
declare @numUVaccounts int
declare @sumUnVerified money

select
	@numaccounts = count(accountid),
	@sumaccounts = sum(currentamount)
from
	tblaccount
where
	tblaccount.clientid = @clientid
	AND accountid in (select accountid from tblaccount where removed is null)
	AND accountid in (select accountid from tblaccount where Settled is null)

--01/15/2010 J Hope added unverified count and sum to overview page.
select 
	@numUVaccounts = count(accountid),
	@sumUnVerified = sum(currentamount)
from
	tblaccount
where
	tblaccount.clientid = @clientid
	AND verified IS NULL
	AND accountid IN (select accountid from tblaccount where removed is null)
	AND accountid IN (select accountid from tblaccount where Settled is null)

--09/16/2008 UG.  Changed to tblclient to exclude transactions that haven't happened yet
select top 1
	@registerbalance = sdabalance,
	@pfobalance = pfobalance
from
	tblclient
where
	tblclient.clientid = @clientid

/*
10.1.2008 - do not hold funds.
SELECT     TOP (1) 
	@frozenbalance = tblRegister.Amount
FROM
	tblSettlements AS s INNER JOIN
    tblRegister ON s.SettlementRegisterHoldID = tblRegister.RegisterId
WHERE
	(s.ClientID = @clientid) 
ORDER BY 
	s.Created DESC
*/


select
	coalesce(@numaccounts, 0) as numaccounts,
	coalesce(@sumaccounts, 0) as sumaccounts,
	coalesce(@registerbalance, 0) as registerbalance,
	coalesce(@frozenbalance, 0) as frozenbalance,
	coalesce(@pfobalance, 0) as pfobalance,
	coalesce(@numUVaccounts, 0) as numUnverifiedAccounts,
	coalesce(@sumUnVerified, 0) as sumUnVerified
GO
/****** Object:  StoredProcedure [dbo].[stp_SaveStatePrimary]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SaveStatePrimary]
(
	@CompanyID int
,	@State char(2)
,	@AttorneyID int
,	@UserId int
)
as
begin


if @AttorneyID > 0 begin 
	-- user has selected to assign a state primary
	if exists (select 1 from tblCompanyStatePrimary where CompanyID = @CompanyID and State = @State and AttorneyID <> @AttorneyID) begin
		-- user has changed who the state primary attorney is for this state
		update tblCompanyStatePrimary
		set AttorneyID = @AttorneyID, LastModified = getdate(), LastModifiedBy = @UserID
		where CompanyID = @CompanyID and State = @State
	end
	else if not exists (select 1 from tblCompanyStatePrimary where CompanyID = @CompanyID and State = @State) begin
		-- adding a new state primary
		insert tblCompanyStatePrimary (CompanyID, AttorneyID, [State], CreatedBy) values (@CompanyID, @AttorneyID, @State, @UserID)
	end
end
else begin 
	-- user has selected to remove the primary for this state or there is no state primary needed
	delete from tblCompanyStatePrimary where CompanyID = @CompanyID and State = @State
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_FeePaymentsByMonth]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_FeePaymentsByMonth 2008, 26

CREATE procedure [dbo].[stp_FeePaymentsByMonth]
(
	@year int = 2008
--,	@commrecid int
)
as

declare @fees table (mm int, entrytypeid int, displayname varchar(100), commissions money, chargebacks money)
--declare @ids table (commrecid int)
--declare @commrec varchar(20)
--
--
--select @commrec = left(display,10) + '%' from tblcommrec where commrecid = @commrecid
--
--insert @ids values (@commrecid)
--
--if @commrecid = 17
--	insert @ids values (29)
--else if @commrecid = 5
--	insert @ids values (24)


select month(b.batchdate) [mm], sum(cp.amount) [amount]
into #commission
from tblcommpay cp
join tblcommbatch b on b.commbatchid = cp.commbatchid
	and year(b.batchdate) = @year
join tblcommstruct cs on cs.commstructid = cp.commstructid
	and cs.commrecid in (5,17) --= @commrecid
group by month(b.batchdate)


insert @fees (mm, entrytypeid, displayname, commissions)
select month(b.batchdate), e.entrytypeid, e.displayname, sum(cp.amount)
from tblcommpay cp
join tblcommbatch b on b.commbatchid = cp.commbatchid
	and year(b.batchdate) = @year
join tblcommstruct cs on cs.commstructid = cp.commstructid
	and cs.commrecid in (5,17) --= @commrecid
join tblregisterpayment rp on rp.registerpaymentid = cp.registerpaymentid
join tblregister r on r.registerid = rp.feeregisterid
join tblentrytype e on e.entrytypeid = r.entrytypeid
group by month(b.batchdate), e.entrytypeid, e.displayname


select month(b.batchdate) [mm], sum(cb.amount) [amount]
into #chargeback
from tblcommchargeback cb 
join tblcommbatch b on b.commbatchid = cb.commbatchid
	and year(b.batchdate) = @year
join tblcommstruct cs on cs.commstructid = cb.commstructid
	and cs.commrecid in (5,17) --= @commrecid
group by month(b.batchdate)


update @fees
set chargebacks = dev.chargebacks
from (
	select month(b.batchdate) [mth], e.entrytypeid [id], sum(cb.amount) [Chargebacks]
	from tblcommchargeback cb 
	join tblcommbatch b on b.commbatchid = cb.commbatchid
		and year(b.batchdate) = @year
	join tblcommstruct cs on cs.commstructid = cb.commstructid
		and cs.commrecid in (5,17) --= @commrecid
	join tblregisterpayment rp on rp.registerpaymentid = cb.registerpaymentid
	join tblregister r on r.registerid = rp.feeregisterid
	join tblentrytype e on e.entrytypeid = r.entrytypeid
	group by month(b.batchdate), e.entrytypeid
) dev 
where entrytypeid = dev.id and mm = dev.mth


select month(b.batchdate) [mm], sum(t.amount) [amount]
into #transfer
from tblcommbatchtransfer t
join tblcommbatch b on b.commbatchid = t.commbatchid
	and year(b.batchdate) = @year
where t.commrecid in (5,24,17,29)
group by month(b.batchdate)


select month(f.date) [mm], sum(nr.amount) [amount]
into #nacha
from tblnacharegister nr
join tblnachafile f on f.nachafileid = nr.nachafileid
	and year(f.date) = @year
where (nr.name like 'stone%' or nr.name like 'avert%')
	and nr.nachafileid not in (969) -- exclude rexmit
group by month(f.date)


select mm, sum(commissions) [commissions], sum(chargebacks) [chargebacks], (sum(commissions) - sum(chargebacks)) [comm-chargebacks]
into #fees
from @fees
group by mm


select
	f.mm [month]
,	c.amount [commissions]
,	f.commissions
,	(c.amount - f.commissions) [CommissionDIFF]
,	cb.amount [chargebacks]
,	f.chargebacks
,	(cb.amount - f.chargebacks) [ChargebackDIFF]
,	(f.commissions - f.chargebacks) [comm-chargeback]
,	t.amount [transfertotal]
,	n.amount [nachatotal]
,	n.amount - (f.commissions - f.chargebacks) [NachaPaidDIFF]
,	n.amount - t.amount [NachaTransferDIFF]
from #fees f
join #commission c on c.mm = f.mm
join #chargeback cb on cb.mm = f.mm
join #transfer t on t.mm = f.mm
join #nacha n on n.mm = f.mm
order by f.mm



select mm [month], displayname, commissions, isnull(chargebacks,0) [chargebacks], (commissions - isnull(chargebacks,0)) [paid] 
from @fees
order by entrytypeid, mm


drop table #chargeback
drop table #commission
drop table #transfer
drop table #fees
drop table #nacha
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMatterPhoneCalls]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Revision	: <02 - 16 December 2009>
	Category	: [TimeMatter]
	Type        : {New}
	Decription	: Returns Phones of Matters
*/


CREATE procedure [dbo].[stp_GetMatterPhoneCalls]
	(
		@matterid int,
		@clientid int = null,
		@relationid int = null,
		@relationtypeid int = null,
		@orderby varchar(50)='u.lastname asc',
		@clientonly bit=0
	)

as

declare @relationcriteria varchar(1000)

if @clientonly=1 begin
	set @relationcriteria = ' and not exists (select phonecallrelationid from tblphonecallrelation npcr where npcr.phonecallid=pc.phonecallid and not npcr.relationtypeid=1)'
end else begin
	set @relationcriteria = 'and not exists (select phonecallrelationid from tblphonecallrelation npcr where npcr.phonecallid=pc.phonecallid and not npcr.relationtypeid=19)'
end

declare @sql varchar(5000)

set @sql='
	select 
		pc.phonecallid,
		pc.personid,
		pc.userid,
		pc.clientid,
		pc.phonenumber,
		pc.direction,
		pc.subject,
		pc.body,
		pc.starttime,
		pc.endtime,
		p.firstname + '' '' + p.lastname as person,
		p.lastname as personlastname,
		u.firstname + '' '' + u.lastname + ''</br>'' + ug.Name as [by] , 
		u.lastname as bylastname,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname,
		ut.name as usertype,
		(case
			when not rc.color is null then rc.color
			when not uc.color is null then uc.color			
			when not gc.color is null then gc.color
			when not tc.color is null then tc.color
		end ) as color,
		(case
			when not rc.textcolor is null then rc.textcolor
			when not uc.textcolor is null then uc.textcolor			
			when not gc.textcolor is null then gc.textcolor
			when not tc.textcolor is null then tc.textcolor
		end ) as textcolor
	from 
		tblphonecall pc left outer join
		tblperson p on pc.personid = p.personid left outer join
		tbluser u on pc.userid = u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tbluser as tblcreatedby on pc.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on pc.lastmodifiedby = tbllastmodifiedby.userid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype=''User Type'' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype=''User Group'' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype=''User'' left outer join
		(
			select
				npc.phonecallid,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblphonecallrelation pcr 
				inner join tblphonecall npc on pcr.phonecallid=npc.phonecallid
				inner join tblrulecommcolor rcc on rcc.entityid=pcr.relationtypeid
			where
				pcr.relationID=' + convert(varchar, @matterid) + '
				and rcc.entitytype=''Relation Type''
			group by
				npc.phonecallid
		) rc on rc.phonecallid=pc.phonecallid
		inner join tblusergroup as ug on ug.usergroupid = pc.usergroupid
	'

	set @sql=@sql + 
		' left outer join tblphonecallrelation pcr on pc.phonecallid=pcr.phonecallid'

set @sql = @sql +
	' where 
		pcr.relationID=' + convert(varchar,@matterid) 

	set @sql = @sql + 
		' and pcr.relationtypeid=19 '

set @sql = @sql + 
	' order by ' + 
		@orderby

exec(@sql)

select 
	pc.phonecallid,
	pcr.relationtypeid,
	pcr.relationid,
	rt.name as relationtypename,
	dbo.getentitydisplay(rt.relationtypeid,relationid) as relationname,
	rt.iconurl,
	rt.navigateurl
from
	tblphonecallrelation pcr inner join
	tblphonecall pc on pcr.phonecallid=pc.phonecallid inner join
	tblrelationtype rt on pcr.relationtypeid=rt.relationtypeid
where 
	pcr.relationtypeid=19 and pcr.relationID=@matterID
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetCommissionBatches_palmer]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetCommissionBatches_palmer]
	(
		@date1 datetime=null,
		@date2 datetime=null,
		@where varchar (8000) = '',
		@orderby varchar (8000) = '',
		@CompanyID int = 2
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

if not @orderby is null and not @orderby=''
	set @orderby= @orderby + ' , '

if not @where is null and not @where=''
	set @where= ' and ' + @where

declare @NonAgents varchar(100)

SELECT
	@NonAgents = CommRecID
FROM
	tblNachaRoot
WHERE
	CompanyID = @CompanyID

exec('
SELECT
	batch.CommBatchID,
	commrec.Display as AgencyName,
	batchtransfer.CommRecID,
	sum(batchtransfer.Amount) as Amount
FROM
	tblCommBatch batch inner join
	tblCOmmBatchTransfer batchtransfer on batch.CommBatchID = batchtransfer.CommBatchID inner join
	tblCommRec commrec on batchtransfer.CommRecID = commrec.CommRecID
WHERE
	not batchtransfer.CommRecID in (' + @NonAgents + ') and
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) and
	(
		SELECT TOP 1
			CommStructID
		FROM
			tblCommPay
		WHERE
			CommBatchID = batch.CommBatchID
	) > 55
GROUP BY
	commrec.Display,
	batchtransfer.CommRecID,
	batch.CommBatchID
ORDER BY
	commrec.Display'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationSiblingFilterExclusion]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Check for any overlap that may be caused by intended criteria addition. 
				 The indended criteria to be added is passed as a paramter (@filterClause).
				 When creating a sub-criteria, the entity(@ParentFilter) is always passed as a paramter also.
*/
CREATE PROCEDURE [dbo].[stp_NegotiationSiblingFilterExclusion]
@ParentEntityId int,
@SourceFilterId int,
@filterClause varchar(max)

AS
SET NOCOUNT ON
DECLARE @LocalfilterClause varchar(max)
DECLARE @FilterId int
DECLARE @PreviousFilterId int
DECLARE @tblOrFilter TABLE (FilterId int,filterClause varchar(max), isRead int)
CREATE TABLE #tblAssignedList(FilterId int, AccountId int)
DECLARE @tblAggregate TABLE (FilterClause varchar(max))
DECLARE @ParentFilterClause varchar(max)
SET @FilterId = null
SET @LocalfilterClause = null

if @SourceFilterId > 0 
 BEGIN
	INSERT INTO @tblOrFilter
   	  SELECT FilterId, FilterClause, '0'
		FROM tblNegotiationFilters 
		WHERE EntityId = @ParentEntityId and ParentFilterId is null and GroupBy is null
	    AND FilterType = 'stem' AND FilterId NOT IN(@SourceFilterId)	  
 END
else
 BEGIN
	INSERT INTO @tblOrFilter
	  SELECT FilterId, filterClause, '0'
		FROM tblNegotiationFilters 
		WHERE EntityId = @ParentEntityId and ParentFilterId is null and GroupBy is null
	    AND FilterType = 'stem'
 END


INSERT INTO @tblAggregate
   exec stp_NegotiationSiblingBaseFilterSelect @ParentEntityId

SELECT @ParentFilterClause = FilterClause from @tblAggregate 
SET  @ParentFilterClause = isnull(@ParentFilterClause,'1=1')

   
SELECT TOP 1 @LocalfilterClause = filterClause, @FilterId = FilterId FROM @tblOrFilter WHERE isRead = 0

WHILE @FilterId > 0
 BEGIN
    SET @PreviousFilterId = @FilterId    
	EXEC 
	('
		INSERT INTO #tblAssignedList       
		SELECT DISTINCT ' + @FilterId + ', AccountId 
		FROM dbo.vwNegotiationDistributionSource        
		WHERE 1=1 AND ( ' + @filterClause + ' )  AND  ( ' + @LocalfilterClause + ') AND (' + @ParentFilterClause + ')'
	)	 

	UPDATE @tblOrFilter SET isRead = 1 WHERE FilterId = @FilterId
    SELECT TOP 1 @LocalfilterClause = filterClause, @FilterId = FilterId FROM @tblOrFilter WHERE isRead = 0
    if @PreviousFilterId = @FilterId
     BEGIN
       SET @FilterId = 0
     END
 END

 SELECT DISTINCT isnull(FilterId,0) as FilterId FROM #tblAssignedList

DROP TABLE #tblAssignedList
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTasks]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <08- 19 March 2010>ug
      Category    : [TimeMatter]
      Type        : {Update}
      Decription  : Returns Tasks added relation to Matter
*/
CREATE procedure [dbo].[stp_GetTasks]
	(
		@returntop varchar (50) = '100 percent',
		@shortdescription int = 30,
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as
--edited
--CASE WHEN tbltasktype.tasktypecategoryId= 9 THEN tbltask.description
--			 ELSE tbltasktype.name END as tasktypename,
set @where = @where + ' and IsNull(tblmatter.IsDeleted,0)=0 '
exec
(
	'select top ' + @returntop + '
		tblclienttask.clientid,
		tblperson.firstname + '' '' + tblperson.lastname as clientname,
		tbltasktype.name as tasktypename,
		tblassignedtogroup.name as AssignedtoGroup,
		tbltasktypecategory.tasktypecategoryid,
		tbltasktypecategory.name as tasktypecategoryname,
		tbltaskresolution.name as taskresolutionname,
		tbltask.*,
		substring(tbltask.description, 0, ' + @shortdescription + ') + ''...'' as shortdescription,
		tblassignedto.firstname + '' '' + tblassignedto.lastname as assignedtoname,
		tblresolvedby.firstname + '' '' + tblresolvedby.lastname as resolvedbyname,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname,
		IsNull(tblmatter.creditorinstanceid,0) as creditorinstanceid,
		tbllanguage.Name as Language,
		tblclient.AccountNumber as ClientAccountNumber,
		CASE WHEN tblmatter.CreditorInstanceId is null then ''None''
		 WHEN tblmatter.CreditorInstanceid=0 then ''TBD''
		 ELSE ''***''+ RIGHT(ci.AccountNumber,4)  END as CIAccountNumber ,
		CASE WHEN tbltask.Resolved is null then case when tbltask.taskresolutionid=1 then 1 else 2 end
		else CASE WHEN  Due<getdate() then 3 else 4 end end as seq
 
	from
		tbltask with(nolock) left outer join
		tblclienttask  with(nolock) on tbltask.taskid = tblclienttask.taskid left outer join
		tblclient  with(nolock) on tblclienttask.clientid = tblclient.clientid left outer join
		tblperson  with(nolock) on tblclient.primarypersonid = tblperson.personid left outer join
		tbllanguage  with(nolock) on tblperson.languageId = tbllanguage.LanguageId left outer join
		tbltasktype  with(nolock) on tbltask.tasktypeid = tbltasktype.tasktypeid left outer join
		tbltasktypecategory  with(nolock) on tbltasktype.tasktypecategoryid = tbltasktypecategory.tasktypecategoryid left outer join
		tbltaskresolution  with(nolock) on tbltask.taskresolutionid = tbltaskresolution.taskresolutionid left outer join
		tbluser as tblassignedto  with(nolock) on tbltask.assignedto = tblassignedto.userid left outer join
		tblusergroup as tblassignedtogroup  with(nolock) on tbltask.AssignedToGroupId = tblassignedtogroup.usergroupid left outer join
		tbluser as tblresolvedby  with(nolock) on tbltask.resolvedby = tblresolvedby.userid left outer join
		tbluser as tblcreatedby  with(nolock) on tbltask.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby  with(nolock) on tbltask.lastmodifiedby = tbllastmodifiedby.userid
		left outer join tblmattertask  with(nolock) on tblmattertask.taskid = tbltask.taskid
		left outer join tblmatter  with(nolock) on tblmattertask.matterid=tblmatter.matterid
		left outer join tblCreditorInstance ci  with(nolock) on ci.creditorinstanceid=tblmatter.creditorinstanceid

	' + @where + ' ' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_ActiveClientsByMonth]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ActiveClientsByMonth]
(
	@from datetime,
	@to datetime
)
as
begin

declare @date datetime
declare @active table (mth int, yr int, active int)

-- get clients and their termination date (if any)
select c.clientid, c.created, termdate = (select top(1) rm.created from tblroadmap rm where clientstatusid in (15,16,17,18) and rm.clientid = c.clientid order by roadmapid desc)
into #clients
from tblclient c
where c.accountnumber is not null

while @from < @to begin
	set @date = dateadd(month,1,@from)

	-- count active cliens for the current month
	insert @active
	select month(@from), year(@from), count(*)
	from #clients
	where (termdate is null or termdate >= @date) -- if terminated, must be after the current month
	and (created < @date) 

	set @from = dateadd(month,1,@from)
end

select *
from @active
order by yr, mth

drop table #clients

end
GO
/****** Object:  StoredProcedure [dbo].[stp_RemoveAttorneyStateLic]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_RemoveAttorneyStateLic]
(
	@AttyStateID int
)
as
begin

declare @state char(2), @AttorneyID int

select @state = [state], @AttorneyId = AttorneyID from tblAttyStates where AttyStateID = @AttyStateID

-- removing state lic
delete from tblAttyStates where AttyStateID = @AttyStateID
-- removing primaries for that state
delete from tblCompanyStatePrimary where AttorneyID = @AttorneyID and [State] = @State

end
GO
/****** Object:  StoredProcedure [dbo].[stp_FeePaymentsInitialDraftByMonth]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_FeePaymentsInitialDraftByMonth 8

CREATE procedure [dbo].[stp_FeePaymentsInitialDraftByMonth]
(
	@month int
,	@year int = 2008
)
as

declare @fees table (mm int, entrytypeid int, displayname varchar(100), commissions money, chargebacks money)
declare @earned table (commpayid int, amount money, mm int, entrytypeid int, displayname varchar(100))
declare @deposits table (registerid int)
declare @last int 

-- get initial draft deposits for each month
--insert into @deposits (clientid,registerid) exec stp_InitialDrafts 1, @year
--insert into @deposits (clientid,registerid) exec stp_InitialDrafts 2, @year
--insert into @deposits (clientid,registerid) exec stp_InitialDrafts 3, @year
--insert into @deposits (clientid,registerid) exec stp_InitialDrafts 4, @year
--insert into @deposits (clientid,registerid) exec stp_InitialDrafts 5, @year
--insert into @deposits (clientid,registerid) exec stp_InitialDrafts 6, @year
--insert into @deposits (clientid,registerid) exec stp_InitialDrafts 7, @year

--insert into @deposits (clientid,registerid) exec stp_InitialDrafts 9, @year
--insert into @deposits (clientid,registerid) exec stp_InitialDrafts 10, @year
--insert into @deposits (clientid,registerid) exec stp_InitialDrafts 11, @year
--insert into @deposits (clientid,registerid) exec stp_InitialDrafts 12, @year



-- earned commissions (last month) (to get carry over, that is initial drafts paid last month but got batched this month)
set @last = @month - 1
insert @deposits (registerid) exec stp_InitialDraftsByMonth @last, @year

insert @earned
select distinct cp.commpayid, cp.amount, month(b.batchdate) [mm], e.entrytypeid, e.displayname
from tblcommpay cp
join tblcommbatch b on b.commbatchid = cp.commbatchid
	and month(b.batchdate) = @month 
join tblcommstruct cs on cs.commstructid = cp.commstructid
	and cs.commrecid in (5,17, 24, 29)
join tblregisterpayment rp on rp.registerpaymentid = cp.registerpaymentid
	and year(rp.paymentdate) = @year and month(rp.paymentdate) = @last
join tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
join @deposits d on d.registerid = rpd.depositregisterid
join tblregister r on r.registerid = rp.feeregisterid
join tblentrytype e on e.entrytypeid = r.entrytypeid


-- earned commissions (current month)
delete from @deposits where 1=1
insert into @deposits (registerid) exec stp_InitialDraftsByMonth @month, @year

insert @earned
select distinct cp.commpayid, cp.amount, month(b.batchdate) [mm], e.entrytypeid, e.displayname
from tblcommpay cp
join tblcommbatch b on b.commbatchid = cp.commbatchid
	and month(b.batchdate) = @month
join tblcommstruct cs on cs.commstructid = cp.commstructid
	and cs.commrecid in (5,17, 24, 29)
join tblregisterpayment rp on rp.registerpaymentid = cp.registerpaymentid
	and year(rp.paymentdate) = @year and month(rp.paymentdate) = @month
join tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
join @deposits d on d.registerid = rpd.depositregisterid
	--join tblregister r2 on r2.registerid = d.registerid
join tblregister r on r.registerid = rp.feeregisterid
join tblentrytype e on e.entrytypeid = r.entrytypeid


insert @fees (mm, entrytypeid, displayname, commissions)
select mm, entrytypeid, displayname, sum(amount)
from @earned
group by mm, entrytypeid, displayname


---- chargebacks
--select distinct cb.commbatchid, cb.amount, month(b.batchdate) [mm], e.entrytypeid
--into #chargeback
--from tblcommchargeback cb 
--join tblcommbatch b on b.commbatchid = cb.commbatchid
--	and year(b.batchdate) = @year and month(b.batchdate) = @month
--join tblcommstruct cs on cs.commstructid = cb.commstructid
--	and cs.commrecid in (5,17) --= @commrecid
--join tblregisterpayment rp on rp.registerpaymentid = cb.registerpaymentid
--join tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
--join @deposits d on d.registerid = rpd.depositregisterid 
--join tblregister r on r.registerid = rp.feeregisterid
--join tblentrytype e on e.entrytypeid = r.entrytypeid
--
--
--update @fees
--set chargebacks = dev.chargebacks
--from (
--	select mm [mth], entrytypeid [id], sum(amount) [chargebacks]
--	from #chargeback
--	group by mm, entrytypeid
--) dev 
--where entrytypeid = dev.id and mm = dev.mth


-- output
select mm [month], displayname, commissions, isnull(chargebacks,0) [chargebacks], (commissions - isnull(chargebacks,0)) [paid] 
from @fees
order by entrytypeid, mm


--drop table #earned
--drop table #chargeback
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPhoneCalls2]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetPhoneCalls2]
	(
		@clientid int,
		@relationid int = null,
		@relationtypeid int = null,
		@orderby varchar(50)='u.lastname asc',
		@clientonly bit=0
	)

as

declare @relationcriteria varchar(1000)

if @clientonly=1 begin
	set @relationcriteria = ' and not exists (select phonecallrelationid from tblphonecallrelation npcr where npcr.phonecallid=pc.phonecallid and not npcr.relationtypeid=1)'
end else begin
	set @relationcriteria = ''
end

declare @sql varchar(5000)

set @sql='
	select 
		pc.phonecallid,
		pc.personid,
		pc.userid,
		pc.clientid,
		pc.phonenumber,
		pc.direction,
		pc.subject,
		pc.body,
		pc.starttime,
		pc.endtime,
		p.firstname + '' '' + p.lastname as person,
		p.lastname as personlastname,
		u.firstname + '' '' + u.lastname + ''</br>'' + ug.Name as [by] , 
		u.lastname as bylastname,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname,
		ut.name as usertype,
		(case
			when not rc.color is null then rc.color
			when not uc.color is null then uc.color			
			when not gc.color is null then gc.color
			when not tc.color is null then tc.color
		end ) as color,
		(case
			when not rc.textcolor is null then rc.textcolor
			when not uc.textcolor is null then uc.textcolor			
			when not gc.textcolor is null then gc.textcolor
			when not tc.textcolor is null then tc.textcolor
		end ) as textcolor
	from 
		tblphonecall pc left outer join
		tblperson p on pc.personid = p.personid left outer join
		tbluser u on pc.userid = u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tbluser as tblcreatedby on pc.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on pc.lastmodifiedby = tbllastmodifiedby.userid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype=''User Type'' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype=''User Group'' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype=''User'' left outer join
		(
			select
				npc.phonecallid,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblphonecallrelation pcr 
				inner join tblphonecall npc on pcr.phonecallid=npc.phonecallid
				inner join tblrulecommcolor rcc on rcc.entityid=pcr.relationtypeid
			where
				npc.clientid=' + convert(varchar, @clientid) + '
				and rcc.entitytype=''Relation Type''
			group by
				npc.phonecallid
		) rc on rc.phonecallid=pc.phonecallid
		inner join tblusergroup as ug on ug.usergroupid = pc.usergroupid
	'

if not @relationid is null begin
	set @sql=@sql + 
		' left outer join tblphonecallrelation pcr on pc.phonecallid=pcr.phonecallid'
end

set @sql = @sql +
	' where 
		pc.clientid=' + convert(varchar,@clientid) + 
		@relationcriteria 

if not @relationid is null begin
	set @sql = @sql + 
		' and pcr.relationtypeid=' + convert(varchar,@relationtypeid) + '
		and pcr.relationid=' + convert(varchar,@relationid)
end

set @sql = @sql + 
	' order by ' + 
		@orderby

exec(@sql)

--drop table #tmprelations

select 
	pc.phonecallid,
	pcr.relationtypeid,
	pcr.relationid,
	rt.name as relationtypename,
	dbo.getentitydisplay(rt.relationtypeid,relationid) as relationname,
	rt.iconurl,
	rt.navigateurl
from
	tblphonecallrelation pcr inner join
	tblphonecall pc on pcr.phonecallid=pc.phonecallid inner join
	tblrelationtype rt on pcr.relationtypeid=rt.relationtypeid
where 
	pc.clientid=@clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTasksForUser]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetTasksForUser]
	(
		@returntop varchar (50) = '100 percent',
		@userid int,
		@shortdescription int = 30,
		@criteria varchar (8000) = '1=1'
	)

as


exec
(
	'select top ' + @returntop + '
		tblclienttask.clientid,
		tblperson.firstname + '' '' + tblperson.lastname as clientname,
		tbltasktype.name as tasktypename,
		tbltasktypecategory.tasktypecategoryid,
		tbltasktypecategory.name as tasktypecategoryname,
		tbltaskresolution.name as taskresolutionname,
		tbltask.*,
		substring(tbltask.description, 0, ' + @shortdescription + ') + ''...'' as shortdescription,
		tblassignedto.firstname + '' '' + tblassignedto.lastname as assignedtoname,
		tblresolvedby.firstname + '' '' + tblresolvedby.lastname as resolvedbyname,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname
	from
		tbltask left outer join
		tblclienttask on tbltask.taskid = tblclienttask.taskid left outer join
		tblclient on tblclienttask.clientid = tblclient.clientid left outer join
		tblperson on tblclient.primarypersonid = tblperson.personid left outer join
		tbltasktype on tbltask.tasktypeid = tbltasktype.tasktypeid left outer join
		tbltasktypecategory on tbltasktype.tasktypecategoryid = tbltasktypecategory.tasktypecategoryid left outer join
		tbltaskresolution on tbltask.taskresolutionid = tbltaskresolution.taskresolutionid left outer join
		tbluser as tblassignedto on tbltask.assignedto = tblassignedto.userid left outer join
		tbluser as tblresolvedby on tbltask.resolvedby = tblresolvedby.userid left outer join
		tbluser as tblcreatedby on tbltask.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on tbltask.lastmodifiedby = tbllastmodifiedby.userid
	where
		(tbltask.assignedto = ' + @userid + ') and (' + @criteria + ')
	order by
		due'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationEntityFilterSelect]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Retrives sub-criteria filters for a given entity
*/

CREATE PROCEDURE [dbo].[stp_NegotiationEntityFilterSelect]
@EntityId int,
@DisplayMode varchar (10) 
AS

if(@DisplayMode = 'base')

BEGIN
 SELECT DISTINCT f.FilterId,f.Description, f.FilterClause, f.FilterText, f.FilterType, isnull(f1.ParentFilterId,f.FilterId) as ParentFilterId
 FROM tblNegotiationFilters f
 LEFT JOIN tblNegotiationFilters f1 ON f.FilterId = isnull(f1.ParentFilterId, f1.FilterId) 
 WHERE f.FilterId IN
 (
   SELECT FilterId 
   FROM tblNegotiationFilterXref 
   WHERE EntityId = @EntityId and Deleted = 0
 )
 ORDER BY f.[Description]
END
else
BEGIN
 SELECT DISTINCT f.FilterId,f.Description, f.FilterClause, f.FilterText, f.FilterType, isnull(f1.ParentFilterId,f.FilterId) as ParentFilterId
 FROM tblNegotiationFilters f
 LEFT JOIN tblNegotiationFilters f1 ON f.FilterId = isnull(f1.ParentFilterId, f1.FilterId) 
 WHERE f.EntityId = @EntityId AND f.FilterType = 'stem' and f.ParentFilterId is null And f.GroupBy is null -- f.Deleted = '0'
END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationPreviewSibling]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Retrieves  top 10 accounts for the purpose of giving a user a birds-eye-view of accounts affected.
*/

CREATE PROCEDURE [dbo].[stp_NegotiationPreviewSibling]
@filterClause varchar(max),
@GridFilterId int,
@ParentFilterId int 

AS
SET NOCOUNT ON

DECLARE @LocalfilterClause varchar(max)
DECLARE @ParentFilterClause varchar(max)
DECLARE @FilterId int
DECLARE @OrFilter as varchar(max)
DECLARE @PreviousFilterId int
DECLARE @tblOrFilter TABLE (FilterId int,filterClause varchar(max), isRead int)
CREATE TABLE #tblAssignedList(AccountId int)

if @GridFilterId = 0
  BEGIN
   SET @GridFilterId = null
  END

SET @FilterId = null
SET @LocalfilterClause = null
SET @OrFilter = null

SELECT @ParentFilterClause  = AggregateClause FROM tblNegotiationFilters WHERE entityId = @ParentFilterId

SET @ParentFilterClause = isnull(@ParentFilterClause, '1=1')

if not @GridFilterId is null
  BEGIN
   EXEC 
  ('
   SELECT DISTINCT TOP 10 ClientId, SSN, LTrim(ApplicantFullName) as ApplicantFullName ,ApplicantCity,ApplicantState,ApplicantZipCode,FundsAvailable,LeastDebtAmount
   FROM dbo.vwNegotiationDistributionSource
   WHERE 1=1 AND  ( ' + @filterClause + ' ) AND  (' + @ParentFilterClause + ') ORDER BY LTrim(ApplicantFullName) asc' 
  )  
  END
else
  BEGIN
	  INSERT INTO @tblOrFilter
	   SELECT FilterId, filterClause, '0' FROM tblNegotiationFilters Where ParentFilterId = @ParentFilterId and Filtertype = 'stem'
	   
	SELECT TOP 1 @LocalfilterClause = filterClause, @filterId = filterId FROM @tblOrFilter WHERE isRead = 0

	WHILE @filterId > 0
	 BEGIN
		SET @PreviousFilterId = @filterId    
		If not @OrFilter is null       
		   BEGIN
			  SET @OrFilter = @OrFilter + ' OR ' + @LocalfilterClause
		   END
		else
		   BEGIN
			  SET @OrFilter =  @LocalfilterClause
		   END
		UPDATE @tblOrFilter SET isRead = 1 WHERE FilterId = @FilterId
		SELECT TOP 1 @LocalfilterClause = filterClause, @filterId = FilterId FROM @tblOrFilter WHERE isRead = 0
		if @PreviousFilterId = @filterId
		 BEGIN
		   SET @filterId = 0
		 END
	 END

  
	   if not @OrFilter is null
	   BEGIN
		EXEC 
		('
		  INSERT INTO #tblAssignedList       
		  SELECT AccountId 
		  FROM dbo.vwNegotiationDistributionSource
		  WHERE 1=1 AND  ( ' + @OrFilter + ' )'
		 )	
		END

	   EXEC 
	  ('
	   SELECT DISTINCT TOP 10 ClientId, SSN, LTrim(ApplicantFullName) as ApplicantFullName ,ApplicantCity,ApplicantState,ApplicantZipCode,FundsAvailable,LeastDebtAmount
	   FROM dbo.vwNegotiationDistributionSource
	   WHERE 1=1 AND  ( ' + @filterClause +  ' ) AND  (' + @ParentFilterClause + ') AND
	   AccountId NOT IN (SELECT AccountId FROM #tblAssignedList) ORDER BY LTrim(ApplicantFullName) asc'	   
	  )    
 END

DROP TABLE #tblAssignedList
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getBanks]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_enrollment_getBanks]
(
	@applicantID int
)
as
BEGIN
	select 
	leadbankid
	, bankname
	, accountnumber
	, routingnumber
	, checking
	from 
		tblleadbanks
	where 
		leadapplicantid = @applicantID
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAgencies]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetAgencies]
as

select a.agencyid, a.code, a.name
from (
	select distinct agencyid from tblcommscen
	union 
	select distinct agencyid from tblclient where agencyid > 0
) d
join tblagency a on a.agencyid = d.agencyid
order by a.name
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_getLocalCounsel]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_getLocalCounsel]
	(
		@clientid int
	)
AS
BEGIN
	declare @cid int

	select @cid = companyid from tblclient where clientid = @clientid

	select 
	a.attorneyid
	, case when middlename is null then firstname + ' ' + lastname else firstname + ' ' + middlename + ' ' + lastname end + 
	case when suffix is null then '' else ' ' + suffix end + ' (' + csp.[state] + ')'  [LocalCounselName]
	from tblattorney a 
	inner join tblcompanystateprimary csp on a.attorneyid = csp.attorneyid
	where csp.companyid = @cid
	order by csp.[state]

END

GRANT EXEC ON stp_LetterTemplates_getLocalCounsel TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_FeePaymentsNotInitialDraftByMonth]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_FeePaymentsNotInitialDraftByMonth

CREATE procedure [dbo].[stp_FeePaymentsNotInitialDraftByMonth]
(
	@year int = 2008
)
as

declare @fees table (mm int, entrytypeid int, displayname varchar(100), commissions money, chargebacks money)
declare @deposits table (clientid int, registerid int)


-- get initial draft deposits for each month
insert into @deposits (clientid,registerid) exec stp_InitialDrafts 1, @year
insert into @deposits (clientid,registerid) exec stp_InitialDrafts 2, @year
insert into @deposits (clientid,registerid) exec stp_InitialDrafts 3, @year
insert into @deposits (clientid,registerid) exec stp_InitialDrafts 4, @year
insert into @deposits (clientid,registerid) exec stp_InitialDrafts 5, @year
insert into @deposits (clientid,registerid) exec stp_InitialDrafts 6, @year
insert into @deposits (clientid,registerid) exec stp_InitialDrafts 7, @year
insert into @deposits (clientid,registerid) exec stp_InitialDrafts 8, @year
insert into @deposits (clientid,registerid) exec stp_InitialDrafts 9, @year
insert into @deposits (clientid,registerid) exec stp_InitialDrafts 10, @year
insert into @deposits (clientid,registerid) exec stp_InitialDrafts 11, @year
insert into @deposits (clientid,registerid) exec stp_InitialDrafts 12, @year



-- earned commissions
insert @fees (mm, entrytypeid, displayname, commissions)
select month(b.batchdate), e.entrytypeid, e.displayname, sum(cp.amount)
from tblcommpay cp
join tblcommbatch b on b.commbatchid = cp.commbatchid
	and year(b.batchdate) = @year
join tblcommstruct cs on cs.commstructid = cp.commstructid
	and cs.commrecid in (5,17) --= @commrecid
join tblregisterpayment rp on rp.registerpaymentid = cp.registerpaymentid
join tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
	and rpd.depositregisterid not in (select registerid from @deposits)
join tblregister r on r.registerid = rp.feeregisterid
join tblentrytype e on e.entrytypeid = r.entrytypeid
group by month(b.batchdate), e.entrytypeid, e.displayname


-- chargebacks
update @fees
set chargebacks = dev.chargebacks
from (
	select month(b.batchdate) [mth], e.entrytypeid [id], sum(cb.amount) [Chargebacks]
	from tblcommchargeback cb 
	join tblcommbatch b on b.commbatchid = cb.commbatchid
		and year(b.batchdate) = @year
	join tblcommstruct cs on cs.commstructid = cb.commstructid
		and cs.commrecid in (5,17) --= @commrecid
	join tblregisterpayment rp on rp.registerpaymentid = cb.registerpaymentid
	join tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
		and rpd.depositregisterid not in (select registerid from @deposits)
	join tblregister r on r.registerid = rp.feeregisterid
	join tblentrytype e on e.entrytypeid = r.entrytypeid
	group by month(b.batchdate), e.entrytypeid
) dev 
where entrytypeid = dev.id and mm = dev.mth


-- output
select mm [month], displayname, commissions, isnull(chargebacks,0) [chargebacks], (commissions - isnull(chargebacks,0)) [paid] 
from @fees
order by entrytypeid, mm
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTransactions]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetTransactions]
	(
		@registerwhere varchar (8000) = '',
		@paymentwhere varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as

exec
(
	'select
		0 as registerfirst,
		r.registerid as id,
		r.transactiondate as date,
		r.checknumber,
		r.entrytypeid,
		et.[name] as entrytypename,
		r.originalamount,
		r.amount,
		r.sdabalance,
		r.pfobalance,
		r.description,
		r.accountid,
		c.name as accountcreditorname,
		ci.accountnumber,
		a.currentamount as accountcurrentamount,
		r.adjustedregisterid,
		ar.transactiondate as adjustedregistertransactiondate,
		ar.amount as adjustedregisteramount,
		ar.originalamount as adjustedregisteroriginalamount,
		ar.entrytypeid as adjustedregisterentrytypeid,
		aret.name as adjustedregisterentrytypename,
		ar.accountid as adjustedregisteraccountid,
		arc.name as adjustedregisteraccountcreditorname,
		arci.accountnumber as adjustedregisteraccountnumber,
		r.achmonth,
		r.achyear,
		r.feemonth,
		r.feeyear,
		case when r.bounce is null and r.void is null then 0 else 1 end as bouncedorvoided,
		n.numnotes,
		pc.numphonecalls
	from
		tblregister r inner join
		tblentrytype et on r.entrytypeid = et.entrytypeid left join
		tblaccount a on r.accountid = a.accountid left join
		tblcreditorinstance ci on a.originalcreditorinstanceid = ci.creditorinstanceid left join
		tblcreditor c on ci.creditorid = c.creditorid left join
		tblregister ar on r.adjustedregisterid = ar.registerid left join
		tblaccount ara on ar.accountid = ara.accountid left join
		tblcreditorinstance arci on ara.originalcreditorinstanceid = arci.creditorinstanceid left join
		tblcreditor arc on arci.creditorid = arc.creditorid left join
		tblentrytype aret on ar.entrytypeid = aret.entrytypeid left join
		(
			select
				count(distinct noteid) as numnotes,
				relationid
			from
				tblnoterelation
			where
				relationtypeid = 4
			group by
				relationid
		)
		as n on r.registerid = n.relationid left join
		(
			select
				count(distinct phonecallid) as numphonecalls,
				relationid
			from
				tblphonecallrelation
			where
				relationtypeid = 4
			group by
				relationid
		)
		as pc on r.registerid = pc.relationid '
	+ @registerwhere + 
	' union all
	select
		1 as registerfirst,
		rp.registerpaymentid as id,
		rp.paymentdate as date,
		'''' as checknumber,
		-1 as entrytypeid,
		''Payment'' as entrytypename,
		null as originalamount,
		rp.amount,
		rp.sdabalance,
		rp.pfobalance,
		null as description,
		null as accountid,
		null as accountcreditorname,
		null as accountnumber,
		null as accountcurrentamount,
		r.registerid as adjustedregisterid,
		r.transactiondate as adjustedregistertransactiondate,
		r.amount as adjustedregisteramount,
		r.originalamount as adjustedregisteroriginalamount,
		r.entrytypeid as adjustedregisterentrytypeid,
		ret.name as adjustedregisterentrytypename,
		r.accountid as adjustedregisteraccountid,
		c.name as adjustedregisteraccountcreditorname,
		ci.accountnumber as adjustedregisteraccountnumber,
		null as achmonth,
		null as achyear,
		null as feemonth,
		null as feeyear,
		case when bounced = 0 and voided = 0 then 0 else 1 end as bouncedorvoided,
		n.numnotes,
		pc.numphonecalls
	from
		tblregisterpayment rp inner join
		tblregister r on rp.feeregisterid = r.registerid left join
		tblaccount a on r.accountid = a.accountid left join
		tblcreditorinstance ci on a.originalcreditorinstanceid = ci.creditorinstanceid left join
		tblcreditor c on ci.creditorid = c.creditorid left join
		tblentrytype ret on r.entrytypeid = ret.entrytypeid left join
		(
			select
				count(distinct noteid) as numnotes,
				relationid
			from
				tblnoterelation
			where
				relationtypeid = 5
			group by
				relationid
		)
		as n on rp.registerpaymentid = n.relationid left join
		(
			select
				count(distinct phonecallid) as numphonecalls,
				relationid
			from
				tblphonecallrelation
			where
				relationtypeid = 5
			group by
				relationid
		)
		as pc on rp.registerpaymentid = pc.relationid '
	+ @paymentwhere + ' ' 
	+ @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationPreviewDrill]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Retrieves a drilldown account informtaion for a given a client
*/
CREATE PROCEDURE [dbo].[stp_NegotiationPreviewDrill]
@ClientId int,
@FilterId int
AS

DECLARE @FilterClause varchar(max)

SELECT @FilterClause = AggregateClause FROM tblNegotiationFilters WHERE FilterId = @FilterId

EXEC
('
SELECT AccountId, CurrentCreditorAccountNumber, OriginalCreditor,CurrentCreditor,CurrentCreditorState,CurrentAmount,AccountStatus, AccountAge
FROM dbo.vwNegotiationDistributionSource
WHERE ClientId = ' + @ClientId + ' AND ' +  @FilterClause + '
ORDER BY CurrentCreditor '
)
GO
/****** Object:  StoredProcedure [dbo].[stp_GetC21TransactionsToClear]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetC21TransactionsToClear]
AS
select t.transactionid, t.processeddate, r.registerid from tblregister r
inner join tblc21batchtransaction t on t.depositid = r.registerid and r.entrytypeid = 3
inner join tblclient c on c.clientid = r.clientid and c.trustid = 22
where r.clear is null
and t.state = 1 and t.status not in (1)
and (hold is not null and (hold <= getdate() or hold = cast('2050-12-31' as datetime)))
and t.transactionid <> 'csi_00000038927'
GO
/****** Object:  StoredProcedure [dbo].[stp_CopyAttyRelationships]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_CopyAttyRelationships]
(
	@SourceCompanyID int
,	@DestCompanyID int
,	@CopyPrimaries bit
,	@UserID int
)
as 
begin
/*
	History:
	jhernandez		03/06/08		Created
	jhernandez		03/11/08		Dont copy employed relationships
	jhernandez		03/17/08		Copy EmployedState
*/

insert tblAttyRelation (AttorneyID,CompanyID,AttyRelation,EmployedState,CreatedBy,LastModifiedBy)
select AttorneyID,CompanyID,AttyRelation,EmployedState,@UserID,@UserID
from (
	select AttorneyID,@DestCompanyID [CompanyID],AttyRelation,EmployedState
	from tblAttyRelation
	where CompanyID = @SourceCompanyID
) sub
where not exists (select 1 from tblAttyRelation r where r.AttorneyID = sub.AttorneyID and r.CompanyID = sub.CompanyID)


if @CopyPrimaries = 1 begin
	insert tblCompanyStatePrimary (CompanyID,AttorneyID,[State],CreatedBy)
	select CompanyID,AttorneyID,[State],@UserID
	from (
		select @DestCompanyID [CompanyID],AttorneyID,[State]
		from tblCompanyStatePrimary
		where CompanyID = @SourceCompanyID
	) sub
	where not exists (select 1 from tblCompanyStatePrimary p where p.CompanyID = sub.CompanyID and p.State = sub.State)
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_FeePaymentsByMonth_Reporting]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_FeePaymentsByMonth 2008, 26

CREATE procedure [dbo].[stp_FeePaymentsByMonth_Reporting]
(
	@year int
--,	@commrecid int
)
as

declare @fees table (mm int, entrytypeid int, displayname varchar(100), commissions money, chargebacks money)
--declare @ids table (commrecid int)
--declare @commrec varchar(20)
--
--
--select @commrec = left(display,10) + '%' from tblcommrec where commrecid = @commrecid
--
--insert @ids values (@commrecid)
--
--if @commrecid = 17
--	insert @ids values (29)
--else if @commrecid = 5
--	insert @ids values (24)


select month(b.batchdate) [mm], sum(cp.amount) [amount]
into #commission
from tblcommpay cp
join tblcommbatch b on b.commbatchid = cp.commbatchid
	and year(b.batchdate) = @year
join tblcommstruct cs on cs.commstructid = cp.commstructid
	and cs.commrecid in (5,17) --= @commrecid
group by month(b.batchdate)


insert @fees (mm, entrytypeid, displayname, commissions)
select month(b.batchdate), e.entrytypeid, e.displayname, sum(cp.amount)
from tblcommpay cp
join tblcommbatch b on b.commbatchid = cp.commbatchid
	and year(b.batchdate) = @year
join tblcommstruct cs on cs.commstructid = cp.commstructid
	and cs.commrecid in (5,17) --= @commrecid
join tblregisterpayment rp on rp.registerpaymentid = cp.registerpaymentid
join tblregister r on r.registerid = rp.feeregisterid
join tblentrytype e on e.entrytypeid = r.entrytypeid
group by month(b.batchdate), e.entrytypeid, e.displayname


select month(b.batchdate) [mm], sum(cb.amount) [amount]
into #chargeback
from tblcommchargeback cb 
join tblcommbatch b on b.commbatchid = cb.commbatchid
	and year(b.batchdate) = @year
join tblcommstruct cs on cs.commstructid = cb.commstructid
	and cs.commrecid in (5,17) --= @commrecid
group by month(b.batchdate)


update @fees
set chargebacks = dev.chargebacks
from (
	select month(b.batchdate) [mth], e.entrytypeid [id], sum(cb.amount) [Chargebacks]
	from tblcommchargeback cb 
	join tblcommbatch b on b.commbatchid = cb.commbatchid
		and year(b.batchdate) = @year
	join tblcommstruct cs on cs.commstructid = cb.commstructid
		and cs.commrecid in (5,17) --= @commrecid
	join tblregisterpayment rp on rp.registerpaymentid = cb.registerpaymentid
	join tblregister r on r.registerid = rp.feeregisterid
	join tblentrytype e on e.entrytypeid = r.entrytypeid
	group by month(b.batchdate), e.entrytypeid
) dev 
where entrytypeid = dev.id and mm = dev.mth


select month(b.batchdate) [mm], sum(t.amount) [amount]
into #transfer
from tblcommbatchtransfer t
join tblcommbatch b on b.commbatchid = t.commbatchid
	and year(b.batchdate) = @year
where t.commrecid in (5,24,17,29)
group by month(b.batchdate)


select month(f.date) [mm], sum(nr.amount) [amount]
into #nacha
from tblnacharegister nr
join tblnachafile f on f.nachafileid = nr.nachafileid
	and year(f.date) = @year
where (nr.name like 'stone%' or nr.name like 'avert%')
	and nr.nachafileid not in (969) -- exclude rexmit
group by month(f.date)


select mm, sum(commissions) [commissions], sum(chargebacks) [chargebacks], (sum(commissions) - sum(chargebacks)) [paid]
into #fees
from @fees
group by mm


--select
--	f.mm [month]
--,	c.amount [commissions]
--,	f.commissions
--,	(c.amount - f.commissions) [CommissionDIFF]
--,	cb.amount [chargebacks]
--,	f.chargebacks
--,	(cb.amount - f.chargebacks) [ChargebackDIFF]
--,	(f.commissions - f.chargebacks) [comm-chargeback]
--,	t.amount [transfertotal]
--,	n.amount [nachatotal]
--,	n.amount - (f.commissions - f.chargebacks) [NachaPaidDIFF]
--,	n.amount - t.amount [NachaTransferDIFF]
--from #fees f
--join #commission c on c.mm = f.mm
--join #chargeback cb on cb.mm = f.mm
--join #transfer t on t.mm = f.mm
--join #nacha n on n.mm = f.mm
--order by f.mm



select mm [month], displayname, commissions, isnull(chargebacks,0) [chargebacks], (commissions - isnull(chargebacks,0)) [paid] 
from @fees
order by entrytypeid, mm


drop table #chargeback
drop table #commission
drop table #transfer
drop table #fees
drop table #nacha
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetCommissionBatches_seideman]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetCommissionBatches_seideman]
	(
		@date1 datetime=null,
		@date2 datetime=null,
		@where varchar (8000) = '',
		@orderby varchar (8000) = '',
		@CompanyID int = 1
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

if not @orderby is null and not @orderby=''
	set @orderby= @orderby + ' , '

if not @where is null and not @where=''
	set @where= ' and ' + @where

declare @NonAgents varchar(100)

SELECT
	@NonAgents = CommRecID
FROM
	tblNachaRoot
WHERE
	CompanyID = @CompanyID

exec('
SELECT
	batch.CommBatchID,
	commrec.Display as AgencyName,
	batchtransfer.CommRecID,
	sum(batchtransfer.Amount) as Amount
FROM
	tblCommBatch batch inner join
	tblCommBatchTransfer batchtransfer on batch.CommBatchID = batchtransfer.CommBatchID inner join
	tblCommRec commrec on batchtransfer.CommRecID = commrec.CommRecID
WHERE
	not batchtransfer.CommRecID in (' + @NonAgents + ') and
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) and
	(
		SELECT TOP 1
			CommStructID
		FROM
			tblCommPay
		WHERE
			CommBatchID = batch.CommBatchID
	) < 56
GROUP BY
	commrec.Display,
	batchtransfer.CommRecID,
	batch.CommBatchID
ORDER BY
	commrec.Display'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationMasterFilterExclusionTest]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_NegotiationMasterFilterExclusionTest]
@SourceFilterId int,
@filterClause varchar(max)

AS
SET NOCOUNT ON
DECLARE @LocalfilterClause varchar(max)
DECLARE @FilterId int
DECLARE @PreviousFilterId int
DECLARE @tblOrFilter TABLE (FilterId int,filterClause varchar(max), isRead int)
CREATE TABLE #tblAssignedList(FilterId int, AccountId int)

SET @FilterId = null
SET @LocalfilterClause = null

if @SourceFilterId > 0 
 BEGIN
	INSERT INTO @tblOrFilter
	  SELECT FilterId, FilterClause, '0' FROM tblNegotiationFilters WHERE FilterId NOT IN(@SourceFilterId) and FilterType = 'root'
 END
else
 BEGIN
	INSERT INTO @tblOrFilter
	  SELECT FilterId, FilterClause, '0' FROM tblNegotiationFilters WHERE FilterType = 'root'
 END
   
SELECT TOP 1 @LocalfilterClause = filterClause, @FilterId = FilterId FROM @tblOrFilter WHERE isRead = 0

WHILE @FilterId > 0
 BEGIN
    SET @PreviousFilterId = @FilterId    
	EXEC 
	('
		INSERT INTO #tblAssignedList       
		SELECT DISTINCT ' + @FilterId + ', AccountId 
		FROM dbo.vwNegotiationDistributionSource        
		WHERE 1=1 AND  ( ' + @LocalfilterClause + ')'
	)	 

	UPDATE @tblOrFilter SET isRead = 1 WHERE FilterId = @FilterId
    SELECT TOP 1 @LocalfilterClause = filterClause, @FilterId = FilterId FROM @tblOrFilter WHERE isRead = 0
    if @PreviousFilterId = @FilterId
     BEGIN
       SET @FilterId = 0
     END
 END

 EXEC
  ('
     SELECT DISTINCT a.FilterId, a.AccountId
	 FROM #tblAssignedList  a     
     INNER JOIN  dbo.vwNegotiationDistributionSource d ON a.AccountId = d.AccountId
     WHERE 1=1 AND  ( ' + @filterClause + ')'
  )

DROP TABLE #tblAssignedList
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetAgencyBatches_seideman]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetAgencyBatches_seideman]
	(
		@date1 datetime=null,
		@date2 datetime=null,
		@commrecid nvarchar(50),
		@range varchar(50)=''
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

exec ('
SELECT ' + @range + '
	batch.CommBatchID,
	batch.BatchDate,
	sum(batchtransfer.Amount) as Amount
FROM
	tblCommBatch batch inner join
	tblCommBatchTransfer batchtransfer on batch.CommBatchID = batchtransfer.CommBatchID inner join
	tblCommRec commrec on batchtransfer.CommRecID = commrec.CommRecID
WHERE
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) and
	batchtransfer.CommRecID in (' + @CommRecID + ') and
	(
		SELECT TOP 1
			CommStructID
		FROM
			tblCommPay
		WHERE
			CommBatchID = batch.CommBatchID
	) < 56
GROUP BY
	batch.CommBatchID,
	batch.BatchDate
ORDER BY
	batch.BatchDate DESC
')
GO
/****** Object:  StoredProcedure [dbo].[stp_ProjectedDeposits]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ProjectedDeposits]
as
begin

declare @LastProjection varchar(10), @StartDate datetime, @EndDate datetime--, @days int

select @LastProjection = convert(varchar(10), max(ProjectedOn), 101) from tblPotentialDeposits
select @StartDate = cast(convert(varchar(10), dateadd(day,-4,getdate()), 101) as datetime)
select @EndDate = cast(convert(varchar(10), dateadd(day,5,getdate()), 101) as datetime)


select agency, company, date, amount
into #deposits
from (
	-- actual deposits
	select a.name [agency], comp.name [company], cast(convert(varchar(10),r.transactiondate,101) as datetime) [date], sum(r.amount) [amount]
	from tblregister r
	join tblclient c on c.clientid = r.clientid
	join tblagency a on a.agencyid = c.agencyid
	join tblcompany comp on comp.companyid = c.companyid
	where r.entrytypeid = 3 and
		r.transactiondate >= @startdate and
		(
			r.hold is null or r.hold <= getdate() or r.[clear] <= getdate()
		)
	group by a.name, comp.name, cast(convert(varchar(10),r.transactiondate,101) as datetime)

	union all

	-- latest projections
	select a.name [agency], c.name [company], p.fordate [date], sum(amount) [amount]
	from tblPotentialDeposits p
	join tblagency a on a.agencyid = p.agencyid
	join tblcompany c on c.companyid = p.companyid
	where convert(varchar(10), ProjectedOn, 101) = @LastProjection
	group by a.name, c.name, p.fordate
) d

 
select distinct date
from #deposits
order by date

select distinct agency
from #deposits
order by agency

select distinct company
from #deposits
order by company

select agency, date, sum(amount) [amount]
from #deposits
group by agency, date
order by agency, date

select agency, company, date, sum(amount) [amount]
from #deposits
group by agency, company, date
order by agency, company, date

-- projections
select c.name [company], a.name [agency], p.fordate, projectedon, amount
from tblPotentialDeposits p
join tblcompany c on c.companyid = p.companyid
join tblagency a on a.agencyid = p.agencyid
where p.fordate between @StartDate and @EndDate
order by c.name, a.name, projectedon desc, fordate


drop table #deposits

end
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneyStateLic]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AttorneyStateLic]
(
	@AttorneyID int
,	@CompanyID int = -1
)
as
begin
/*
	History:
	jhernandez		12/10/07		Created. Passing in CompanyID will return which of the 
									licensed state(s) the attorney is the primary for.
*/

select 
	s.AttyStateID
,	s.State
,	s.StateBarNum
,	case when p.State is not null then 'true' else 'false' end [IsPrimary]
from 
	tblAttyStates s
left join tblCompanyStatePrimary p
	on p.AttorneyID = s.AttorneyID
	 and p.State = s.State
	 and p.CompanyID = @CompanyID
where 
	s.AttorneyID = @AttorneyID
order by
	s.State

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetChecksiteClientsToBalance]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetChecksiteClientsToBalance]
@age int = 45
AS
Begin

-- Get clients with pending disbursements to Collect
declare @trustid int, @trustdisplay varchar (50)

-- Lexxiom Creditor Clearing Account
select @trustid = trustid, @trustdisplay = [name]
from tbltrust 
where trustid = 23


-- get un-batched disbursements for checksite clients
select
	amount,companyid,ShadowStoreId,ClientID,RegisterId,Flow,TransactionDate
into
	#disbur
from (
	-- shadow store -> disbursement account
	select 
		abs(r.amount) [amount],
		c.companyid,
		c.accountnumber [ShadowStoreId],
		r.ClientId,
		r.registerid,
		'debit' [Flow],
		r.TransactionDate
	from 
		tblregister as r 
	join tblentrytype as e on r.entrytypeid = e.entrytypeid
		and e.entrytypeid in (28, 21, 18, 48) -- Client Withdrawal, Closing Withdrawal, Settlement, Refund
	join tblclient as c on c.clientid = r.clientid 
		and c.trustid = 22
	where r.amount < 0 and r.isfullypaid = 0 and r.void is null and r.bounce is null

	union all

	-- disbursement account -> shadow store
	select 
		abs(r.amount) * -1 [amount] ,
		c.companyid,
		c.accountnumber [ShadowStoreId],
		r.ClientId,
		r.registerid,
		'credit' [Flow],
		r.TransactionDate
	from 
		tblregister as r 
	join tblentrytype as e on r.entrytypeid = e.entrytypeid
		and e.entrytypeid in (28, 21, 18, 48) -- Client Withdrawal, Closing Withdrawal, Settlement, Refund
	join tblclient as c on c.clientid = r.clientid 
		and c.trustid = 22
	join tblnacharegister2 as nr on nr.registerid = r.registerid
		and nr.clientid = c.clientid
	where r.amount < 0 and r.isfullypaid = 0 and r.void is not null and r.bounce is null

) sub
where not exists (select 1 from tblNachaRegister2 nr2 where nr2.RegisterID = sub.RegisterID and nr2.flow = sub.flow)

-- get client conversion dates (where avail) 
select d.clientid, isnull(max(a.dc),'1/1/1900') [converdate]
into #conver
from #disbur d
left join tblaudit a on a.pk = d.clientid
	and a.auditcolumnid = 27
group by d.clientid

-- and only batch disbursements that occurred after their conversion date
select 
	d.ClientID As [ClientId], Sum(amount) as [Amount]
into #disbursum
from 
	#disbur d
join 
	#conver c on c.clientid = d.clientid
	and c.converdate < d.transactiondate
Group by d.ClientId


declare @olddate datetime 
select @olddate = cast('2000-01-01' as datetime)

--Get all clients that:
-- Did not balance last time
Select Distinct z.ClientId
into #c 
From 
(
Select b.Clientid as [ClientId] From tblBalanceLog b
Where b.balanced <> 1 and b.lastcheck is not null
Union
-- Have a new deposit or bounced or voided transaction after the last balance check
Select b.Clientid From tblBalanceLog b
inner join tblregister r on r.ClientId = b.ClientId
Where r.entrytypeid = 3
and ((r.created >= isnull(b.lastCheck, @olddate))
or (r.bounce is not null and r.bounce >= isnull(b.lastCheck, @olddate))
or (r.void is not null and r.void >= isnull(b.lastCheck, @olddate)))
Union 
-- Have a transaction transaction after the last balance check
Select b.clientid From tblBalanceLog b
inner join tblnacharegister2 n on n.clientid = b.clientid
where created >= isnull(b.lastCheck, @olddate)
Union
-- Active clients that havent been checked in a while
Select b.clientid from tblBalanceLog b
inner join tblclient c on c.clientid =  b.clientid and c.currentclientstatusid not in (15, 17, 18)
Where b.lastcheck is not null and datediff(d, b.lastcheck, getdate()) >= @age
Union
--Clients with pending disbursements
Select d.clientid from #disbursum d
) z

Select 
	c.ClientId,
	c.SDABalance AS [SDABalance],
	(select 
	coalesce(sum(nr.amount), 0)
	from tblNacharegister2 nr
	left join tblNachaFile nf on nf.nachafileid = nr.nachafileid 
	where (nf.datesent is null and (nr.nachafileid > 0 or nr.nachafileid = -1))
	and nr.flow = 'debit'
	and nr.shadowstoreid = c.AccountNumber) +
	(select 
	coalesce(sum(nr.amount), 0)* -1
	from tblNacharegister2 nr
	left join tblNachaFile nf on nf.nachafileid = nr.nachafileid 
	where (nf.datesent is null and (nr.nachafileid > 0 or nr.nachafileid = -1))
	and nr.flow = 'credit'
	and nr.shadowstoreid = c.AccountNumber) as [PendingAmount],
	(select
	coalesce(sum(amount), 0)
	from tblRegister r
	Where r.bounce is null and r.void is null and r.[clear] is null
	and r.checknumber is not null
	and r.clientid = c.clientid
	and r.entrytypeid = 3
	and not exists(Select depositid from tblc21batchtransaction where depositid = r.registerid)) as [PendingC21],
	Case When CurrentClientStatusId IN (15, 17, 18) Then 0 Else 1 End As [Active],
	AccountNumber,
	p.FirstName,
	p.LastName,
	(select coalesce(sum(r.amount), 0)* -1
	 from tblregister r
	 where r.entrytypeid = 3
	 and datediff(d, r.created, getdate()) < 3
	 and (r.hold is not null and r.hold > getdate())
	 and r.clear is null
	 and r.void is null
	 and r.bounce is null
	 and r.importid is null
	 and r.checknumber is not null
	 and r.clientid = c.clientid
	 and r.registerid not in (select b.depositid from tblc21batchtransaction b where b.depositid is not null)) as [C21ToSend],
	 isnull(d.Amount, 0) as [Disbursement]
FROM tblClient c
Inner Join tblPerson p on p.ClientId = c.ClientId
Left Join #disbursum d on c.ClientId = d.ClientId
Where c.TrustId = 22
And p.relationShip = 'prime'
And c.AccountNumber is not null -- If manual entry and data entry has not been resolved, clients will not have an account number yet
--Exclude those not send to Checksite
--And c.ClientId in (Select distinct Clientid From tblNachaRegister2 Where isNull(NachaFileId,-1) <> -1)
And c.clientId in (Select clientId from #c)
Order by p.LastName, p.FirstName

drop table #c
drop table #disbur
drop table #conver
drop table #disbursum

End
GO
/****** Object:  StoredProcedure [dbo].[stp_FeeByCreditorAnalysis]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_FeeByCreditorAnalysis]
@CommRecId int = NULL,
@StateId int = NULL,
@companyid int = NULL,
@agencyid int = NULL
AS
BEGIN
declare @MinPaymentId int
--declare @CommRecId int
--declare @StateId int
--declare @companyid int
--declare @agencyid int

Select @MinPaymentId = 11730
--Select @CompanyId = 2
--Select @StateId = 17
--Select @CommRecId = -1
 
SELECT 		c.ClientId AS [ClientId],
            p.[firstname] + ' ' +  p.[lastname] AS [ClientName],
			c.Created AS [Created],
			isnull(u.[Name], 'Not Provided') AS [StatusName],
			p.SSN AS [SSN],
			co.[CompanyId] AS [SAId],
			co.[Name] AS [SA],
			a.[AgencyId] AS [AgencyId],
            a.[Name] AS [Agency],
			s.[StateId] AS [StateId],
			s.[Abbreviation] AS [State],
			q1.entrytypeid AS [EntryTypeId],
			q1.Fee as [Fee],
			q1.amount AS [TotalCharged],
			CASE WHEN q2.[percent] IS NULL
				THEN NULL
				ELSE round(q1.amount * q2.[percent],2)
			END AS [TotalChargedForRec],
			isnull(q2.commrecid,-1) AS [RecipientId],
			isnull(q2.abbreviation, 'Not Found') AS [RecipientAbbrev],
			q2.[percent] AS [Percent],
			Isnull(q3.[Amount],0) AS [AmountPaidBefore566],
			CASE WHEN q2.[percent] IS NULL
				THEN NULL
				ELSE round(Isnull(q3.[Amount],0) * q2.[percent],2)
			END AS [AmountPaidBefore566ForRec],
			Isnull(q4.[Amount],0) AS [AmountPaidAfter566],
			CASE WHEN q2.[percent] IS NULL
				THEN NULL
				ELSE round(Isnull(q4.[Amount],0) * q2.[percent],2)
			END AS [AmountPaidAfter566ForRec],
			Isnull(q5.[Amount],0) AS [CommissionPaidAfter566]

FROM
tblClient c 
inner join tblperson p ON p.ClientId = c.ClientId
INNER JOIN tblCompany co ON co.CompanyID = c.CompanyID
INNER JOIN tblAgency a ON a.AgencyID = c.AgencyID
LEFT JOIN tblClientStatus u ON c.CurrentClientStatusId = u.ClientStatusId
LEFT JOIN tblState s ON p.StateID = s.StateId
INNER JOIN --Total Charged in Fees
			(select 
				r.clientid as [ClientId], 
 				r.entrytypeid as [EntryTypeId],
				e.DisplayName as [Fee],
				Sum(abs(r.amount)) as [Amount]
			from tblregister r
			inner join tblentrytype  e on (r.entrytypeid = e.entrytypeid)
			where r.void is null and r.bounce is null
			and e.fee = 1 --and r.amount < 0 and isfullypaid = 1
			group by r.clientid, r.entrytypeid, e.DisplayName
			) q1 on (q1.clientid = c.clientid)
--Percent per fee and recipient
LEFT JOIN (select   st.commrecid,
					f.entrytypeId,
					st.companyid,
					cs.agencyid,
					cr.Abbreviation,
					Sum(f.[percent]) as [percent]
			from tblCommFee f
			inner join tblCommStruct st on (st.commstructid = f.commstructid)
			inner join tblCommScen cs on (cs.commscenid = st.commscenid)
			Left join tblCommRec cr on (st.commrecid = cr.commrecid)
			group by st.commrecid,f.entrytypeId,st.companyid,cs.agencyid, cr.Abbreviation  
			)
			q2 on (q1.entrytypeId = q2.entrytypeid and q2.agencyid=c.agencyid and c.companyid = q2.companyid)
LEFT JOIN ( --Total Paid by Client
			--Before 6/5/2006
			SELECT reg.clientid AS [ClientId],
				reg.EntryTypeId AS [EntryTypeId],
				Sum(rpmt.Amount) AS [Amount]
				FROM tblregisterpayment rpmt 
				INNER JOIN tblRegister reg ON reg.RegisterId = rpmt.FeeRegisterId
				INNER JOIN tblEntryType et ON et.EntryTypeId = reg.EntryTypeId
				WHERE rpmt.Voided = 0
				AND rpmt.Bounced = 0
				AND rpmt.Amount >= 0
				AND rpmt.RegisterPaymentId < @MinPaymentId
				GROUP BY reg.clientid, reg.EntryTypeId
			) q3 on (q3.clientid = c.clientid and q3.entrytypeid = q1.entrytypeid)
LEFT JOIN (--After 6/5/2006
			SELECT reg.clientid AS [ClientId],
				reg.EntryTypeId AS [EntryTypeId],
				Sum(rpmt.Amount) AS [Amount]
				FROM tblregisterpayment rpmt 
				INNER JOIN tblRegister reg ON reg.RegisterId = rpmt.FeeRegisterId
				INNER JOIN tblEntryType et ON et.EntryTypeId = reg.EntryTypeId
				WHERE rpmt.Voided = 0
				AND rpmt.Bounced = 0
				AND rpmt.Amount >= 0
				AND rpmt.RegisterPaymentId >= @MinPaymentId
				GROUP BY reg.clientid, reg.EntryTypeId
			) q4 on (q4.clientid = c.clientid and q4.entrytypeid = q1.entrytypeid)
LEFT JOIN (
			--Commission Paid to to recipients after 6/5/2006
			SELECT reg.clientid AS [ClientId],
				reg.EntryTypeId AS [EntryTypeId],
				cs.CommRecId AS [CommRecId],
				SUM(cp.Amount) AS [Amount]
				FROM tblCommPay cp 
				INNER JOIN vwCommStruct cs ON cs.CommStructID = cp.CommStructID
				INNER JOIN tblregisterpayment rpmt ON rpmt.registerpaymentid = cp.RegisterPaymentID
				INNER JOIN tblRegister reg ON reg.RegisterId = rpmt.FeeRegisterId
				INNER JOIN tblEntryType et ON et.EntryTypeId = reg.EntryTypeId
				WHERE rpmt.Voided = 0
				AND rpmt.Bounced = 0
				AND rpmt.Amount >= 0
				AND rpmt.RegisterPaymentid >= @MinPaymentId
				GROUP BY reg.clientid, reg.EntryTypeId, cs.CommRecId
			) q5 on (q5.clientid = c.clientid and q5.entrytypeid = q1.entrytypeid and q5.commrecid = q2.commrecid)
WHERE
p.Relationship = 'Prime'
AND (@CompanyId IS NULL OR (co.CompanyId = @CompanyId))
AND (@StateId IS NULL OR (s.StateId = @StateId))
AND (@AgencyId IS NULL OR (a.AgencyId = @AgencyId))
And (@CommRecId IS NULL OR (isnull(q2.CommRecId,-1) = @CommRecId))
Order by c.CompanyId, s.[Abbreviation], p.[firstname], q1.Fee
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTransactionsNoPayments]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetTransactionsNoPayments]
	(
		@returntop varchar (255) = '',
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as

exec
(
	'select
		' + @returntop + '
		0 as registerfirst,
		r.registerid as id,
		r.transactiondate as date,
		r.checknumber,
		r.entrytypeid,
		et.[name] as entrytypename,
		r.originalamount,
		r.amount,
		r.sdabalance,
		r.pfobalance,
		r.description,
		r.accountid,
		c.name as accountcreditorname,
		ci.accountnumber,
		a.currentamount as accountcurrentamount,
		r.adjustedregisterid,
		ar.transactiondate as adjustedregistertransactiondate,
		ar.amount as adjustedregisteramount,
		ar.originalamount as adjustedregisteroriginalamount,
		ar.entrytypeid as adjustedregisterentrytypeid,
		aret.name as adjustedregisterentrytypename,
		r.achmonth,
		r.achyear,
		r.feemonth,
		r.feeyear,
		case when r.bounce is null and r.void is null then 0 else 1 end as bouncedorvoided,
		n.numnotes,
		pc.numphonecalls
	from
		tblregister r inner join
		tblentrytype et on r.entrytypeid = et.entrytypeid left join
		tblaccount a on r.accountid = a.accountid left join
		tblcreditorinstance ci on a.currentcreditorinstanceid = ci.creditorinstanceid left join
		tblcreditor c on ci.creditorid = c.creditorid left join
		tblregister ar on r.adjustedregisterid = ar.registerid left join
		tblentrytype aret on ar.entrytypeid = aret.entrytypeid left join
		(
			select
				count(distinct noteid) as numnotes,
				relationid
			from
				tblnoterelation
			where
				relationtypeid = 4
			group by
				relationid
		)
		as n on r.registerid = n.relationid left join
		(
			select
				count(distinct phonecallid) as numphonecalls,
				relationid
			from
				tblphonecallrelation
			where
				relationtypeid = 4
			group by
				relationid
		)
		as pc on r.registerid = pc.relationid '
	+ @where + ' '
	+ @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationMasterBaseFilterSelect]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Aggregates Baseline criteria for subsequent criteria creation.
*/

CREATE PROCEDURE [dbo].[stp_NegotiationMasterBaseFilterSelect]
@FilterId int,
@FilterType varchar(25)
AS

SET NOCOUNT ON

DECLARE @PrevLocalFilterId int
DECLARE @LocalFilterId int
DECLARE @LocalFilterType varchar(25)
DECLARE @FilterClause varchar(max)
DECLARE @FilterDescription varchar(250)
DECLARE @FilterText varchar(max)
DECLARE @AndFilter varchar(max)
DECLARE @tblFilterIdList TABLE (FilterId int, FilterType varchar(25))
DECLARE @tblFilters TABLE (FilterId int,  FilterClause varchar(max), isRead int)

/***************   GETS ANCESTORS **********************/

SET @LocalFilterId = null

SELECT @LocalFilterId = ParentFilterId,@LocalFilterType = FilterType FROM tblNegotiationFilters WHERE FilterId = @FilterId
INSERT INTO @tblFilterIdList (FilterId,FilterType) VALUES (@FilterId,@FilterType)
WHILE not @LocalFilterId is null
  BEGIN
    SET @PrevLocalFilterId = @LocalFilterId
	INSERT INTO @tblFilterIdList (FilterId,FilterType) VALUES (@LocalFilterId,@LocalFilterType)
	SELECT @LocalFilterId = ParentFilterId, @LocalFilterType = FilterType FROM tblNegotiationFilters WHERE FilterId = @LocalFilterId   
	if (@LocalFilterId is null)
    BEGIN
        UPDATE @tblFilterIdList SET FilterType = 'root' WHERE FilterId = @PrevLocalFilterId		
    END
  END


SELECT @AndFilter = f.filterClause, @FilterDescription=[Description], @FilterText=FilterText
FROM  @tblFilterIdList l 
INNER JOIN tblNegotiationFilters f ON f.filterId = l.filterId  
WHERE l.FilterType = 'root'
ORDER BY f.FilterId

SELECT @FilterClause = FilterClause 
FROM tblNegotiationFilters 
WHERE FilterId = @FilterId

If ((not @AndFilter is null) and (@AndFilter != @FilterClause))
 BEGIN
    UPDATE tblNegotiationFilters SET [Description] = @FilterDescription, FilterText = @FilterText
    WHERE Deleted = '0' AND FilterId In (SELECT FilterId FROM @tblFilterIdList WHERE FilterType not In ('root'))

	SELECT  '((' + @FilterClause + ') '  + ' AND  ( ' + @AndFilter + ' ))'   as 'AndFilter'
 END
else if ( @AndFilter = @FilterClause)
 BEGIN
	SELECT  '(' + @FilterClause + ') ' as 'AndFilter'
 END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTransactionByType_Fees]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetTransactionByType_Fees]
	(
		@clientId int
	)

as

SELECT
	tblRegister.*,
	tblEntryType.[Name] as EntryTypeName
FROM
	tblRegister INNER JOIN
	tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
WHERE
	tblEntryType.Fee=1 AND
	tblRegister.ClientId=@clientId and
	tblRegister.AdjustedRegisterID is null
ORDER BY
	tblRegister.TransactionDate ASC
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportClientInsert]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ImportClientInsert]
@EnrollmentId int,
@AgencyId int,
@CompanyId int,
@TrustId int,
@UserId int,
@ClientStatusId int,
@InitialDraftAmount money = null,
@InitialDraftDate DateTime = null,
@DepositStartDate DateTime = null,
@MonthlyFee money,
@MonthlyFeeDay int,
@AdditionalAccountFee money,
@ReturnedCheckFee money,
@OvernightDeliveryFee money,
@SettlementFeePercentage money,
@SetupFeePercentage money,
@InitialAgencyPercent money = null,
@AccountNumber varchar(50),
@DepositMethod varchar(50),
@DepositDay int = null,
@DepositAmount money = null,
@BankAccountNumber varchar(50) = null,
@BankRoutingNumber varchar(50) = null,
@BankType varchar(2) = null,
@BankName varchar(255) = null,
@BankCity varchar(50) = null,
@BankStateId int = null,
@AgentName nvarchar(150) = null,
@SubsequentMaintFee money = null,
@SubMaintFeeStart datetime = null,
@Multideposit bit = null,
@MaintenanceFeeCap money = null,
@RemittName nvarchar(250) = null
AS
BEGIN
	insert into tblClient (EnrollmentId, AgencyID, CompanyID, TrustID,
	CurrentClientStatusID, InitialDraftAmount, InitialDraftDate, DepositStartDate,
	MonthlyFee, MonthlyFeeDay, AdditionalAccountFee, ReturnedCheckFee,
	OvernightDeliveryFee, SettlementFeePercentage, SetupFeePercentage, InitialAgencyPercent,
	AccountNumber, DepositMethod, DepositDay, DepositAmount,
	BankAccountNumber, BankRoutingNumber, BankType, BankName,
	BankCity, BankStateID, AgentName, AutoAssignMediator,
	Created, CreatedBy, LastModified, LastModifiedBy,
	PFOBalance, SDABalance, SubsequentMaintFee, SubMaintFeeStart, MultiDeposit, MaintenanceFeeCap, RemittName)
	Values(@EnrollmentId, @AgencyId, @CompanyId, @TrustId,
	 @ClientStatusId, @InitialDraftAmount, @InitialDraftDate, @DepositStartDate,
	 @MonthlyFee, @MonthlyFeeDay, @AdditionalAccountFee, @ReturnedCheckFee,
	 @OvernightDeliveryFee, @SettlementFeePercentage, @SetupFeePercentage, @InitialAgencyPercent,
	 @AccountNumber, @DepositMethod, @DepositDay, @DepositAmount,
	 @BankAccountNumber, @BankRoutingNumber, @BankType, @BankName,
	 @BankCity, @BankStateId, @AgentName, 1, 
	 GetDate(), @UserId, GetDate(), @UserId,
	 0, 0, @SubsequentMaintFee, @SubMaintFeeStart, isnull(@Multideposit,0), @MaintenanceFeeCap, @RemittName)
	 
	 SELECT SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure [dbo].[stp_CompanyStatePrimaryList]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_CompanyStatePrimaryList]
(
	@CompanyID int
)
as
begin


select 
	s.Name
,	s.Abbreviation [State]
,	isnull(p.AttorneyID, -1) [AttorneyID]
from
	tblState s
left join tblCompanyStatePrimary p
	on p.State = s.Abbreviation
	 and p.CompanyID = @CompanyID
order by
	s.Name


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetDisbursementsToCollect]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetDisbursementsToCollect]
AS
Begin 

declare @trustid int, @trustdisplay varchar (50)

-- Lexxiom Creditor Clearing Account
select @trustid = trustid, @trustdisplay = [name]
from tbltrust 
where trustid = 23


-- get un-batched disbursements for checksite clients
select
	amount,companyid,ShadowStoreId,ClientID,RegisterId,Flow,TransactionDate
into
	#disbur
from (
	-- shadow store -> disbursement account
	select 
		abs(r.amount) [amount],
		c.companyid,
		c.accountnumber [ShadowStoreId],
		r.ClientId,
		r.registerid,
		'debit' [Flow],
		r.TransactionDate
	from 
		tblregister as r 
	join tblentrytype as e on r.entrytypeid = e.entrytypeid
		and e.entrytypeid in (28, 21, 18, 48) -- Client Withdrawal, Closing Withdrawal, Settlement, Refund
	join tblclient as c on c.clientid = r.clientid 
		and c.trustid = 22
	where r.amount < 0 and r.isfullypaid = 0 and r.void is null and r.bounce is null

	union all

	-- disbursement account -> shadow store
	select 
		abs(r.amount) [amount],
		c.companyid,
		c.accountnumber [ShadowStoreId],
		r.ClientId,
		r.registerid,
		'credit' [Flow],
		r.TransactionDate
	from 
		tblregister as r 
	join tblentrytype as e on r.entrytypeid = e.entrytypeid
		and e.entrytypeid in (28, 21, 18, 48) -- Client Withdrawal, Closing Withdrawal, Settlement, Refund
	join tblclient as c on c.clientid = r.clientid 
		and c.trustid = 22
	join tblnacharegister2 as nr on nr.registerid = r.registerid
		and nr.clientid = c.clientid
	where r.amount < 0 and r.isfullypaid = 0 and r.void is not null and r.bounce is null

) sub
where not exists (select 1 from tblNachaRegister2 nr2 where nr2.RegisterID = sub.RegisterID and nr2.flow = sub.flow)


-- get client conversion dates (where avail) 
select d.clientid, isnull(max(a.dc),'1/1/1900') [converdate]
into #conver
from #disbur d
left join tblaudit a on a.pk = d.clientid
	and a.auditcolumnid = 27
group by d.clientid


-- and only batch disbursements that occurred after their conversion date
select 
	d.ClientID As [ClientId], Sum(amount)
from 
	#disbur d
join 
	#conver c on c.clientid = d.clientid
	and c.converdate < d.transactiondate
Group by d.ClientId


drop table #disbur
drop table #conver

End
GO
/****** Object:  StoredProcedure [dbo].[stp_GlobalCommission_RetFeeRev]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GlobalCommission_RetFeeRev]
(
	@startdate datetime,
	@enddate datetime
)

AS

if @startdate is null
begin
	set @startdate = dateadd(day, 10, dateadd(day, -day(getdate()), dateadd(month, -1, getdate())))
end

if @enddate is null
begin
	set @enddate = dateadd(month, 1, @startdate)
end

CREATE TABLE #globalRetComm (
	clientid int,
	AcctNo int,
	clientName nvarchar(255),
	start datetime,
	RetFees decimal(18,2),
	BegBal decimal(18,2),
	NewTrans decimal(18,2),
	EndBal decimal(18,2),
	PayRate decimal(18,2),
	repComm decimal(18,2),
	agencyid int,
	status int
)

INSERT INTO #globalRetComm(	
	clientid,
	AcctNo,
	ClientName,
	start,
	agencyid,
	status
)

SELECT	c.clientid,
	c.accountnumber,
	p.firstname + ' '+ p.lastname,
	c.created,
	c.agencyid,
	c.currentclientstatusid
FROM tblClient c
INNER JOIN tblPerson p ON c.primarypersonid = p.personid

UPDATE #globalRetComm 
SET 
	 RetFees = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 2 AND r.clientid = #globalRetComm.clientid AND not (bounce is null or void is null)),0),
	
	 BegBal = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 2 AND r.clientid = #globalRetComm.clientid AND not (bounce is null or void is null)),0) -  -- retainer fees assessed
	 isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 2 and (bounced =1 or voided =1) and rp.paymentdate < @startdate),0), -- retainer payments
	
	NewTrans = (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 2 and (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0))*-1,

	 EndBal =
		(isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 2 AND r.clientid = #globalRetComm.clientid AND not (bounce is null or void is null)),0) 
			- isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 2 and (bounced =1 or voided =1) and rp.paymentdate < @startdate),0))
				- (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 2 and (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)),
	PayRate = .50,
	repComm = ((ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 2 and (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0))*-1) * .50

SELECT	AcctNo,
		ClientName,
		convert(nvarchar,start,110) as [Start Date],
		NewTrans,
		PayRate,
		repComm
FROM	#globalRetComm 
WHERE 	agencyid = 812 
AND NOT	status IN (15,17,18)
AND NewTrans <> 0
ORDER BY AcctNo

DROP TABLE #globalRetComm
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationSiblingBaseFilterSelect]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Aggregates Baseline criteria for subsequent criteria creation within a specified entity
*/
CREATE PROCEDURE [dbo].[stp_NegotiationSiblingBaseFilterSelect]
@EntityId int,
@StemFilterId int = null
AS

SET NOCOUNT ON

DECLARE @FilterClause varchar(max)
DECLARE @AggregateClause varchar(max)
DECLARE @AggregateClauseAll varchar(max)
DECLARE @FilterId int
DECLARE @PrevLocalFilterId int
DECLARE @tblFilters TABLE (FilterId int,  FilterClause varchar(max), isRead int)

/***************   GETS ANCESTORS **********************/

SET @AggregateClauseAll = null
SET @FilterId = null

INSERT INTO @tblFilters
  SELECT FilterId, AggregateClause, 0 FROM tblNegotiationFilters 
  WHERE FilterId IN (SELECT FilterId FROM tblNegotiationFilterXref WHERE EntityId =  @EntityId AND Deleted = 0)
  AND Deleted = 0


SELECT TOP 1 @FilterId = FilterId, @AggregateClause= FilterClause FROM @tblFilters WHERE isRead = 0
WHILE @FilterId > 0
  BEGIN

    SET @PrevLocalFilterId = @FilterId
    if (@AggregateClauseAll is null)
    BEGIN        
		SET @AggregateClauseAll = @AggregateClause 
    END
    else
	BEGIN
		SET @AggregateClauseAll = @AggregateClauseAll + ' OR ' + @AggregateClause 
	END    
	UPDATE @tblFilters SET isRead = '1' WHERE FilterId = @FilterId
    SELECT TOP 1 @FilterId = FilterId, @AggregateClause= FilterClause FROM @tblFilters WHERE isRead = 0
    if (@FilterId =@PrevLocalFilterId)
	BEGIN
		SET @FilterId = 0
    END
  END

if not @StemFilterId is null
 BEGIN
  SELECT @FilterClause = FilterClause FROM tblNegotiationFilters WHERE FilterId = @StemFilterId
  SET @AggregateClauseAll = '(' + @FilterClause + ') AND (' + @AggregateClauseAll + ')'
 END

 SELECT @AggregateClauseAll as AggregateClause
GO
/****** Object:  StoredProcedure [dbo].[TestNas01Permissions]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[TestNas01Permissions]
AS
BEGIN
	declare @cmdtxt varchar(255)
	set @cmdtxt = 'echo ' + cast(getdate() as nvarchar(25)) + ' Error: Divide by Zero! Client: ' + cast(20 as nvarchar(25)) + ' >> \\Nas01\process\Service_Logs\PayFeeTest_Log.log'
	exec master..xp_cmdshell @cmdtxt
	print 'Error: Divide by zero!'
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Statistic_Deposits]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Statistic_Deposits]
(
	@date1 datetime,
	@date2 datetime,
	@companyid int = null,
	@agencyid int = null
)

as

select
	'Total Deposits' as statistic,
	count(*) as [count],
	isnull(sum(amount),0) as [value]
from
	tblregister r
join
	tblclient c on c.clientid = r.clientid
	and (@companyid is null or c.companyid = @companyid)
	and (@agencyid is null or c.agencyid = @agencyid)		
where
	transactiondate between @date1 and @date2
	and r.entrytypeid in (3,10)

union all

select
	'Bounced Deposits' as statistic,
	count(*) as [count],
	isnull(sum(amount),0) as [value]
from
	tblregister r
join
	tblclient c on c.clientid = r.clientid
	and (@companyid is null or c.companyid = @companyid)
	and (@agencyid is null or c.agencyid = @agencyid)	
where
	not r.bounce is null
	and transactiondate between @date1 and @date2
	and r.entrytypeid in (3,10)

union all

select
	'Voided Deposits' as statistic,
	count(*) as [count],
	isnull(sum(amount),0) as [value]
from
	tblregister r
join
	tblclient c on c.clientid = r.clientid
	and (@companyid is null or c.companyid = @companyid)
	and (@agencyid is null or c.agencyid = @agencyid)		
where
	not r.void is null
	and transactiondate between @date1 and @date2
	and r.entrytypeid in (3,10)

union all

select
	'Deposits On Hold' as statistic,
	count(*) as [count],
	isnull(sum(amount),0) as [value]
from
	tblregister r
join
	tblclient c on c.clientid = r.clientid
	and (@companyid is null or c.companyid = @companyid)
	and (@agencyid is null or c.agencyid = @agencyid)		
where
	not r.hold is null and (r.hold >= @date2 and not r.[clear] <= @date1)
	and transactiondate between @date1 and @date2
	and r.entrytypeid in (3,10)

union all

select
	'Valid Deposits' as statistic,
	count(*) as [count],
	isnull(sum(amount),0) as [value]
from
	tblregister r
join
	tblclient c on c.clientid = r.clientid
	and (@companyid is null or c.companyid = @companyid)
	and (@agencyid is null or c.agencyid = @agencyid)		
where
	r.bounce is null
	and r.void is null
	and transactiondate between @date1 and @date2
	and r.entrytypeid in (3,10)

union all

select
	'ACH''d Deposits' as statistic,
	count(*) as [count],
	isnull(sum(amount),0) as [value]
from
	tblregister r
join
	tblclient c on c.clientid = r.clientid
	and (@companyid is null or c.companyid = @companyid)
	and (@agencyid is null or c.agencyid = @agencyid)		
where
	not achyear is null
	and transactiondate between @date1 and @date2
	and r.entrytypeid in (3,10)
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNegotiatorRules]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[stp_GetNegotiatorRules]

AS

if exists (select * from tblrulenegotiation) begin
	select 
		u.userid,
		rangestart,
		rangeend,
		u.firstname + ' ' + u.lastname as fullname
	from
		tblrulenegotiation rn inner join
		tbluser u on rn.userid=u.userid
end else begin
	select
		u.userid,
		'' as rangeend,
		'' as rangestart,
		u.firstname + ' ' + u.lastname as fullname
	from
		tbluser u inner join 
		tbluserposition up on u.userid=up.userid 
	where 
		up.positionid=4
end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetDepositExceptionReport]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetDepositExceptionReport]
@ReportId int
AS
Begin

				 
--Insert Nacha Records					 
Select r.ReportDetailId as ReportDetailId, 
	   r.ReportId as  ReportId,  
	   r.TransactionId as TransactionId, 
	   'ACH' as DepositType,
	   n.Status as [Status],
	   n.ClientId as ClientId,
	   n.Name AS [ClientName],
	   cast('' as varchar(50)) AS CheckNumber,
	   n.ShadowStoreId as ShadowStoreId,
	   n.RegisterId as RegisterId,
	   n.Amount as Amount, 
	   n.ExceptionCode AS [ReasonCode],
	   isnull(CASE WHEN n.Status in (1,2)  THEN (Select top 1 ReasonDescription From tblChecksiteStatusReason Where ReasonCode = n.ExceptionCode)
				   WHEN n.Status = 3 THEN (Select top 1 BouncedDescription From tblBouncedReasons Where BouncedCode = n.ExceptionCode)
				   ELSE Null END, '') AS [ReasonDescription],
	   CASE WHEN r.StateId = 3 THEN convert(bit,1) ELSE convert(bit,0) END as [Bounced],
	   n.RoutingNumber as  BankRouting,
	   n.AccountNumber as  BankAccount,
	   Cast(null  as Varchar(max)) as FrontImagePath,
	   cp.ShortCoName as SA,
	   n.Type as BankType
into #report
From tblProcessingReportDetail r
inner join tblProcessingReportState s on s.StateId = r.StateId 
inner join tblNachaRegister2 n on r.TransactionId = convert(varchar, n.NachaRegisterid)
left join tblCommRec cr on n.CommRecId = cr.CommRecId
left join tblRegister t on t.RegisterId = n.RegisterId
left join tblEntryType e on e.EntryTypeId = t.EntryTypeId
left join tblcompany cp on cp.CompanyId = n.CompanyId
Where r.ReportId = @ReportId 
And s.StateGroupId = 3
And r.TransactionType in (3,5,7)

--Insert Check21 Records					 
Insert Into #report(ReportDetailId, ReportId, TransactionId, DepositType,
					[Status], ClientId, ClientName, CheckNumber,
					ShadowStoreId, RegisterId, Amount,
					ReasonCode, ReasonDescription, Bounced, FrontImagePath, SA)
Select r.ReportDetailId, 
	   r.ReportId,  
	   r.TransactionId, 'C21',
	   b.Status,
	   (Select ClientId From tblClient Where AccountNumber = b.AccountNumber),
	   p.FirstName + ' ' + p.LastName AS [ClientName],
	   b.CheckNumber,
	   b.AccountNumber,	
	   b.DepositId,
	   b.Amount, 
	   b.ExceptionCode AS [ReasonCode],
	   isnull(CASE WHEN b.Status in (1,2)  THEN (Select top 1 ReasonDescription From tblChecksiteStatusReason Where ReasonCode = b.ExceptionCode)
				   WHEN b.Status = 3 THEN (Select top 1 BouncedDescription From tblBouncedReasons Where BouncedCode = b.ExceptionCode)
				   ELSE Null END, '') AS [ReasonDescription],
	   CASE WHEN r.StateId = 3 THEN convert(bit,1) ELSE convert(bit,0) END as [Bounced],
	   isnull(b.FrontImagePath, '') AS [FrontImagePath],
	   cp.ShortCoName
From tblProcessingReportDetail r
inner join tblProcessingReportState s on s.StateId = r.StateId 
inner join tblC21BatchTransaction b on b.TransactionId = r.TransactionId
left join tblRegister t on t.RegisterId = b.DepositId
left join tblClient c on c.AccountNumber = b.AccountNumber
left join tblPerson p on p.ClientId = c.ClientId
left join tblcompany cp on cp.CompanyId = c.CompanyId
Where r.ReportId = @ReportId
And (p.relationship is null or p.relationship = 'prime')
And s.StateGroupId = 3
And r.TransactionType in (3,5,7)

--Return Data
Select * from #report
Order By  ReportDetailId

drop table #report

End
GO
/****** Object:  StoredProcedure [dbo].[stp_FeeDistributionMatrixT]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_FeeDistributionMatrixT 1,null,null,null,null,null,null,13

CREATE PROCEDURE [dbo].[stp_FeeDistributionMatrixT] 
	  @CompanyId int = 0,
	  @StateId int = NULL,
	  @AgencyId int = NULL,     
	  @date1 datetime = NULL, 
      @date2 datetime = NULL,
	  @CreateStartDate datetime = NULL, 
      @CreateEndDate datetime = NULL,
	  @ClientStatus int = null
AS
BEGIN

SET NOCOUNT ON

DECLARE @MinPaymentId int

/*Select top 1 @MinPaymentId = RegisterPaymentId From tblCommPay Order by CommPayId asc
IF @MinPaymentId Is Null SELECT @MinPaymentId = 0*/

Select @MinPaymentId = 11730
Select @date1 = IsNull(@date1, Cast('1/1/1900' AS DATETIME))
Select @date2 = IsNull(@date2, Cast('12/31/2999' AS DATETIME))
--UG 7/22/08
Select @CreateStartDate = IsNull(@CreateStartDate, Cast('1/1/1900' AS DATETIME))
Select @CreateEndDate = IsNull(@CreateEndDate, Cast('12/31/2999' AS DATETIME))


DECLARE  @tempResults  table (
	ClientId int,
	ClientName varchar(255),
	Created DateTime,
	StatusName varchar(50),
	ClientStatusID int,
	SSN varchar(50),
	Active bit,
	SAId int,
	SA varchar(255),
	AgencyId int,
	Agency varchar(255),
	ClientAddress varchar(max),
	Street  varchar(255),
	Street2 varchar(255),
	City varchar(50),
	StateId int,
	[State] varchar(4),
	ZipCode varchar(50),
	FeeTypeId int,
	FeeType varchar(255),
	PaidAmount money,
	ExternalRefundAmount money,
	ExternalReimbursedAmount money
)

INSERT INTO @tempResults (ClientId, ClientName, Created, StatusName, ClientStatusID,SSN, Active, SAId, SA, AgencyId, Agency, ClientAddress, Street, Street2, City, StateId, [State], ZipCode, FeeTypeId, FeeType, PaidAmount, ExternalRefundAmount, ExternalReimbursedAmount)
SELECT 
			c.ClientId AS [ClientId],
            p.[firstname] + ' ' +  p.[lastname] AS [ClientName],
			c.Created AS [Created],
			isnull(u.[Name], 'Not Provided') AS [StatusName],
			c.currentclientstatusid as [ClientStatusID],
			p.SSN AS [SSN],
			case when 
				c.currentclientstatusid not in (15,17,18) 
			then 1 
			else 0 
			end AS [Active],
			co.[CompanyId] AS [SAId],
			co.[Name] AS [SA],
			a.[AgencyId] AS [AgencyId],
            a.[Name] AS [Agency],
			CASE WHEN p.Street Is Null	THEN ''	ELSE p.Street	+ ' ' End +
			CASE WHEN p.Street2	Is Null THEN '' ELSE p.Street2  + ' ' End +
			CASE WHEN p.City Is Null	THEN ''	ELSE p.City		+ ' ' End + 
			CASE WHEN s.[Abbreviation] Is Null THEN '' ELSE s.[Abbreviation] + ' ' End +
			CASE WHEN p.ZipCode Is Null THEN '' ELSE p.ZipCode  + ' ' End AS [ClientAddress],
			p.Street AS [Street],
			p.Street2 AS [Street2],
			p.City AS [City],
			s.[StateId] AS [StateId],
			s.[Abbreviation] AS [State],
			p.ZipCode AS [ZipCode],
			r.[FeeTypeId] AS [FeeTypeId],
			r.[FeeType] AS [FeeType],
			r.[Amount] AS [PaidAmount],
			isnull(e.ExternalRefundAmount,0) AS [ExternalRefundAmount], 
			isnull(e.ExternalReimbursedAmount,0) AS [ExternalReimbursedAmount]
FROM
tblClient c 
INNER JOIN tblperson p ON p.ClientId = c.ClientId
INNER JOIN tblCompany co ON co.CompanyID = c.CompanyID
INNER JOIN tblAgency a ON a.AgencyID = c.AgencyID
LEFT JOIN tblClientStatus u ON c.CurrentClientStatusId = u.ClientStatusId
LEFT JOIN tblState s ON p.StateID = s.StateId
LEFT JOIN
(			SELECT reg.clientid AS [ClientId],
			reg.EntryTypeId AS [FeeTypeId],
            et.DisplayName AS [FeeType],
			--0 AS [BeforeCommPay],
            SUM(rpmt.Amount) AS [Amount]
            FROM tblregisterpayment rpmt 
            INNER JOIN tblRegister reg ON reg.RegisterId = rpmt.FeeRegisterId
            INNER JOIN tblEntryType et ON et.EntryTypeId = reg.EntryTypeId
			WHERE rpmt.PaymentDate between @date1 and @date2
			AND rpmt.Voided = 0
			AND rpmt.Bounced = 0
			AND rpmt.Amount >= 0
			GROUP BY reg.clientid, reg.EntryTypeId, et.DisplayName
) r on r.ClientId = c.clientId
LEFT JOIN 
		 ( Select ClientId, Sum(RefundAmount) AS [ExternalRefundAmount], 
		   Sum(PositiveBalReimb) AS [ExternalReimbursedAmount]
		   From tblExternalReportedRefund
		   Group By ClientId) e on e.ClientId = c.ClientId
WHERE
p.Relationship = 'Prime'
AND (@CompanyId IS NULL OR (co.CompanyId = @CompanyId))
AND (@StateId IS NULL OR (s.StateId = @StateId))
AND (@AgencyId IS NULL OR (a.AgencyId = @AgencyId))

SELECT 	t.ClientId AS [ClientId],
		t.ClientName AS [ClientName],
		t.Created AS [Created],
		t.StatusName AS [Status],
		t.ClientStatusID,
		t.SSN AS [SSN],
		t.Active As [Active],
		t.SAId AS [SAId],
		t.SA AS [SA],
		t.AgencyId AS [AgencyId],
		t.Agency AS [Agency],
		t.ClientAddress AS [ClientAddress],
		t.Street AS [Street],
		t.Street2 AS [Street2],
		t.City AS [City],
		t.StateId AS [StateId],
		t.[State] AS [State],
		t.ZipCode AS [ZipCode],
		t.FeeTypeId AS [FeeTypeId],
		t.FeeType AS [FeeType],
		t.PaidAmount AS [TotalPaid],
		r.PaidTo AS [PaidTo],
		r.Amount AS [Amount Paid],
		t.ExternalRefundAmount AS [ExternalRefundAmount], 
		t.ExternalReimbursedAmount AS [ExternalReimbursedAmount]
FROM @tempResults t
LEFT JOIN
(			SELECT reg.clientid AS [ClientId],
			reg.EntryTypeId AS [FeeTypeId],
			cs.Abbreviation AS [PaidTo],
            SUM(cp.Amount) AS [Amount]
            FROM tblCommPay cp 
			INNER JOIN vwCommStruct cs ON cs.CommStructID = cp.CommStructID
            INNER JOIN tblregisterpayment rpmt ON rpmt.registerpaymentid = cp.RegisterPaymentID
            INNER JOIN tblRegister reg ON reg.RegisterId = rpmt.FeeRegisterId
            INNER JOIN tblEntryType et ON et.EntryTypeId = reg.EntryTypeId
			WHERE rpmt.PaymentDate between @date1 and @date2
			AND rpmt.Voided = 0
			AND rpmt.Bounced = 0
			AND rpmt.Amount >= 0
			AND rpmt.RegisterPaymentid >= @MinPaymentId
			GROUP BY reg.clientid, reg.EntryTypeId, cs.Abbreviation
			UNION
			SELECT reg.clientid AS [ClientId],
			reg.EntryTypeId AS [FeeTypeId],
			'Remains in Trust' AS [PaidTo],
            SUM(rpmt.Amount) AS [Amount]
            FROM tblregisterpayment rpmt 
			LEFT JOIN tblCommPay cp ON rpmt.registerpaymentid = cp.RegisterPaymentID
            INNER JOIN tblRegister reg ON reg.RegisterId = rpmt.FeeRegisterId
            INNER JOIN tblEntryType et ON et.EntryTypeId = reg.EntryTypeId
			WHERE rpmt.PaymentDate between @date1 and @date2
			AND rpmt.Voided = 0
			AND rpmt.Bounced = 0
			AND rpmt.Amount >= 0
			AND rpmt.RegisterPaymentId >= @MinPaymentId
			AND cp.CommPayId IS NULL
			GROUP BY reg.clientid, reg.EntryTypeId
			UNION
			SELECT reg.clientid AS [ClientId],
			reg.EntryTypeId AS [FeeTypeId],
			'Before 6/5/2006' AS [PaidTo],
            Sum(rpmt.Amount) AS [Amount]
            FROM tblregisterpayment rpmt 
            INNER JOIN tblRegister reg ON reg.RegisterId = rpmt.FeeRegisterId
            INNER JOIN tblEntryType et ON et.EntryTypeId = reg.EntryTypeId
			WHERE rpmt.PaymentDate between @date1 and @date2
			AND rpmt.Voided = 0
			AND rpmt.Bounced = 0
			AND rpmt.Amount >= 0
			AND rpmt.RegisterPaymentId < @MinPaymentId
			GROUP BY reg.clientid, reg.EntryTypeId
) r ON (r.ClientId = t.ClientId AND r.FeeTypeId = t.FeeTypeId) 
WHERE t.created between @CreateStartDate and @CreateEndDate
AND (@ClientStatus IS NULL OR (t.ClientStatusId = @ClientStatus))
Order By 
	t.[State],
	t.[SA],
	t.[Agency],
	t.[ClientName], 
	t.[FeeType]

END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTransactionByType_Debits]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetTransactionByType_Debits]
	(
		@clientId int
	)

as

SELECT
	tblRegister.*,
	tblEntryType.[Name] as EntryTypeName
FROM
	tblRegister INNER JOIN
	tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
WHERE
	NOT tblEntryType.Fee=1 AND
	tblRegister.Amount < 0 AND
	tblRegister.ClientId=@clientId and
	tblRegister.AdjustedRegisterID is null
ORDER BY
	tblRegister.TransactionDate ASC
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationSiblingDashBoardSummary]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Retrieves dashboard items for sub-criteria filters. 
				 All sub-criteria filter have theri filter type set to 'stem'
				 NOTE: All sub-criteria filters created through criteria builder have their ParentFilterId and GroupBy fields set to null

*/
CREATE PROCEDURE [dbo].[stp_NegotiationSiblingDashBoardSummary]
@ParentFilterId int,
@FilterId int,
@GridFilterClause varchar(max) = null

AS

SET NOCOUNT ON

if @FilterId = '0'
BEGIN
	SET @FilterId = null
END

if @GridFilterClause = ''
BEGIN
	SET @GridFilterClause = null
END

DECLARE @EntityId int
DECLARE @FilterClause varchar(max)
DECLARE @ParentFilterClause varchar(max)
DECLARE @LocalFilterId int
DECLARE @PreviousFilterId int
DECLARE @tblAggregate TABLE (FilterClause varchar(max))
DECLARE @tblDashBoard TABLE (FilterId int, ClientCount int,
						   AccountCount int, 
						   StateCount int,
						   ZipCodeCount int,
						   CreditorCount int,
				           StatusCount int,
						   TotalSDAAmount money)

DECLARE @tblFilterList TABLE(FilterId int, 
                               filterClause varchar(max), 
                               isRead int)

SET @FilterClause = null
SET @LocalFilterId = null
SET @PreviousFilterId = null
SET @FilterClause = null


INSERT INTO @tblAggregate
   exec stp_NegotiationSiblingBaseFilterSelect @ParentFilterId


SELECT @ParentFilterClause = FilterClause from @tblAggregate 

SET  @GridFilterClause = isnull(@GridFilterClause,'1=1')
SET  @ParentFilterClause = isnull(@ParentFilterClause,'1=1')




if not @GridFilterClause = '1=1' And @FilterId is Null
  BEGIN

			 INSERT INTO @tblDashBoard
				EXEC 
				  ('
				   SELECT 0 as MasterListId,Count(Distinct ClientId) As ClientCount, 
				   Count(AccountId) as AccountCount, 
				   Count(Distinct ApplicantState) as StateCount, 
				   Count(Distinct ApplicantZipCode) as ZipCodeCount,
				   Count(Distinct CurrentCreditor) as CreditorCount,
				   Count(Distinct AccountStatus) as StatusCount,
				   Sum(FundsAvailable) as FundsAvailable   
				   FROM dbo.vwNegotiationDistributionSource
				   WHERE 1=1 AND  ( ' + @GridFilterClause + ' ) AND (' + @ParentFilterClause + ') ' 
				  )  		
  END
else if @FilterId is null 
  BEGIN
   INSERT INTO @tblFilterList
    SELECT FilterId,FilterClause,'0' FROM tblNegotiationFilters WHERE FilterId = isnull(@FilterId,FilterId) and FilterType = 'stem' and ParentFilterId is null
	SELECT TOP 1 @FilterClause = filterClause, @LocalFilterId = FilterId FROM @tblFilterList WHERE isRead = 0

		WHILE @LocalFilterId > 0
		 BEGIN
			 SET @PreviousFilterId = @LocalFilterId
			 
			 INSERT INTO @tblDashBoard
				EXEC 
				  ('
				   SELECT ' + @LocalFilterId + ' as MasterListId,Count(Distinct ClientId) As ClientCount, 
				   Count(AccountId) as AccountCount, 
				   Count(Distinct ApplicantState) as StateCount, 
				   Count(Distinct ApplicantZipCode) as ZipCodeCount,
				   Count(Distinct CurrentCreditor) as CreditorCount,
				   Count(Distinct AccountStatus) as StatusCount,
				   Sum(FundsAvailable) as FundsAvailable   
				   FROM dbo.vwNegotiationDistributionSource
				   WHERE 1=1 AND  ( ' + @FilterClause + ' ) AND (' + @ParentFilterClause + ') ' 
				  )  		

			 UPDATE @tblFilterList SET isRead = 1 WHERE FilterId = @LocalFilterId    
			 SELECT TOP 1 @FilterClause = FilterClause, @LocalFilterId = FilterId FROM @tblFilterList WHERE isRead = 0
			 if @PreviousFilterId = @LocalFilterId
			 BEGIN
			   SET @LocalFilterId = 0
			 END
		 END   
  END
else
 BEGIN
     SELECT @FilterClause = FilterClause FROM tblNegotiationFilters WHERE FilterId = @FilterId

	 INSERT INTO @tblDashBoard
		EXEC 
		  ('
		   SELECT ' + @FilterId + ' as MasterListId,Count(Distinct ClientId) As ClientCount, 
		   Count(AccountId) as AccountCount, 
		   Count(Distinct ApplicantState) as StateCount, 
		   Count(Distinct ApplicantZipCode) as ZipCodeCount,
		   Count(Distinct CurrentCreditor) as CreditorCount,
		   Count(Distinct AccountStatus) as StatusCount,
		   Sum(FundsAvailable) as FundsAvailable		   
		   FROM dbo.vwNegotiationDistributionSource
		   WHERE 1=1 AND  (' +  @FilterClause + ' ) AND (' + @ParentFilterClause + ') ' 
		  )  		   
 END


SELECT * FROM @tblDashBoard
GO
/****** Object:  StoredProcedure [dbo].[stp_PrepForStatements]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Jim Hope>
-- Create date: <10/28/2009>
-- Description:	<If a client is marked as active and not resolved this routine resolves the client>
-- =============================================
CREATE PROCEDURE [dbo].[stp_PrepForStatements]
AS
BEGIN
	SET NOCOUNT ON;
declare @ClientID int
declare @Created smalldatetime

declare c_cursor cursor for
 select clientid from tblclient where currentclientstatusid = 14 and vwuwresolved is null

FETCH NEXT FROM c_cursor INTO @ClientID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		set @Created = (select top 1 Created from tblroadmap where clientstatusid = 14 AND clientid = @ClientID ORDER BY Created)
		if @Created IS NOT NULL
			BEGIN
				update tblclient set vwuwresolved = @Created, vwuwresolvedby = 24 WHERE clientid = @ClientID
			END
		else
			BEGIN
				update tblclient set vwuwresolved = getdate(), vwuwresolvedby = 24 WHERE clientid = @ClientID
			END
FETCH NEXT FROM c_cursor INTO @ClientID
	END

close c_cursor 
deallocate c_cursor 
END
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportPersonPhoneInsert]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ImportPersonPhoneInsert]
@PhoneTypeId int,
@AreaCode varchar(50),
@Number varchar(50),
@Extension varchar(50) = null,
@UserId int,
@PersonId int
AS
BEGIN
declare @phoneId int

Insert Into tblPhone(
PhoneTypeID, AreaCode, Number, Extension,
Created, CreatedBy, LastModified, LastModifiedBy)
Values (
@PhoneTypeId, @AreaCode, @Number, @Extension,
GetDate(), @UserId, GetDate(), @UserId) 

Select @phoneId = SCOPE_IDENTITY()

Insert into tblPersonPhone(PersonID, PhoneID, Created, CreatedBy, LastModified, LastModifiedBy)
Values(@PersonId, @phoneId, GetDate(), @UserId, GetDate(), @UserId)

Select @phoneid

END
GO
/****** Object:  StoredProcedure [dbo].[stp_FeeAnalysisByAgencyMatrix]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_FeeAnalysisByAgencyMatrix]
@CommRecId int = NULL
AS
BEGIN
select
	q1.agencyid as [AgencyId],
	isnull(a.[name], 'No Agency') as [AgencyName],
	isnull(q3.commrecid, -1) as [RecipientId],
	isnull(q3.display, 'No Recipient') as [Recipient],
	q1.entrytypeid as [FeeId],
	q1.DisplayName as [Fee],
	isnull(q1.Assessed,0) as [Assessed],
	isnull(q2.Paid,0) as [Paid],
	isnull(q1.Assessed,0) + isnull(q2.Paid,0) as [Balance]
from	
(select c.agencyId, r.entrytypeid, e.DisplayName, sum(r.amount) AS [Assessed]
from tblregister r
inner join tblClient c on c.clientid = r.clientid
inner join tblEntryType e on (r.entrytypeid = e.entrytypeid)
where c.currentclientstatusid not in (15,17,18)
and r.void is null
and r.bounce is null
and e.fee = 1
group By c.agencyId, r.entrytypeid, e.DisplayName) q1
left join 
(
select c.agencyId, r.entrytypeid, sum(p.amount) AS [Paid]
from tblregister r
inner join tblClient c on c.clientid = r.clientid
inner join tblRegisterPayment p on p.feeregisterid = r.registerid
where c.currentclientstatusid not in (15,17,18)
and p.voided = 0
and p.bounced = 0
and p.Amount >= 0
group By c.agencyId, r.entrytypeid
) q2 on (q1.agencyId = q2.agencyId and q1.entrytypeid = q2.entrytypeid)
left join
(
select  distinct st.commrecid,
		f.entrytypeId,
		cs.agencyid,
		cr.Display
from tblCommFee f
inner join tblCommStruct st on (st.commstructid = f.commstructid)
inner join tblCommScen cs on (cs.commscenid = st.commscenid)
Left join tblCommRec cr on (st.commrecid = cr.commrecid)
) q3 on (q1.agencyId = q3.agencyId and q1.entrytypeid = q3.entrytypeid)
Left join tblAgency a on (q1.agencyid = a.agencyid)
Where @CommRecId IS NULL OR (isnull(q3.commrecid,-1) = @CommRecId)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetUsers]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetUsers]
	(
		@returntop varchar (50) = '100 percent',
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as

if not @where=''
	set @where = ' WHERE ' + @where

if not @orderby=''
	set @orderby = ' ORDER BY ' + @orderby

exec
(
	'select top ' + @returntop + '
		tbluser.*,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname,
		tblusertype.name as usertypename,
		tblusergroup.name as usergroupname
	from
		tbluser left outer join
		tbluser as tblcreatedby on tbluser.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on tbluser.lastmodifiedby = tbllastmodifiedby.userid left outer join
		tblusertype on tbluser.usertypeid=tblusertype.usertypeid left outer join
		tblusergroup on tbluser.usergroupid=tblusergroup.usergroupid
	' + @where + ' ' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationStemClauseSelect]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_NegotiationStemClauseSelect]
@FilterId int 

AS
SET NOCOUNT ON

DECLARE @filterClause varchar(max)
DECLARE @SubCriteriaId int
DECLARE @LocalParentFilterId int
DECLARE @ParentFilterId int
DECLARE @LocalFilterId int
DECLARE @tblFilterIdList TABLE (FilterId int, ParentFilterId int)

SET @LocalFilterId = null
SET @filterClause = null

SELECT @LocalFilterId=FilterId, @ParentFilterId = ParentFilterId, @filterClause = filterClause FROM tblNegotiationFilters WHERE FilterId = @FilterId and Filtertype = 'stem'
WHILE not @ParentFilterId  is null
  BEGIN
    SET @LocalParentFilterId = @ParentFilterId
    INSERT INTO @tblFilterIdList (FilterId,ParentFilterId) VALUES (@LocalFilterId, @ParentFilterId)
	SELECT @LocalFilterId=FilterId, @ParentFilterId = ParentFilterId, @filterClause = filterClause FROM tblNegotiationFilters WHERE FilterId = @ParentFilterId and Filtertype = 'stem'   
    if (@ParentFilterId is null)
       BEGIN
		INSERT INTO @tblFilterIdList (FilterId,ParentFilterId) VALUES (@LocalFilterId, @ParentFilterId)        
       END    
    else if (@LocalParentFilterId = @ParentFilterId)
       BEGIN
           SET @ParentFilterId =  null
       END
  END

 SELECT @SubCriteriaId = isnull(FilterId,0) FROM @tblFilterIdList WHERE ParentFilterid is Null

return @SubCriteriaId
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetAgencyBatches_all]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetAgencyBatches_all]
	(
		@date1 datetime=null,
		@date2 datetime=null,
		@commrecid nvarchar(50),
		@range varchar(50)=''
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

exec ('
SELECT ' + @range + '
	batch.CommBatchID,
	batch.BatchDate,
	sum(batchtransfer.Amount) as Amount
FROM
	tblCommBatch batch inner join
	tblCommBatchTransfer batchtransfer on batch.CommBatchID = batchtransfer.CommBatchID inner join
	tblCommRec commrec on batchtransfer.CommRecID = commrec.CommRecID
WHERE
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) and
	batchtransfer.CommRecID in (' + @CommRecID + ')
GROUP BY
	batch.CommBatchID,
	batch.BatchDate
ORDER BY
	batch.BatchDate DESC
')
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationAssignmentHeaderInsert]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
 Author: Bereket S. Data>
 Description: This stored Procedure delets Negotiation filter
*/

CREATE PROCEDURE [dbo].[stp_NegotiationAssignmentHeaderInsert]
@HeaderName nvarchar(100),
@SQLField nvarchar(250),
@SQLAggr nvarchar(50),
@Aggregation nvarchar(50),
@Format char(1),
@OrderNum int,
@DefaultGroup bit,
@CanGroup bit,
@HeaderType varchar(150)

AS
SET NOCOUNT ON

INSERT INTO tblNegotiationAssignment
(
HeaderName,
[SQL],
SQLAggregation,
Aggregation,
Format,
[Order],
[Default],
CanGroup
)
VALUES
(
@HeaderName,
@SQLField,
@SQLAggr,
@Aggregation,
@Format,
@OrderNum,
@DefaultGroup,
@CanGroup
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationChildFilterSelect]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Retrieves sub-criteria filter for a give master criteria filter
*/

CREATE PROCEDURE [dbo].[stp_NegotiationChildFilterSelect]
@ParentFilterId int,
@RetrieveToDelete int = 0  -- This flag is used to retrieve sibling based on action type to be performed.
AS

if @RetrieveToDelete = '0'
BEGIN 
 SELECT f.FilterId,f.Description, f.FilterClause, f.FilterText,f.FilterType
 FROM tblNegotiationFilters f
 WHERE ParentFilterId = @ParentFilterId and FilterType = 'stem'
 ORDER BY f.[Description]
END
else
BEGIN 
 SELECT f.FilterId,f.Description, f.FilterClause, f.FilterText,f.FilterType
 FROM tblNegotiationFilters f
 WHERE ParentFilterId = @ParentFilterId
 ORDER BY f.[Description]
END
GO
/****** Object:  StoredProcedure [dbo].[get_ValidCreditorsList]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <00 - 06 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : ValidCreditorsList
				  
*/
CREATE PROCEDURE [dbo].[get_ValidCreditorsList]
(
	@clientId int,
	@RowNumber int=null, 
	@AccountId int=null,
	@CreditorInstanceID int=null
)

AS

BEGIN

CREATE TABLE #CreditorList
(
ROWNumber int identity(1,1),
AccountId int,
CreditorInstanceID int,
CreditorName varchar(100)
)

INSERT #CreditorList

select distinct
	a.AccountId,
	cci.creditorinstanceid,
	cc.name+'-'+RIGHT(cci.accountnumber,4) as CreditorName
from
	tblaccount a inner join
	tblcreditorinstance oci ON a.originalcreditorinstanceid = oci.creditorinstanceid inner join
	tblcreditor oc ON oci.creditorid = oc.creditorid inner join
	tblcreditorinstance cci ON a.currentcreditorinstanceid = cci.creditorinstanceid inner join
	tblcreditor cc ON cci.creditorid = cc.creditorid 
where
	clientid = @clientId
	

If @AccountId is not null

	SELECT * from #CreditorList where rownumber=ISNULL(@rownumber,rownumber) and AccountId=@AccountId

Else
	SELECT * from #CreditorList where rownumber=ISNULL(@rownumber,rownumber)

DROP TABLE #CreditorList

END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationClientSearches]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NegotiationClientSearches]
	(
		@ids nvarchar(MAX) = null,
		@returntop varchar (50) = '100 percent',
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as

declare @vtblResults table
(
	ClientID int,
	[Type] varchar(500),
	[Name] varchar(500),
	AccountNumber varchar(500),
	SSN varchar(500),
	[Address] varchar(8000),
	ContactType varchar(8000),
	ContactNumber varchar(8000)
)

declare @vtblIDs table
(
	ClientID int
)

INSERT INTO
	@vtblResults
EXEC
(
	'SELECT TOP ' + @returntop + '
		ClientID,
		[Type],
		[Name],
		AccountNumber,
		SSN,
		[Address],
		ContactType,
		ContactNumber
	FROM
		tblClientSearch
	' + @where + ' ' + @orderby
)

if @ids is not null
begin
	declare @filterclause nvarchar(MAX)

	declare @fcTable table
	(
		FilterClause nvarchar(MAX)
	)

	INSERT INTO
		@fcTable
	EXEC
	(
		'declare @fc nvarchar(MAX)

		SELECT
			@fc = (CASE WHEN len(rtrim(ltrim(AggregateClause))) > 0 THEN coalesce(@fc + '' or '', '''') + ''('' + cast(AggregateClause as nvarchar(MAX)) + '')'' ELSE @fc END)
		FROM
			tblNegotiationFilters
		WHERE
			FilterID in (' + @ids + ')

		SELECT @fc'
	)

	SELECT TOP 1 @filterclause = FilterClause FROM @fcTable

	if @filterclause is null or len(@filterclause) = 0
	begin
		set @filterclause = '1 = 0'
	end

	INSERT INTO
		@vtblIDs
	EXEC 
	('
		SELECT
			DISTINCT ClientID
		FROM
			vwNegotiationDistributionSource
		WHERE
			' + @filterclause
	)

	DELETE @vtblResults WHERE ClientID not in (SELECT ClientID FROM @vtblIDs)
end


SELECT
	v.ClientID,
	cst.name as [ClientStatus],
	v.[Type],
	v.[Name],
	v.AccountNumber,
	SSN,
	[Address],
	ContactType,
	ContactNumber
FROM
	@vtblResults as v inner join tblclient as c on c.clientid=v.clientid inner join
	tblclientstatus as cst on c.currentclientstatusid=cst.clientstatusid
GO
/****** Object:  StoredProcedure [dbo].[stp_LexxCMS_client_getContacts]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LexxCMS_client_getContacts]
(
@personid int
)
as
BEGIN
	select 
	pp.PhoneID
	,pt.phonetypeid
	, pt.name 
	,areacode
	,number
	,extension 
	from tblPersonPhone pp inner join tblphone p on pp.phoneid = p.phoneid inner join tblPhoneType pt on pt.phonetypeid = p.phonetypeid
	where pp.personid = @personid
END

GRANT EXEC ON stp_LexxCMS_client_getContacts TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[wstp_UpdateWDeposits]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Modified date: 07/01/2009
-- Description:	Warehouse update of Deposits
-- =============================================
CREATE PROCEDURE [dbo].[wstp_UpdateWDeposits] 
	AS
BEGIN

	SET NOCOUNT ON;

/*
This is the update/insert process for tblDeposits in the
LexxiomWarehouse database
Created by Jim Hope 12/05/2008
Updated by Jim Hope 06/30/2009
*/

declare @RegisterID int
declare @CompanyID int
declare @Company varchar(150)
declare @AgencyID int
declare @Agency varchar(150)
declare @ClientName varchar(250)
declare @DepositDate datetime
declare @Initialdraftdate datetime
declare @InitialDraftYN bit
declare @InitialDraftAmount money
declare @StateChanged datetime
declare @State varchar(50)
declare @BounceReason varchar(200)
declare @EntryTypeID int
declare @EntryType varchar(150)
declare @DepositAmount money
declare @RowAdded datetime
declare @Yesterday smalldatetime
declare @NewDay varchar(20)
declare @ClientID int
declare @bounce smalldatetime
declare @void smalldatetime
declare @Exists int

set @Exists = -1
set @yesterday = dateadd(day, -1, getdate())
set @NewDay = cast(datepart(month, @yesterday) as varchar(2)) + '/' + cast(datepart(day, @yesterday) as varchar(2)) + '/' + cast(datepart(year, @yesterday) as varchar(4)) + ' 00:00:000'
set @yesterday = @newday

--Get the client ID, bounced or void for the cursor
declare c_ClientID cursor for
select r.clientid, r.bounce, r.void
from [DMS].[dbo].[tblregister] as r
join [DMS].[dbo].[tblclient] as c on c.clientid = r.clientid
join [DMS].[dbo].[tblagency] as a on a.agencyid = c.agencyid
join [DMS].[dbo].[tblcompany] as comp on comp.companyid = c.companyid
join [DMS].[dbo].[tblentrytype] as e on e.entrytypeid = r.entrytypeid
join [DMS].[dbo].[tblcompany] as co on co.companyid = c.companyid
join [DMS].[dbo].[tblperson] as p on p.clientid = c.clientid
      and p.relationship = 'Prime'
left join [DMS].[dbo].[tblbouncedreasons] as br on br.bouncedid = r.bouncedreason
where (r.entrytypeid in (3, 20, 27, 29) 
or r.entrytypeid between 7 and 15)
and (r.transactiondate = @yesterday
or r.Bounce >= @yesterday
or r.void >= @yesterday)

--loop through the clients and update the ones in the table
--already and insert ones that are not in the table
open c_ClientID

fetch next from c_ClientID into @ClientID, @bounce, @void
while @@fetch_status = 0
	--Insert/Update routines
	begin
		 select @Exists = clientid from [LexxiomWarehouse].[dbo].[tbldeposits] where clientid = @ClientID
			if @Exists > 1
				begin
					if @bounce > '01/01/1900'
						begin
							update [LexxiomWarehouse].[dbo].[tblDeposits] set [StateChanged] = @bounce, [State] = 'Bounced' where clientid = @ClientID
						end
					if @Void > '01/01/1900'
						begin
							update  [LexxiomWarehouse].[dbo].[tblDeposits] set [StateChanged] = @void, [State] = 'Void' where clientid = @ClientID
						end
			end
			if @Exists <= 0 
				begin
					select @RegisterID = r.registerid,
					@ClientID = c.clientid,
					@CompanyID = c.companyid,
					@Company = comp.name,
					@AgencyID = a.agencyid,
					@Agency = a.name,
					@ClientName = p.firstname + ' ' + p.lastname,
					@DepositDate = convert(varchar, r.transactiondate,101),
					@InitialDraftDate = c.initialdraftdate,
					@InitialDraftYN = r.initialdraftyn,
					@InitialDraftAmount = c.initialdraftamount,
					@StateChanged = case When r.void is not null then r.void else (case when  r.bounce is not null then r.bounce end) end,
					@State = case when r.void is not null then 'Void' else (case when r.bounce is not null then 'Bounced' end) end,
					@BounceReason = br.bounceddescription,
					@EntryTypeID = r.entrytypeid,
					@EntryType = e.name,
					@DepositAmount = r.amount,
					@RowAdded = getdate()
					from [DMS].[dbo].[tblregister] r
					join [DMS].[dbo].[tblclient] c on c.clientid = r.clientid
					join [DMS].[dbo].[tblagency] a on a.agencyid = c.agencyid
					join [DMS].[dbo].[tblcompany] comp on comp.companyid = c.companyid
					join [DMS].[dbo].[tblentrytype] e on e.entrytypeid = r.entrytypeid
					join [DMS].[dbo].[tblcompany] co on co.companyid = c.companyid
					join [DMS].[dbo].[tblperson] p on p.clientid = c.clientid
						  and p.relationship = 'Prime'
					left join [DMS].[dbo].[tblbouncedreasons] br on br.bouncedid = r.bouncedreason
					where (r.entrytypeid in (3, 20, 27, 29) 
					or r.entrytypeid between 7 and 15)
					and (r.transactiondate = @yesterday
					or r.Bounce >= @yesterday
					or r.void >= @yesterday)

					Insert into [LexxiomWarehouse].[dbo].[tblDeposits](
						RegisterID,
						ClientID,
						CompanyID,
						Company,
						AgencyID,
						Agency,
						ClientName,
						DepositDate,
						InitialDraftDate,
						InitialDraftYN,
						InitialDraftAmount,
						StateChanged,
						[State],
						BounceReason,
						EntryTypeID,
						EntryType,
						DepositAmount,
						RowAdded)
						VALUES(
						@RegisterID, 
						@ClientID,
						@CompanyID, 
						@Company,
						@AgencyID, 
						@Agency,
						@ClientName,
						@DepositDate,
						@Initialdraftdate,
						@InitialDraftYN,
						@InitialDraftAmount, 
						@StateChanged,
						@State,
						@BounceReason,
						@EntryTypeID, 
						@EntryType,
						@DepositAmount, 
						@RowAdded)
				end
		set @Exists = -1
fetch next from c_ClientID into @ClientID, @bounce, @void
	end
close c_ClientID
deallocate c_ClientID
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GlobalCommission_SettFee]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GlobalCommission_SettFee]
(
	@startdate datetime,
	@enddate datetime
)

AS

if @startdate is null
begin
	set @startdate = dateadd(day, 10, dateadd(day, -day(getdate()), dateadd(month, -1, getdate())))
end

if @enddate is null
begin
	set @enddate = dateadd(month, 1, @startdate)
end

CREATE TABLE #globalComm (
	clientid int,
	AcctNo int,
	clientName nvarchar(255),
	start datetime,
	RetFees decimal(18,2),
	BegBal decimal(18,2),
	NewTrans decimal(18,2),
	EndBal decimal(18,2),
	PayRate decimal(18,2),
	repComm decimal(18,2),
	agencyid int,
	status int
)

INSERT INTO #globalComm(	
	clientid,
	AcctNo,
	ClientName,
	start,
	agencyid,
	status
)

SELECT	c.clientid,
	c.accountnumber,
	p.firstname + ' '+ p.lastname,
	c.created,
	c.agencyid,
	c.currentclientstatusid
FROM tblClient c
INNER JOIN tblPerson p ON c.primarypersonid = p.personid

UPDATE #globalComm 
SET 
	RetFees = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 4 AND r.clientid = #globalComm.clientid AND (bounce is null and void is null)),0),
	
	BegBal = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 4 AND r.clientid = #globalComm.clientid AND (bounce is null and void is null)),0) -  -- retainer fees assessed
	isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.entrytypeid = 4 and not (bounced =1 or voided =1) and rp.paymentdate < @startdate),0), -- retainer payments
	
	NewTrans = ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.entrytypeid = 4 and not (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0),

	EndBal =
		(isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 4 AND r.clientid = #globalComm.clientid AND (bounce is null and void is null)),0) 
			- isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.entrytypeid = 4 and not (bounced =1 or voided =1) and rp.paymentdate < @startdate),0))
				- (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.entrytypeid = 4 and not (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)),
	PayRate = .25,
	repComm = (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.entrytypeid = 4 and not (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)) * .5

SELECT	AcctNo,
		ClientName,
		convert(nvarchar,start,110) as [Start Date],
		NewTrans,
		PayRate,
		repComm
FROM	#globalComm 
WHERE 	agencyid = 812 
AND NOT	status IN (15,17,18)
AND NewTrans > 0
ORDER BY AcctNo

DROP TABLE #globalComm
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterAggregateUpdate]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Aggregates filter clause for a given  criteria filter
*/

CREATE PROCEDURE [dbo].[stp_NegotiationFilterAggregateUpdate]
@FilterId int = null
AS
SET NOCOUNT ON

DECLARE @AggregateClause varchar(max)
DECLARE @tblAggregateFilter TABLE (AggregateFilterClause varchar(max))
DECLARE @FilterClause varchar(max)
DECLARE @FilterType varchar(30)
DECLARE @TempEntityId int
DECLARE @ParentFilterId int

SELECT @FilterType = FilterType, @FilterClause= FilterClause, @TempEntityId=ParentFilterId FROM tblNegotiationFilters WHERE FilterId = @FilterId

if (@FilterType = 'stem')
BEGIN  

   if @TempEntityId is null
    BEGIN
       SELECT @TempEntityId = EntityId FROM tblNegotiationFilters WHERE FilterId = @FilterId
    END

  INSERT INTO @tblAggregateFilter
	exec stp_NegotiationSiblingBaseFilterSelect @TempEntityId

  SELECT @AggregateClause = AggregateFilterClause from @tblAggregateFilter 
  
  if len(rtrim(ltrim(@AggregateClause))) > 0
  begin
	SET @FilterClause = @FilterClause + ' AND ' + @AggregateClause
  end
  
  UPDATE tblNegotiationFilters SET AggregateClause = @FilterClause, EntityId = @TempEntityId, ParentFilterId=null WHERE FilterId = @FilterId

END
else
BEGIN
 INSERT INTO  @tblAggregateFilter   
	  exec stp_NegotiationBaseFilterSelect @FilterId    

  SELECT @AggregateClause = AggregateFilterClause from @tblAggregateFilter 	
  UPDATE tblNegotiationFilters SET AggregateClause = @AggregateClause WHERE FilterId = @FilterId
END
GO
/****** Object:  StoredProcedure [dbo].[stp_CheckScan_LoadBankInfo]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_CheckScan_LoadBankInfo]
AS
SELECT     ICLBankID, BankName, ImmediateDestinationRouting, ImmediateDestinationName, ImmediateOriginRouting, ImmediateOriginName, OriginContactPhoneNumber, 
                      OriginContactName, ConnectionString, ftpServer, ftpControlPort, ftpUpload, ftpFolder, ftpUserName, ftpPassword, Passphrase, CreateFile, GPGDir, PublicKeyRing, 
                      PrivateKeyRing, FileLocation, LogPath, LogFile, LastModified, LastModifiedBy, BankClientID, ICLCustomerID, ICLInputFileTransmissionID, 
                      ICLReceiptAckTransmissionID, ICLAdjustmentAckTransmissionID, ICLLocationName, ICLAccountNumber,encrypt,BlackBoxKey,BankPublicKeyName
FROM         tblBank_ICL


GRANT EXEC ON stp_CheckScan_LoadBankInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientsCreatedByMonth]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_ClientsCreatedByMonth]
(
	@companyid int
)
as
begin

declare @mth int, @yr int, @min datetime

set @mth = month(dateadd(m,-4,getdate()))
set @yr = year(dateadd(m,-4,getdate()))
set @min = cast(cast(@mth as varchar(2)) + '/1/' + cast(@yr as varchar(4)) as datetime)

select month(created) [mth], year(created) [yr], count(*) [cnt]
from tblclient
where created >= @min
and companyid = @companyid
group by month(created), year(created)
order by [yr], [mth] 

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetChargebackBatchedForRegister]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetChargebackBatchedForRegister]
	(
		@registerid int
	)

as

declare @numchargeback int
declare @sumchargeback money


-- find all batched chargeback for this register (as having been paid)
select
	@numchargeback = isnull(count(cb.commchargebackid), 0),
	@sumchargeback = isnull(sum(cb.amount), 0)
from
	tblcommchargeback cb inner join
	tblregisterpayment rp on cb.registerpaymentid = rp.registerpaymentid
where
	rp.feeregisterid = @registerid and
	not cb.commbatchid is null


-- find all batched chargeback for this register (as used for payment)
select
	@numchargeback = @numchargeback + isnull(count(cb.commchargebackid), 0),
	@sumchargeback = @sumchargeback + isnull(sum(cb.amount), 0)
from
	tblcommchargeback cb inner join
	tblregisterpaymentdeposit rpd on cb.registerpaymentid = rpd.registerpaymentid
where
	rpd.depositregisterid = @registerid and
	not cb.commbatchid is null


-- return values
select
	@numchargeback as numchargeback,
	@sumchargeback as sumchargeback
GO
/****** Object:  StoredProcedure [dbo].[stp_FeeAnalysisByAgencyMatrix1]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_FeeAnalysisByAgencyMatrix1]
@CommRecId int = NULL
AS
BEGIN
select
	q1.agencyid as [AgencyId],
	q1.companyid as [Companyid],
	isnull(a.[name], 'No Agency') as [AgencyName],
	isnull(q3.commrecid, -1) as [RecipientId],
	isnull(q3.display, 'No Recipient') as [Recipient],
	q1.entrytypeid as [FeeId],
	q1.DisplayName as [Fee],
	isnull(q1.Assessed,0) as [Assessed],
	isnull(q2.Paid,0) as [Paid],
	isnull(q1.Assessed,0) + isnull(q2.Paid,0) as [Balance]
from	
(select c.agencyId, c.companyid, r.entrytypeid, e.DisplayName, sum(r.amount) AS [Assessed]
from tblregister r
inner join tblClient c on c.clientid = r.clientid
inner join tblEntryType e on (r.entrytypeid = e.entrytypeid)
where c.currentclientstatusid not in (15,17,18)
and r.void is null
and r.bounce is null
and e.fee = 1
group By c.agencyId,  c.companyid, r.entrytypeid, e.DisplayName) q1
left join 
(
select c.agencyId,  c.companyid, r.entrytypeid, sum(p.amount) AS [Paid]
from tblregister r
inner join tblClient c on c.clientid = r.clientid
inner join tblRegisterPayment p on p.feeregisterid = r.registerid
where c.currentclientstatusid not in (15,17,18)
and p.voided = 0
and p.bounced = 0
and p.Amount >= 0
group By c.agencyId,  c.companyid, r.entrytypeid
) q2 on (q1.agencyId = q2.agencyId and q1.companyid =q2.companyid and q1.entrytypeid = q2.entrytypeid)
left join
(
select  distinct st.commrecid,
		f.entrytypeId,
		cs.agencyid,
		st.companyid,
		cr.Display
from tblCommFee f
inner join tblCommStruct st on (st.commstructid = f.commstructid)
inner join tblCommScen cs on (cs.commscenid = st.commscenid)
Left join tblCommRec cr on (st.commrecid = cr.commrecid)
) q3 on (q1.agencyId = q3.agencyId and q1.companyId = q3.companyId and q1.entrytypeid = q3.entrytypeid)
Left join tblAgency a on (q1.agencyid = a.agencyid)
Where @CommRecId IS NULL OR (isnull(q3.commrecid,-1) = @CommRecId)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetRelationsForPhoneCall]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetRelationsForPhoneCall]
	(
		@phonecallid int
	)

as

select 
	phonecallrelationid,
	pc.phonecallid,
	pcr.relationtypeid,
	pcr.relationid,
	rt.name as relationtypename,
	dbo.getentitydisplay(rt.relationtypeid,relationid) as relationname,
	rt.iconurl,
	rt.navigateurl
from
	tblphonecallrelation pcr inner join
	tblphonecall pc on pcr.phonecallid=pc.phonecallid inner join
	tblrelationtype rt on pcr.relationtypeid=rt.relationtypeid
where 
	pc.phonecallid=@phonecallid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTransactionByType_Credits]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetTransactionByType_Credits]
	(
		@clientId int
	)

as

SELECT
	tblRegister.*,
	tblEntryType.[Name] as EntryTypeName
FROM
	tblRegister INNER JOIN
	tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
WHERE
	NOT tblRegister.EntryTypeId=3 AND
	tblRegister.Amount > 0 AND
	tblRegister.ClientId=@clientId and
	tblRegister.AdjustedRegisterID is null
ORDER BY
	tblRegister.TransactionDate ASC
GO
/****** Object:  StoredProcedure [dbo].[stp_Hardship_getHardshipData]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Hardship_getHardshipData]
(
@clientID int
)
as
BEGIN
	SELECT TOP 1 HardshipID, ClientID, ClientAcctNum, HardshipDate, CSR, Married, Single, Divorced, Widowed, NumChildren, NumGrandChildren, MonthlyIncome_Client_Work, 
		  MonthlyIncome_Client_SocialSecurity, MonthlyIncome_Client_Disability, MonthlyIncome_Client_RetirementPension, MonthlyIncome_Client_SelfEmployed, 
		  MonthlyIncome_Client_Unemployed, MonthlyIncome_Client_JobDescription, MonthlyIncome_Client_FullTime, MonthlyIncome_Client_PartTime, 
		  MonthlyIncome_Spouse_Work, MonthlyIncome_Spouse_SocialSecurity, MonthlyIncome_Spouse_Disability, MonthlyIncome_Spouse_RetirementPension, 
		  MonthlyIncome_Spouse_SelfEmployed, MonthlyIncome_Spouse_Unemployed, MonthlyIncome_Spouse_JobDescription, MonthlyIncome_Spouse_FullTime, 
		  MonthlyIncome_Spouse_PartTime, MonthlyIncome_IsRecievingStateAssistance, MonthlyIncome_IsRecievingStateAssistanceDescription, MonthlyExpenses_Rent, 
		  MonthlyExpenses_Mortgage, MonthlyExpenses_2ndMortgage, MonthlyExpenses_2ndMortgageAmt, MonthlyExpenses_HasClientRefinanced, 
		  MonthlyExpenses_EquityValueOfHome, MonthlyExpenses_ReasonForDebt, MonthlyExpenses_DoesClientHaveAssets, MonthlyExpenses_Carpayment, 
		  MonthlyExpenses_CarInsurance, MonthlyExpenses_Utilities, MonthlyExpenses_Groceries, MonthlyExpenses_MedicalInsurance, MonthlyExpenses_Medications, 
		  MonthlyExpenses_Gasoline, MonthlyExpenses_SchoolLoans, MonthlyExpenses_Other, MonthlyExpenses_OtherDescription, MedicalCondtions_Client_Diabetes, 
		  MedicalCondtions_Client_Arthritis, MedicalCondtions_Client_Asthma, MedicalCondtions_Client_HighBloodPressure, MedicalCondtions_Client_HighCholesterol, 
		  MedicalCondtions_Client_Other, MedicalCondtions_Client_NumPillsTaken, MedicalCondtions_Client_History, MedicalCondtions_Spouse_Diabetes, 
		  MedicalCondtions_Spouse_Arthritis, MedicalCondtions_Spouse_Asthma, MedicalCondtions_Spouse_HighBloodPressure, MedicalCondtions_Spouse_HighCholesterol,
		  MedicalCondtions_Spouse_Other, MedicalCondtions_Spouse_NumPillsTaken, MedicalCondtions_Spouse_History, AdditionalInformation
	FROM tblHardshipData AS hd
	WHERE ClientID = @clientid
	ORDER BY HardshipDate desc
END


GRANT EXEC ON stp_Hardship_getHardshipData TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAllCommunicationForUser]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <03 - 15 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Decription  : Get All communication for the user on the home page
					 used IsDeleted
*/
CREATE procedure [dbo].[stp_GetAllCommunicationForUser]
(
	@returntop varchar (50) = '100 percent',
	@userid int,
	@shortvalue int = 150,
	@type varchar(100) = 'type=''note'' OR type=''email'' OR type=''phonecall'''
)

as

--create our results table
create table #tblResults
([type] varchar(20),
[date] datetime,
clientid int,
[client] varchar(255),
message varchar(5000),
shortmessage varchar(5000),
[lastmodifiedby] varchar(255),
[createdby] varchar(255),
fieldid int,
userid int
)

exec
(
'insert into #tblResults
	select
		''note'' as type,
		t.lastmodified as [date],
		tblclient.clientid,
		tblperson.firstname + '' '' + tblperson.lastname as [client],
		t.[value] as message,
		substring(t.[value], 0, ' + @shortvalue + ') + ''...'' as shortmessage,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedby,		
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		t.noteid as fieldid,
		t.createdby
	from
		tblnote t with(nolock) inner join
		tblclient with(nolock) on t.clientid = tblclient.clientid inner join
		tblperson with(nolock) on tblclient.primarypersonid = tblperson.personid left outer join
		tbluser as tblcreatedby with(nolock) on t.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby with(nolock) on t.lastmodifiedby = tbllastmodifiedby.userid left outer join
		tblnoterelation nr with(nolock) on t.noteid=nr.noteid left outer join 
		tblrelationtype rt with(nolock) on rt.relationtypeid = nr.relationtypeid left outer join 
		tblmatter mtr with(nolock) on nr.relationid=mtr.matterid left outer join
		tblclient ct  with(nolock) on nr.relationid=ct.clientid
	where
		isnull(mtr.IsDeleted,0)=0 and t.lastmodifiedby = ' + @userid
)
	
exec
(

'insert into #tblResults
	select
		''email'' as type,
		t.CreatedDate as [date],
		tblclient.clientid,
		tblperson.firstname + '' '' + tblperson.lastname as [client],
		t.[MailSubject] as message,
		substring(t.[MailSubject], 0, ' + @shortvalue + ') + ''...'' as shortmessage,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedby,		
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		t.EMailLogID as fieldid,
		t.CreatedBy
	from
		tblEmailRelayLog t  with(nolock) inner join
		tblclient  with(nolock) on t.clientid = tblclient.clientid inner join
		tblperson  with(nolock) on tblclient.primarypersonid = tblperson.personid left outer join
		tbluser as tblcreatedby  with(nolock) on t.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby  with(nolock) on t.createdby = tbllastmodifiedby.userid left outer join
		tblEmailRelayRelation rl  with(nolock) on t.EMailLogID = rl.EMailLogID left outer join 
		tblrelationtype rt  with(nolock) on rt.relationtypeid = rl.relationtypeid left outer join
		tblmatter mtr  with(nolock) on rl.relationid=mtr.matterid left outer join
		tblclient ct  with(nolock) on rl.relationid=ct.clientid
	where
		isnull(mtr.IsDeleted,0)=0 and t.CreatedBy = ' + @userid	
)


if @returntop='100 percent' begin
exec
(
'select
		* 
	from 
		#tblResults 
	where 
		'+ @type + '
	order by 
		date desc, 
		fieldid desc'
)
end else begin
exec
(
'select top ' + @returntop + ' 
	*
	from 
		#tblResults 
	where 
		'+ @type + '
	order by 
		date desc, 
		fieldid desc'
)
end

drop table #tblResults
GO
/****** Object:  StoredProcedure [dbo].[stp_GetSettlementDocInfo]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetSettlementDocInfo]  
(
	@settlementid int
)
as
begin
-- used by LexxCMS

select top 1 c.accountnumber, t.docfolder, subfolder, doctypeid, docid, datestring, c.companyid
from tblDocRelation dr
join tblsettlements s on s.creditoraccountid = dr.relationid
	and s.settlementid = @settlementid
join tblDocumentType t on t.typeid = dr.doctypeid
	and t.typeid = 'D6004' -- SAF
join tblclient c on c.clientid = dr.clientid
where dr.RelationType = 'account' 
and (DeletedFlag = 0 or DeletedBy = -1) 
order by dr.docrelationid desc

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCommChargebacksForPayment]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetCommChargebacksForPayment]
	(
		@registerpaymentid int
	)

as


select
	tblcommchargeback.*,
	tblcommstruct.commscenid,
	tblcommstruct.commrecid,
	tblcommstruct.parentcommrecid,
	tblcommstruct.[order] as commstructorder,
	tblcommrec.commrectypeid,
	tblcommrec.display,
	tblcommrectype.[name] as commrectypename
from
	tblcommchargeback inner join
	tblcommstruct on tblcommchargeback.commstructid = tblcommstruct.commstructid inner join
	tblcommrec on tblcommstruct.commrecid = tblcommrec.commrecid inner join
	tblcommrectype on tblcommrec.commrectypeid = tblcommrectype.commrectypeid
where
	tblcommchargeback.registerpaymentid = @registerpaymentid
GO
/****** Object:  StoredProcedure [dbo].[stp_FeeByCreditorAnalysisShort]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_FeeByCreditorAnalysisShort]
@CommRecId int = NULL,
@StateId int = NULL,
@companyid int = NULL,
@agencyid int = NULL
AS
BEGIN
declare @MinPaymentId int
--declare @CommRecId int
--declare @StateId int
--declare @companyid int
--declare @agencyid int

Select @MinPaymentId = 11730
--Select @CompanyId = 2
--Select @StateId = 17
--Select @CommRecId = -1
 
SELECT 		c.ClientId AS [ClientId],
            p.[firstname] + ' ' +  p.[lastname] AS [ClientName],
			c.Created AS [Created],
			isnull(u.[Name], 'Not Provided') AS [StatusName],
			p.SSN AS [SSN],
			co.[CompanyId] AS [SAId],
			co.[Name] AS [SA],
			a.[AgencyId] AS [AgencyId],
            a.[Name] AS [Agency],
			s.[StateId] AS [StateId],
			s.[Abbreviation] AS [State],
			q1.entrytypeid AS [EntryTypeId],
			q1.Fee as [Fee],
			isnull(q1.amount,0) AS [TotalCharged],
			CASE WHEN q2.[percent] IS NULL
				THEN NULL
				ELSE round(q1.amount * q2.[percent],2)
			END AS [TotalChargedForRec],
			isnull(q2.commrecid,-1) AS [RecipientId],
			isnull(q2.abbreviation, 'Not Found') AS [RecipientAbbrev],
			q2.[percent] AS [Percent],
			isnull(q3.[Amount],0) AS [AmountPaid],
			CASE WHEN q2.[percent] IS NULL
				THEN NULL
				ELSE round((isnull(q1.amount,0) - isnull(q3.[amount],0)) * q2.[percent],2)
			END AS [AmountOwed]
FROM
tblClient c 
inner join tblperson p ON p.ClientId = c.ClientId
INNER JOIN tblCompany co ON co.CompanyID = c.CompanyID
INNER JOIN tblAgency a ON a.AgencyID = c.AgencyID
LEFT JOIN tblClientStatus u ON c.CurrentClientStatusId = u.ClientStatusId
LEFT JOIN tblState s ON p.StateID = s.StateId
INNER JOIN --Total Charged in Fees
			(select 
				r.clientid as [ClientId], 
 				r.entrytypeid as [EntryTypeId],
				e.DisplayName as [Fee],
				Sum(abs(r.amount)) as [Amount]
			from tblregister r
			inner join tblentrytype  e on (r.entrytypeid = e.entrytypeid)
			where r.void is null and r.bounce is null
			and e.fee = 1 --and r.amount < 0 and isfullypaid = 1
			group by r.clientid, r.entrytypeid, e.DisplayName
			) q1 on (q1.clientid = c.clientid)
--Percent per fee and recipient
LEFT JOIN (select   st.commrecid,
					f.entrytypeId,
					st.companyid,
					cs.agencyid,
					cr.Abbreviation,
					Sum(f.[percent]) as [percent]
			from tblCommFee f
			inner join tblCommStruct st on (st.commstructid = f.commstructid)
			inner join tblCommScen cs on (cs.commscenid = st.commscenid)
			Left join tblCommRec cr on (st.commrecid = cr.commrecid)
			group by st.commrecid,f.entrytypeId,st.companyid,cs.agencyid, cr.Abbreviation  
			)
			q2 on (q1.entrytypeId = q2.entrytypeid and q2.agencyid=c.agencyid and c.companyid = q2.companyid)
LEFT JOIN ( --Total Paid by Client
			SELECT reg.clientid AS [ClientId],
				reg.EntryTypeId AS [EntryTypeId],
				Sum(rpmt.Amount) AS [Amount]
				FROM tblregisterpayment rpmt 
				INNER JOIN tblRegister reg ON reg.RegisterId = rpmt.FeeRegisterId
				INNER JOIN tblEntryType et ON et.EntryTypeId = reg.EntryTypeId
				WHERE rpmt.Voided = 0
				AND rpmt.Bounced = 0
				AND rpmt.Amount >= 0
				GROUP BY reg.clientid, reg.EntryTypeId
			) q3 on (q3.clientid = c.clientid and q3.entrytypeid = q1.entrytypeid)
WHERE
p.Relationship = 'Prime'
AND (@CompanyId IS NULL OR (co.CompanyId = @CompanyId))
AND (@StateId IS NULL OR (s.StateId = @StateId))
AND (@AgencyId IS NULL OR (a.AgencyId = @AgencyId))
And (@CommRecId IS NULL OR (isnull(q2.CommRecId,-1) = @CommRecId))
AND c.currentclientstatusid not in (15,17,18) 
Order by c.CompanyId, s.[Abbreviation], p.[firstname], q1.Fee
END
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyBatchSummary2]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AgencyBatchSummary2]
(
	@CommRecID varchar(200)
,	@CompanyIds varchar(200)
,	@date1 varchar(20) = '1/1/1900'
,	@date2 varchar(20) = '12/31/2050'
,	@ClientCreatedDateFrom varchar(20) = '1/1/1900'
,	@ClientCreatedDateTo varchar(20) = '12/31/2050'
)
as
begin
/*
	Logic based off stp_ReportGetCommissionBatchTransfers. This proc will replace 
	stp_ReportGetAgencyCommission and is used used when displaying the Agency Batches summary 
	on the agency home page. New proc allows client filtering by creation date.

*/

declare @CommRecOrig varchar(200)

set @CommRecOrig = @CommRecID


if @CommRecID = 5 begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '5/16/2007'
end
else if @CommRecID = 24 begin
	set @ClientCreatedDateFrom = '5/17/2007'
	set @ClientCreatedDateTo = '12/31/2050'
end


if @CommRecID = 24 begin
	set @CommRecID = 5
end

if @CommRecID = '29' begin
	set @CommRecOrig = '17'
	set @ClientCreatedDateFrom = '8/1/2008'
	set @ClientCreatedDateTo = '12/31/2050'
end


exec('
create table #batches
(
	CommBatchID int
,	BatchDate datetime
,	CommRecID int
)

insert 
	#batches
select top 10
	b.CommBatchID
,	b.BatchDate
,	t.CommRecID
from 
	tblCommBatch b
	join tblCommBatchTransfer t on t.CommBatchID = b.CommBatchID and t.CommRecID in (' + @CommRecID + ')
where 
	BatchDate between ''' + @date1 + ''' and ''' + @date2 + '''
order by 
	BatchDate desc


SELECT top 5
	CommBatchID
,	BatchDate
,	sum(Amount) as Amount 
,	CommRecID
,	Company
FROM 
(
	SELECT 
		comm.CommBatchID
	,	b.BatchDate
	,	comm.Amount 
	,	b.CommRecID
	,	ShortCoName [Company]
	FROM 
		tblCommPay as comm 
		inner join tblRegisterPayment as registerpay on registerpay.RegisterPaymentID = comm.RegisterPaymentID 
		inner join tblRegister as register on register.RegisterID = registerpay.FeeRegisterID 
		inner join tblClient as client on client.ClientID = register.ClientID 
		left join tblPerson as person on person.PersonID = client.PrimaryPersonID 
		join #batches b on b.CommBatchID = comm.CommBatchID
		join tblCompany c on c.CompanyID = client.CompanyID
	WHERE 
		client.CompanyID in (' + @CompanyIDs + ')
		and commstructid in (SELECT commstructid FROM tblcommstruct WHERE commrecid in (' + @CommRecOrig + '))
		and (client.Created between ''' + @ClientCreatedDateFrom + ''' and ''' + @ClientCreatedDateTo + ''')

	UNION ALL 

	SELECT 
		comm.CommBatchID
	,	b.BatchDate
	,	-comm.Amount as Amount 
	,	b.CommRecID
	,	ShortCoName [Company]
	FROM 
		tblCommChargeback as comm 
		inner join tblRegisterPayment as registerpay on registerpay.RegisterPaymentID = comm.RegisterPaymentID 
		inner join tblRegister as register on register.RegisterID = registerpay.FeeRegisterID 
		inner join tblClient as client on client.ClientID = register.ClientID 
		left join tblPerson as person on person.PersonID = client.PrimaryPersonID 
		join #batches b on b.CommBatchID = comm.CommBatchID
		join tblCompany c on c.CompanyID = client.CompanyID
	WHERE 
		client.CompanyID in (' + @CompanyIDs + ')
		and commstructid in (SELECT commstructid FROM tblcommstruct WHERE commrecid in (' + @CommRecOrig + '))
		and (client.Created between ''' + @ClientCreatedDateFrom + ''' and ''' + @ClientCreatedDateTo + ''')

) as derivedtable 

GROUP BY 
	CommBatchID
,	BatchDate
,	CommRecID
,	Company
ORDER BY 
	CommBatchID desc


drop table #batches
')


end
GO
/****** Object:  StoredProcedure [dbo].[stp_Hardship_getHardshipDataByID]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_Hardship_getHardshipDataByID]

	(
		@hardshipid int
	)
AS
BEGIN
	SELECT HardshipID, ClientID, ClientAcctNum, HardshipDate, CSR, Married, Single, Divorced, Widowed, NumChildren, NumGrandChildren, MonthlyIncome_Client_Work, 
		  MonthlyIncome_Client_SocialSecurity, MonthlyIncome_Client_Disability, MonthlyIncome_Client_RetirementPension, MonthlyIncome_Client_SelfEmployed, 
		  MonthlyIncome_Client_Unemployed, MonthlyIncome_Client_JobDescription, MonthlyIncome_Client_FullTime, MonthlyIncome_Client_PartTime, 
		  MonthlyIncome_Spouse_Work, MonthlyIncome_Spouse_SocialSecurity, MonthlyIncome_Spouse_Disability, MonthlyIncome_Spouse_RetirementPension, 
		  MonthlyIncome_Spouse_SelfEmployed, MonthlyIncome_Spouse_Unemployed, MonthlyIncome_Spouse_JobDescription, MonthlyIncome_Spouse_FullTime, 
		  MonthlyIncome_Spouse_PartTime, MonthlyIncome_IsRecievingStateAssistance, MonthlyIncome_IsRecievingStateAssistanceDescription, MonthlyExpenses_Rent, 
		  MonthlyExpenses_Mortgage, MonthlyExpenses_2ndMortgage, MonthlyExpenses_2ndMortgageAmt, MonthlyExpenses_HasClientRefinanced, 
		  MonthlyExpenses_EquityValueOfHome, MonthlyExpenses_ReasonForDebt, MonthlyExpenses_DoesClientHaveAssets, MonthlyExpenses_Carpayment, 
		  MonthlyExpenses_CarInsurance, MonthlyExpenses_Utilities, MonthlyExpenses_Groceries, MonthlyExpenses_MedicalInsurance, MonthlyExpenses_Medications, 
		  MonthlyExpenses_Gasoline, MonthlyExpenses_SchoolLoans, MonthlyExpenses_Other, MonthlyExpenses_OtherDescription, MedicalCondtions_Client_Diabetes, 
		  MedicalCondtions_Client_Arthritis, MedicalCondtions_Client_Asthma, MedicalCondtions_Client_HighBloodPressure, MedicalCondtions_Client_HighCholesterol, 
		  MedicalCondtions_Client_Other, MedicalCondtions_Client_NumPillsTaken, MedicalCondtions_Client_History, MedicalCondtions_Spouse_Diabetes, 
		  MedicalCondtions_Spouse_Arthritis, MedicalCondtions_Spouse_Asthma, MedicalCondtions_Spouse_HighBloodPressure, MedicalCondtions_Spouse_HighCholesterol,
		  MedicalCondtions_Spouse_Other, MedicalCondtions_Spouse_NumPillsTaken, MedicalCondtions_Spouse_History, AdditionalInformation
	FROM tblHardshipData AS hd
	WHERE HardshipID = @hardshipid
	ORDER BY HardshipDate desc
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GlobalCommission]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GlobalCommission]
(
	@startdate datetime,
	@enddate datetime
)

AS

if @startdate is null
begin
	set @startdate = dateadd(day, 10, dateadd(day, -day(getdate()), dateadd(month, -1, getdate())))
end

if @enddate is null
begin
	set @enddate = dateadd(month, 1, @startdate)
end

declare @vtblGlobalCommission table
(
	RetFee money,
	RetFeeRev money,
	RetFeeNet money,
	SettFee money,
	SettFeeRev money,
	SettFeeNet money,
	TotalCommission money
)


-- RetFee --

CREATE TABLE #globalComm (
	clientid int,
	AcctNo int,
	clientName nvarchar(255),
	start datetime,
	RetFees decimal(18,2),
	BegBal decimal(18,2),
	NewTrans decimal(18,2),
	EndBal decimal(18,2),
	PayRate decimal(18,2),
	repComm decimal(18,2),
	agencyid int,
	status int
)

INSERT INTO #globalComm(	
	clientid,
	AcctNo,
	ClientName,
	start,
	agencyid,
	[status]
)
SELECT	c.clientid,
	c.accountnumber,
	p.firstname + ' '+ p.lastname,
	c.created,
	c.agencyid,
	c.currentclientstatusid
FROM tblClient c
INNER JOIN tblPerson p ON c.primarypersonid = p.personid

UPDATE #globalComm 
SET 
	RetFees = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 2 AND r.clientid = #globalComm.clientid AND (bounce is null and void is null)),0),
	
	BegBal = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 2 AND r.clientid = #globalComm.clientid AND (bounce is null and void is null)),0) -  -- retainer fees assessed
	isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.ENTRYTYPEID = 2 and not (bounced =1 or voided =1) and rp.paymentdate < @startdate),0), -- retainer payments
	
	NewTrans = ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.ENTRYTYPEID = 2 and not (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0),

	EndBal =
		(isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 2 AND r.clientid = #globalComm.clientid AND (bounce is null and void is null)),0) 
			- isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.ENTRYTYPEID = 2 and not (bounced =1 or voided =1) and rp.paymentdate < @startdate),0))
				- (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.ENTRYTYPEID = 2 and not (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)),
	PayRate = .5,
	repComm = (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.ENTRYTYPEID = 2 and not (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)) * .5

INSERT INTO
@vtblGlobalCommission (RetFee)
SELECT isnull(sum(repcomm), 0)
FROM	#globalComm 
WHERE 	agencyid = 812 
AND NOT	status IN (15,17,18)
AND NewTrans > 0

DROP TABLE #globalComm


-- RetFeeRev --

CREATE TABLE #globalRetComm (
	clientid int,
	AcctNo int,
	clientName nvarchar(255),
	start datetime,
	RetFees decimal(18,2),
	BegBal decimal(18,2),
	NewTrans decimal(18,2),
	EndBal decimal(18,2),
	PayRate decimal(18,2),
	repComm decimal(18,2),
	agencyid int,
	status int
)

INSERT INTO #globalRetComm(	
	clientid,
	AcctNo,
	ClientName,
	start,
	agencyid,
	status
)
SELECT	c.clientid,
	c.accountnumber,
	p.firstname + ' '+ p.lastname,
	c.created,
	c.agencyid,
	c.currentclientstatusid
FROM tblClient c
INNER JOIN tblPerson p ON c.primarypersonid = p.personid

UPDATE #globalRetComm 
SET 
	 RetFees = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 2 AND r.clientid = #globalRetComm.clientid AND not (bounce is null or void is null)),0),
	
	 BegBal = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 2 AND r.clientid = #globalRetComm.clientid AND not (bounce is null or void is null)),0) -  -- retainer fees assessed
	 isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 2 and (bounced =1 or voided =1) and rp.paymentdate < @startdate),0), -- retainer payments
	
	NewTrans = (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 2 and (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0))*-1,

	 EndBal =
		(isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 2 AND r.clientid = #globalRetComm.clientid AND not (bounce is null or void is null)),0) 
			- isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 2 and (bounced =1 or voided =1) and rp.paymentdate < @startdate),0))
				- (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 2 and (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)),
	PayRate = .50,
	repComm = ((ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 2 and (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0))*-1) * .50

UPDATE
@vtblGlobalCommission
SET RetFeeRev =
(SELECT	isnull(sum(repComm), 0)
FROM	#globalRetComm 
WHERE 	agencyid = 812 
AND NOT	status IN (15,17,18)
AND NewTrans <> 0)

DROP TABLE #globalRetComm


-- SettFee

CREATE TABLE #globalComm2 (
	clientid int,
	AcctNo int,
	clientName nvarchar(255),
	start datetime,
	RetFees decimal(18,2),
	BegBal decimal(18,2),
	NewTrans decimal(18,2),
	EndBal decimal(18,2),
	PayRate decimal(18,2),
	repComm decimal(18,2),
	agencyid int,
	status int
)

INSERT INTO #globalComm2(	
	clientid,
	AcctNo,
	ClientName,
	start,
	agencyid,
	status
)
SELECT	c.clientid,
	c.accountnumber,
	p.firstname + ' '+ p.lastname,
	c.created,
	c.agencyid,
	c.currentclientstatusid
FROM tblClient c
INNER JOIN tblPerson p ON c.primarypersonid = p.personid

UPDATE #globalComm2 
SET 
	RetFees = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 4 AND r.clientid = #globalComm2.clientid AND (bounce is null and void is null)),0),
	
	BegBal = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 4 AND r.clientid = #globalComm2.clientid AND (bounce is null and void is null)),0) -  -- retainer fees assessed
	isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm2.clientid AND R.entrytypeid = 4 and not (bounced =1 or voided =1) and rp.paymentdate < @startdate),0), -- retainer payments
	
	NewTrans = ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm2.clientid AND R.entrytypeid = 4 and not (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0),

	EndBal =
		(isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 4 AND r.clientid = #globalComm2.clientid AND (bounce is null and void is null)),0) 
			- isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm2.clientid AND R.entrytypeid = 4 and not (bounced =1 or voided =1) and rp.paymentdate < @startdate),0))
				- (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm2.clientid AND R.entrytypeid = 4 and not (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)),
	PayRate = .25,
	repComm = (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm2.clientid AND R.entrytypeid = 4 and not (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)) * .5

UPDATE
@vtblGlobalCommission
SET SettFee =
(SELECT	isnull(sum(repComm), 0)
FROM	#globalComm2 
WHERE 	agencyid = 812 
AND NOT	status IN (15,17,18)
AND NewTrans > 0)

DROP TABLE #globalComm2


-- SettFeeRev --

CREATE TABLE #globalRetComm2 (
	clientid int,
	AcctNo int,
	clientName nvarchar(255),
	start datetime,
	RetFees decimal(18,2),
	BegBal decimal(18,2),
	NewTrans decimal(18,2),
	EndBal decimal(18,2),
	PayRate decimal(18,2),
	repComm decimal(18,2),
	agencyid int,
	status int
)

INSERT INTO #globalRetComm2(	
	clientid,
	AcctNo,
	ClientName,
	start,
	agencyid,
	status
)
SELECT	c.clientid,
	c.accountnumber,
	p.firstname + ' '+ p.lastname,
	c.created,
	c.agencyid,
	c.currentclientstatusid
FROM tblClient c
INNER JOIN tblPerson p ON c.primarypersonid = p.personid

UPDATE #globalRetComm2 
SET 
	 RetFees = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 4AND r.clientid = #globalRetComm2.clientid AND not (bounce is null or void is null)),0),
	
	 BegBal = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 4AND r.clientid = #globalRetComm2.clientid AND not (bounce is null or void is null)),0) -  -- retainer fees assessed
	 isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm2.clientid AND R.entrytypeid = 4and (bounced =1 or voided =1) and rp.paymentdate < @startdate),0), -- retainer payments
	
	NewTrans = (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm2.clientid AND R.entrytypeid = 4and (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)*-1),

	 EndBal =
		(isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 4AND r.clientid = #globalRetComm2.clientid AND not (bounce is null or void is null)),0) 
			- isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm2.clientid AND R.entrytypeid = 4and (bounced =1 or voided =1) and rp.paymentdate < @startdate),0))
				- (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm2.clientid AND R.entrytypeid = 4and (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)),
	PayRate = .25,
	repComm = ((ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm2.clientid AND R.entrytypeid = 4and (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0))*-1) * .25

UPDATE
@vtblGlobalCommission
SET SettFeeRev =
(SELECT	isnull(sum(repComm), 0)
FROM	#globalRetComm2 
WHERE 	agencyid = 812 
AND NOT	status IN (15,17,18)
AND NewTrans <> 0)

DROP TABLE #globalRetComm2


-- RetFeeNet --

UPDATE
	@vtblGlobalCommission
SET
	RetFeeNet = (SELECT RetFee + RetFeeRev FROM @vtblGlobalCommission)


-- SettFeeNet --

UPDATE
	@vtblGlobalCommission
SET
	SettFeeNet = (SELECT SettFee + SettFeeRev FROM @vtblGlobalCommission)


-- TotalCommission --

UPDATE
	@vtblGlobalCommission
SET
	TotalCommission = (SELECT RetFeeNet + SettFeeNet FROM @vtblGlobalCommission)


-- Return --

SELECT
	*
FROM
	@vtblGlobalCommission
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertBofATrust]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 11/06/2009
-- Description:	Insert new Trust ID for B of A clients
-- =============================================
CREATE PROCEDURE [dbo].[stp_InsertBofATrust] 
	@ClientID int = 0, 
	@TrustID int = 0
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE tblClient SET TrustID = @TrustID WHERE ClientID = @ClientID OR TrustID = @TrustID
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetValidTaskTypeList]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetValidTaskTypeList]
(
	@UserId			int	=null,
	@UserGroupId	int =null,
	@MatterTypeId	int =null 

)
AS
BEGIN
	Select t.* 
	from tblTaskType t left outer join tblMatterTypeTaskXRef r on t.taskTypeID = r.taskTypeID
	Where r.MatterTypeId=@MatterTypeId
	Order by [name]
/*

IF @MatterTypeId=1 

BEGIN

(select * from tblTaskType t where  t.TaskTypeCategoryId=0 )
union

(select * from tblTaskType t where  t.TaskTypeCategoryId=9  )

order by TaskTypeCategoryId,[Name]

END

ELSE

(select * from tblTaskType t  )
union

(select * from tblTaskType t  )

order by TaskTypeCategoryId,[Name]

*/
END




GRANT EXEC ON stp_GetValidTaskTypeList TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_FeePaymentsByMonthNotNewClientsInitialDrafts]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
exec stp_FeePaymentsByMonthNewClientsInitialDrafts 8
exec stp_FeePaymentsByMonthNotNewClientsInitialDrafts 8
*/

create procedure [dbo].[stp_FeePaymentsByMonthNotNewClientsInitialDrafts]
(
	@month int
,	@year int = 2008
)
as

declare @fees table (mm int, entrytypeid int, displayname varchar(100), commissions money, chargebacks money)
declare @commish table (mm int, entrytypeid int, displayname varchar(100), commpayid int, amount money)
declare @chargeb table (mm int, entrytypeid int, commchargebackid int, amount money)
declare @deposits table (registerid int)


-- Get first deposits for clients created in @month/@year
insert @deposits 
select min(r.registerid)
from tblregister r
join tblclient c on c.clientid = r.clientid
	and c.agencyid in (838,840,842,843)
	and month(c.created) = @month and year(c.created) = @year
where r.entrytypeid = 3
group by r.clientid


insert @commish (mm, entrytypeid, displayname, commpayid, amount)
select distinct month(b.batchdate), e.entrytypeid, e.displayname, cp.commpayid, cp.amount
from tblcommpay cp
join tblcommbatch b on b.commbatchid = cp.commbatchid
	and year(b.batchdate) = @year
join tblcommstruct cs on cs.commstructid = cp.commstructid
	and cs.commrecid in (5,17) 
join tblregisterpayment rp on rp.registerpaymentid = cp.registerpaymentid
join tblregister r on r.registerid = rp.feeregisterid
join tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
	and rpd.depositregisterid not in (select registerid from @deposits)
join tblentrytype e on e.entrytypeid = r.entrytypeid
where month(b.batchdate) = @month


insert @fees (mm, entrytypeid, displayname, commissions)
select mm, entrytypeid, displayname, sum(amount)
from @commish
group by mm, entrytypeid, displayname


insert @chargeb (mm, entrytypeid, commchargebackid, amount)
select distinct month(b.batchdate), e.entrytypeid, cb.commchargebackid, cb.amount
from tblcommchargeback cb 
join tblcommbatch b on b.commbatchid = cb.commbatchid
	and year(b.batchdate) = @year
join tblcommstruct cs on cs.commstructid = cb.commstructid
	and cs.commrecid in (5,17) 
join tblregisterpayment rp on rp.registerpaymentid = cb.registerpaymentid
join tblregister r on r.registerid = rp.feeregisterid
join tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
	and rpd.depositregisterid not in (select registerid from @deposits)
join tblentrytype e on e.entrytypeid = r.entrytypeid
where month(b.batchdate) = @month


update @fees
set chargebacks = dev.chargebacks
from (
	select mm [mth], entrytypeid [id], sum(amount) [chargebacks]
	from @chargeb
	group by mm, entrytypeid
) dev 
where entrytypeid = dev.id and mm = dev.mth


select mm [month], displayname, commissions, isnull(chargebacks,0) [chargebacks], (commissions - isnull(chargebacks,0)) [paid] 
from @fees
order by entrytypeid, mm
GO
/****** Object:  StoredProcedure [dbo].[stp_GetEmailClientsWelcome]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetEmailClientsWelcome]
as
begin
/*
	Daily routine used to send auto-generated Welcome emails to clients
*/

	select c.clientid, p.firstname + ' ' + p.lastname [clientname], p.emailaddress, 
		cp.name [company], ca.address1 + ', ' + ca.city + ', ' + ca.state + ' ' + ca.zipcode [companyaddress],
		p1.phonenumber [clientservicesphone], f.phonenumber [clientservicesfax], cr.phonenumber [creditorservicesphone]
	from tblclient c 
	join tblcompany cp on cp.companyid = c.companyid
	join tblcompanyaddresses ca on ca.companyid = cp.companyid and ca.addresstypeid = 3 -- Client
	join tblcompanyphones p1 on p1.companyid = cp.companyid and p1.phonetype = 46 -- CustomerServicePhone
	join tblcompanyphones f on f.companyid = cp.companyid and f.phonetype = 47 -- CustomerServiceFax
	join tblcompanyphones cr on cr.companyid = cp.companyid and cr.phonetype = 50 -- CreditorServicesPhone
	join tblperson p on p.personid = c.primarypersonid
	join vw_ClientCurrentStatusCreated v on v.clientid = c.clientid
	where 1=1
	and c.currentclientstatusid = 14 -- active
	and v.minstatuscreated > '3/31/2010' -- date we started these emails
	and datediff(d,v.statuscreated,getdate()) > 0
	and c.clientid not in (select distinct clientid from tblclientemails where [type] = 'Welcome')
	and p.emailaddress is not null 
	
end
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationAssignmentHeaderSelect]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
 Author: Bereket S. Data>
 Description: This stored Procedure delets Negotiation filter
*/

CREATE PROCEDURE [dbo].[stp_NegotiationAssignmentHeaderSelect]
AS
SET NOCOUNT ON

SELECT HeaderName, SQLAggregation,[Order], [Default] 
FROM tblNegotiationAssignment
ORDER BY [Order] asc
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCommRec]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetCommRec]
(
	@CompanyID int
,	@AccountTypeID int
)
as
begin

select 
	*
from 
	tblCommRec
where
	CompanyID = @CompanyID
	and AccountTypeID = @AccountTypeID

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetRegisterPayment]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[stp_GetRegisterPayment]
	(
		@registerPaymentId int
	)

as

SELECT 
	tblRegisterPayment.*, 
	tblRegisterPaymentDeposit.DepositRegisterId,
	tblRegisterPaymentDeposit.Amount as DepositAmountUsed, 
	tblDepositRegister.Amount as DepositAmount, 
	tblRegisterPaymentDeposit.Voided as DepositVoided, 
	tblRegisterPaymentDeposit.Bounced as DepositBounced,
	tblDepositRegister.TransactionDate as DepositDate,
	tblDepositRegister.CheckNumber as DepositCheckNumber,
	tblEntryType.[Name] as EntryTypeName,
	tblFeeRegister.Amount as FeeAmount
FROM 
	tblRegisterPayment INNER JOIN 
	tblRegisterPaymentDeposit ON tblRegisterPayment.RegisterPaymentId=tblRegisterPaymentDeposit.RegisterPaymentId INNER JOIN
	tblRegister tblFeeRegister ON tblRegisterPayment.FeeRegisterId = tblFeeRegister.RegisterId INNER JOIN
	tblRegister tblDepositRegister ON tblRegisterPaymentDeposit.DepositRegisterId=tblDepositRegister.RegisterId INNER JOIN
	tblEntryType ON tblFeeRegister.EntryTypeId=tblEntryType.EntryTypeId
WHERE 
	tblRegisterPayment.RegisterPaymentID = @registerPaymentId
GO
/****** Object:  StoredProcedure [dbo].[stp_clientfile_getLSAInfo]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_clientfile_getLSAInfo]
	(
		@clientid int 
	)

AS
BEGIN
	select 
		 [SetupFee] = convert(varchar,(c.SetupFeePercentage * 100)) + '%'
	, [SettlementFee] = convert(varchar,(c.SettlementFeePercentage * 100)) + '%'
	, [MaintenanceFee] = '$' + convert(varchar, CONVERT(money, c.MonthlyFee),1)
	, [SubsequentMaintenanceFee] = '$' + convert(varchar, CONVERT(money, isnull(c.SubsequentMaintFee,0.00)),1)
	, [AdditionalAccountFee] = '$' + convert(varchar, CONVERT(money, isnull(c.AdditionalAccountFee,0.00)),1)
	, [ReturnedCheckFee] = '$' + convert(varchar, CONVERT(money, isnull(c.returnedcheckfee,0.00)),1)
	, [OvernightDeliveryFee] = '$' + convert(varchar, CONVERT(money, isnull(c.OvernightDeliveryFee,0.00)),1)
	from 
		tblclient c
	where 
		clientid = @clientid
END


GRANT EXEC ON stp_clientfile_getLSAInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_PotentialCollectMonthlyFee]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_PotentialCollectMonthlyFee]
(
	@fordate datetime
)
as
begin

declare @feemonth int
declare @feeyear int

set @feemonth = datepart(month,@fordate)
set @feeyear = datepart(year,@fordate)

insert tblpotentialregistertmp 
	(clientid,transactiondate,amount,isfullypaid,entrytypeid,entrytypeorder,fee,feemonth,feeyear)
select 
	clientid,@fordate,-monthlyfee,0,1,4,1,@feemonth,@feeyear
from 
	tblclient 
where
	currentclientstatusid not in (15,17,18) and 
	(
		@fordate >= monthlyfeestartdate or
		monthlyfeestartdate is null
	)
	--and fee has not already been assessed for this month
	and not clientid in (select clientid from tblpotentialregistertmp where feemonth=@feemonth and feeyear=@feeyear)
	and not monthlyfee is null
	and not monthlyfee = 0
	and depositday = datepart(day,@fordate) --only clients on this deposit day

	
end
GO
/****** Object:  StoredProcedure [dbo].[stp_FeeDistrabution]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*Comment out to test as a script */
CREATE PROCEDURE [dbo].[stp_FeeDistrabution] 
	@date1 DATETIME = NULL, 
	@date2 DATETIME = NULL,
	@CompanyID INT = NULL,
	@AgencyID INT = NULL,
	@AccountNumber INT = NULL,
	@CoOrder BIT = NULL
AS

BEGIN
		SET NOCOUNT ON;

/*
 Breakdown of payments by Company, Agency, Client and Payment distrabution
Created by Jim Hope 5/5/2008
Updated 9/19/2008 by Jim Hope
Added routine to pull deposits from tables by client 9/22/2008
 */

/* Un-comment below for testing */
--DECLARE @date1 DATETIME 
--DECLARE @date2 DATETIME
--DECLARE @CompanyID INT
--DECLARE @AgencyID INT
--DECLARE @AccountNumber INT
--DECLARE @CoOrder BIT
--DECLARE @Agency VARCHAR(100)
--
--SET @date1 = '09/01/2008' 
--SET @date2 = '09/10/2008 23:59'
--SET @CompanyID = 2
--SET @AgencyID = 838
--SET @AccountNumber = NULL
--SET @CoOrder = NULL

/*
Load all of the deposits and dates for the period by the agency's clients
into a variable table for the base table
*/

DECLARE @Deposits TABLE
(
ClientID INT,
TransactionDate DATETIME,
Amount MONEY
)

INSERT INTO @Deposits

SELECT r.ClientId, 
r.TransactionDate, 
r.Amount
FROM tblRegister r
JOIN tblClient c ON c.ClientID = r.ClientID
WHERE r.EntryTypeId = 3
AND r.TransactionDate BETWEEN @date1 AND @date2
AND c.CompanyID BETWEEN COALESCE(@CompanyID, 0)
		AND COALESCE(@CompanyID, 999999999)
		AND c.AgencyID BETWEEN COALESCE(@AgencyID, 0)
		AND COALESCE(@AgencyID, 999999999)
		AND c.AccountNumber BETWEEN COALESCE(@AccountNumber, 0)
		AND COALESCE(@AccountNumber, 999999999)

/*
All of the payments and commission payee's for each client for the period
cr.Display AS 'Paid To',
*/

		SELECT cl.clientid AS 'Client ID',
		cl.accountnumber AS 'Account Number',
		cl.DepositAmount AS 'Planned Deposit Amount',
		d.Amount AS 'Actual Deposit Amount',
		p.firstname AS 'First Name',
		p.lastname AS 'Last Name',
		cp.CommPayID AS 'Comm Pay ID',
		et.DisplayName AS 'Fee Type',
		cp.[Percent] AS 'Percent',
		cp.Amount AS 'Amount Paid',
		CASE
			WHEN cl.Created > '05/07/2008' AND cl.AgencyID = 838 AND cr.Display LIKE 'Stonewall Financial%' THEN 'Stonewall Financial Group LLC New'
			WHEN cl.Created >= '08/01/2008' AND cl.AgencyID in (840, 842, 843) and cr.Display LIKE 'Avert Financial%' THEN 'Avert Financial, LLC New'
			ELSE cr.Display
		END AS 'Paid To',
		rpmt.Amount AS 'Total Amount Applied',
		rpmt.PaymentDate AS 'Date Paid',
		reg.RegisterId AS 'Register ID',
		cb.ChargebackDate AS 'Chargeback Date',
		cb.Amount AS 'Chargeback Amount',
		cb.[Percent] AS 'Chargeback Percent',
		co.[Name] AS 'Company',
		agt.[Name] AS 'Agency',
		agt.AgencyID AS 'Agency ID'
		 FROM tblregister reg
		JOIN tblregisterpayment rpmt ON rpmt.FeeRegisterId = reg.RegisterId
		JOIN tblcommpay cp ON cp.RegisterPaymentID = rpmt.RegisterPaymentId
		LEFT JOIN tblCommChargeback cb ON cb.CommPayID = cp.CommPayID
		JOIN tblcommbatch cba ON cba.CommBatchID = cp.CommBatchID
		JOIN tblClient cl ON cl.clientid = reg.clientid
		JOIN tblpersON p ON p.clientid = cl.clientid
							AND p.RelatiONship = 'Prime'
		join @Deposits d on d.clientid = cl.clientid
		JOIN tblAgency agt ON agt.AgencyID = cl.AgencyID
		JOIN tblCompany co ON co.CompanyID = cl.CompanyID
		JOIN tblEntryType et ON et.EntryTypeId = reg.EntryTypeId
		JOIN tblCommStruct cs ON cs.CommStructID = cp.CommStructID
		JOIN tblCommScen cms ON cms.CommScenID = cs.CommScenID
		JOIN tblcommrec cr ON cr.commrecid = cs.CommRecID
		WHERE cl.clientid in (SELECT clientid FROM @deposits)
		AND reg.TransactionDate BETWEEN @date1 AND @date2
		AND cl.CompanyID BETWEEN COALESCE(@CompanyID, 0)
		AND COALESCE(@CompanyID, 999999999)
		AND cl.AgencyID BETWEEN COALESCE(@AgencyID, 0)
		AND COALESCE(@AgencyID, 999999999)
		AND cl.AccountNumber BETWEEN COALESCE(@AccountNumber, 0)
		AND COALESCE(@AccountNumber, 999999999)
		ORDER BY cl.ClientID, rpmt.paymentdate, cp.commpayid
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GlobalCommission_SettFeeRev]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GlobalCommission_SettFeeRev]
(
	@startdate datetime,
	@enddate datetime
)

AS

if @startdate is null
begin
	set @startdate = dateadd(day, 10, dateadd(day, -day(getdate()), dateadd(month, -1, getdate())))
end

if @enddate is null
begin
	set @enddate = dateadd(month, 1, @startdate)
end

CREATE TABLE #globalRetComm (
	clientid int,
	AcctNo int,
	clientName nvarchar(255),
	start datetime,
	RetFees decimal(18,2),
	BegBal decimal(18,2),
	NewTrans decimal(18,2),
	EndBal decimal(18,2),
	PayRate decimal(18,2),
	repComm decimal(18,2),
	agencyid int,
	status int
)

INSERT INTO #globalRetComm(	
	clientid,
	AcctNo,
	ClientName,
	start,
	agencyid,
	status
)

SELECT	c.clientid,
	c.accountnumber,
	p.firstname + ' '+ p.lastname,
	c.created,
	c.agencyid,
	c.currentclientstatusid
FROM tblClient c
INNER JOIN tblPerson p ON c.primarypersonid = p.personid

UPDATE #globalRetComm 
SET 
	 RetFees = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 4AND r.clientid = #globalRetComm.clientid AND not (bounce is null or void is null)),0),
	
	 BegBal = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 4AND r.clientid = #globalRetComm.clientid AND not (bounce is null or void is null)),0) -  -- retainer fees assessed
	 isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 4and (bounced =1 or voided =1) and rp.paymentdate < @startdate),0), -- retainer payments
	
	NewTrans = (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 4and (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)*-1),

	 EndBal =
		(isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 4AND r.clientid = #globalRetComm.clientid AND not (bounce is null or void is null)),0) 
			- isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 4and (bounced =1 or voided =1) and rp.paymentdate < @startdate),0))
				- (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 4and (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)),
	PayRate = .25,
	repComm = ((ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalRetComm.clientid AND R.entrytypeid = 4and (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0))*-1) * .25

SELECT	AcctNo,
		ClientName,
		convert(nvarchar,start,110) as [Start Date],
		NewTrans,
		PayRate,
		repComm
FROM	#globalRetComm 
WHERE 	agencyid = 812 
AND NOT	status IN (15,17,18)
AND NewTrans <> 0
ORDER BY AcctNo

DROP TABLE #globalRetComm
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCommRecs]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetCommRecs]
(
	@CommRecTypeID int = null
,	@AccountTypeID int = null
)
as
begin

select 
	r.CommRecID
,	r.Abbreviation
,	t.CommRecTypeID
,	t.Name [CommRecType]
,	r.AccountTypeID
,	r.Display
from 
	tblCommRec r
	join tblCommRecType t on t.CommRecTypeID = r.CommRecTypeID
where 
	1=1
	and (r.CommRecTypeID = @CommRecTypeID or @CommRecTypeID is null)
	and (r.AccountTypeID = @AccountTypeID or @AccountTypeID is null)
order by 
	t.Name, r.Abbreviation

end
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportGetCreditorFirstMatch]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ImportGetCreditorFirstMatch]
@CreditorId int = null,
@Name varchar(50),
@Street varchar(50) = null,
@Street2 varchar(50) = null,
@City varchar(50) = null,
@StateId int = null,
@ZipCode varchar(50)
AS
BEGIN
-- Get the first exact match by name and address or creditorid. 
Select Top 1 CreditorId, Name, Street, Street2, City, StateId, ZipCode
From tblCreditor
Where (@CreditorId is null or CreditorId = @CreditorId)
And Ltrim(Rtrim(Name)) = @Name
And isnull(@Street, '') = Ltrim(rtrim(isnull(Street, '')))
And isnull(@Street2, '') = Ltrim(rtrim(isnull(Street2, '')))
And isnull(@City, '') = Ltrim(rtrim(isnull(City, '')))
And isnull(@StateId, 0) = Ltrim(rtrim(convert(varchar, isnull(StateId, 0))))
And isnull(@ZipCode, '') =  Ltrim(rtrim(isnull(ZipCode, ''))) 
END
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneyNewFees]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AttorneyNewFees]
(
	@companyid int,
	@from datetime,
	@to datetime
)
as
begin


-- settlement processing fees
select 'Settlement Processing Fees' [type], count(*) [fees], count(*) * 1150.00 [amount]
from tblregister r
join tblclient c on c.clientid = r.clientid
where r.transactiondate between @from and @to
and r.entrytypeid = 4 -- Settlement Fee
and c.companyid = @companyid

union

-- enrollment service fees
select 'Enrollment Service Fees', count(*), count(*) * 1350.00
from tblclient
where created between @from and @to
and companyid = @companyid

union

-- account maintenance fees
select 'Account Maintenance Fees', count(*), count(*) * 50.00
from tblregister r
join tblclient c on c.clientid = r.clientid
where r.transactiondate between @from and @to
and r.entrytypeid = 1 -- Maintenance Fee
and c.companyid = @companyid 

order by [type]


end
GO
/****** Object:  StoredProcedure [dbo].[stp_PotentialPayFee]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_PotentialPayFee]
(
	@registerid int
)
as

set nocount on
set ansi_warnings off

--------------------------------------------------------------------------
-- LOGIC FOR FEE PAYMENT:
-- (1) Pay for whole fee with oldest deposits first
-- (2) Pay for as much of fee as possible as one payment.  Do
--      not make multiple payments against same fee
-- (3) Do not attempt to pay fee if IsFullyPaid = 1
-- (4) After fee is completely paid, set IsFullyPaid = 1 but only
--      if fully paid
--------------------------------------------------------------------------


-- discretionary variables
declare @clientid int
declare @feetotal money
declare @feepaid as money
declare @feeremaining money
declare @deposittotal money
declare @depositused money
declare @nonefeedebits money
declare @depositavailable money


-- (1) find and fill fee variables
select
	@clientid = r.clientid,
	@feetotal = coalesce(abs(r.amount), 0),
	@feepaid = coalesce(sum(rp.amount), 0)
from
	tblpotentialregistertmp r left join
	(
		select
			*
		from
			tblpotentialregisterpaymenttmp
	) rp on r.registerid = rp.feeregisterid
where
	registerid = @registerid
group by
	r.clientid,
	r.amount,
	r.isfullypaid


set @feeremaining = @feetotal - @feepaid


-- (2) find and fill deposit variables (includes projected checks, ach, and adhocs)
-- deposit total is every positive amount this client originally had minus
-- any deposits still on hold or deposits that were bounced or voided or have an adjustedregisterid
-- (adjustedregisterid means that the record is actually a fee adjustment)
select
	@deposittotal = coalesce(sum(amount), 0)
from
	tblpotentialregistertmp
where
	amount > 0 and
	clientid = @clientid and
	(
		hold is null or hold <= getdate() or [clear] <= getdate()
	)
	and adjustedregisterid is null


-- deposit used is every amount used in the paymentdeposit table by this
-- client (which will include parts of deposits that are not fully paid)
-- DO NOT INCLUDE deposits that were bounced or voided as there presence
-- will still remain in the paymentdeposit table
select
	@depositused = coalesce(sum(amount), 0)
from
	tblpotentialregisterpaymentdeposittmp
where
	depositregisterid in
	(
		select
			registerid
		from
			tblpotentialregistertmp
		where
			clientid = @clientid
	)


-- none-fee debits must also be subtracted from the deposit total
select
	@nonefeedebits = coalesce(sum(abs(amount)), 0)
from
	tblpotentialregistertmp
where
	clientid = @clientid and
	amount < 0 and
	fee = 0 and
	adjustedregisterid is null


set @depositavailable = @deposittotal - @depositused - @nonefeedebits
--print 'fee remaining ' + cast(@feeremaining as varchar(10)) + ' deposit avail ' + cast(@depositavailable as varchar(10)) + ' dep total ' + cast( @deposittotal as varchar(10)) + ' dep used ' + cast(@depositused as varchar(10)) + ' non fee deb ' + cast(@nonefeedebits as varchar(10))

-- (3) don't do anything if fee was already fully paid or if this client
-- doesn't have any available deposit
if @depositavailable > 0
	begin

		-- (4) determine state of fee remaining
		if @feeremaining > @depositavailable -- more fee then all deposit
			begin

				-- (a) take all available deposit for this payment
				exec stp_PotentialPayFeeAmount @registerid, @depositavailable, @clientid

				-- (b) do NOT set fee as fully paid

			end
		else if @feeremaining <= @depositavailable -- fee less or equals all deposit
			begin

				-- (a) take all deposit or all fee (which are the same thing)
				exec stp_PotentialPayFeeAmount @registerid, @feeremaining, @clientid

				-- (b) DO set fee as fully paid
				update tblpotentialregistertmp set isfullypaid = 1 where registerid = @registerid

			end

	end


set nocount off
set ansi_warnings on
GO
/****** Object:  StoredProcedure [dbo].[stp_FeeByCreditorAnalysisShortMatrix]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_FeeByCreditorAnalysisShortMatrix]
@CommRecId int = NULL,
@agencyid int = NULL
AS
BEGIN
--declare @CommRecId int
declare @StateId int
declare @companyid int


--Select @CompanyId = 2
--Select @StateId = 17
--Select @CommRecId = -1
 
SELECT 		c.ClientId AS [ClientId],
            p.[firstname] + ' ' +  p.[lastname] AS [ClientName],
			c.Created AS [Created],
			isnull(u.[Name], 'Not Provided') AS [StatusName],
			p.SSN AS [SSN],
			co.[CompanyId] AS [SAId],
			co.[Name] AS [SA],
			a.[AgencyId] AS [AgencyId],
            a.[Name] AS [Agency],
			s.[StateId] AS [StateId],
			s.[Abbreviation] AS [State],
			q1.entrytypeid AS [EntryTypeId],
			q1.Fee as [Fee],
			isnull(q1.amount,0) AS [Assessed],
			isnull(q2.commrecid,-1) AS [RecipientId],
			isnull(q2.Display, 'Not Found') AS [RecipientAbbrev],
			q2.[percent] AS [Percent],
			isnull(q3.[Amount],0) AS [Paid],
			isnull(q1.amount,0) - isnull(q3.[amount],0) AS [AmountOwed]
FROM
tblClient c 
inner join tblperson p ON p.ClientId = c.ClientId
INNER JOIN tblCompany co ON co.CompanyID = c.CompanyID
INNER JOIN tblAgency a ON a.AgencyID = c.AgencyID
LEFT JOIN tblClientStatus u ON c.CurrentClientStatusId = u.ClientStatusId
LEFT JOIN tblState s ON p.StateID = s.StateId
INNER JOIN --Total Charged in Fees
			(select 
				r.clientid as [ClientId], 
 				r.entrytypeid as [EntryTypeId],
				e.DisplayName as [Fee],
				Sum(abs(r.amount)) as [Amount]
			from tblregister r
			inner join tblentrytype  e on (r.entrytypeid = e.entrytypeid)
			where r.void is null and r.bounce is null
			and e.fee = 1 --and r.amount < 0 and isfullypaid = 1
			group by r.clientid, r.entrytypeid, e.DisplayName
			) q1 on (q1.clientid = c.clientid)
--Percent per fee and recipient
LEFT JOIN (select   st.commrecid,
					f.entrytypeId,
					st.companyid,
					cs.agencyid,
					cr.Display,
					Sum(f.[percent]) as [percent]
			from tblCommFee f
			inner join tblCommStruct st on (st.commstructid = f.commstructid)
			inner join tblCommScen cs on (cs.commscenid = st.commscenid)
			Left join tblCommRec cr on (st.commrecid = cr.commrecid)
			group by st.commrecid,f.entrytypeId,st.companyid,cs.agencyid, cr.Display 
			)
			q2 on (q1.entrytypeId = q2.entrytypeid and q2.agencyid=c.agencyid and c.companyid = q2.companyid)
LEFT JOIN ( --Total Paid by Client
			SELECT reg.clientid AS [ClientId],
				reg.EntryTypeId AS [EntryTypeId],
				Sum(rpmt.Amount) AS [Amount]
				FROM tblregisterpayment rpmt 
				INNER JOIN tblRegister reg ON reg.RegisterId = rpmt.FeeRegisterId
				INNER JOIN tblEntryType et ON et.EntryTypeId = reg.EntryTypeId
				WHERE rpmt.Voided = 0
				AND rpmt.Bounced = 0
				AND rpmt.Amount >= 0
				GROUP BY reg.clientid, reg.EntryTypeId
			) q3 on (q3.clientid = c.clientid and q3.entrytypeid = q1.entrytypeid)
WHERE
p.Relationship = 'Prime'
AND (@CompanyId IS NULL OR (co.CompanyId = @CompanyId))
AND (@StateId IS NULL OR (s.StateId = @StateId))
AND (@AgencyId IS NULL OR (a.AgencyId = @AgencyId))
And (@CommRecId IS NULL OR (isnull(q2.CommRecId,-1) = @CommRecId))
AND c.currentclientstatusid not in (15,17,18) 
END
GO
/****** Object:  StoredProcedure [dbo].[stp_TransferHistory]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_TransferHistory]
as
begin


select cast(convert(varchar(10),v.minstatuscreated,101) as datetime) [transferred], 
	'' [company],
	'' [rep],
	'' [client],
	count(*) [Clients],
	1 [seq]
from tblclient c
join tblimportedclient i on i.importid = c.serviceimportid
join tblleadapplicant l on l.leadapplicantid = i.externalclientid 
join vw_enrollment_CurrentStatusCreated v on v.leadapplicantid = l.leadapplicantid and v.currentstatusid in (10,19) -- In Process, Return to Compliance
where v.minstatuscreated > dateadd(d,-60,cast(convert(varchar(10),getdate(),101) as datetime))
group by convert(varchar(10),v.minstatuscreated,101)

union all

select cast(convert(varchar(10),v.minstatuscreated,101) as datetime) [transferred], 
	co.shortconame [company],
	'' [rep],
	'' [client],
	count(*) [clients],
	2 [seq]
from tblclient c
join tblimportedclient i on i.importid = c.serviceimportid
join tblleadapplicant l on l.leadapplicantid = i.externalclientid 
join vw_enrollment_CurrentStatusCreated v on v.leadapplicantid = l.leadapplicantid and v.currentstatusid in (10,19) -- In Process, Return to Compliance
join tblcompany co on co.companyid = c.companyid
where v.minstatuscreated > dateadd(d,-60,cast(convert(varchar(10),getdate(),101) as datetime))
group by convert(varchar(10),v.minstatuscreated,101), co.shortconame

union all

select cast(convert(varchar(10),v.minstatuscreated,101) as datetime) [transferred], 
	co.shortconame [company],
	u.firstname + ' ' + u.lastname [rep],
	'' [client],
	count(*) [clients],
	3 [seq]
from tblclient c
join tblimportedclient i on i.importid = c.serviceimportid
join tblleadapplicant l on l.leadapplicantid = i.externalclientid 
join vw_enrollment_CurrentStatusCreated v on v.leadapplicantid = l.leadapplicantid and v.currentstatusid in (10,19) -- In Process, Return to Compliance
join tblcompany co on co.companyid = c.companyid
join tbluser u on u.userid = l.repid
where v.minstatuscreated > dateadd(d,-60,cast(convert(varchar(10),getdate(),101) as datetime))
group by convert(varchar(10),v.minstatuscreated,101), co.shortconame, u.firstname, u.lastname

union all

select cast(convert(varchar(10),v.minstatuscreated,101) as datetime) [transferred], 
	co.shortconame[company],
	u.firstname + ' ' + u.lastname [rep],
	c.accountnumber + ' - ' + p.firstname + ' ' + p.lastname [client],
	1 [clients],
	4 [seq]
from tblclient c
join tblimportedclient i on i.importid = c.serviceimportid
join tblleadapplicant l on l.leadapplicantid = i.externalclientid 
join vw_enrollment_CurrentStatusCreated v on v.leadapplicantid = l.leadapplicantid and v.currentstatusid in (10,19) -- In Process, Return to Compliance
join tblperson p on p.personid = c.primarypersonid
join tblcompany co on co.companyid = c.companyid
join tbluser u on u.userid = l.repid
where v.minstatuscreated > dateadd(d,-60,cast(convert(varchar(10),getdate(),101) as datetime))

order by [transferred] desc, [company], [rep], client


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNewBofAAccounts]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 11/05/2009
-- Description:	Gathers new BofA account conversions
-- =============================================
CREATE PROCEDURE [dbo].[stp_GetNewBofAAccounts] 

	@ClientID VARCHAR(MAX) = '0', 
	@TrustID VARCHAR(5) = '0'
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @SQL VARCHAR(MAX)

        SELECT @SQL = 'SELECT 
		p.relationship,
        c.AccountNumber,
        p.SSN,
        p.LastName,
        p.FirstName + '' '' + LastName [FullName],
        p.Street,
        p.Street2,
        p.City,
        s.abbreviation,
        p.zipcode,
        c.clientid
        FROM tblclient c
        JOIN tblperson p ON p.clientid = c.clientid
        JOIN tblstate s ON s.stateid = p.stateid
        WHERE 
		c.currentclientstatusid not in (15, 17, 18) 
        and p.personid = c.primarypersonid 
		and c.BofAConversionDate IS NULL '
		SELECT @SQL = @SQL + 'AND (c.trustid IN (' + @TrustID + ') OR c.ClientID IN (' + @ClientID + '))'

		EXEC (@SQL)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_CleanupCreditor_DeleteCreditorPhone]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_CleanupCreditor_DeleteCreditorPhone]
@CreditorId int
AS
BEGIN

--tblPhone
delete from tblphone where phonetypeid not in (57,58) and phoneid in 
	(select phoneid from tblcreditorphone
	 where creditorid = @CreditorId
	 and phoneid not in 
		(Select phoneid from tblcreditorphone where  creditorid <> @creditorid
		union
		select phoneid from tblcontactphone
		union
		select phoneid from tblagencyphone
		union
		select phoneid from tblagentphone
		union
		select phoneid from tblpersonphone
		)
	)

--tblCreditorPhones
Delete from tblCreditorPhone
Where CreditorId = @CreditorId
and phoneid not in (select phoneid from tblphone where phonetypeid in (57,58))

END
GO
/****** Object:  StoredProcedure [dbo].[stp_RefundReportTest]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 03/24/2009
-- Description:	Refund report
-- =============================================
CREATE PROCEDURE [dbo].[stp_RefundReportTest] 
	-- Add the parameters for the stored procedure here
	@StartDate VARCHAR(50) = '01/01/1900', 
	@EndDate VARCHAR(50) = '12/31/2050',
	@AccountNumber INT = 0
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @SDate SMALLDATETIME
	DECLARE @EDate SMALLDATETIME

	SET @SDate = CONVERT(SMALLDATETIME, @StartDate)
	SET @EDate = CONVERT(SMALLDATETIME, @EndDate) 

SELECT DATENAME(MONTH, rg.created) [Month],
rg.created [Date], 
cl.AccountNumber [Account Number],
p.firstname + ' ' + p.lastname [Client Name],
co.ShortCoName [Law Firm],
ag.Name [Agent],
(SELECT TOP 1 rde.Description FROM tblreasons res
JOIN tblreasonsdesc rde ON rde.ReasonsDescID = res.ReasonsDescID
WHERE res.value = cl.clientid) [Reason],
CASE WHEN (rg.amount * -1) > (((SELECT CAST(SUM(r.amount) AS  DECIMAL(18, 2)) FROM tblregister r
WHERE r.entrytypeid IN (3)
AND bounce IS NULL
AND r.clientid = rg.clientid)) + ((SELECT CAST(SUM(r.amount) AS  DECIMAL(18, 2)) FROM tblregister r
WHERE r.entrytypeid NOT IN (3, 21)
AND r.clientid = rg.clientid))) THEN 'YES' ELSE 'NO' END [Refund],
UPPER(LEFT(us.UserName, 2)) [CSR],
(SELECT CAST(SUM(rp.Amount) AS  DECIMAL(18, 2)) FROM tblregister r
JOIN tblclient cl ON cl.clientid = r.clientid
JOIN tblregisterpayment rp on rp.feeregisterid = r.registerid
WHERE rp.voided IS NOT NULL
AND r.clientid = rg.clientid
AND entrytypeid IN (2, 42)) [Retainer Fees Paid],
(SELECT CAST(SUM(rp.Amount) AS  DECIMAL(18, 2)) FROM tblregister r
JOIN tblclient cl ON cl.clientid = r.clientid
JOIN tblregisterpayment rp on rp.feeregisterid = r.registerid
WHERE rp.voided IS NOT NULL
AND r.clientid = rg.clientid
AND entrytypeid IN (1))  [Maintenance Fees Paid],
(SELECT CAST(SUM(rp.Amount) AS  DECIMAL(18, 2)) FROM tblregister r
JOIN tblclient cl ON cl.clientid = r.clientid
JOIN tblregisterpayment rp on rp.feeregisterid = r.registerid
WHERE rp.voided IS NOT NULL
AND r.clientid = rg.clientid
AND entrytypeid IN (4, 18)) [Settlement Fees Paid],
(SELECT CAST(SUM(rp.Amount) AS  DECIMAL(18, 2)) FROM tblregister r
JOIN tblclient cl ON cl.clientid = r.clientid
JOIN tblregisterpayment rp on rp.feeregisterid = r.registerid
WHERE rp.voided IS NOT NULL
AND r.clientid = rg.clientid
AND entrytypeid NOT IN (3)) [Total Potental Refund],
(rg.amount * -1)  [Refund Amount],
CASE WHEN (((SELECT TOP 1 r1.amount 
FROM tblregister r1 
JOIN tblclient c1 ON c1.clientid = r1.ClientId
WHERE r1.EntryTypeId = 21
AND c1.accountnumber = cl.accountnumber)
+ (SELECT sum(rp2.amount)
FROM tblregisterpayment rp2
JOIN tblregister r2 ON r2.RegisterId = rp2.FeeRegisterId
JOIN tblclient c2 ON c2.clientid = r2.clientid
WHERE r2.entrytypeid NOT IN (3)
AND c2.accountnumber = cl.accountnumber)) * -1) < 0 THEN 0 ELSE (((SELECT TOP 1 r1.amount 
FROM tblregister r1 
JOIN tblclient c1 ON c1.clientid = r1.ClientId
WHERE r1.EntryTypeId = 21
AND c1.accountnumber = cl.accountnumber)
+ (SELECT sum(rp2.amount)
FROM tblregisterpayment rp2
JOIN tblregister r2 ON r2.RegisterId = rp2.FeeRegisterId
JOIN tblclient c2 ON c2.clientid = r2.clientid
WHERE r2.entrytypeid NOT IN (3)
AND c2.accountnumber = cl.accountnumber)) * -1) END [PosBalance]
FROM tblRoadMap rm
JOIN tblClient cl ON cl.clientid = rm.clientid
JOIN tblperson p ON p.clientid = cl.clientid
	AND p.Relationship = 'Prime'
JOIN tblclientstatus cs ON cs.ClientStatusID = rm.ClientStatusID
JOIN tblcompany co ON co.companyid = cl.CompanyID
JOIN tblagency ag ON ag.AgencyID = cl.agencyid
LEFT JOIN tblregister rg ON rg.ClientId = cl.ClientID
JOIN tblentrytype et ON et.EntryTypeId = rg.EntryTypeId
JOIN tblUser us ON us.userid = rg.Createdby
WHERE rm.clientstatusid IN (17)
AND rm.created BETWEEN @SDate AND @EDate
AND rg.entrytypeid IN (21, 50)
ORDER BY rm.clientid
END
GO
/****** Object:  StoredProcedure [dbo].[stp_CacheView]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_CacheView]
(
	@view nvarchar(250),
	@newTable nvarchar(250) = null
)

AS

declare @columns nvarchar(MAX)

if @newTable is null
begin
	set @newTable = 'tblCache_' + @view
end

if EXISTS(SELECT * FROM sys.tables WHERE [name] = @newTable)
begin
	exec ('TRUNCATE TABLE ' + @newTable)
end
else begin
	set @columns = 'CREATE TABLE ' + @newTable + ' ('

	SELECT
		@columns = @columns + '[' + c.name + '] ' + t.name + (CASE WHEN t.precision = 0 THEN '(' + cast(c.max_length as nvarchar(50)) + ')' ELSE '' END) + ' null,'
	FROM
		sys.columns as c
		inner join sys.objects as o on o.object_id = c.object_id
		inner join sys.types as t on t.system_type_id = c.system_type_id
	WHERE
		o.name = 'vwNegotiationDistributionSource'
	ORDER BY
		c.column_id

	set @columns = substring(@columns, 0, len(@columns)) + ', EntityID int)'

	exec(@columns)
end


exec
(
	'INSERT INTO
		' + @newTable + '
	SELECT
		*, null [EntityID]
	FROM
		' + @view
)
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAttorneyPhoneInfo]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 06/03/2009
-- Description:	CompanyPhoneNumbers
-- =============================================
CREATE PROCEDURE [dbo].[stp_GetAttorneyPhoneInfo] 
	(	
		@ClientID int 
	)
AS
BEGIN
	SET NOCOUNT ON;
SELECT cp.companyid, cp.phonetype, pt.name [Type], cp.PhoneNumber [Number] 
FROM tblClient cl
INNER JOIN tblcompanyphones cp ON cp.companyid = cl.CompanyID
INNER JOIN tblphonetype pt ON pt.phonetypeid = cp.PhoneType
WHERE ClientID = @ClientID
AND cp.PhoneType IN (46, 47, 50)
ORDER BY phonetype
END
GO
/****** Object:  StoredProcedure [dbo].[stp_PotentialPayCommissionRec]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_PotentialPayCommissionRec]
(
	@registerpaymentid int,
	@commscenid int,
	@parentcommrecid int = null,
	@companyid int
)
as


------------------------------------------------------------------
-- LOGIC FOR COMMISSION PAYMENT:
-- (1) In order (RLTD), loop through recipient recursively
-- (2) For each recipient, write out the commission values
--		to tblregisterpaymentcommission including the following:
--     (a) RegisterPaymentID - which will give us the
--         client, fee, and payment info
--     (b) CommStructID - which will give us the recipient, 
--         parent recipient, scenario, and percent
--     (c) Amount
-- (3) Sum and return the total percent used
------------------------------------------------------------------


-- discretionary variables
declare @commstructid int
declare @commrecid int
declare @amount money
declare @paymentamount money
declare @amountpaid money
declare @entrytypeid int
declare @percent money


-- (1) prepare loop for recipients against current parent and scenario
declare cursor_PayCommissionRec cursor local for
	select
		commstructid,
		commrecid
	from
		tblcommstruct
	where
		companyid = @companyid and
		(
			(commscenid = @commscenid and parentcommrecid = @parentcommrecid) or
			(commscenid = @commscenid and parentcommrecid is null and @parentcommrecid is null)
		)
	order by
		[order]

open cursor_PayCommissionRec

fetch next from cursor_PayCommissionRec into @commstructid, @commrecid
while @@fetch_status = 0

	begin

		set @amount = null
		set @paymentamount = null
		set @amountpaid = null
		set @entrytypeid = null
		set @percent = null

		-- find original payment amount and entrytypeid
		select
			@paymentamount = rp.amount,
			@entrytypeid = r.entrytypeid
		from
			tblpotentialregisterpaymenttmp rp inner join
			tblpotentialregistertmp r on rp.feeregisterid = r.registerid
		where
			rp.registerpaymentid = @registerpaymentid

		-- find percent owed for this entrytype and commstruct
		select
			@percent = [percent]
		from
			tblcommfee
		where
			entrytypeid = @entrytypeid and commstructid = @commstructid

		-- assuming we found a fee payment amount, fee entrytype and percent for the commstruct...
		if not @paymentamount is null and not @entrytypeid is null and not @percent is null
			begin

				-- calculate the amount for this candidate
				set @amount = round(@paymentamount * @percent, 2)

				-- find amount already paid out in commission already
				select
					@amountpaid = sum(amount)
				from
					#commpaytmp
				where
					registerpaymentid = @registerpaymentid

				-- amount must be less then amountleft which is equal to (paymentamount - amountpaid)
				if (@paymentamount - @amountpaid) < @amount
					begin
						set @amount = @paymentamount - @amountpaid
					end

				-- assuming there is some positive amount to pay....
				if @amount > 0
					begin

						-- (2) write out payment
						insert #commpaytmp
						(
							registerpaymentid,
							commstructid,
							[percent],
							amount,
							commrecid,
							entrytypeid,
							companyid
						)
						values
						(
							@registerpaymentid,
							@commstructid,
							@percent,
							@amount,
							@commrecid,
							@entrytypeid,
							@companyid
						)

					end

			end

		-- recursively run this same proc again with this recipient as parent
		exec stp_PotentialPayCommissionRec @registerpaymentid, @commscenid, @commrecid, @companyid

		fetch next from cursor_PayCommissionRec into @commstructid, @commrecid
	end

close cursor_PayCommissionRec
deallocate cursor_PayCommissionRec
GO
/****** Object:  StoredProcedure [dbo].[stp_CommissionsByFeeTypeByClient]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
exec stp_CommVsChargebacks 17,'8/7/08','8/8/08',2
exec stp_CommissionsByFeeType 17,'8/1/08','8/7/08',2
exec stp_CommissionsByFeeTypeByClient 17,'8/1/08','8/7/08',2,2
exec stp_ChargebacksByFeeType 24,'8/1/08','8/7/08',2
exec stp_ChargebacksByFeeTypeByClient 24,'8/1/08','8/7/08',2,42
*/

CREATE procedure [dbo].[stp_CommissionsByFeeTypeByClient]
(
	@recid int
,	@startdate datetime
,	@enddate datetime
,	@companyid int
,	@feetypeid int
)
as

declare @parentrecid int, @ClientCreatedDateFrom datetime, @ClientCreatedDateTo datetime,
	@CommRec varchar(50)


if @recid = 17 begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '7/31/2008 23:59:59'
end
else if @recid = 29 begin
	set @ClientCreatedDateFrom = '8/1/2008'
	set @ClientCreatedDateTo = '1/1/2010'
end
else if @recid = 5 begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '5/6/2007 23:59:59'
end
else if @recid = 24 begin
	set @ClientCreatedDateFrom = '5/7/2007'
	set @ClientCreatedDateTo = '1/1/2010'
end
else begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '1/1/2010'
end

select @CommRec = Display from tblCommRec where CommRecID = @recid
select @parentrecid = isnull(ParentCommRecID,CommRecID) from tblCommRec where CommRecID = @recid


SELECT
	@CommRec [CommRec],
	Company,
	@feetypeid [FeeTypeID],
	FeeType,
	FirstName + ' ' + LastName [Client],
	sum(abs(Amount)) [Amount]
FROM
	(
		SELECT
			et.EntryTypeID [FeeTypeID],
			et.[DisplayName] as FeeType,
			p.FirstName,
			p.LastName,
            c.Created [ClientCreated],
			cb.CommBatchID as [BatchID],
			comp.[Name] as Company,
			cp.Amount,
			cs.CommRecID
		FROM
			tblCommPay as cp LEFT OUTER JOIN
			tblRegisterPayment as rp on rp.RegisterPaymentID = cp.RegisterPaymentID LEFT OUTER JOIN
			tblRegister as r on r.RegisterID = rp.FeeRegisterID LEFT OUTER JOIN
			tblClient as c on c.ClientID = r.ClientId JOIN
			tblEntryType as et on et.EntryTypeId = r.EntryTypeId and et.EntryTypeID = @feetypeid LEFT OUTER JOIN
			tblAgency as a on a.AgencyID = c.AgencyID LEFT OUTER JOIN
			tblCompany as comp on comp.CompanyID = c.CompanyID LEFT OUTER JOIN
			tblCommBatch as cb on cb.CommBatchID = cp.CommBatchID LEFT JOIN
			tblCommStruct as cs on cs.CommStructID = cp.CommStructID LEFT JOIN
			tblPerson p on c.primarypersonid = p.personid LEFT OUTER JOIN
			(
				SELECT 
					[Value], 
					Amount, 
					Reason 
				FROM 
					tblTransactionAudit 
				WHERE 
					[Type] = 'register'
			) as vr on r.RegisterId = vr.Value LEFT OUTER JOIN
			tblBouncedReasons on r.BouncedReason = tblBouncedReasons.BouncedID
			where comp.Companyid = @companyid

	) as commTable
WHERE
	CommRecID = @parentrecid -- Used to filter commission structures
	and (ClientCreated between @ClientCreatedDateFrom and @ClientCreatedDateTo) -- Based on user specific rules
	and BatchID in 
	(
		select
			b.CommBatchID
		from 
			tblCommBatch b
			join tblCommBatchTransfer t on t.CommBatchID = b.CommBatchID and t.CommRecID = @recid -- Get batches that belong to this CommRec
		where 
			BatchDate between @startdate and @enddate -- User selected date range
	)
group by Company,FeeType,FirstName,LastName
order by client,amount
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_getPrintQueue]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_getPrintQueue]

	(
		@QueueType int = 1
	)
AS
BEGIN

if @QueueType = 0
	BEGIN
		select 
		[QID] = c.clientid
		, [Display Name] = c.accountnumber
		, [Client Name] = p.firstname + ' ' + p.lastname
		, [Printed By] =  null
		, [Total Pages] = 0
		, [ActionDate] = v.statuscreated
		, [PrintDocumentPath] = null
		from tblclient c 
		join tblcompany cp on cp.companyid = c.companyid
		join tblcompanyaddresses ca on ca.companyid = cp.companyid and ca.addresstypeid = 3 -- Client
		join tblperson p on p.personid = c.primarypersonid
		join vw_ClientCurrentStatusCreated v on v.clientid = c.clientid
		where 1=1
		and c.currentclientstatusid = 14 -- active
		and v.minstatuscreated > '3/31/2010' -- date we started these emails
		and datediff(d,v.statuscreated,getdate()) > 0
		and c.clientid not in (select distinct printclientid from tblletters_printed where printdoctypeid = 'W0001' and printclientid = c.clientid)
		and p.emailaddress is null
	END
if @QueueType = 1
	BEGIN
		select 
		[QID] = lp.printid
		,[Display Name] = dt.displayname
		, [Client Name] = p.firstname + ' ' + p.lastname
		, [Printed By] =  cu.firstname + ' ' + cu.lastname
		, [Total Pages] = PrintDocumentPageCount
		, [ActionDate] = lp.PrintDate
		,PrintDocumentPath
		from [tblLetters_Printed]  lp
		inner join tbldocumenttype dt on lp.printdoctypeid = dt.typeid
		inner join tblclient c on c.clientid = lp.printclientid
		inner join tblperson p on p.personid = c.primarypersonid
		inner join tbluser cu on cu.userid = lp.printby
		where year(printdate)=year(getdate()) and month(printdate)=month(getdate()) and day(printdate)=day(getdate())
		order by printdate desc
	END

END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationUpdateCurrentCreditor]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_NegotiationUpdateCurrentCreditor]
(
	@AccountID int
,	@CreditorID int
,	@CreatedBy int
)
as
BEGIN
/*
	history:
	jhernandez		05/08/08		Created. Changes creditors using the current creditor's account
									information.
	jhernandez		05/09/08		Add client notes.
*/

declare 
	@CurCreditorInstanceID int, 
	@NewCreditorInstanceID int, 
	@NewCreditorName varchar(50),
	@CurCreditorName varchar(50),
	@ClientID int


select @ClientID = a.ClientID, @CurCreditorInstanceID = a.CurrentCreditorInstanceID, @CurCreditorName = c.Name
from tblAccount a
join tblCreditorInstance ci on ci.CreditorInstanceID = a.CurrentCreditorInstanceID
join tblCreditor c on c.CreditorID = ci.CreditorID
where a.AccountID = @AccountID


select @NewCreditorName = [Name]
from tblCreditor
where CreditorID = @CreditorID


insert tblCreditorInstance (
	AccountID,
	CreditorID,
	ForCreditorID,
	Acquired,
	Amount,
	OriginalAmount,
	AccountNumber,
	ReferenceNumber,
	Created,
	CreatedBy,
	LastModified,
	LastModifiedBy
)
select
	@AccountID,
	@CreditorID,
	ForCreditorID,
	Acquired,
	Amount,
	OriginalAmount,
	AccountNumber,
	ReferenceNumber,
	getdate(),
	@CreatedBy,
	getdate(),
	@CreatedBy
from
	tblCreditorInstance
where
	CreditorInstanceID = @CurCreditorInstanceID


select @NewCreditorInstanceID = scope_identity()


if (@NewCreditorInstanceID > 0) begin
	update tblAccount
	set CurrentCreditorInstanceID = @NewCreditorInstanceID, LastModified = getdate(), LastModifiedBy = @CreatedBy
	where AccountID = @AccountID

	insert tblNote (
		ClientID,
		[Value],
		Created,
		CreatedBy,
		LastModified,
		LastModifiedBy
	)
	values (
		@ClientID,
		'Creditor Updated:  Changed current creditor from ' + @CurCreditorName + ' to ' + @NewCreditorName,
		getdate(),
		@CreatedBy,
		getdate(),
		@CreatedBy
	) 
end


--return
select @NewCreditorInstanceID


END
GO
/****** Object:  StoredProcedure [dbo].[stp_Tool_DeleteConstraintsForTableField]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Tool_DeleteConstraintsForTableField]
	(@TableName varchar (255), @FieldName varchar (255)) AS


-- Retrieve a list of constraints and stuff into temp table #tblConstraint 

SELECT
	[Name] AS ConstraintName
INTO
	#tblConstraints
FROM
	sysobjects so
	JOIN sysconstraints sc ON so.id = sc.constid
WHERE
	object_name(so.parent_obj) = @TableName AND
	so.xtype IN ('C', 'F', 'PK', 'UQ', 'D') AND 
	sc.colid =
		(
			SELECT colid FROM syscolumns WHERE [ID] = object_id('dbo.' + @TableName) AND [Name] = @FieldName
		)


-- Loop through all constraint information in #tblConstraint and delete them

DECLARE @ConstraintName varchar (255)

DECLARE MCTCursor CURSOR FOR SELECT ConstraintName FROM #tblConstraints

OPEN MCTCursor

FETCH NEXT FROM MCTCursor INTO @ConstraintName
WHILE @@FETCH_STATUS = 0
BEGIN

	EXEC ('ALTER TABLE [' + @TableName + '] DROP CONSTRAINT [' + @ConstraintName + ']')

	FETCH NEXT FROM MCTCursor INTO @ConstraintName
END

CLOSE MCTCursor
DEALLOCATE MCTCursor

DROP TABLE #tblConstraints
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_ClientInfoSheet_GetFirmInfo]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
stp_LetterTemplates_ClientInfoSheet_GetClientInfo 778;
go
stp_LetterTemplates_ClientInfoSheet_GetBankInfo 778;
go
stp_LetterTemplates_ClientInfoSheet_GetFirmInfo 778;
go
*/

create procedure [dbo].[stp_LetterTemplates_ClientInfoSheet_GetFirmInfo]
(
@clientid int
)
as
BEGIN
SELECT TOP 1 co.[Name] as CompanyName, isnull(ca.Address1, '') as Address1, isnull(ca.Address2, '') as Address2, 
isnull(ca.City, '') as City, isnull(ca.State, '') as State, isnull(ca.Zipcode, '') as ZipCode, (SELECT TOP 1 isnull(cp.PhoneNumber, '') 
FROM tblClient as c inner join tblCompanyAddresses as ca 
on ca.CompanyID = c.CompanyID inner join tblCompanyPhones as cp 
on cp.CompanyID = c.CompanyID 
WHERE c.ClientID = @clientid and cp.PhoneType = 46) as PhoneNumber, 
(SELECT TOP 1 isnull(cp.PhoneNumber, '') FROM tblClient as c inner join tblCompanyAddresses as ca 
on ca.CompanyID = c.CompanyID inner join tblCompanyPhones as cp on cp.CompanyID = c.CompanyID 
WHERE c.ClientID = @clientid and cp.PhoneType = 47) as FaxNumber 
FROM tblClient as c inner join tblCompanyAddresses as ca 
on ca.CompanyID = c.CompanyID inner join tblCompany as co 
on co.CompanyID = c.CompanyID WHERE ca.AddressTypeID = 3 and c.ClientID = @clientid
END
GO
/****** Object:  StoredProcedure [dbo].[stp_PotentialPayFeeAmount]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_PotentialPayFeeAmount]
(
	@registerid int,
	@amount money,
	@clientid int
)
as

---------------------------------------------------------------------
-- LOGIC FOR TAKING AMOUNT:
-- (1) Insert register payment record against this fee
-- (2) Loop not-totally-used deposits, oldest first, for this
--      client; and insert register payment deposit records
--      finalizing each deposit that is completely used
--      (a) Do not use deposits marked VOID
--      (b) Do not use deposits marked BOUNCE
--      (c) deposits must be greater then 0
--      (d) deposits cannot be on hold
--      (e) records cannot have an adjustedrecordid (means record
--          is actually a fee adjustment record)
-- (3) Check fee, when finished, to determine if isfullypaid
--      should be set
-- (4) Pay commission
---------------------------------------------------------------------


-- discretionary variables
declare @registerpaymentid int
declare @depositid int
declare @depositneeded money
declare @deposittotal money
declare @depositalreadyused money
declare @deposithasleft money


-- (2) insert a register payment record against this fee for the full amount
insert tblpotentialregisterpaymenttmp
(
	paymentdate,
	feeregisterid,
	amount,
	pfobalance,
	sdabalance
)
values
(
	getdate(),
	@registerid,
	@amount,
	0,
	0
)

select @registerpaymentid = scope_identity()


-- (4) reset deposit needed to entire amount
set @depositneeded = @amount


-- (5) while full amount has not been used by a deposit loop and get
while @depositneeded > 0
	begin

		-- (a) find the first not-totally-used deposit for this client in the register
		-- that isn't on hold, bounced or voided, or a fee adjustment
		select top 1 @depositid = registerid 
		from tblpotentialregistertmp
		where
			isfullypaid = 0 and
			clientid = @clientid and
			adjustedregisterid is null and
			amount > 0 and
			(
				hold is null or hold <= getdate() or [clear] <= getdate()
			)
		order by
			transactiondate, registerid

		if not @depositid is null -- found an available deposit
			begin

				-- (b) determine the original total amount of deposit
				select
					@deposittotal = coalesce(amount, 0)
				from
					tblpotentialregistertmp
				where
					registerid = @depositid


				-- (c) determine how much deposit already spent and has left now
				--     but do not include any bounced or voided payment deposits
				select
					@depositalreadyused = coalesce(sum(amount), 0)
				from
					tblpotentialregisterpaymentdeposittmp
				where
					depositregisterid = @depositid


				set @deposithasleft = @deposittotal - @depositalreadyused
				--print 'deposit needed ' + cast(@depositneeded as varchar(10)) + ' dep has left ' + cast(@deposithasleft as varchar(10))

				-- (d) determine what deposit has in relation
				if @deposithasleft < @depositneeded -- too little, we need more
					begin
						-- insert payment deposit (taking only what was left)
						insert tblpotentialregisterpaymentdeposittmp
						(
							registerpaymentid,
							depositregisterid,
							amount
						)
						values
						(
							@registerpaymentid,
							@depositid,
							@deposithasleft
						)

						-- subtract deposit used from needed
						set @depositneeded = @depositneeded - @deposithasleft

						-- set deposit as fully paid out
						update
							tblpotentialregistertmp
						set
							isfullypaid = 1
						where
							registerid = @depositid

					end
				else if @deposithasleft = @depositneeded -- exactly enough
					begin
						-- insert payment deposit (taking everything left)
						insert tblpotentialregisterpaymentdeposittmp
						(
							registerpaymentid,
							depositregisterid,
							amount
						)
						values
						(
							@registerpaymentid,
							@depositid,
							@deposithasleft
						)

						-- subtract deposit used from needed
						set @depositneeded = @depositneeded - @deposithasleft

						-- set deposit as fully paid out
						update
							tblpotentialregistertmp
						set
							isfullypaid = 1
						where
							registerid = @depositid

					end
				else if @deposithasleft > @depositneeded -- too much, will have leftovers
					begin
						-- insert payment deposit (taking only deposit needed)
						insert tblpotentialregisterpaymentdeposittmp
						(
							registerpaymentid,
							depositregisterid,
							amount
						)
						values
						(
							@registerpaymentid,
							@depositid,
							@depositneeded
						)

						-- subtract deposit used from needed
						set @depositneeded = @depositneeded - @depositneeded

					end
			end
		else -- did NOT find available deposit
			begin
				-- just exit loop (THIS SHOULD NEVER HAPPEN - there should always
				-- be enough deposit before getting here)
				break
			end

	end -- while loop


-- (6) Pay commission
exec stp_PotentialPayCommission @registerpaymentid, @clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_ChargebacksByFeeType]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
exec stp_CommVsChargebacks 17,'8/7/08','8/8/08',2
exec stp_CommissionsByFeeType 17,'8/7/08','8/8/08',2
exec stp_ChargebacksByFeeType 17,'8/7/08','8/8/08',2
*/

CREATE procedure [dbo].[stp_ChargebacksByFeeType]
(
	@recid int
,	@startdate datetime
,	@enddate datetime
,	@companyid int
)
as

declare @parentrecid int, @ClientCreatedDateFrom datetime, @ClientCreatedDateTo datetime,
	@CommRec varchar(50)


if @recid = 17 begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '7/31/2008 23:59:59'
end
else if @recid = 29 begin
	set @ClientCreatedDateFrom = '8/1/2008'
	set @ClientCreatedDateTo = '1/1/2010'
end
else if @recid = 5 begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '5/6/2007 23:59:59'
end
else if @recid = 24 begin
	set @ClientCreatedDateFrom = '5/7/2007'
	set @ClientCreatedDateTo = '1/1/2010'
end
else begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '1/1/2010'
end

select @CommRec = Display from tblCommRec where CommRecID = @recid
select @parentrecid = isnull(ParentCommRecID,CommRecID) from tblCommRec where CommRecID = @recid


SELECT
	@CommRec [CommRec],
	Company,
	FeeTypeID,
	FeeType,
	abs(sum(Amount)) [Amount]
FROM
	(
		SELECT
			et.EntryTypeID [FeeTypeID],
			et.[DisplayName] as FeeType,
            c.Created [ClientCreated],
			cp.CommBatchID as [BatchID],
			comp.Name as Company,
			-cp.Amount as Amount,
			cs.CommRecID
		FROM         
			tblCommChargeback as cp LEFT OUTER JOIN
			tblRegisterPayment as rp on rp.RegisterPaymentId = cp.RegisterPaymentID LEFT OUTER JOIN
			tblRegister as r on r.RegisterId = rp.FeeRegisterId LEFT OUTER JOIN
			tblClient as c on c.ClientID = r.ClientId LEFT OUTER JOIN
			tblEntryType as et on et.EntryTypeId = r.EntryTypeId LEFT OUTER JOIN
			tblAgency as a on a.AgencyID = c.AgencyID LEFT OUTER JOIN
			tblCompany as comp on comp.CompanyID = c.CompanyID LEFT OUTER JOIN
			tblCommStruct as cs on cs.CommStructID = cp.CommStructID INNER JOIN
			tblCommBatch as cb on cb.CommBatchID = cp.CommBatchID LEFT OUTER JOIN
			tblPerson as p on c.PrimaryPersonID = p.PersonID LEFT OUTER JOIN
			(
				SELECT 
					[Value], 
					Amount, 
					Reason 
				FROM 
					tblTransactionAudit 
				WHERE 
					[Type] = 'register'
			) as vr on r.RegisterId = vr.Value LEFT OUTER JOIN
			tblBouncedReasons on r.BouncedReason = tblBouncedReasons.BouncedID
			where comp.Companyid = @companyid
	) as commTable
WHERE
	CommRecID = @parentrecid -- Used to filter commission structures
	and (ClientCreated between @ClientCreatedDateFrom and @ClientCreatedDateTo) -- Based on user specific rules
	and BatchID in 
	(
		select
			b.CommBatchID
		from 
			tblCommBatch b
			join tblCommBatchTransfer t on t.CommBatchID = b.CommBatchID and t.CommRecID = @recid -- Get batches that belong to this CommRec
		where 
			BatchDate between @startdate and @enddate -- User selected date range
	)
GROUP BY
	feetypeid,feetype,company
GO
/****** Object:  StoredProcedure [dbo].[stp_Report_DaysAgo]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Report_DaysAgo]
(
	@startdate datetime=null,
	@includeonlytransactions varchar (8000)='1=1',
	@criteria varchar (8000)='1=1',
	@unioncriteria varchar (8000)='1=1',
	@neverdeposited bit = 0
)

as

if @startdate is null
	set @startdate=getdate()

set @unioncriteria=' and ' + @unioncriteria

declare @union varchar(8000)

if (@neverdeposited = 1) begin
	set @union = ' union all 
	select 
		c.clientid,
		c.created as hiredate,
		c.accountnumber,		
		c.depositmethod,
		c.depositamount,
		c.depositday,
		c.depositstartdate,
		a.agencyid,
		a.code as agencyname,
		cs.clientstatusid,
		cs.name as clientstatusname,

		(p.firstname + '' '' + p.lastname) as clientname,
		p.lastname,
		p.street,
		p.street2,
		p.city,
		s.name as statename,
		p.zipcode,
		null as HomePhone,
		null as WorkPhone,
		
		null as daysago,
		null as registerid,
		null as transactiondate,
		null as amount,
		null as bounce,
		null as void,
		null as achyear
		
	from 
		tblclient c inner join
		tblperson p on c.primarypersonid = p.personid inner join
		tblstate s on p.stateid = s.stateid inner join
		tblclientstatus cs on c.currentclientstatusid = cs.clientstatusid inner join
		tblagency a on c.agencyid = a.agencyid 
	where 
		not c.clientid in (select r.clientid from tblregister r where r.entrytypeid in (3,10))
	
' + @unioncriteria
end else begin 
	set @union = ''	
end

set @criteria=' where ' + @criteria

exec
(
	'select
		t.clientid,
		t.hiredate,
		t.accountnumber,		
		t.depositmethod,
		t.depositamount,
		t.depositday,
		t.depositstartdate,
		
		t.agencyid,
		t.agencyname,
		t.clientstatusid,
		t.clientstatusname,

		t.clientname,
		t.lastname,
		t.street,
		t.street2,
		t.city,
		t.statename,
		t.zipcode,
		null as HomePhone,
		null as WorkPhone,
		
		t.daysago,
		t.registerid,
		t.transactiondate,
		t.amount,
		t.bounce,
		t.void,
		t.achyear
		
		
	from
		(
			select
				convert(money, datediff(mi, r.transactiondate, ''' + @startdate + ''')) / 1400 as daysago,
				c.depositmethod,
				c.depositamount,
				c.depositday,
				c.depositstartdate,
				c.created as hiredate,
				c.accountnumber,
				c.agencyid,
				a.code as agencyname,
				cs.clientstatusid,
				(p.firstname + '' '' + p.lastname) as clientname,
				p.lastname,
				p.street,
				p.street2,
				p.city,
				s.name as statename,
				p.zipcode,
				cs.name as clientstatusname,
				null as HomePhone,
				null as WorkPhone,
				r.*
			from
				tblregister r inner join
				(
					select
						nr.clientid,
						max(registerid) as registerid
					from
						tblregister nr inner join
						(
							select
								clientid,
								max(transactiondate) as transactiondate
							from
								tblregister
							where
								(
									entrytypeid = 3 or
									entrytypeid = 10
								)
								and (' + @includeonlytransactions + ')
							group by
								clientid
						)
						as nnr on nr.clientid = nnr.clientid and nr.transactiondate = nnr.transactiondate
					group by
						nr.clientid
				)
				as nr on r.registerid = nr.registerid inner join
				tblclient c on r.clientid = c.clientid inner join
				tblperson p on c.primarypersonid = p.personid inner join
				tblstate s on p.stateid = s.stateid inner join
				tblclientstatus cs on c.currentclientstatusid = cs.clientstatusid inner join
				tblagency a on c.agencyid = a.agencyid 

				
				
		)
		as t
	
		' + @criteria
		
		+ @union

		+ ' order by lastname'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_Negotiations_getPendingOffersByClientID]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_Negotiations_getPendingOffersByClientID]
	(
		@clientid int
	)
AS
BEGIN
select 
	negotiator
	,due
	,currentcreditor
	,originalcreditor
	,balance
	,settlementamt
	,settlementpercent
	,settlementfees
from 
	tblsettlementtrackerimports 
where 
	clientacctnumber in (select accountnumber from tblclient where clientid = @clientid)
	and paid is null 
	and canceldate is null 
	and expired is null
order by 
	due desc
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SD_ClientMinMaxCreated]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 01/05/2010
-- Description:	Gets Min and Max created dates
-- =============================================
CREATE PROCEDURE [dbo].[stp_SD_ClientMinMaxCreated] 
	@UserID int = -1,
	@AgencyID int = 856
AS
BEGIN
	SET NOCOUNT ON;

--declare @AgencyID int
--declare @UserID int
--set @AgencyID = 856

   select min(year(c.created)) [min], max(year(c.created)) [max]
	from tblclient c
    INNER JOIN tblimportedclient ic ON ic.importid = c.serviceimportid 
    INNER JOIN tblleadapplicant la ON la.leadapplicantid = ic.externalclientid 
    LEFT JOIN tblUser u ON u.userID = la.repid 
    LEFT JOIN tblLeadSource ls ON ls.leadsourceid = la.leadsourceid 
    LEFT JOIN tblLeadMarket lm ON lm.leadmarketid = ls.leadmarketid
	WHERE c.agencyid = @agencyID

END
GO
/****** Object:  StoredProcedure [dbo].[stp_ChargebacksByFeeTypeByClient]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
exec stp_CommVsChargebacks 17,'8/7/08','8/8/08',2
exec stp_CommissionsByFeeType 17,'8/7/08','8/8/08',2
exec stp_CommissionsByFeeTypeByClient 17,'8/7/08','8/8/08',2,2
exec stp_ChargebacksByFeeType 24,'8/1/08','8/7/08',2
exec stp_ChargebacksByFeeTypeByClient 24,'8/1/08','8/7/08',2,42
*/

CREATE procedure [dbo].[stp_ChargebacksByFeeTypeByClient]
(
	@recid int
,	@startdate datetime
,	@enddate datetime
,	@companyid int
,	@feetypeid int
)
as

declare @parentrecid int, @ClientCreatedDateFrom datetime, @ClientCreatedDateTo datetime,
	@CommRec varchar(50)


if @recid = 17 begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '7/31/2008 23:59:59'
end
else if @recid = 29 begin
	set @ClientCreatedDateFrom = '8/1/2008'
	set @ClientCreatedDateTo = '1/1/2010'
end
else if @recid = 5 begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '5/6/2007 23:59:59'
end
else if @recid = 24 begin
	set @ClientCreatedDateFrom = '5/7/2007'
	set @ClientCreatedDateTo = '1/1/2010'
end
else begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '1/1/2010'
end

select @CommRec = Display from tblCommRec where CommRecID = @recid
select @parentrecid = isnull(ParentCommRecID,CommRecID) from tblCommRec where CommRecID = @recid


SELECT
	@CommRec [CommRec],
	Company,
	@feetypeid [FeeTypeID],
	FeeType,
	FirstName + ' ' + LastName [Client],
	abs(sum(Amount)) [Amount]
FROM
	(
		SELECT
			et.EntryTypeID [FeeTypeID],
			et.[DisplayName] as FeeType,
			p.FirstName,
			p.LastName,
            c.Created [ClientCreated],
			cp.CommBatchID as [BatchID],
			comp.Name as Company,
			-cp.Amount as Amount,
			cs.CommRecID
		FROM         
			tblCommChargeback as cp LEFT OUTER JOIN
			tblRegisterPayment as rp on rp.RegisterPaymentId = cp.RegisterPaymentID LEFT OUTER JOIN
			tblRegister as r on r.RegisterId = rp.FeeRegisterId LEFT OUTER JOIN
			tblClient as c on c.ClientID = r.ClientId JOIN
			tblEntryType as et on et.EntryTypeId = r.EntryTypeId and et.EntryTypeID = @feetypeid LEFT OUTER JOIN
			tblAgency as a on a.AgencyID = c.AgencyID LEFT OUTER JOIN
			tblCompany as comp on comp.CompanyID = c.CompanyID LEFT OUTER JOIN
			tblCommStruct as cs on cs.CommStructID = cp.CommStructID INNER JOIN
			tblCommBatch as cb on cb.CommBatchID = cp.CommBatchID LEFT OUTER JOIN
			tblPerson as p on c.PrimaryPersonID = p.PersonID LEFT OUTER JOIN
			(
				SELECT 
					[Value], 
					Amount, 
					Reason 
				FROM 
					tblTransactionAudit 
				WHERE 
					[Type] = 'register'
			) as vr on r.RegisterId = vr.Value LEFT OUTER JOIN
			tblBouncedReasons on r.BouncedReason = tblBouncedReasons.BouncedID
			where comp.Companyid = @companyid
	) as commTable
WHERE
	CommRecID = @parentrecid -- Used to filter commission structures
	and (ClientCreated between @ClientCreatedDateFrom and @ClientCreatedDateTo) -- Based on user specific rules
	and BatchID in 
	(
		select
			b.CommBatchID
		from 
			tblCommBatch b
			join tblCommBatchTransfer t on t.CommBatchID = b.CommBatchID and t.CommRecID = @recid -- Get batches that belong to this CommRec
		where 
			BatchDate between @startdate and @enddate -- User selected date range
	)
group by Company,FeeType,FirstName,LastName
order by client,amount
GO
/****** Object:  StoredProcedure [dbo].[stp_MattersReport]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_MattersReport]
(
	@criteria varchar(2000) = ''
)
as

exec('
select distinct t.TaskID, m.MatterID, t.Due, t.TaskResolutionID, t.Description, t.Resolved, m.MatterTypeId,
	cast(convert(varchar(10),t.Created,101) as datetime) [created],
	g.name [Creditor], 
	''**'' + right(ci.accountnumber,4) [last4],
	c.accountnumber, p.firstname + '' '' + p.lastname [Client], 
	Case t.TaskTypeID When 0 Then ''Ad Hoc'' Else tt.name end [TaskType],
	a.firstname + '' '' + a.lastname [AssignedTo],
	cb.firstname + '' '' + cb.lastname [CreatedBy],
	ms.matterstatus,
	cp.shortconame [company],
	ag.name [assignedtogroup],
	m.clientid, 
	isnull(ci.accountid,-1)[accountid], 
	isnull(ci.creditorid,-1)[creditorid], 
	isnull(ci.creditorinstanceid,-1)[creditorinstanceid],
	isnull(m.mattertypeid,-1)[mattertypeid]
from tblmatter m
join tblmattertask mt on mt.matterid = m.matterid
join tbltask t on t.taskid = mt.taskid
join tblclient c on c.clientid = m.clientid
join tblperson p on p.personId = c.primarypersonid
join tblcompany cp on cp.companyid = c.companyid
left join tblcreditorinstance ci on ci.creditorinstanceid = m.creditorinstanceid
left join tblcreditor cr on cr.creditorid = ci.creditorid
left join tblcreditorgroup g on g.creditorgroupid = cr.creditorgroupid
left join tbltasktype tt on tt.tasktypeid = t.tasktypeid
left join tbluser a on a.userid = t.assignedto
left join tblusergroup ag on ag.usergroupid = t.assignedtogroupid
left join tbluser cb on cb.userid = t.createdby
left join tblattorney at on at.attorneyid = m.attorneyid
left join tblmatterstatus ms on ms.matterstatusid = m.matterstatusid
where isnull(m.isdeleted,0) = 0
' + @criteria + '
order by t.Created 
OPTION (FAST 100) '
)
GO
/****** Object:  StoredProcedure [dbo].[stp_attachsif_ExpireSettlements]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_attachsif_ExpireSettlements]
as
BEGIN
	declare @vtblRoadMaps table(SettlementStatusID int,settlementID int,roadmapid int)

	INSERT INTO
		@vtblRoadMaps
	SELECT
		max(SettlementStatusID) as SettlementStatusID,
		SettlementID,roadmapid=null
	FROM
		tblNegotiationRoadmap
	where year(created) = year(getdate()) and month(created) = month(getdate())
	GROUP BY
		SettlementID


	INSERT INTO [tblNegotiationRoadmap]([ParentRoadmapID],[SettlementID],[SettlementStatusID],[Reason],[Created],[CreatedBy],[LastModified],[LastModifiedBy])
	select distinct max(roadmapid),settlementid,9,'Settlement Due Date Expired',getdate(),-1,getdate(),-1 
	from tblNegotiationRoadmap 
	where settlementid in (select vr.settlementid
	from @vtblRoadMaps vr
	inner join tblsettlements s on s.settlementid = vr.settlementid and s.[active]=1 and s.[status] = 'a'
	where SettlementStatusID =5 and s.settlementduedate < dateadd(d,-1,getdate())) 
	group by settlementid
END
GO
/****** Object:  StoredProcedure [dbo].[stp_QueryGetServiceFeeTotals]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_QueryGetServiceFeeTotals]
	(
		@CommRecId int,
		@CommScenIds varchar(255),
		@date1 datetime=null,
		@date2 datetime=null,
		@where varchar(8000) = '',
		@orderby varchar (8000) = '',
		@period varchar (100) = ''
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

declare @CompanyName varchar(50)
set @CompanyName = (SELECT [Display] FROM tblCommRec WHERE CommRecId=@CommRecId)

create table #result
(
	NewChargesTotal money,
	FeePaymentsTotal money,

	PreviousCharges money,
	PreviousPayments money,
	PreviousBalance money,

	EndingBalance money
)

exec('
INSERT INTO	#result 
	(NewChargesTotal,
	FeePaymentsTotal,
	PreviousCharges,
	PreviousPayments)
SELECT
	(SELECT
		ISNULL(SUM(tblCommFeeCharge.FixedAmount), 0) 
	FROM 
		tblRegister INNER JOIN 
		tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
		tblClient ON tblRegister.ClientId=tblClient.ClientId INNER JOIN
		tblCommFeeCharge ON tblRegister.EntryTypeId=tblCommFeeCharge.EntryTypeId 
		AND tblCommFeeCharge.CommRecId=' + @CommRecId + '
	WHERE
		( CAST(CONVERT(char(10), tblRegister.TransactionDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
		( CAST(CONVERT(char(10), tblRegister.TransactionDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
		AgencyId in (SELECT AgencyId FROM tblCommScen WHERE CommScenId 
			IN (' + @CommScenIds + ')) ' + @where + '
	) as NewChargesTotal,
	

	((SELECT 
		ISNULL(SUM(tblCommPay.Amount), 0)
	FROM 
		tblCommBatch INNER JOIN
		tblCommPay on tblCommBatch.CommBatchId=tblCommPay.CommBatchId INNER JOIN 
		tblRegisterPayment on tblCommPay.RegisterPaymentId=tblRegisterPayment.RegisterPaymentId INNER JOIN
		tblRegister ON tblRegisterPayment.FeeRegisterId = tblRegister.RegisterId INNER JOIN
		tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructId  INNER JOIN
		tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
	WHERE
		( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
		( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
		tblCommStruct.CommScenId in (' + @CommScenIds + ') AND
		tblCommStruct.CommRecId=' + @CommRecId + 
		' ' + @where + ')
	-	

	(SELECT 
		ISNULL(SUM(tblCommPay.Amount), 0)
	FROM 
		tblCommBatch INNER JOIN
		tblCommChargeBack tblCommPay ON tblCommBatch.CommBatchId=tblCommPay.CommBatchId INNER JOIN 
		tblRegisterPayment on tblCommPay.RegisterPaymentId=tblRegisterPayment.RegisterPaymentId INNER JOIN
		tblRegister ON tblRegisterPayment.FeeRegisterId = tblRegister.RegisterId INNER JOIN
		tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructId  INNER JOIN
		tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
	WHERE
		( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
		( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
		tblCommStruct.CommScenId in (' + @CommScenIds + ') AND
		tblCommStruct.CommRecId=' + @CommRecId + 
		' ' + @where + '
	)) as FeePaymentsTotal,

	(SELECT
		ISNULL(SUM(tblCommFeeCharge.FixedAmount), 0) 
	FROM 
		tblRegister INNER JOIN 
		tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
		tblClient ON tblRegister.ClientId=tblClient.ClientId INNER JOIN
		tblCommFeeCharge ON tblRegister.EntryTypeId=tblCommFeeCharge.EntryTypeId 
		AND tblCommFeeCharge.CommRecId=' + @CommRecId + '
	WHERE
		( CAST(CONVERT(char(10), tblRegister.TransactionDate, 101) AS datetime) < ''' + @date1 + ''' ) AND
		AgencyId in (SELECT AgencyId FROM tblCommScen WHERE CommScenId 
			IN (' + @CommScenIds + ')) ' + @where + '
	) as PreviousCharges,
	

	((SELECT 
		ISNULL(SUM(tblCommPay.Amount), 0)
	FROM 
		tblCommBatch INNER JOIN
		tblCommPay ON tblCOmmBatch.CommBatchId=tblCommPay.CommBatchId INNER JOIN 
		tblRegisterPayment on tblCommPay.RegisterPaymentId=tblRegisterPayment.RegisterPaymentId INNER JOIN
		tblRegister ON tblRegisterPayment.FeeRegisterId = tblRegister.RegisterId INNER JOIN
		tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructId  INNER JOIN
		tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
	WHERE
		( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) < ''' + @date1 + ''' ) AND
		tblCommStruct.CommScenId in (' + @CommScenIds + ') AND
		tblCommStruct.CommRecId=' + @CommRecId + 
		' ' + @where + ')
	-	

	(SELECT 
		ISNULL(SUM(tblCommPay.Amount), 0)
	FROM 
		tblCommBatch INNER JOIN
		tblCommChargeBack tblCommPay on tblCommBatch.CommbatchId=tblCommPay.COmMBatchId INNER JOIN 
		tblRegisterPayment on tblCommPay.RegisterPaymentId=tblRegisterPayment.RegisterPaymentId INNER JOIN
		tblRegister ON tblRegisterPayment.FeeRegisterId = tblRegister.RegisterId INNER JOIN
		tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructId  INNER JOIN
		tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
	WHERE
		( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) < ''' + @date1 + ''' ) AND
		tblCommStruct.CommScenId in (' + @CommScenIds + ') AND
		tblCommStruct.CommRecId=' + @CommRecId + 
		' ' + @where + ')
	) as PreviousPayments
')

UPDATE 
	#result
SET
	PreviousBalance=PreviousCharges-PreviousPayments

UPDATE 
	#result 
SET
	EndingBalance=PreviousBalance+NewChargesTotal-FeePaymentsTotal

SELECT 
	@CompanyName as CompanyName,
	@Period as Period,
	#result.*
FROM
	#result

DROP TABLE #result
GO
/****** Object:  StoredProcedure [dbo].[stp_SD_ClientRetentionRollingByCreated]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 01/05/2010
-- Description:	Smart Debtor rolling cancellations
-- =============================================
CREATE PROCEDURE [dbo].[stp_SD_ClientRetentionRollingByCreated] 
(
	@userid int,
	@MonthCreated int,
	@YearCreated int,
	@AgencyID int = 856
)
as
BEGIN

	/*
	--development use
	declare @userid int
	declare @YearCreated int
	declare @MonthCreated int
	set @userid = 492
	set @MonthCreated = 5
	set @YearCreated = 2008

	stp_SD_ClientRetentionRollingByCreated 375, 1,2007

	*/
	--script vars
	declare @sSQL varchar(max)
	declare @pstart datetime
	declare @pend datetime

	select @pstart = cast(cast(@YearCreated as varchar) + '-' + cast(@MonthCreated as varchar) + '-01' as datetime)
	select @pend = cast(cast(@YearCreated as varchar) + '-' + cast(@MonthCreated as varchar) + '-' + cast(day(dateadd(d,-1,dateadd(m,1,@pstart))) as varchar) as datetime)

	select 
		  a.ImportAbbr
		  ,convert(varchar,c.accountnumber) [Acct#]       
		  ,convert(varchar,c.created,110) [Created]
		  ,s.name [Status]
		  --,TermDate = isnull(convert(varchar,(select top(1) rm.created from tblroadmap rm where clientstatusid in (17,18) and rm.clientid = c.clientid order by roadmapid desc),110),'')
		  ,Retention = isnull(datediff(day,c.created,(select top(1) rm.created from tblroadmap rm where clientstatusid in (17) and rm.clientid = c.clientid order by roadmapid desc)),'')
	into #cr
	from tblclient c
		inner join tblClientStatus s on c.currentclientstatusid = s.clientstatusid
		inner join tblagency a on c.agencyid = a.agencyid
		--Inner join tbluseragencyaccess uaa on uaa.agencyid = c.agencyid and uaa.userid = @userid
		--inner join tblusercompanyaccess uca on uca.userid = uaa.userid and uca.companyid = c.companyid and (@companyid = -1 or uca.companyid = @companyid)
		--inner join tbluserclientaccess ucc on ucc.userid = uaa.userid and c.created between ucc.clientcreatedfrom and ucc.clientcreatedto
	where c.created >= @pstart 
		and c.created < @pend
		and c.accountnumber is not null
		and a.agencyid = @AgencyID
	order by c.created

	--update #cr set retention = datediff(day, created, getdate()) where retention =0
	--select * from #cr

	declare @Months int
	declare @LastNumber int
	declare @totalclients int

	select @totalclients = count(*) from #cr

	set @Months = 1
	set @LastNumber = 0

	set @sSQL = 'select ''Cancelled''[Status],[TotalClients] = ' + cast(@totalclients as varchar) + char(13)
	while @Months <= datediff(m,@pstart,getdate())
		BEGIN
			set @sSQL = @sSQL + ',[Month ' + cast(@Months as varchar) + ']'
			set @sSQL = @sSQL + ' = (select count(*) from #cr where retention > ' + cast(@LastNumber as varchar) 
			set @sSQL = @sSQL + ' and retention <=' + cast(@months*30 as varchar) + ')' + char(13)
			set @LastNumber = @months*30
			set @months = @Months + 1
		END

	set @sSQl = @sSQL + ' Union all '	+ char(13)

	set @months = 1
	set @sSQl = @sSQL +'select ''Remaining''[Status]'
	set @sSQl = @sSQL + ', ' + cast(@totalclients as varchar)+ ' [TotalClients]'
	set @LastNumber = 0
	
	while @Months <= datediff(m,@pstart,getdate())
		BEGIN
			declare @remaining int

			select @remaining  = @totalclients -(select count(*) from #cr where retention > @LastNumber  and retention <=@months*30 )
				
			set @sSQl = @sSQL + ', ' + cast(@remaining as varchar) +' [Month ' + cast(@Months as varchar) + ']' + char(13)
			
			set @totalclients = @remaining 
			set @LastNumber = @months*30
			set @months = @Months + 1
		END

	exec(@sSQl)
	drop table #cr

END
GO
/****** Object:  StoredProcedure [dbo].[stp_ApprovedIncentives]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_ApprovedIncentives]
(
	@repid int
)
as
begin

	select datename(month,cast(i.incentivemonth as varchar(2))+'/1/2000')+' '+cast(i.incentiveyear as varchar(4)) [monthyear], 
		i.initialcount, i.initialpayment, i.initialtotal, 
		i.residualcount, i.residualpayment, i.residualtotal,
		i.teamcount, i.teampayment, i.teamtotal,
		i.initialcount + i.residualcount[totalcount], i.initialtotal + i.residualtotal[totalamt],
		i.initialtotal + i.residualtotal + i.teamtotal [indteamtotal],
		i.incentivemonth[month], i.incentiveyear[year], 1[approved]
	from tblincentives i
	join tbluser u on u.userid = i.repid
	where i.repid = @repid
	order by [year] desc, [month] desc


end
GO
/****** Object:  StoredProcedure [dbo].[stp_CommissionsPaidOutByFeeType]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_CommissionsPaidOutByFeeType]
(
	@commrecid int
,	@startdate datetime
,	@enddate datetime
,	@companyid int
)
as

declare @StoneWallSwitchDate DATETIME
declare @AvertSwitchDate DATETIME
declare @AvertSwitchDate1 DATETIME

set @StoneWallSwitchDate = CAST('5/16/2007 11:59PM' AS DATETIME)
set @AvertSwitchDate = CAST('7/31/2008 11:59PM' AS DATETIME)
set @AvertSwitchDate1 = CAST('8/20/2008 11:59PM' AS DATETIME)

declare @CommRec varchar(50),@company varchar(50)
select @CommRec = Display from tblCommRec where CommRecID = @commrecid
select @company = name from tblcompany where companyid = @companyid

select @CommRec [CommRec], @Company [Company], et.entrytypeid [FeeTypeID], et.displayname [FeeType], sum(co.amount) [Amount]
from tblcommbatch b
inner join tblcommpay co on b.commbatchid = co.commbatchid
inner join tblcommstruct st on st.commstructid = co.commstructid
inner join tblregisterpayment rp on rp.registerpaymentid = co.registerpaymentid
inner join tblregister r on r.registerid = rp.feeregisterid
inner join tblEntryType et on et.EntryTypeId = r.EntryTypeId
inner join tblclient c on c.clientid = r.clientid
where b.batchdate between @startdate and @enddate
and st.companyid = @companyid
and st.commrecid = CASE 
					  WHEN (c.created > @StoneWallSwitchDate AND @commrecid = 5) THEN 24
					  WHEN (c.created > case when batchdate >= @AvertSwitchDate1 then @AvertSwitchDate else @AvertSwitchDate1 end AND @commrecid = 17) THEN 29
					  ELSE @commrecid
				   END  
group by et.entrytypeid, et.displayname
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationPreviewGroupDetail]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NegotiationPreviewGroupDetail]
@DisplayColumns varchar(max),@Where varchar(max), @PageNum int, @PageSize int
as
EXEC 
('
WITH ChildGridPage AS
(
    SELECT ROW_NUMBER() OVER(ORDER BY '+ @DisplayColumns +') AS RowNum
          , ' + @DisplayColumns + '
      FROM tblCache_PreviewGrid
		WHERE ' + @Where + '
)

SELECT * 
FROM ChildGridPage
WHERE RowNum BETWEEN ('+@PageNum+' - 1) * '+@PageSize+' + 1 AND '+@PageNum+' * '+@PageSize+'
ORDER BY ' + @DisplayColumns +''
)
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneyRegisterPayments]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AttorneyRegisterPayments]
(
	@companyid int,
	@batchdate datetime
)
as
begin


select feetype, amount
from tblattorneyregisterpayment
where batchdate = @batchdate
and companyid = @companyid
order by feetype


end
GO
/****** Object:  StoredProcedure [dbo].[stp_Tool_FindTextInObjects]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_Tool_FindTextInObjects]
	(
		@searchtext varchar(255)
	)

as


SELECT
	OBJECT_NAME(id) as ObjectName,
	case
		when OBJECTPROPERTY(id, 'IsProcedure') = 1 then 'Procedure'
		when OBJECTPROPERTY(id, 'IsTrigger') = 1 then 'Trigger'
		when OBJECTPROPERTY(id, 'IsView') = 1 then 'View'
	end as ObjectType
FROM
	syscomments
WHERE
	[text] LIKE '%' + @searchtext + '%'
GROUP BY
	OBJECT_NAME(id),
	syscomments.id
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientFile_getGeneralInfo]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ClientFile_getGeneralInfo]
(
	@clientID int
)
as
BEGIN

	/*
	declare @clientID int
	set @clientID = 1671
	*/
		--declare multi-deposit vars
	declare @multi bit
	declare @depmeth varchar 
	declare @depday varchar
	declare @depamt money

	--init vars
	set @depmeth = NULL
	set @depday = 0
	set @depamt = 0

	--check if client is multi-deposit
	select @multi = multideposit from tblclient where clientid = @clientid
	IF @multi = 1
		BEGIN
			--get multi-deposit info
			select top 1
				@depmeth = depositmethod
				,@depday = depositday
				,@depamt = depositamount
			from tblclientdepositday 
			where clientid = @clientid 
			order by created desc
			--check if we actually got data
			if @depmeth is null
				BEGIN
					--if not fall back on tblclients data
					select 
						@depmeth = isnull(depositmethod,'')
						,@depday = isnull(depositday,0)
						,@depamt = isnull(depositamount,0)
					from tblclient 
					where clientid = @clientid
				END
		END
	ELSE
		--non multi-deposit, use tblclient
		select 
			@depmeth = isnull(depositmethod,'')
			,@depday = isnull(depositday,0)
			,@depamt = isnull(depositamount,0)
		from tblclient 
		where clientid = @clientid

	SELECT TOP 1
		 [FirmAccount#] = c.AccountNumber
		, [FirmName] = isnull(co.Name,'') 
		, [EnrollmentDate] = isnull((select TOP 1 created as [EnrollmentDate] from tblroadmap where clientid = c.clientid and clientstatusid = 2 order by created),'') 
		, [AgencyName] = a.name 
		, [AgentName] = c.agentName
		, [BankName] = isnull(c.bankname,'')
		, [BankRoutingNumber] = isnull(c.BankRoutingNumber,'')
		, [BankAccountNumber] = isnull(c.BankAccountNumber,'')
		, [DepositStartDate] = isnull(c.depositstartdate,'')
		, [DepositMethod] = case @depmeth 
								when 'C' then 'Check'
								when 'S' then 'Saving'
								when 'A' then 'ACH'
								when null then 'None'
								else @depmeth end
		, [DepositDay] = @depday 
		, [DepositAmount] = @depamt
		
	FROM tblClient AS c 
		INNER JOIN tblCompany AS co ON c.CompanyID = co.CompanyID 
		inner join tblagency as a on a.agencyid = c.agencyid
	WHERE
		(c.ClientID = @clientID)   

END



GRANT EXEC ON stp_ClientFile_getGeneralInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientFile_getAllDocumentsInfo]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ClientFile_getAllDocumentsInfo]
(
@clientid int
)
as 
BEGIN
select 
		DocTypeID
		,DisplayName
		, Received
		, Created
		, Createdby
		, pdfPath
		,rowNum
	from
	(
		SELECT     
			DocOrder = CASE 
				WHEN CHARINDEX('Power of Attorney', dt.DisplayName) > 0 THEN 
					1 
				ELSE 
					CASE WHEN CHARINDEX('Legal Service Agreement', dt.DisplayName) > 0 THEN 2 ELSE 999 END 
			END 
			, dr.DocTypeID
			, ISNULL(dt.DisplayName, 'NA') AS DisplayName
			, ISNULL(ds.ReceivedDate, '01-01-1900') AS Received
			, ISNULL(ds.Created, '01-01-1900') AS Created
			, ISNULL(u.FirstName + ' ' + u.LastName + '</br>' + ug.Name, 'NA') AS CreatedBy
			, '\\' + c.StorageServer + '\' + c.StorageRoot + '\' + c.accountnumber + case when dr.subfolder is null or dr.subfolder = 'ClientDocs' then '\ClientDocs\' else '\CreditorDocs\' + dr.subfolder end + c.accountnumber + '_' + dr.Doctypeid + '_' + dr.DocID + '_' + dr.DateString + '.pdf'[pdfPath]
			, row_number() over(partition by DisplayName order by ISNULL(ds.ReceivedDate, '01-01-1900') ) as rowNum
		FROM  
			tblDocRelation AS dr INNER JOIN
			tblDocumentType AS dt ON dr.DocTypeID = dt.TypeID INNER JOIN
			tblDocScan AS ds ON dr.DocID = ds.DocID LEFT OUTER JOIN
			tblUser AS u ON u.UserID = ds.CreatedBy INNER JOIN
			tblUserGroup AS ug ON ug.UserGroupId = u.UserGroupID inner join
			tblClient c on c.ClientID = dr.ClientID
		WHERE     (dr.ClientID = @clientid) AND (dr.DeletedFlag <> 1)
		group by doctypeid,displayname,ReceivedDate,ds.created
			,ISNULL(u.FirstName + ' ' + u.LastName + '</br>' + ug.Name, 'NA')
			,'\\' + c.StorageServer + '\' + c.StorageRoot + '\' + c.accountnumber + case when dr.subfolder is null or dr.subfolder = 'ClientDocs' then '\ClientDocs\' else '\CreditorDocs\' + dr.subfolder end + c.accountnumber + '_' + dr.Doctypeid + '_' + dr.DocID + '_' + dr.DateString + '.pdf' 
	) as docData
	Order by displayname,created 
END


GRANT EXEC ON stp_ClientFile_getAllDocumentsInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_CollectDisbursements]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_CollectDisbursements]
as
/*
	jhernandez		04.09.09	Pickup voided disbursements.
	jhernandez		06.18.09	Filter by client conversion date (where avail)
*/

declare @trustid int, @trustdisplay varchar (50)

-- Lexxiom Creditor Clearing Account
select @trustid = trustid, @trustdisplay = [name]
from tbltrust 
where trustid = 23


-- get un-batched disbursements for checksite clients
select
	amount,companyid,ShadowStoreId,ClientID,RegisterId,Flow,TransactionDate
into
	#disbur
from (
	-- shadow store -> disbursement account
	select 
		abs(r.amount) [amount],
		c.companyid,
		c.accountnumber [ShadowStoreId],
		r.ClientId,
		r.registerid,
		'debit' [Flow],
		r.TransactionDate
	from 
		tblregister as r 
	join tblentrytype as e on r.entrytypeid = e.entrytypeid
		and e.entrytypeid in (28, 21, 18, 48) -- Client Withdrawal, Closing Withdrawal, Settlement, Refund
	join tblclient as c on c.clientid = r.clientid 
		and c.trustid = 22
	where r.amount < 0 and r.isfullypaid = 0 and r.void is null and r.bounce is null

	union all

	-- disbursement account -> shadow store
	select 
		abs(r.amount) [amount],
		c.companyid,
		c.accountnumber [ShadowStoreId],
		r.ClientId,
		r.registerid,
		'credit' [Flow],
		r.TransactionDate
	from 
		tblregister as r 
	join tblentrytype as e on r.entrytypeid = e.entrytypeid
		and e.entrytypeid in (28, 21, 18, 48) -- Client Withdrawal, Closing Withdrawal, Settlement, Refund
	join tblclient as c on c.clientid = r.clientid 
		and c.trustid = 22
	join tblnacharegister2 as nr on nr.registerid = r.registerid
		and nr.clientid = c.clientid
	where r.amount < 0 and r.isfullypaid = 0 and r.void is not null and r.bounce is null

) sub
where not exists (select 1 from tblNachaRegister2 nr2 where nr2.RegisterID = sub.RegisterID and nr2.flow = sub.flow)


-- get client conversion dates (where avail) 
select d.clientid, isnull(max(a.dc),'1/1/1900') [converdate]
into #conver
from #disbur d
left join tblaudit a on a.pk = d.clientid
	and a.auditcolumnid = 27
group by d.clientid


-- and only batch disbursements that occurred after their conversion date
insert tblNachaRegister2
	([name],amount,ispersonal,companyid,ShadowStoreId,ClientID,TrustID,RegisterId,Flow)
select 
	@trustdisplay,amount,0,companyid,ShadowStoreId,d.ClientID,@trustid,RegisterId,Flow
from 
	#disbur d
join 
	#conver c on c.clientid = d.clientid
	and c.converdate < d.transactiondate


drop table #disbur
drop table #conver
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationDashboardGetFilterID]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_NegotiationDashboardGetFilterID]
(
	@id nvarchar(50),
	@type nvarchar(50)
)

AS

declare @filterid int

declare @vtblFilter table
(
	FilterID int
)

INSERT INTO
	@vtblFilter
EXEC 
('
	SELECT
		FilterID
	FROM
		tblNegotiationFilterXRef
	WHERE
		[' + @type + '] = ' + @id
)

SELECT TOP 1
	@filterid = FilterID
FROM
	@vtblFilter

RETURN @filterid
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationInitializeAssignment]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Initialize/Update Criteria Status for usage
*/

CREATE PROCEDURE [dbo].[stp_NegotiationInitializeAssignment]
@FilterId int, 
@AuditType varchar(10),
@UserId int
AS

if (@AuditType = 'Added')
  BEGIN
	INSERT INTO tblNegotiationFilterXref(FilterId,Created, CreatedBy,Deleted) VALUES ( @FilterId, getDate(),@UserId,'0')
  END
else if (@AuditType = 'Updated')
  BEGIN
	UPDATE tblNegotiationFilterXref  SET Modified=getDate(), ModifiedBy = @UserId WHERE FilterId = @FilterId
  END
else if (@AuditType = 'Deleted')
  BEGIN
	UPDATE tblNegotiationFilterXref  SET Deleted = '1', ModifiedBy = @UserId WHERE FilterId = @FilterId
  END
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetCommissionBatchPaymentsSummary_seideman]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetCommissionBatchPaymentsSummary_seideman]
	(
		@CommRecIDs varchar(255),
		@date1 datetime=null,
		@date2 datetime=null
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

exec
(
	'select
		ut.AgencyId,
		ut.Agency,	
		ut.EntryTypeId,
		ut.FeeType,
		ut.AmountPaid,
		tt.commrec,
		tt.commrecid,
		tt.parentcommrecid,
		tt.amount,
		tt.transferamount,
		ut.commstructid
	from
		(
			select
				r.abbreviation as commrec,
				bt.commrecid,
				bt.parentcommrecid,
				sum(bt.amount) as amount,
				sum(bt.transferamount) as transferamount
			from
				tblcommbatch b inner join
				tblcommbatchtransfer bt on b.commbatchid = bt.commbatchid inner join
				tblcommrec r on bt.commrecid = r.commrecid
			where
				( CAST(CONVERT(varchar(15), b.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
				( CAST(CONVERT(varchar(15), b.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) and
				r.CommRecId IN (' + @CommRecIds + ') and
				((select top 1 commstructid from tblcommpay where commbatchid = bt.commbatchid) < 56)
			group by
				r.abbreviation,
				bt.commrecid,
				bt.parentcommrecid
		)
		as tt left join
		(
			SELECT
				AgencyId,
				Agency,	
				EntryTypeId,
				FeeType,
				CommRec,
				CommRecId,
				ParentCommRecId,
				sum(Amount) as AmountPaid,
				commstructid as commstructid
			FROM
				(
				SELECT 
					tblCommPay.Amount,
					
					tblAgency.AgencyId,
					tblAgency.Name as Agency,

					tblEntryType.EntryTypeId,
					tblEntryType.Name as FeeType,

					tblCommRec.Abbreviation as CommRec,
					tblCommStruct.CommRecId,
					tblCommStruct.ParentCommRecId,
					tblCommStruct.commstructid as commstructid
				FROM
					tblCommPay INNER JOIN
					tblRegisterPayment ON tblCommPay.RegisterPaymentID=tblRegisterPayment.RegisterPaymentID INNER JOIN
					tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructID INNER JOIN
					tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN
					tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId INNER JOIN
					tblRegister tblFeeRegister ON tblRegisterPayment.FeeRegisterId=tblFeeRegister.RegisterId INNER JOIN
					tblEntryType ON tblFeeRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
					tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId INNER JOIN
					tblCommBatch on tblCommPay.CommBatchId=tblCommBatch.CommBatchId

				WHERE
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
					tblCommRec.CommRecId IN (' + @CommRecIds + ')
				
				UNION ALL

				SELECT 
					-tblCommPay.Amount as amount,
							tblAgency.AgencyId,
					tblAgency.Name as Agency,

					tblEntryType.EntryTypeId,
					tblEntryType.Name as FeeType,

					tblCommRec.Abbreviation as CommRec,
					tblCommStruct.CommRecId,
					tblCommStruct.ParentCommRecId,
					tblCommStruct.commstructid as commstructid
				FROM
					tblCommChargeBack tblCommPay INNER JOIN
					tblRegisterPayment ON tblCommPay.RegisterPaymentID=tblRegisterPayment.RegisterPaymentID INNER JOIN
					tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructID INNER JOIN
					tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN
					tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId INNER JOIN
					tblRegister tblFeeRegister ON tblRegisterPayment.FeeRegisterId=tblFeeRegister.RegisterId INNER JOIN
					tblEntryType ON tblFeeRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
					tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId INNER JOIN
					tblCommBatch on tblCommPay.CommBatchId=tblCommBatch.CommBatchId

				WHERE
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
					tblCommRec.CommRecId IN (' + @CommRecIds + ')
				)
				derivetbl
			GROUP BY
				EntryTypeId,FeeType,Agency,CommRec,AgencyId,CommRecId,ParentCommRecId,commstructid
		)
		as ut on tt.commrecid = ut.commrecid and tt.parentcommrecid = ut.parentcommrecid
	WHERE
		commstructid < 56 or tt.parentcommrecid in (3, 11, 15)
	ORDER BY
		Agency,EntryTypeId,tt.CommRecID'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAttorneyContactInfo]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 06/02/2009
-- Description:	Get Attorney addresses
-- =============================================
CREATE PROCEDURE [dbo].[stp_GetAttorneyContactInfo] 
(
	@ClientID int 
)
AS
BEGIN
	SET NOCOUNT ON;
SELECT 
at.addressTypeName [Type],
ca.Address1 [Address], 
ca.address2 [Address2],
ca.city [City],
ca.State + ' ' + ca.ZipCode [State] 
FROM tblCompanyAddresses ca
INNER JOIN tblcompanyaddresstypes at ON at.addresstypeid = ca.addresstypeid
WHERE ca.companyid IN (SELECT companyid FROM tblclient WHERE ClientID = @ClientID)
AND ca.Addresstypeid IN (2, 3, 4)
    order by at.addresstypeid
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Hardship_getHardshipHistory]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_Hardship_getHardshipHistory]
(
	@clientid int
)
as
BEGIN
	select 
	clientid
	,hardshipid
	,[User] = u.firstname + ' ' + u.lastname
	,[Date] = hd.hardshipdate
	,[Ttl Income] = MonthlyIncome_Client_Work+MonthlyIncome_Client_SocialSecurity+MonthlyIncome_Client_Disability+MonthlyIncome_Client_RetirementPension+MonthlyIncome_Client_SelfEmployed+MonthlyIncome_Client_Unemployed+MonthlyIncome_Spouse_Work+MonthlyIncome_Spouse_SocialSecurity+MonthlyIncome_Spouse_Disability+MonthlyIncome_Spouse_RetirementPension+MonthlyIncome_Spouse_SelfEmployed+MonthlyIncome_Spouse_Unemployed
	,[Ttl Expenses] = MonthlyExpenses_Rent+MonthlyExpenses_Mortgage+MonthlyExpenses_2ndMortgageAmt+MonthlyExpenses_Carpayment+MonthlyExpenses_CarInsurance+MonthlyExpenses_Utilities+MonthlyExpenses_Groceries+MonthlyExpenses_MedicalInsurance+MonthlyExpenses_Medications+MonthlyExpenses_Gasoline+MonthlyExpenses_SchoolLoans+MonthlyExpenses_Other
	,[Medical] = case when MedicalCondtions_Client_Diabetes = 1 OR MedicalCondtions_Client_Arthritis = 1 OR MedicalCondtions_Client_Asthma = 1 OR MedicalCondtions_Client_HighBloodPressure = 1 OR MedicalCondtions_Client_HighCholesterol = 1 OR MedicalCondtions_Client_Other <> '' 
	or MedicalCondtions_spouse_Diabetes = 1 OR MedicalCondtions_spouse_Arthritis = 1 OR MedicalCondtions_spouse_Asthma = 1 OR MedicalCondtions_spouse_HighBloodPressure = 1 OR MedicalCondtions_spouse_HighCholesterol = 1 OR MedicalCondtions_spouse_Other <> '' THEN 'Y' ELSE 'N' END
	,[Summary] = rtrim(ltrim(MedicalCondtions_Client_History + case when MedicalCondtions_Spouse_History <> '' then '  [Spouse]: ' + MedicalCondtions_Spouse_History else '' end))
	from tblhardshipdata hd
	inner join tbluser u on u.userid=hd.createdby
	where clientid = @clientid
	order by clientid

END
GO
/****** Object:  StoredProcedure [dbo].[stp_CommVsChargebacks2]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_CommVsChargebacks2 17,'8/1/08','8/31/08',2

CREATE procedure [dbo].[stp_CommVsChargebacks2]
(
	@recid int
,	@startdate datetime
,	@enddate datetime
,	@companyid int
)
as

declare @CommRec varchar(50)
select @CommRec = Display from tblCommRec where CommRecID = @recid


if @recid = 5 or @recid = 17 begin

declare @StoneWallSwitchDate DATETIME
declare @AvertSwitchDate DATETIME
declare @vtblData table(CommissionAmt float, ChargebackAmt float, PaidOut float)

set @StoneWallSwitchDate = CAST('5/16/2007 11:59PM' AS DATETIME)
set @AvertSwitchDate = CAST('8/20/2008 11:59PM' AS DATETIME)

insert into @vtblData 
select sum(co.amount),0,0
from tblcommbatch b
inner join tblcommpay co on b.commbatchid = co.commbatchid
inner join tblcommstruct st on st.commstructid = co.commstructid
inner join tblregisterpayment rp on rp.registerpaymentid = co.registerpaymentid
inner join tblregister r on r.registerid = rp.feeregisterid
inner join tblclient c on c.clientid = r.clientid
where b.batchdate between @startDate and @EndDate
and st.companyid = @companyid
and st.commrecid = CASE 
                              WHEN (c.created > @StoneWallSwitchDate AND @recid = 5) THEN 24
                              WHEN (c.created > @AvertSwitchDate AND @recid = 17) THEN 29
                              ELSE @recid
                           END  


insert into @vtblData 
select 0,sum(co.amount),0
from tblcommbatch b
inner join tblcommchargeback co on b.commbatchid = co.commbatchid
inner join tblcommstruct st on st.commstructid = co.commstructid
inner join tblregisterpayment rp on rp.registerpaymentid = co.registerpaymentid
inner join tblregister r on r.registerid = rp.feeregisterid
inner join tblclient c on c.clientid = r.clientid
where b.batchdate between @StartDate and @EndDate
and st.companyid = @companyid
and st.commrecid = CASE 
                              WHEN (c.created > @StoneWallSwitchDate AND @recid = 5) THEN 24
                              WHEN (c.created > @AvertSwitchDate AND @recid = 17) THEN 29
                              ELSE @recid
                           END  

insert into @vtblData 
select 0,0,sum(nr.amount)
from tblnacharegister nr
join tblcompany c on c.companyid = nr.companyid
	and c.companyid = @companyid
join tblnachafile f on f.nachafileid = nr.nachafileid
	and f.date between @startdate and @enddate
where nr.name = @CommRec
	and nr.nachafileid <> 985


select @CommRec, sum(commissionamt) as [Commission], sum(chargebackamt)  as [ChargeBack], sum(commissionamt)-sum(chargebackamt) as [Difference], sum(paidout) as [PaidOut]
from @vtblData 

end
else begin
-----------------------------------------------------------------------------

declare @parentrecid int, @ClientCreatedDateFrom datetime, @ClientCreatedDateTo datetime

declare @tbl table (name varchar(100), company varchar(100),Commissions money,Chargebacks money,PaidOut money)
declare @tbl2 table (amount money)
declare @tbl3 table (amount money)


if @recid = 17 begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '7/31/2008 23:59:59'
end
else if @recid = 29 begin
	set @ClientCreatedDateFrom = '8/1/2008'
	set @ClientCreatedDateTo = '1/1/2010'
end
else if @recid = 5 begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '5/6/2007 23:59:59'
end
else if @recid = 24 begin
	set @ClientCreatedDateFrom = '5/7/2007'
	set @ClientCreatedDateTo = '1/1/2010'
end
else begin
	set @ClientCreatedDateFrom = '1/1/1900'
	set @ClientCreatedDateTo = '1/1/2010'
end


select @parentrecid = isnull(ParentCommRecID,CommRecID) from tblCommRec where CommRecID = @recid


insert 
	@tbl (name,company,Commissions)
SELECT
	@CommRec,
	Company,
	sum(Amount) [Commissions]
FROM
	(
		SELECT
            c.Created [ClientCreated],
			cb.CommBatchID as [BatchID],
			comp.[Name] as Company,
			cp.Amount,
			cs.CommRecID
		FROM
			tblCommPay as cp LEFT OUTER JOIN
			tblRegisterPayment as rp on rp.RegisterPaymentID = cp.RegisterPaymentID LEFT OUTER JOIN
			tblRegister as r on r.RegisterID = rp.FeeRegisterID LEFT OUTER JOIN
			tblClient as c on c.ClientID = r.ClientID LEFT OUTER JOIN
			tblEntryType as et on et.EntryTypeID = r.EntryTypeID LEFT OUTER JOIN
			tblAgency as a on a.AgencyID = c.AgencyID LEFT OUTER JOIN
			tblCompany as comp on comp.CompanyID = c.CompanyID LEFT OUTER JOIN
			tblCommBatch as cb on cb.CommBatchID = cp.CommBatchID LEFT JOIN
			tblCommStruct as cs on cs.CommStructID = cp.CommStructID LEFT JOIN
			tblPerson p on c.primarypersonid = p.personid 
		where 
			comp.Companyid = @companyid

	) as commTable
WHERE
	CommRecID = @parentrecid -- Used to filter commission structures
	and (ClientCreated between @ClientCreatedDateFrom and @ClientCreatedDateTo) -- Based on user specific rules
	and BatchID in 
	(
		select
			b.CommBatchID
		from 
			tblCommBatch b
			join tblCommBatchTransfer t on t.CommBatchID = b.CommBatchID and t.CommRecID = @recid -- Get batches that belong to this CommRec
		where 
			BatchDate between @startdate and @enddate -- User selected date range
	)
GROUP BY
	Company

insert 
	@tbl2 (amount)
SELECT
	abs(sum(Amount))
FROM
	(
		SELECT     
            c.Created [ClientCreated],
			cp.CommBatchID as [BatchID],
			comp.Name as Company,
			-cp.Amount as Amount,
			cs.CommRecID
		FROM         
			tblCommChargeback as cp LEFT OUTER JOIN
			tblRegisterPayment as rp on rp.RegisterPaymentId = cp.RegisterPaymentID LEFT OUTER JOIN
			tblRegister as r on r.RegisterId = rp.FeeRegisterId LEFT OUTER JOIN
			tblClient as c on c.ClientID = r.ClientId LEFT OUTER JOIN
			tblEntryType as et on et.EntryTypeId = r.EntryTypeId LEFT OUTER JOIN
			tblAgency as a on a.AgencyID = c.AgencyID LEFT OUTER JOIN
			tblCompany as comp on comp.CompanyID = c.CompanyID LEFT OUTER JOIN
			tblCommStruct as cs on cs.CommStructID = cp.CommStructID INNER JOIN
			tblCommBatch as cb on cb.CommBatchID = cp.CommBatchID LEFT OUTER JOIN
			tblPerson as p on c.PrimaryPersonID = p.PersonID 
		where 
			comp.Companyid = @companyid

	) as commTable
WHERE
	CommRecID = @parentrecid -- Used to filter commission structures
	and (ClientCreated between @ClientCreatedDateFrom and @ClientCreatedDateTo) -- Based on user specific rules
	and BatchID in 
	(
		select
			b.CommBatchID
		from 
			tblCommBatch b
			join tblCommBatchTransfer t on t.CommBatchID = b.CommBatchID and t.CommRecID = @recid -- Get batches that belong to this CommRec
		where 
			BatchDate between @startdate and @enddate -- User selected date range
	)
GROUP BY
	Company


update @tbl set Chargebacks = amount
from @tbl2


insert @tbl3 (amount)
select sum(nr.amount)
from tblnacharegister nr
join tblcompany c on c.companyid = nr.companyid
	and c.companyid = @companyid
join tblnachafile f on f.nachafileid = nr.nachafileid
	and f.date between @startdate and @enddate
where nr.name = @CommRec
	and nr.nachafileid <> 985

update @tbl set PaidOut = amount
from @tbl3


select name,company,commissions,chargebacks,(commissions-chargebacks) [diff],paidout from @tbl

end
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetCommissionBatchPaymentsSummary]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetCommissionBatchPaymentsSummary]
	(
		@CommRecIDs varchar(255),
		@date1 datetime=null,
		@date2 datetime=null,
		@CompanyID varchar(3)
	)

as
/* ------------------------------------------------------------------------------------------------
	History:
	jhernandez		12/10/08	Hotfix: Selecting batches into temp table to ensure only distinct
								batches are counted.
-------------------------------------------------------------------------------------------------*/

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')
	
declare @CommRecIDsPipe varchar(255)
select @CommRecIDsPipe = replace(@CommRecIDs,',','|')

exec
(
	'
	create table #batches
	(
		commbatchid int,
		commbatchtransferid int,
		commrec varchar(50),
		commrecid int,
		parentcommrecid int,
		amount money,
		transferamount money
	)
	
	insert
		#batches
	select distinct
		b.commbatchid,
		bt.commbatchtransferid,
		r.abbreviation as commrec,
		bt.commrecid,
		bt.parentcommrecid,
		bt.amount,
		bt.transferamount
	from
		tblcommbatch b inner join
		tblcommbatchtransfer bt on b.commbatchid = bt.commbatchid inner join
		tblcommrec r on bt.commrecid = r.commrecid and r.CommRecId IN (' + @CommRecIds + ') join
		tblcommscen s on s.commscenid = b.commscenid join
		tblcommstruct cs on cs.commscenid = s.commscenid 
			and cs.companyid = ' + @CompanyID + ' 
			and cs.commrecid = bt.commrecid 
			and cs.parentcommrecid = bt.parentcommrecid
			and cs.companyid = bt.companyid
	where
		( CAST(CONVERT(varchar(15), b.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
		( CAST(CONVERT(varchar(15), b.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) 
	
	
	-- Exception #1: Avert(29) did not have its own commstructs back then
	if (cast(''' + @date1 + ''' as datetime) < cast(''10/24/2008'' as datetime) and (charindex(''29'',''' + @CommRecIdsPipe + ''') > 0 or ' + @CommRecIdsPipe + ' = 29)) begin
		insert
			#batches
		select distinct
			b.commbatchid,
			bt.commbatchtransferid,
			r.abbreviation as commrec,
			bt.commrecid,
			bt.parentcommrecid,
			bt.amount,
			bt.transferamount
		from
			tblcommbatch b inner join
			tblcommbatchtransfer bt on b.commbatchid = bt.commbatchid inner join
			tblcommrec r on bt.commrecid = r.commrecid
		where
			( CAST(CONVERT(char(10), b.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
			( CAST(CONVERT(char(10), b.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) and
			r.CommRecId IN (29) and
			bt.companyid = ' + @CompanyID + '
	end
	
	
	-- Exception #2: Lexxiom > TSLF OA prior to PSM companyid overhaul release
	if (cast(''' + @date1 + ''' as datetime) < cast(''11/10/2008'' as datetime) and (charindex(''3|'',''' + @CommRecIdsPipe + ''') > 0 or ' + @CommRecIdsPipe + ' = 3) and ' + @CompanyID + ' = 2) begin
		insert
			#batches
		select distinct
			b.commbatchid,
			bt.commbatchtransferid,
			r.abbreviation as commrec,
			bt.commrecid,
			bt.parentcommrecid,
			bt.amount,
			bt.transferamount
		from
			tblcommbatch b inner join
			tblcommbatchtransfer bt on b.commbatchid = bt.commbatchid inner join
			tblcommrec r on bt.commrecid = r.commrecid and r.CommRecId IN (3) join
			tblcommscen s on s.commscenid = b.commscenid join
			tblcommstruct cs on cs.commscenid = s.commscenid 
				and cs.companyid = 2 
				and cs.commrecid = bt.commrecid 
				and cs.parentcommrecid = bt.parentcommrecid
				and cs.parentcommrecid = 4
		where
			( CAST(CONVERT(varchar(15), b.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
			( CAST(CONVERT(varchar(15), b.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) 
	end
		
	
	select
		ut.AgencyId,
		ut.Agency,	
		ut.EntryTypeId,
		ut.FeeType,
		ut.AmountPaid,
		tt.commrec,
		tt.commrecid,
		tt.parentcommrecid,
		tt.amount,
		tt.transferamount--,
		--ut.commstructid
	from
		(
			select distinct
				commrec,
				commrecid,
				parentcommrecid,
				sum(amount) [amount],
				sum(transferamount) [transferamount]
			from
				#batches
			group by
				commrec,
				commrecid,
				parentcommrecid
		)
		as tt left join
		(
			SELECT
				AgencyId,
				Agency,	
				EntryTypeId,
				FeeType,
				CommRec,
				CommRecId,
				ParentCommRecId,
				sum(Amount) as AmountPaid--,
				--commstructid as commstructid
			FROM
				(
				SELECT 
					tblCommPay.Amount,
					
					tblAgency.AgencyId,
					tblAgency.Name as Agency,

					tblEntryType.EntryTypeId,
					tblEntryType.DisplayName as FeeType,

					tblCommRec.Abbreviation as CommRec,
					tblCommStruct.CommRecId,
					tblCommStruct.ParentCommRecId--,
					--tblCommStruct.commstructid as commstructid
				FROM
					tblCommPay INNER JOIN
					tblRegisterPayment ON tblCommPay.RegisterPaymentID=tblRegisterPayment.RegisterPaymentID INNER JOIN
					tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructID and tblCommStruct.CompanyID = ' + @CompanyID + ' INNER JOIN
					tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN
					tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId INNER JOIN
					tblRegister tblFeeRegister ON tblRegisterPayment.FeeRegisterId=tblFeeRegister.RegisterId INNER JOIN
					tblEntryType ON tblFeeRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
					tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId INNER JOIN
					tblCommBatch on tblCommPay.CommBatchId=tblCommBatch.CommBatchId

				WHERE
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
					tblCommRec.CommRecId IN (' + @CommRecIds + ')
				
				UNION ALL

				SELECT 
					-tblCommPay.Amount as amount,
					tblAgency.AgencyId,
					tblAgency.Name as Agency,

					tblEntryType.EntryTypeId,
					tblEntryType.DisplayName as FeeType,

					tblCommRec.Abbreviation as CommRec,
					tblCommStruct.CommRecId,
					tblCommStruct.ParentCommRecId--,
					--tblCommStruct.commstructid as commstructid
				FROM
					tblCommChargeBack tblCommPay INNER JOIN
					tblRegisterPayment ON tblCommPay.RegisterPaymentID=tblRegisterPayment.RegisterPaymentID INNER JOIN
					tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructID and tblCommStruct.CompanyID = ' + @CompanyID + ' INNER JOIN
					tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN
					tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId INNER JOIN
					tblRegister tblFeeRegister ON tblRegisterPayment.FeeRegisterId=tblFeeRegister.RegisterId INNER JOIN
					tblEntryType ON tblFeeRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
					tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId INNER JOIN
					tblCommBatch on tblCommPay.CommBatchId=tblCommBatch.CommBatchId

				WHERE
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
					tblCommRec.CommRecId IN (' + @CommRecIds + ')

				)
				derivetbl
			GROUP BY
				EntryTypeId,FeeType,Agency,CommRec,AgencyId,CommRecId,ParentCommRecId--,commstructid
		)
		as ut on tt.commrecid = ut.commrecid and
		(
			(
				tt.parentcommrecid = ut.parentcommrecid
			)
			or
			(
				tt.parentcommrecid is null and
				ut.parentcommrecid is null
			)
		)
	ORDER BY
		Agency,EntryTypeId,tt.CommRecID'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationPreviewGroups]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NegotiationPreviewGroups]
@GroupName varchar(max), @Where varchar(max)
as
EXEC 
('
	SELECT DISTINCT ' + @GroupName + ' as [GroupHdr]
	FROM tblCache_PreviewGrid
	WHERE ' + @Where + ' 
	ORDER BY ' + @GroupName
)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterInsertParentXref]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NegotiationFilterInsertParentXref]
(
	@FilterID int,
	@ParentFilterID int
)

AS

if not exists (SELECT * FROM tblNegotiationFilterParentXref WHERE FilterID = @FilterID and ParentFilterID = @ParentFilterID)
begin
	INSERT
		tblNegotiationFilterParentXref (FilterID, ParentFilterID) 
	VALUES
		(
			@FilterID,
			@ParentFilterID
		)
end

--DELETE
--	tblNegotiationFilterParentXref
--WHERE
--	FilterID not in (SELECT FilterID FROM tblNegotiationFilters WHERE Deleted = 0)
--	or ParentFilterID not in (SELECT FilterID FROM tblNegotiationFilters WHERE Deleted = 0)
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCallClientSearches]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetCallClientSearches]
@PhoneNumber varchar(15)
AS
Begin
	 select  
		s.*, cs.Name [ClientStatus]
	from
		tblclientsearch s
	join 
		tblclient c on c.clientid = s.clientid
	join
		tblclientstatus cs on cs.clientstatusid = c.currentclientstatusid
	where 
		s.contactnumber Like '%' + @PhoneNumber + '%'
	order by s.name asc
end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetLeadPhoneList]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetLeadPhoneList]
(
	@ForDate datetime
)
as
begin

select p.LeadPhoneListID, m.market, s.Source, p.Phone, p.Budget, p.Actual, (p.Budget - p.Actual) [Diff], p.LastModified, u.Username [LastModifiedBy]
from tblLeadPhoneList p
join tblLeadSource s on s.LeadSourceID = p.LeadSourceID
join tblLeadMarket m on m.LeadMarketID = s.LeadMarketID
join tblUser u on u.UserID = p.LastModifiedBy
where p.ForDate = @ForDate
	and p.Deleted = 0
order by m.Market, s.Source


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetDepositExceptionReport1]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetDepositExceptionReport1]
@ReportId int
AS
Begin

Declare @report table(ReportDetailId int,
					 ReportId int,
					 TransactionId varchar(255),
					 DepositType varchar(8),
 					 [Status] int,
					 ClientId int,
					 ClientName varchar(255),
					 CheckNumber varchar(50),
					 ShadowStoreId varchar(255),
					 RegisterId int,
					 Amount money,
					 ReasonCode varchar(255),
					 ReasonDescription varchar(255),
					 Bounced bit,
					 BankRouting varchar(50),
					 BankAccount varchar(50),
					 FrontImagePath varchar(255),
					 SA varchar(255),
					 BankType varchar(1))
					 
--Insert Nacha Records					 
Select r.ReportDetailId as ReportDetailId, 
	   r.ReportId as  ReportId,  
	   r.TransactionId as TransactionId, 
	   'ACH' as DepositType,
	   n.Status as [Status],
	   n.ClientId as ClientId,
	   n.Name AS [ClientName],
	   '' AS CheckNumber,
	   n.ShadowStoreId as ShadowStoreId,
	   n.RegisterId as RegisterId,
	   n.Amount as Amount, 
	   n.ExceptionCode AS [ReasonCode],
	   isnull(CASE WHEN n.Status in (1,2)  THEN (Select top 1 ReasonDescription From tblChecksiteStatusReason Where ReasonCode = n.ExceptionCode)
				   WHEN n.Status = 3 THEN (Select top 1 BouncedDescription From tblBouncedReasons Where BouncedCode = n.ExceptionCode)
				   ELSE Null END, '') AS [ReasonDescription],
	   CASE WHEN r.StateId = 3 THEN 1 ELSE 0 END as [Bounced],
	   n.RoutingNumber as  BankRouting,
	   n.AccountNumber as  BankAccount,
	   NULL as FrontImagePath,
	   cp.ShortCoName as SA,
	   n.Type as BankType
into #report
From tblProcessingReportDetail r
inner join tblProcessingReportState s on s.StateId = r.StateId 
inner join tblNachaRegister2 n on r.TransactionId = convert(varchar, n.NachaRegisterid)
left join tblCommRec cr on n.CommRecId = cr.CommRecId
left join tblRegister t on t.RegisterId = n.RegisterId
left join tblEntryType e on e.EntryTypeId = t.EntryTypeId
left join tblcompany cp on cp.CompanyId = n.CompanyId
Where r.ReportId = @ReportId 
And s.StateGroupId = 3
And r.TransactionType in (3,5,7)

--Insert Check21 Records					 
Insert Into #report(ReportDetailId, ReportId, TransactionId, DepositType,
					[Status], ClientId, ClientName, CheckNumber,
					ShadowStoreId, RegisterId, Amount,
					ReasonCode, ReasonDescription, Bounced, FrontImagePath, SA)
Select r.ReportDetailId, 
	   r.ReportId,  
	   r.TransactionId, 'C21',
	   b.Status,
	   (Select ClientId From tblClient Where AccountNumber = b.AccountNumber),
	   p.FirstName + ' ' + p.LastName AS [ClientName],
	   b.CheckNumber,
	   b.AccountNumber,	
	   b.DepositId,
	   b.Amount, 
	   b.ExceptionCode AS [ReasonCode],
	   isnull(CASE WHEN b.Status in (1,2)  THEN (Select top 1 ReasonDescription From tblChecksiteStatusReason Where ReasonCode = b.ExceptionCode)
				   WHEN b.Status = 3 THEN (Select top 1 BouncedDescription From tblBouncedReasons Where BouncedCode = b.ExceptionCode)
				   ELSE Null END, '') AS [ReasonDescription],
	   CASE WHEN r.StateId = 3 THEN 1 ELSE 0 END as [Bounced],
	   isnull(b.FrontImagePath, '') AS [FrontImagePath],
	   cp.ShortCoName
From tblProcessingReportDetail r
inner join tblProcessingReportState s on s.StateId = r.StateId 
inner join tblC21BatchTransaction b on b.TransactionId = r.TransactionId
left join tblRegister t on t.RegisterId = b.DepositId
left join tblClient c on c.AccountNumber = b.AccountNumber
left join tblPerson p on p.ClientId = c.ClientId
left join tblcompany cp on cp.CompanyId = c.CompanyId
Where r.ReportId = @ReportId
And (p.relationship is null or p.relationship = 'prime')
And s.StateGroupId = 3
And r.TransactionType in (3,5,7)

--Return Data
Select * from #report
Order By  ReportDetailId

drop table #report

End
GO
/****** Object:  StoredProcedure [dbo].[stp_MarketingDashboardDetail]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_MarketingDashboardDetail]
(
	@datefrom datetime, 
	@dateto datetime,
	@statusgroup varchar(30) = null,
	@category varchar(30) = null,
	@vendor varchar(30) = null,
	@productdesc varchar(50) = null,
	@affiliatecode varchar(30) = null
)
as
begin 

declare @refund bit, @reasonid int

if @statusgroup = 'Refund' begin
	set @refund = 1
	set @statusgroup = null
end
else 
	set @refund = 0
	
if @statusgroup = 'Success' 
	set @reasonid = 24


select l.rgrid, l.leadapplicantid, l.fullname, l.leadphone, l.email, p.productcode, a.affiliatecode, ls.description [status], r.description [reason],
	left(u.firstname,1) + '. ' + u.lastname [rep], l.remoteaddr, n.value [lastnote], m.callsmade, m.firstcallmade, l.created, cast(datediff(minute,l.created,m.firstcallmade) as varchar(10)) + 'min' [minutes]
from tblleadapplicant l 
join tblleadproducts p on p.productid = l.productid
join tblleadvendors v on v.vendorid = p.vendorid
join tblleadcategories c on c.categoryid = v.categoryid
join vw_enrollment_CurrentStatusCreated s on s.leadapplicantid = l.leadapplicantid
join tblleadstatus ls on ls.statusid = s.currentstatusid
join tblleadstatusgroup g on g.statusgroupid = ls.statusgroupid
left join tblleadaffiliates a on a.affiliateid = l.affiliateid
left join tbluser u on u.userid = l.repid
left join tblleadreasons r on r.leadreasonsid = l.reasonid
left join vw_enrollment_lastnotecreated vn on vn.leadapplicantid = l.leadapplicantid
left join tblleadnotes n on n.leadnoteid = vn.lastnoteid
left join vw_enrollment_callsmade m on m.leadapplicantid = l.leadapplicantid
where l.created between @datefrom and @dateto
and (@refund is null or l.refund = @refund)
and (@statusgroup is null or (g.groupname = @statusgroup or l.reasonid = @reasonid))
and (@category is null or c.category = @category)
and (@vendor is null or v.vendorcode = @vendor)
and (@productdesc is null or p.productdesc = @productdesc)
and (@affiliatecode is null or a.affiliatecode = @affiliatecode)
order by l.fullname


end
GO
/****** Object:  StoredProcedure [dbo].[stp_getMultiDepositRulesByRuleID]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_getMultiDepositRulesByRuleID]
(
	@ACHRuleID int
)
as
BEGIN
	declare @ssql varchar(max)
	set @ssql = 'SELECT dr.RuleACHId, ba.AccountNumber AS BankAccountNumber, ba.RoutingNumber AS BankRoutingNumber, '
	set @ssql = @ssql + 'rn.CustomerName AS BankName, dr.DepositAmount, dr.DepositDay, dr.StartDate, dr.EndDate, '
	set @ssql = @ssql + 'ba.BankType, dr.ClientDepositID, ba.BankAccountId, ba.Disabled As [Disabled], '
	set @ssql = @ssql + 'LEFT(u.FirstName,1) + ''. '' + u.LastName As [uCreatedBy], '
	set @ssql = @ssql + 'dr.Created, '
	set @ssql = @ssql + 'LEFT(u1.FirstName,1) + ''. '' + u1.LastName as [uLastModifiedBy], ' 
	set @ssql = @ssql + 'dr.LastModified '
	set @ssql = @ssql + 'FROM tblDepositRuleAch AS dr '
	set @ssql = @ssql + 'INNER JOIN tblClientBankAccount AS ba ON dr.BankAccountID = ba.BankAccountId '
	set @ssql = @ssql + 'INNER JOIN tblRoutingNumber AS rn ON ba.RoutingNumber = rn.RoutingNumber '
	set @ssql = @ssql + 'INNER JOIN tblUser u ON u.userid = dr.CreatedBy '
	set @ssql = @ssql + 'INNER JOIN tblUser u1 ON u1.userid = dr.LastModifiedBy '
	set @ssql = @ssql + 'WHERE dr.RuleACHId = ' + cast(@ACHRuleID as varchar)

	exec(@ssql)
			
END




GRANT EXEC ON stp_getMultiDepositRulesByRuleID TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_SaveCommScen]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SaveCommScen]
(
	@AgencyID int,
	@CompanyID int,
	@StartDate datetime,
	@EndDate datetime = null,
	@RetFrom int,
	@RetTo int,
	@UserID int
)
as
begin
-- Returns CommScenID

declare @cnt int, @commscenid int


select
	@cnt = count(*), @commscenid = max(commscenid)
from
	tblcommscen
where
	agencyid = @AgencyID and
	startdate <= @StartDate and
	(
		enddate is null or
		enddate >= cast(convert(char(10), @StartDate, 101) as datetime)
	) and
	retentionfrom = @retFrom and
	retentionto = @retTo


if @cnt = 0
 begin
	-- The agency does not have any scenarios defined that meet the Start Date range, create new scenario
	insert tblCommScen (AgencyID, StartDate, EndDate, RetentionFrom, RetentionTo, Created, CreatedBy, LastModified, LastModifiedBy)
	values (@AgencyId, @StartDate, @EndDate, @RetFrom, @RetTo, getdate(), @UserID, getdate(), @UserID)

	select scope_identity()
 end
else
 begin
	if not exists (select 1 from tblCommStruct s where CommScenID = @commscenid and CompanyID = @CompanyID)
	 begin
		-- Add company to existing scenario
		select @commscenid
	 end
	else
	 begin
		-- Uncommented 5/20/09 - Need to manually adjust the start/end dates for this agency so that none overlap
		-- The scenario already has a structure defined for this settlement attorney, a new scenario is required
		insert tblCommScen (AgencyID, StartDate, EndDate, RetentionFrom, RetentionTo, Created, CreatedBy, LastModified, LastModifiedBy)
		values (@AgencyId, @StartDate, @EndDate, @RetFrom, @RetTo, getdate(), @UserID, getdate(), @UserID)

		select scope_identity()
	 end
 end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMatterEMails]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <01 - 27 January 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Decription  : Get Matter emails
*/
CREATE procedure [dbo].[stp_GetMatterEMails]
	(
		@returntop varchar (50) = '100 percent',
		@MatterId int,
		@orderby varchar(50)='[Emaildate] desc',  
		@shortvalue int = 150
	)

as
exec
(
	'select
		''email'' as type,
		t.createddate as [Emaildate],
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + ''</br>'' + ug.Name as [by],
		t.[MailSubject] as message,
		substring(t.[MailSubject], 0, ' + @shortvalue + ') + ''...'' as shortmessage,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedby,
		t.EMailLogID as fieldid
	from
		(
		select top ' + @returntop + '
			*
		from
			tblEmailRelayLog
		)
		as t inner join
		tblEmailRelayRelation logrelation on t.EMailLogID = logrelation.EMailLogID left outer join
		tbluser as tblcreatedby on t.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on t.CreatedBy = tbllastmodifiedby.userid inner join 
		tblusergroup as ug on ug.usergroupid = t.usergroupid
	
	Where logrelation.RelationTypeID=19 and logrelation.Relationid =  ' + @MatterId + '
	

 order by ' +  @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[get_ClientFeeInfo]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[get_ClientFeeInfo]
(
	@clientId int
)

AS

SET NOCOUNT ON

SELECT
	isnull(SetupFee,0.00) as SetupFee,
	isnull(SetupFeePercentage,0.00) as SetupFeePercentage,
	isnull(SettlementFeePercentage,0.00) as SettlementFeePercentage,
	isnull(MonthlyFee,0.00) as MonthlyFee,
	isnull(AdditionalAccountFee,0.00) as AdditionalAccountFee,
	isnull(ReturnedCheckFee,0.00) as ReturnedCheckFee,
	isnull(OvernightDeliveryFee,0.00) as OvernightDeliveryFee,
	isnull(MaintenanceFeeCap,0.00) as MaintenanceFeeCap,
	isnull(SubsequentMaintFee,0.00) as SubsequentMaintFee,
	SubMaintFeeStart 
FROM
	tblClient
WHERE
	ClientId=@clientId
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getCloser]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_enrollment_getCloser]
(
	@leadapplicantid int
)
as
begin

declare @leadauditid int

-- get the first closer assigned to this lead
select @leadauditid = min(a.leadauditid)
from tblleadapplicant l
join tblLeadAudit a on a.leadapplicantid = l.leadapplicantid
	and a.leadfield = 'RepID'
	--and a.previousvalue > 0
join tblUser u on u.userid = a.newvalue
	and u.usergroupid = 25 -- CID Closer
where l.leadapplicantid = @leadapplicantid
group by l.leadapplicantid

-- output
select u.userid [closerId], u.firstname + ' ' + left(u.lastname,1) + '.' [closer], f.userid [fronterId], f.firstname + ' ' + f.lastname [fronter]
from tblleadaudit a
join tbluser u on u.userid = a.newvalue
join tbluser f on f.userid = a.userid
where a.leadauditid = @leadauditid


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetValidMatterExpenseEntryType]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <0 - 11 February 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Get valid Matter Expense Entry Type
*/
CREATE procedure [dbo].[stp_GetValidMatterExpenseEntryType]
(
	@MatterTypeId int =null,
	@UserId int = null,
	@UserGroupId int =null

)

AS

BEGIN

	-- 2.11.2010 ---
	-- Note for this stored procedure --
	-- To Do:	1. Define which entry types are applicable for mattertype
	--		  	2. Define which entry types are flate rate type or hourly rate	
	--			2. define if Valid entry type for each group of users 	

select 

EntryTypeId,
[Type],
[Name],
[DisplayName],
[Order],
IsMatterEntry as IsMatterEntry,
IsFlateRate as IsFlateRate,
Rate as Rate

 from dbo.tblEntryType 

Where IsMatterEntry =1
order by [name] asc


END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetLSADocInfo]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetLSADocInfo]  
(
	@clientid int
)
as
begin
-- used by LexxCMS


select top 1 c.accountnumber, t.docfolder, subfolder, doctypeid, docid, datestring, c.companyid
from tblDocRelation dr
join tblDocumentType t on t.typeid = dr.doctypeid
	and t.typeid = 'D2001' -- LSA
join tblclient c on c.clientid = dr.clientid
	and c.clientid = @clientid
where (DeletedFlag = 0 or DeletedBy = -1) 
order by dr.docrelationid desc 


end
GO
/****** Object:  StoredProcedure [dbo].[stp_Reporting_SmartDebtor_ErrorCountsByTypeByUser]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_Reporting_SmartDebtor_ErrorCountsByTypeByUser]
(@userid int)
AS
BEGIN
-- =============================================
-- Author:		Christopher Nott
-- Create date: 07/20/2009
-- Description:	FOR DEBUG - ERRORS COUNTS BY USER FOR SD CALL CONTROLS
-- =============================================
	SET NOCOUNT ON;
	
	DECLARE @DATESTRING datetime

	set @DATESTRING = convert(datetime,convert(varchar,getdate(),110)+' 00:00:00.000')

	select top(20) 
		Errors = count(*) 
        ,[message]
        from tblcallmessagelog cl
        inner join tbluser u on cl.userid = u.userid
        where messagedate > = @DATESTRING 
       
and cl.userid = @userid
        group by[message]order by errors desc



END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetDisbursementTransactions]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetDisbursementTransactions]
(
	@StartDate datetime = null,
	@EndDate datetime = null,
	@CompanyId int = null
)
AS
Begin

Select
	r.RegisterId,
	isnull(e.Name, 'Other') [Type],
	c.AccountNumber,
	c.ClientId,
	p.FirstName + ' ' + p.LastName [ClientName],
	abs(r.Amount) [Amount],
	r.Created,
	Case When r.Void is not null Then 'X' else '' End [Voided],
	Case When r.Void is null Then '' else Convert(varchar, r.Void, 101) End [DateVoided],
	case when vc.converted is null then co.Name -- current
		 when vc.converted > r.created then cc.name
		 else co.Name -- current
	end [Company],
	case when vt.converted is null then t.displayname -- current
		 when vt.converted > r.created then tc.displayname
		 else t.displayname -- current
	end [Trust]
From tblRegister r 
join tblEntryType e on r.EntryTypeId = e.EntryTypeID and e.entrytypeid in (18,21,28,48)
join tblClient c on r.ClientId = c.ClientId
join tblPerson p on p.ClientId = c.ClientId and (p.Relationship = 'prime')
join tblCompany co on co.CompanyId = c.CompanyId
join tblTrust t on t.trustid = c.trustid
left join vw_ClientTrustConvDate vt on vt.clientid = c.clientid
left join tblTrust tc on tc.trustid = vt.origtrustid
left join vw_ClientCompanyConvDate vc on vc.clientid = c.clientid
left join tblCompany cc on cc.companyid = vc.origcompanyid
Where (@CompanyId is null or c.CompanyId = @CompanyId) 
And (@StartDate is null or r.Created >= @StartDate)
And (@EndDate is null or r.Created < @EndDate) 
Order By r.RegisterId

End
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNotes2]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <07 - 17 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Returns the Clients Notes
					09.March 2010 includes the usergroup of the users
					              includes Notes of Matters
					show the notes for Matter
					Notes: when joining the
					matter please include isDeleted in the join not in the where clause (use IsDeleted)           
*/
CREATE procedure [dbo].[stp_GetNotes2]
	(
		@clientid int,
		@relationid int = null,
		@relationtypeid int = null,
		@orderby varchar(50)='u.lastname asc',
		@clientonly bit=0
	)
as
declare @relationcriteria varchar(1000)

if @clientonly=1 begin
	set @relationcriteria = ' and not exists (select noterelationid from tblnoterelation nnr where nnr.noteid=n.noteid and not nnr.relationtypeid=1)'
end else begin
	set @relationcriteria = ''
end

declare @sql varchar(5000)

set @sql='
	select
		n.noteid,
		n.subject,
		n.value,
		u.firstname + '' '' + u.lastname + ''</br>'' + ug.Name as [by], 
		u.lastname as bylastname, 
		n.created as [date],
		ut.name as usertype,
		(case
			when not rc.color is null then rc.color
			when not uc.color is null then uc.color			
			when not gc.color is null then gc.color
			when not tc.color is null then tc.color
		end ) as color,
		(case
			when not rc.textcolor is null then rc.textcolor
			when not uc.textcolor is null then uc.textcolor			
			when not gc.textcolor is null then gc.textcolor
			when not tc.textcolor is null then tc.textcolor
		end ) as textcolor
	from 
		tblnote n left outer join
		tbluser u on n.createdby=u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype=''User Type'' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype=''User Group'' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype=''User'' left outer join
		(
			select
				nn.noteid,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblnoterelation nr 
				inner join tblnote nn on nr.noteid=nn.noteid
				inner join tblrulecommcolor rcc on rcc.entityid=nr.relationtypeid
			where
				nn.clientid=' + convert(varchar,@clientid) + '
				and rcc.entitytype=''Relation Type''
			group by
				nn.noteid
		) rc on rc.noteid=n.noteid
		left outer join tblusergroup as ug on ug.usergroupid = n.usergroupid
	'

if not @relationid is null  
	set @sql=@sql + 
		' left outer join tblnoterelation nr on n.noteid=nr.noteid 
		  left outer join tblmatter mtr on nr.relationid=mtr.matterid and mtr.IsDeleted=0 
		'

set @sql = @sql +
	' where 
		n.clientid=' + convert(varchar,@clientid) + 
		@relationcriteria 

if not @relationid is null begin
	set @sql = @sql + 
		' and nr.relationtypeid=' + convert(varchar,@relationtypeid) + '
		and nr.relationid=' + convert(varchar,@relationid)
end

set @sql = @sql + 
	' order by ' + 
		@orderby

exec(@sql)

select 
	n.noteid,
	nr.relationtypeid,
	nr.relationid,
	rt.name as relationtypename,
	dbo.getentitydisplay(rt.relationtypeid,relationid) as relationname,
	rt.iconurl,
	rt.navigateurl
from
	tblnoterelation nr inner join
	tblnote n on nr.noteid=n.noteid inner join
	tblrelationtype rt on nr.relationtypeid=rt.relationtypeid
where 
	n.clientid=@clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientsWithChecksToPrint]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetClientsWithChecksToPrint]

as

select
	tblclient.*,
	tblperson.firstname as primarypersonfirstname,
	tblperson.lastname as primarypersonlastname
from
	tblclient inner join
	(
		select
			clientid
		from
			tblchecktoprint
		group by
			clientid
	)
	as t on tblclient.clientid = t.clientid inner join
	tblperson on tblclient.primarypersonid = tblperson.personid	
order by
	tblperson.lastname, tblperson.firstname
GO
/****** Object:  StoredProcedure [dbo].[stp_HomepageChartServiceFees]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_HomepageChartServiceFees]
 (
  @refwhere varchar (8000) = '',
  @dategrouping int = 0
 )
 
as
 


--declare @dategrouping int 
--set @dategrouping= 0

declare @datefield varchar (500)
declare @field varchar(50)
set @field='#tmp.batchdate'

if @dategrouping = 0 -- daily grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar, ' + @field + ', 101))'
	end
else if @dategrouping = 1 -- weekly grouping
	begin
		set @datefield = 'dateadd(day, 1 - datepart(dw, ( convert(varchar, ' + @field + ', 101) )), ( convert(varchar, ' + @field + ', 101) ))'
	end
else if @dategrouping = 2 -- monthly grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar(2), month(' + @field + ')) + N''/1/'' + convert(varchar(4), year(' + @field + ')))'
	end
else if @dategrouping = 3 -- yearly grouping
	begin
		set @datefield = 'convert(datetime, N''1/1/'' + convert(varchar(12), year(' + @field + ')))'
	end
 

create table #tmp(amount money,batchdate datetime, agencyid int)

insert into
	#tmp (amount, batchdate, agencyid)
select
	tblcommpay.amount as amount,
	tblcommbatch.batchdate,
	tblcommscen.agencyid
from
	tblcommbatch inner join
	tblcommpay on tblcommbatch.commbatchid=tblcommpay.commbatchid inner join
	tblcommscen on tblcommbatch.commscenid=tblcommscen.commscenid


union all

select
	tblcommchargeback.amount as amount,
	tblcommbatch.batchdate,
	tblcommscen.agencyid
from
	tblcommbatch inner join
	tblcommchargeback on tblcommbatch.commbatchid=tblcommchargeback.commbatchid inner join
	tblcommscen on tblcommbatch.commscenid=tblcommscen.commscenid

exec
('
select
	sum(amount) as amount,
	tbl.date as [time]
	
from
	(select *, ' + @datefield + ' as date from #tmp) as tbl
group by
   tbl.date
having
   not tbl.date is null
order by 
   tbl.date'
)

drop table #tmp
GO
/****** Object:  StoredProcedure [dbo].[stp_LeadAffiliateIDLookup]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_LeadAffiliateIDLookup]
(
	@AffiliateCode varchar(20),
	@ProductID int
)
as
begin


if not exists (select 1 from tblleadaffiliates where affiliatecode = @AffiliateCode and productid = @ProductID) begin
	insert tblleadaffiliates (affiliatecode,affiliatedesc,productid,createdby)
	values (@AffiliateCode,@AffiliateCode,@ProductID,1265)
	select scope_identity()
end
else begin
	select affiliateid from tblleadaffiliates where affiliatecode = @AffiliateCode and productid = @ProductID
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_LexxCMS_documents_getAllByClientID]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LexxCMS_documents_getAllByClientID]

	(
		@Clientid int
	)
AS
BEGIN
select 
		DocTypeID
		,DocumentID
		,DisplayName
		, Received
		, Created
		, Createdby
		, pdfPath
		,rowNum
	from
	(
		SELECT     
			DocOrder = CASE 
				WHEN CHARINDEX('Power of Attorney', dt.DisplayName) > 0 THEN 
					1 
				ELSE 
					CASE WHEN CHARINDEX('Legal Service Agreement', dt.DisplayName) > 0 THEN 2 ELSE 999 END 
			END 
			, dr.DocTypeID
			,[DocumentID]=dr.docid
			,dr.relationid
			, ISNULL(dt.DisplayName, 'NA') AS DisplayName
			, ISNULL(ds.ReceivedDate, '01-01-1900') AS Received
			, ISNULL(ds.Created, '01-01-1900') AS Created
			, ISNULL(u.FirstName + ' ' + u.LastName + '</br>' + ug.Name, 'NA') AS CreatedBy
			, [pdfpath]='\\' + c.StorageServer + '\' + c.StorageRoot + '\' + c.accountnumber + case when dr.SubFolder is null or dr.subfolder = 'ClientDocs' 
			then '\ClientDocs\' 
			else '\' + dr.subfolder end + c.accountnumber + '_' + dr.Doctypeid + '_' + dr.DocID + '_' + dr.DateString + '.pdf'
			, row_number() over(partition by DisplayName order by ISNULL(ds.ReceivedDate, '01-01-1900') ) as rowNum
		FROM  
			tblDocRelation AS dr INNER JOIN
			tblDocumentType AS dt ON dr.DocTypeID = dt.TypeID INNER JOIN
			tblDocScan AS ds ON dr.DocID = ds.DocID LEFT OUTER JOIN
			tblUser AS u ON u.UserID = ds.CreatedBy INNER JOIN
			tblUserGroup AS ug ON ug.UserGroupId = u.UserGroupID inner join
			tblClient c on c.ClientID = dr.ClientID
		WHERE     (dr.ClientID = 92411) AND (dr.DeletedFlag <> 1)
	) as docData
	Order by [DocOrder], displayName,created desc
END
GO
/****** Object:  StoredProcedure [dbo].[stp_FeePaymentsByMonthNewClientsInitialDrafts]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
exec stp_FeePaymentsByMonth_InitialDrafts 8
exec 
*/

create procedure [dbo].[stp_FeePaymentsByMonthNewClientsInitialDrafts]
(
	@month int
,	@year int = 2008
)
as

declare @fees table (mm int, entrytypeid int, displayname varchar(100), commissions money, chargebacks money)
declare @commish table (mm int, entrytypeid int, displayname varchar(100), commpayid int, amount money)
declare @chargeb table (mm int, entrytypeid int, commchargebackid int, amount money)
declare @deposits table (registerid int)


-- Get first deposits for clients created in @month/@year
insert @deposits 
select min(r.registerid)
from tblregister r
join tblclient c on c.clientid = r.clientid
	and c.agencyid in (838,840,842,843)
	and month(c.created) = @month and year(c.created) = @year
where r.entrytypeid = 3
group by r.clientid


insert @commish (mm, entrytypeid, displayname, commpayid, amount)
select distinct month(b.batchdate), e.entrytypeid, e.displayname, cp.commpayid, cp.amount
from tblcommpay cp
join tblcommbatch b on b.commbatchid = cp.commbatchid
	and year(b.batchdate) = @year
join tblcommstruct cs on cs.commstructid = cp.commstructid
	and cs.commrecid in (5,17) 
join tblregisterpayment rp on rp.registerpaymentid = cp.registerpaymentid
join tblregister r on r.registerid = rp.feeregisterid
join tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
	--and rpd.depositregisterid not in (select registerid from @deposits)
join @deposits d on d.registerid = rpd.depositregisterid
join tblentrytype e on e.entrytypeid = r.entrytypeid
where month(b.batchdate) = @month


insert @fees (mm, entrytypeid, displayname, commissions)
select mm, entrytypeid, displayname, sum(amount)
from @commish
group by mm, entrytypeid, displayname


insert @chargeb (mm, entrytypeid, commchargebackid, amount)
select distinct month(b.batchdate), e.entrytypeid, cb.commchargebackid, cb.amount
from tblcommchargeback cb 
join tblcommbatch b on b.commbatchid = cb.commbatchid
	and year(b.batchdate) = @year
join tblcommstruct cs on cs.commstructid = cb.commstructid
	and cs.commrecid in (5,17) 
join tblregisterpayment rp on rp.registerpaymentid = cb.registerpaymentid
join tblregister r on r.registerid = rp.feeregisterid
join tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
	--and rpd.depositregisterid not in (select registerid from @deposits)
join @deposits d on d.registerid = rpd.depositregisterid
join tblentrytype e on e.entrytypeid = r.entrytypeid
where month(b.batchdate) = @month


update @fees
set chargebacks = dev.chargebacks
from (
	select mm [mth], entrytypeid [id], sum(amount) [chargebacks]
	from @chargeb
	group by mm, entrytypeid
) dev 
where entrytypeid = dev.id and mm = dev.mth


select mm [month], displayname, commissions, isnull(chargebacks,0) [chargebacks], (commissions - isnull(chargebacks,0)) [paid] 
from @fees
order by entrytypeid, mm
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNotes2bak]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetNotes2bak]
	(
		@clientid int,
		@relationid int = null,
		@relationtypeid int = null,
		@orderby varchar(50)='u.lastname asc',
		@clientonly bit=0
	)

as

declare @relationcriteria varchar(1000)

if @clientonly=1 begin
	set @relationcriteria = ' and not exists (select noterelationid from tblnoterelation nnr where nnr.noteid=n.noteid and not nnr.relationtypeid=1)'
end else begin
	set @relationcriteria = ''
end

declare @sql varchar(5000)

set @sql='
	select
		n.noteid,
		n.subject,
		n.value,
		u.firstname + '' '' + u.lastname + ''</br>'' + ug.Name as [by], 
		u.lastname as bylastname, 
		n.created as [date],
		ut.name as usertype,
		(case
			when not rc.color is null then rc.color
			when not uc.color is null then uc.color			
			when not gc.color is null then gc.color
			when not tc.color is null then tc.color
		end ) as color,
		(case
			when not rc.textcolor is null then rc.textcolor
			when not uc.textcolor is null then uc.textcolor			
			when not gc.textcolor is null then gc.textcolor
			when not tc.textcolor is null then tc.textcolor
		end ) as textcolor
	from 
		tblnote n left outer join
		tbluser u on n.createdby=u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype=''User Type'' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype=''User Group'' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype=''User'' left outer join
		(
			select
				nn.noteid,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblnoterelation nr 
				inner join tblnote nn on nr.noteid=nn.noteid
				inner join tblrulecommcolor rcc on rcc.entityid=nr.relationtypeid
			where
				nn.clientid=' + convert(varchar,@clientid) + '
				and rcc.entitytype=''Relation Type''
			group by
				nn.noteid
		) rc on rc.noteid=n.noteid
		inner join tblusergroup as ug on ug.usergroupid = n.usergroupid
	'

if not @relationid is null begin
	set @sql=@sql + 
		' left outer join tblnoterelation nr on n.noteid=nr.noteid'
end

set @sql = @sql +
	' where 
		clientid=' + convert(varchar,@clientid) + 
		@relationcriteria 

if not @relationid is null begin
	set @sql = @sql + 
		' and nr.relationtypeid=' + convert(varchar,@relationtypeid) + '
		and nr.relationid=' + convert(varchar,@relationid)
end

set @sql = @sql + 
	' order by ' + 
		@orderby

exec(@sql)

select 
	n.noteid,
	nr.relationtypeid,
	nr.relationid,
	rt.name as relationtypename,
	dbo.getentitydisplay(rt.relationtypeid,relationid) as relationname,
	rt.iconurl,
	rt.navigateurl
from
	tblnoterelation nr inner join
	tblnote n on nr.noteid=n.noteid inner join
	tblrelationtype rt on nr.relationtypeid=rt.relationtypeid
where 
	clientid=@clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationViewColumnSelect]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
 Author: Bereket S. Data
 Description: This stored Procedure returns Columns from Distribution view
*/

CREATE PROCEDURE [dbo].[stp_NegotiationViewColumnSelect]
@UseOrdinalPosition as bit = Null
AS
BEGIN
	declare @OrderByCol varchar(25)

	if @UseOrdinalPosition = 1
		BEGIN
			SELECT * 
			FROM INFORMATION_SCHEMA.COLUMNS 
			WHERE TABLE_NAME = 'vwNegotiationDistributionSource'
			ORDER BY ORDINAL_POSITION ASC
		END
	else
		BEGIN
			SELECT * 
			FROM INFORMATION_SCHEMA.COLUMNS 
			WHERE TABLE_NAME = 'vwNegotiationDistributionSource'
			ORDER BY COLUMN_NAME ASC
		END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SaveCommStruct]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SaveCommStruct]
(
	@CommScenID int,
	@CommRecID int,
	@ParentCommRecID int,
	@Order int,
	@UserID int,
	@CompanyID int,
	@ParentCommStructID int = null
)
as 
begin
-- Returns CommStructID

declare @CommStructID int
set @CommStructID = null

select @CommStructID = CommStructID
from tblCommStruct
where CommScenID = @CommScenID
	and CommRecID = @CommRecID
	and ParentCommRecID = @ParentCommRecID
	and CompanyID = @CompanyID

if (@CommStructID is null) begin
	declare @max int
	
	select @max = max([order])
	from tblCommStruct
	where CommScenID = @CommScenID
		and ParentCommRecID = @ParentCommRecID
		and CompanyID = @CompanyID
		
	if (@max is null)
		set @max = 0
	else
		set @Order = @max + 1
	
	insert tblCommStruct 
	(
		CommScenID, 
		CommRecID, 
		ParentCommRecID, 
		[Order], 
		Created, 
		CreatedBy, 
		LastModified, 
		LastModifiedBy, 
		CompanyID, 
		ParentCommStructID
	)
	values
	(
		@CommScenID, 
		@CommRecID, 
		@ParentCommRecID, 
		@Order, 
		getdate(), 
		@UserID, 
		getdate(), 
		@UserID, 
		@CompanyID, 
		@ParentCommStructID
	)

	select scope_identity()
end
else begin
	select @CommStructID
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_Sidebar_getFirmInfo]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_Sidebar_getFirmInfo]

	(
		@CompanyID int,
		@AddressTypeID int,
		@PhoneTypeID int
	)
AS
BEGIN
	SELECT 
		c.name as [FirmName]
		, ca.Address1
		, ca.Address2
		, ca.City
		, ca.State
		, ca.ZipCode
		, cp.PhoneNumber
		, c.BillingMessage 
	FROM tblCompanyAddresses as ca 
		inner join tblCompanyPhones as cp ON cp.CompanyID = ca.CompanyID 
		Inner join tblCompany as c On c.companyid = ca.companyid 
	WHERE ca.CompanyID = @CompanyID  
		AND ca.AddressTypeID = @AddressTypeID 
		AND cp.PhoneType = @PhoneTypeID
END


GRANT EXEC ON stp_LetterTemplates_Sidebar_getFirmInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_HomepageChartReceivable]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_HomepageChartReceivable]
 (
  @refwhere varchar (8000) = '',
  @dategrouping int = 0
 )
 
as
 

declare @datefield varchar (500)
declare @field varchar(50)
set @field='#tmp.TransactionDate'

if @dategrouping = 0 -- daily grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar, ' + @field + ', 101))'
	end
else if @dategrouping = 1 -- weekly grouping
	begin
		set @datefield = 'dateadd(day, 1 - datepart(dw, ( convert(varchar, ' + @field + ', 101) )), ( convert(varchar, ' + @field + ', 101) ))'
	end
else if @dategrouping = 2 -- monthly grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar(2), month(' + @field + ')) + N''/1/'' + convert(varchar(4), year(' + @field + ')))'
	end
else if @dategrouping = 3 -- yearly grouping
	begin
		set @datefield = 'convert(datetime, N''1/1/'' + convert(varchar(12), year(' + @field + ')))'
	end


create table #tmp(
	RegisterId int,
	AgencyId int,
	TransactionDate datetime,
	Amount money
)

exec('
INSERT INTO
	#tmp
SELECT 
	tblRegister.RegisterID,
	tblClient.AgencyId,
	tblRegister.TransactionDate,
	(-tblRegister.Amount-
		(SELECT 
			case when SUM(b.Amount) is null then 0 else sum(b.amount) end
		FROM 
			tblRegisterPayment b
		WHERE 
			b.FeeRegisterId=tblRegister.RegisterId
		)
	)*tblcommfee.[percent] as Amount

FROM
	tblRegister INNER JOIN 
	tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
	tblClient ON tblRegister.ClientId=tblClient.ClientId INNER JOIN
	(SELECT distinct ClientId,Created as HireDate FROM tblRoadmap WHERE ClientStatusId=5) tblHireDate ON tblClient.ClientId=tblHireDate.ClientId INNER JOIN
	tblAgency ON tblClient.AgencyId=tblAgency.AgencyId INNER JOIN
	tblCommScen ON tblClient.AgencyId=tblCommScen.AgencyId AND tblHireDate.HireDate > tblCommScen.StartDate AND (tblHireDate.HireDate<tblCommScen.EndDate OR tblCommScen.EndDate is null) INNER JOIN
	tblCommStruct ON tblCommScen.CommScenId=tblCommStruct.CommScenId INNER JOIN
	tblCommFee ON (tblRegister.EntryTypeId=tblCommFee.EntryTypeId AND tblCommFee.CommStructId=tblCommStruct.CommStructId)
WHERE
	tblEntryType.Fee=1 ' + @refwhere
)

exec
('
select
	tbl.date as [time],	
	sum(Amount) as Amount
from
	(select *, ' + @datefield + ' as date from #tmp) as tbl
where
	Amount > 0
group by
   tbl.date
having
   not tbl.date is null
order by 
   tbl.date'
)

drop table #tmp
GO
/****** Object:  StoredProcedure [dbo].[stp_Report_AccountsOverPercentage]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Report_AccountsOverPercentage]
(
	@hiredate1 datetime = null,
	@hiredate2 datetime = null,
	@percent1 float = null,
	@percent2 float = null,
	@sdabal1 float = 0,
	@sdabal2 float = null,
	@accountbal1 float = null,
	@accountbal2 float = null,
	@clientstatusids varchar(999) = null,
	@clientstatusidsop varchar(5) = '',
	@agencyids varchar(999) = null,
	@agencyidsop varchar(5) = '',
	@accountstatusids varchar(999) = null,
	@accountstatusidsop varchar(5) = null,
	@mediator int=null,
	@Assigned bit = null,
	@orderby varchar(255) = 'c.lastname1,c.accountid'
)

as

if not @orderby is null
	set @orderby=' order by ' + @orderby
else
	set @orderby=''

create table #tmpAccountStatusIds(AccountStatusID int)
if @accountstatusids is null begin
	insert into #tmpAccountStatusIds select AccountStatusId from tblAccountStatus
end else begin
	exec('insert into #tmpAccountStatusIds select AccountStatusId from tblAccountStatus where ' + @accountstatusidsop + ' AccountStatusId in(' + @accountstatusids + ')')
end

create table #tmpAgencyIds(AgencyId int)
if @agencyids is null begin
	insert into #tmpagencyids select agencyid from tblagency
end else begin
	
	exec('insert into #tmpAgencyIds select agencyid from tblagency where ' + @agencyidsop + ' agencyid in(' + @agencyids + ')')
end

create table #tmpClientStatusIds(ClientStatusId int) 
if @clientstatusids is null begin
	insert into #tmpclientstatusids select clientstatusid from tblclientstatus
end else begin
	exec('insert into #tmpClientStatusIds select clientstatusid from tblclientstatus where ' + @clientstatusidsop + ' clientstatusid in(' + @clientstatusids + ')')
end

select 
	creditorid,
	p.*
into
	#tmpphone
from
	tblcreditorphone cp inner join
	tblphone p on cp.phoneid=p.phoneid
where 
	p.phoneid = (select top 1 cp2.phoneid from tblcreditorphone cp2 where cp2.creditorid = cp.creditorid)

select 
	c.clientid,
	balance
into
	#tmpbal
from
	tblclient c inner join
	tblregister r on c.clientid=r.clientid
where 
	r.registerid = (select top 1 registerid from tblregister where tblregister.clientid=r.clientid order by transactiondate desc, registerid desc)
	and balance >= isnull(@sdabal1, balance)
	and balance <= isnull(@sdabal2, balance)
	--and (@mediator is null or (@mediator=c.assignedmediator))
	--and	(@assigned is null or (case when c.assignedmediator is null then 0 else 1 end) = @assigned)

select 
	c.clientid,
	c.accountnumber,
	c.created,
	c.agencyid,
	c.currentclientstatusid,
	c.assignedmediator,
	prim.firstname as firstname1,
	prim.lastname as lastname1,
	prim.ssn as ssn1,
	prim.personid as personid1,
	sec.firstname as firstname2,
	sec.lastname as lastname2,
	sec.ssn as ssn2,
	sec.personid as personid2
into
	#tmpclient
from 
	(
		select 
			nc.clientid,
			nc.accountnumber,
			nc.created,
			nc.agencyid,
			nc.currentclientstatusid,
			nc.assignedmediator,
			nc.primarypersonid
		from
			tblclient nc
		where
			agencyid in (select agencyid from #tmpagencyids) and
			nc.currentclientstatusid in (select clientstatusid from #tmpclientstatusids) and
			nc.created >= isnull(@hiredate1, nc.created) and 
			nc.created <= isnull(@hiredate2, nc.created) 
			and (@mediator is null or (@mediator=nc.assignedmediator))
			and	
			(
				@assigned is null or 
				(@assigned=1 and not nc.assignedmediator is null) or
				(@assigned=0 and nc.assignedmediator is null)
			)
	) c inner join
	tblPerson as prim ON c.PrimaryPersonId=prim.PersonId LEFT OUTER JOIN
	tblPerson as sec ON sec.PersonId <> c.primarypersonid and sec.clientid=c.clientid


select
	c.*,
	a.currentcreditorinstanceid,
	a.accountid,
	a.currentamount as accountbalance,
	sdabal.balance as sdabalance,
	a.accountstatusid
into
	#tmpClientAccounts
from
	#tmpclient c inner join
	tblaccount a on c.clientid = a.clientid  inner join
	#tmpbal sdabal on c.clientid=sdabal.clientid
where
	(
		a.accountstatusid in (select accountstatusid from #tmpaccountstatusids) or 
		(accountstatusid is null and @accountstatusidsop='not')
	) and
	a.currentamount >= isnull(@accountbal1, a.currentamount) and 
	a.currentamount <= isnull(@accountbal2, a.currentamount) and
	isnull(a.currentamount * @percent1, sdabal.balance) <= sdabal.balance and
	isnull(a.currentamount * @percent2, sdabal.balance) >= sdabal.balance
	--and (@mediator is null or (@mediator=c.assignedmediator))
	--and (@assigned is null or (case when c.assignedmediator is null then 0 else 1 end) = @assigned)

declare @vperc1 varchar(50)
declare @vperc2 varchar(50)
set @vperc1 = isnull(convert(varchar,@percent1),'null')
set @vperc2 = isnull(convert(varchar,@percent2),'null')

exec('
select
	c.*,
	cr.creditorid,
	ci.creditorinstanceid,
	cr.[name] as creditorname,
	cr.street as creditorstreet,
	cr.street2 as creditorstreet2,
	cr.city as creditorcity,
	cr.zipcode as creditorzip,
	crstate.abbreviation as creditorstate,
	ci.referencenumber as creditorreferencenumber,
	ci.accountnumber as creditoraccountnumber,
	(crphone.AreaCode + crphone.Number + '' '' + isnull(crphone.Extension,'''')) as creditorphone,'
	 + @vperc1 + ' as percent1,'
	 + @vperc2 + ' as percent2
from
	#tmpclientaccounts c inner join
	tblcreditorinstance ci on c.currentcreditorinstanceid=ci.creditorinstanceid inner join
	tblcreditor cr on ci.creditorid=cr.creditorid inner join
	tblstate crstate on cr.stateid=crstate.stateid left outer join
	#tmpphone crphone on cr.creditorid=crphone.creditorid
' 	+ @orderby
)

drop table #tmpphone
drop table #tmpbal
drop table #tmpclient
drop table #tmpclientstatusids
drop table #tmpagencyids
drop table #tmpClientAccounts
drop table #tmpAccountStatusIds
GO
/****** Object:  StoredProcedure [dbo].[stp_Reporting_SmartDebtor_ErrorCountsByUser]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_Reporting_SmartDebtor_ErrorCountsByUser]
AS
BEGIN
-- =============================================
-- Author:		Christopher Nott
-- Create date: 07/20/2009
-- Description:	FOR DEBUG - ERRORS COUNTS BY USER FOR SD CALL CONTROLS
-- =============================================
	SET NOCOUNT ON;
	
	DECLARE @DATESTRING datetime

	set @DATESTRING = convert(datetime,convert(varchar,getdate(),110)+' 00:00:00.000')

	select top(20) Errors = count(*) 
	,u.firstname + ' '+ u.lastname + '  (' + convert(varchar,u.userid)+')' as [User]
    from tblcallmessagelog cl
    inner join tbluser u on cl.userid = u.userid
    where messagedate > = @datestring
	
    group by u.firstname + ' '+ u.lastname + '  (' + convert(varchar,u.userid)+')' order by errors desc



END
GO
/****** Object:  StoredProcedure [dbo].[stp_Statistic_FeesAndPayments]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Statistic_FeesAndPayments]
(
	@date1 datetime,
	@date2 datetime,
	@companyid int = null,
	@agencyid int = null
)

as


select
	et.[name] as feetype,
	isnull(tblassessed.countassessed,0) as countassessed,
	isnull(tblassessed.sumassessed,0) as sumassessed,
	isnull(tblpaid.countpaid,0) as countpaid,
	isnull(tblpaid.sumpaid,0) as sumpaid
from 
	tblentrytype et left outer join
	(
		select
			entrytypeid,
			count(registerid) as countassessed,
			sum(-amount) as sumassessed
		from
			tblregister r
		join 
			tblclient c on c.clientid = r.clientid
			and (@companyid is null or c.companyid = @companyid)
			and (@agencyid is null or c.agencyid = @agencyid)
		where
			transactiondate between @date1 and @date2
		group by
			entrytypeid
	) tblassessed on et.entrytypeid=tblassessed.entrytypeid left outer join
	(
		select
			entrytypeid,
			count(registerpaymentid) as countpaid,
			sum(rp.amount) as sumpaid
		from
			tblregisterpayment rp inner join
			tblregister r on r.registerid=rp.feeregisterid
		join 
			tblclient c on c.clientid = r.clientid
			and (@companyid is null or c.companyid = @companyid)			
			and (@agencyid is null or c.agencyid = @agencyid)
		where
			paymentdate between @date1 and @date2
			and not voided is null
			and not bounced is null
		group by
			entrytypeid
	) tblpaid on et.entrytypeid=tblpaid.entrytypeid
where
	et.fee=1
order by
	feetype
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMatterNotes]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*  
      Revision    : <03 - 16 February 2010>  
      Category    : [TimeMatter]  
      Type        : {New} 
      Decription  : Returns Notes for Matters  
*/  
  
CREATE procedure [dbo].[stp_GetMatterNotes]  
 (  
  @matterId int,  
  @clientid int = null,  
  @relationid int = null,  
  @relationtypeid int = null,  
  @orderby varchar(50)='u.lastname asc',  
  @clientonly bit=0  
 )  
  
as  
  
declare @relationcriteria varchar(1000)  
  
if @clientonly=1 begin  
 set @relationcriteria = ' and not exists (select noterelationid from tblnoterelation nnr where nnr.noteid=n.noteid and not nnr.relationtypeid=1)'  
end else begin  
 set @relationcriteria = ' and not exists (select noterelationid from tblnoterelation nnr where nnr.noteid=n.noteid and not nnr.relationtypeid=19)'  
end  
  
declare @sql varchar(5000)  
  
set @sql='  
 select  
  n.noteid,  
  n.subject,  
  n.value,  
  u.firstname + '' '' + u.lastname + ''</br>'' + ug.Name as [by],   
  u.lastname as bylastname,   
  n.created as [date],  
  ut.name as usertype,  
  (case  
   when not rc.color is null then rc.color  
   when not uc.color is null then uc.color     
   when not gc.color is null then gc.color  
   when not tc.color is null then tc.color  
  end ) as color,  
  (case  
   when not rc.textcolor is null then rc.textcolor  
   when not uc.textcolor is null then uc.textcolor     
   when not gc.textcolor is null then gc.textcolor  
   when not tc.textcolor is null then tc.textcolor  
  end ) as textcolor  
 from   
  tblnote n left outer join  
  tbluser u on n.createdby=u.userid left outer join  
  tblusertype ut on u.usertypeid=ut.usertypeid left outer join  
  tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype=''User Type'' left outer join  
  tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype=''User Group'' left outer join  
  tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype=''User'' left outer join  
  (  
   select  
    nn.noteid,  
    max(color) as color,  
    max(textcolor) as textcolor  
   from  
    tblnoterelation nr   
    inner join tblnote nn on nr.noteid=nn.noteid  
    inner join tblrulecommcolor rcc on rcc.entityid=nr.relationtypeid  
   where  
    nr.relationid=' + convert(varchar,@matterid) + '  
    and rcc.entitytype=''Relation Type''  
   group by  
    nn.noteid  
  ) rc on rc.noteid=n.noteid  
  inner join tblusergroup as ug on ug.usergroupid = n.usergroupid  
 '  
 set @sql=@sql +   
  ' left outer join tblnoterelation nr on n.noteid=nr.noteid'  
  
set @sql = @sql +  
 ' where   
  nr.relationid=' + convert(varchar,@matterid)   
  
 set @sql = @sql +   
  ' and nr.relationtypeid=19 '  

set @sql = @sql +  ' UNION 

select  
  n.noteid,  
  n.subject,  
  n.value,  
  u.firstname + '' '' + u.lastname as [by],   
  u.lastname as bylastname,   
  n.created as [date],  
  '''' as usertype,  
  '''' as color,  
  '''' as textcolor  
 from   
  tblnote n left outer join  
  tbluser u on n.createdby=u.userid left outer join  
  tbltasknote tn on tn.noteid=n.noteid left outer join
  tblmattertask mt on mt.taskid=tn.taskid 
  where mt.matterid=' + convert(varchar,@matterid) + ' 

'
  
if RTrim(LTrim(@orderby))<>'Unknown'  
set @sql = @sql +  ' order by ' +  @orderby  
exec(@sql)  
  
select   
 n.noteid,  
 nr.relationtypeid,  
 nr.relationid,  
 rt.name as relationtypename,  
 dbo.getentitydisplay(rt.relationtypeid,relationid) as relationname,  
 rt.iconurl,  
 rt.navigateurl  
from  
 tblnoterelation nr inner join  
 tblnote n on nr.noteid=n.noteid inner join  
 tblrelationtype rt on nr.relationtypeid=rt.relationtypeid  
where   
 nr.relationtypeid=19 and relationID=@matterID
GO
/****** Object:  StoredProcedure [dbo].[stp_getMultiDepositRuleOverlaps]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_getMultiDepositRuleOverlaps]
(
	@NewRuleStartDate datetime,
	@NewRuleEndDate datetime,
	@ClientDepositID int,
	@ExcludeRuleId int = Null
)
as
BEGIN
	declare @ssql varchar(max)
	set @ssql = 'SELECT dr.RuleACHId, ba.AccountNumber AS BankAccountNumber, ba.RoutingNumber AS BankRoutingNumber, '
	set @ssql = @ssql + 'rn.CustomerName AS BankName, dr.DepositAmount, dr.DepositDay, dr.StartDate, dr.EndDate, '
	set @ssql = @ssql + 'ba.BankType, dr.ClientDepositID, ba.BankAccountId '
	set @ssql = @ssql + 'FROM tblDepositRuleAch AS dr INNER JOIN tblClientBankAccount AS ba ON dr.BankAccountID = ba.BankAccountId '
	set @ssql = @ssql + 'INNER JOIN tblRoutingNumber AS rn ON ba.RoutingNumber = rn.RoutingNumber '
	set @ssql = @ssql + 'WHERE ' + char(39) + cast(@NewRuleStartDate as varchar) + char(39) + ' between dr.startdate and dr.enddate '
	set @ssql = @ssql + 'and dr.ClientDepositID = ' + cast(@ClientDepositID as varchar) + ' and dr.RuleACHId <> ' + cast(isnull(@ExcludeRuleId, 0) as varchar)  
	set @ssql = @ssql + ' union '
	set @ssql = @ssql + 'SELECT dr.RuleACHId, ba.AccountNumber AS BankAccountNumber, ba.RoutingNumber AS BankRoutingNumber, '
	set @ssql = @ssql + 'rn.CustomerName AS BankName, dr.DepositAmount, dr.DepositDay, dr.StartDate, dr.EndDate, '
	set @ssql = @ssql + 'ba.BankType, dr.ClientDepositID, ba.BankAccountId '
	set @ssql = @ssql + 'FROM tblDepositRuleAch AS dr INNER JOIN tblClientBankAccount AS ba ON dr.BankAccountID = ba.BankAccountId '
	set @ssql = @ssql + 'INNER JOIN tblRoutingNumber AS rn ON ba.RoutingNumber = rn.RoutingNumber '
	set @ssql = @ssql + 'WHERE ' + char(39) + cast(@NewRuleEndDate as varchar) + char(39) + ' between dr.startdate and dr.enddate '
	set @ssql = @ssql + 'and dr.ClientDepositID = ' + cast(@ClientDepositID as varchar) + ' and dr.RuleACHId <> ' + cast(isnull(@ExcludeRuleId, 0) as varchar) 
	set @ssql = @ssql + ' union '
	set @ssql = @ssql + 'SELECT dr.RuleACHId, ba.AccountNumber AS BankAccountNumber, ba.RoutingNumber AS BankRoutingNumber, '
	set @ssql = @ssql + 'rn.CustomerName AS BankName, dr.DepositAmount, dr.DepositDay, dr.StartDate, dr.EndDate, '
	set @ssql = @ssql + 'ba.BankType, dr.ClientDepositID, ba.BankAccountId '
	set @ssql = @ssql + 'FROM tblDepositRuleAch AS dr INNER JOIN tblClientBankAccount AS ba ON dr.BankAccountID = ba.BankAccountId '
	set @ssql = @ssql + 'INNER JOIN tblRoutingNumber AS rn ON ba.RoutingNumber = rn.RoutingNumber '
	set @ssql = @ssql + 'WHERE ' + char(39) + cast(@NewRuleStartDate as varchar) + char(39) + ' <= dr.startdate '
	set @ssql = @ssql + 'and ' + char(39) + cast(@NewRuleEndDate as varchar) + char(39) + ' >= dr.enddate '
	set @ssql = @ssql + 'and dr.ClientDepositID = ' + cast(@ClientDepositID as varchar) + ' and dr.RuleACHId <> ' + cast(isnull(@ExcludeRuleId, 0) as varchar)  
	exec(@ssql)

END



GRANT EXEC ON stp_getMultiDepositRuleOverlaps TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_TotalCreditors]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_TotalCreditors]
(
	@ValidatedOnly bit = 0
)
as
begin

declare @sql varchar(max)

select top 10 nocreditors, date, cast(month(date)as varchar(2))+'/'+cast(day(date)as varchar(2)) [monthday]
into #totals
from tblcreditortotals
where validatedonly = @ValidatedOnly
order by date desc

select @sql = coalesce(@sql + ', ', '') + cast(nocreditors as varchar(10)) + '[' + monthday + ']'
from #totals
order by date

exec('select ' + @sql)

drop table #totals

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetOverviewForMatter]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <03 - 11 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Decription  : Get the matter overview
*/
CREATE procedure [dbo].[stp_GetOverviewForMatter]
	(
		@returntop varchar (50) = '100 percent',
		@matterid int,
		@shortvalue int = 150,
		@criteria varchar (8000) = '1=1',
		@userid int = null,
		@type varchar(100) = 'type=''task'' OR type=''note'' OR type=''email'' OR type=''phonecall''',
		@OrderBy varchar(100)='date Desc, fieldid Desc'
	)

as

--create our results table
create table #tblResults
([type] varchar(20),
[date] datetime,
[by] varchar(255),
message varchar(5000),
shortmessage varchar(5000),
fieldid int,
direction bit,
userid int,
starttime datetime,
endtime datetime
)

exec
(
'insert into #tblResults 
	select 
		''task'' as type,
		tbltask.created as [date],
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as [by],
		tbltask.[Description] as message,
		substring(tbltask.[Description], 0, ' + @shortvalue + ') + (case when len(tbltask.[Description]) >= ' + @shortvalue + ' then ''...'' else '''' end) as shortmessage, 
		tbltask.taskid as fieldid,
		null as direction,
		tbltask.createdby, null as starttime, null as endtime
	from
		tbltask left outer join
		tbluser as tblcreatedby on tbltask.createdby = tblcreatedby.userid
		left outer join	tblmattertask nr on tbltask.taskid=nr.taskid left outer join 
		tblmatter mtr on nr.matterid=mtr.matterid left outer join
		tblclient ct on mtr.clientid=ct.clientid
	where
		mtr.matterid = ' + @matterid + ' 		
'
)


exec
(
'insert into #tblResults 
	select 
		''note'' as type,
		tblnote.lastmodified as [date],
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> '' + ug.name as [by],
		tblnote.[value] as message,
		substring(tblnote.[value], 0, ' + @shortvalue + ') + (case when len(tblnote.[value]) >= ' + @shortvalue + ' then ''...'' else '''' end) as shortmessage, tblnote.noteid as fieldid,
		null as direction,
		tblnote.createdby, null as starttime, null as endtime
	from
		tblnote left outer join
		tbluser as tbllastmodifiedby on tblnote.lastmodifiedby = tbllastmodifiedby.userid
		inner join tblusergroup as ug on ug.usergroupid = tblnote.usergroupid left outer join
		tblnoterelation nr on tblnote.noteid=nr.noteid left outer join 
		tblrelationtype rt on rt.relationtypeid = nr.relationtypeid left outer join 
		tblmatter mtr on nr.relationid=mtr.matterid left outer join
		tblclient ct on nr.relationid=ct.clientid
	where
		nr.relationtypeid=19 and nr.relationid = ' + @matterid + '

	UNION

select  
	''note'' as type,
	n.created as [date], 		
	u.firstname + '' '' + u.lastname as [by],  
	n.[value] as message,
	substring(n.[value], 0, ' + @shortvalue + ') + (case when len(n.[value]) >= ' + @shortvalue + ' then ''...'' else '''' end) as shortmessage, 
	n.noteid  as fieldid,  
	null as direction, 
    n.createdby, null as starttime, null as endtime
 from   
  tblnote n left outer join  
  tbluser u on n.createdby=u.userid left outer join  
  tbltasknote tn on tn.noteid=n.noteid left outer join
  tblmattertask mt on mt.taskid=tn.taskid 
  where mt.matterid=' + @matterid + ' 

'
)

exec 
(
'insert into #tblResults 
	select 
		''email'' as type,
		tblEmailRelayLog.CreatedDate as [date],
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> '' + ug.name as [by],
		tblEmailRelayLog.[MailSubject] as message,
		substring(tblEmailRelayLog.[MailSubject], 0, ' + @shortvalue + ') + (case when len(tblEmailRelayLog.[MailSubject]) >= ' + @shortvalue + ' then ''...'' else '''' end) as shortmessage, tblEmailRelayLog.EMailLogID as fieldid,
		null as direction,
		tblEmailRelayLog.createdby, null as starttime, null as endtime
	from
		tblEmailRelayLog left outer join
		tbluser as tbllastmodifiedby on tblEmailRelayLog.createdby = tbllastmodifiedby.userid
		inner join tblusergroup as ug on ug.usergroupid = tblEmailRelayLog.usergroupid left outer join
		tblEmailRelayRelation rl on tblEmailRelayLog.EMailLogID = rl.EMailLogID left outer join 
		tblrelationtype rt on rt.relationtypeid = rl.relationtypeid left outer join
		tblmatter mtr on rl.relationid=mtr.matterid left outer join
		tblclient ct on rl.relationid=ct.clientid
	where
		rl.relationtypeid=19 and rl.relationid = ' + @matterid + '
'
)

exec
(
'insert into #tblResults 
	select 
		''phonecall'' as type,
		tblphonecall.lastmodified as [date],
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> '' + ug.name as [by],
		tblphonecall.[subject] as message,
		substring(tblphonecall.[subject], 0, ' + @shortvalue + ') + (case when len(tblphonecall.[subject]) >= ' + @shortvalue + ' then ''...'' else '''' end) as shortmessage, 
		tblphonecall.phonecallid as fieldid,
		tblphonecall.direction,
		tblphonecall.createdby , tblphonecall.starttime, tblphonecall.endtime
	from
		tblphonecall left outer join
		tbluser as tbllastmodifiedby on tblphonecall.lastmodifiedby = tbllastmodifiedby.userid
		inner join tblusergroup as ug on ug.usergroupid = tblphonecall.usergroupid left outer join
		tblphonecallrelation pr on tblphonecall.phonecallid=pr.phonecallid left outer join 
		tblrelationtype rt on rt.relationtypeid = pr.relationtypeid left outer join 
		tblmatter mtr on pr.relationid=mtr.matterid left outer join
		tblclient ct on pr.relationid=ct.clientid
	where
		pr.relationtypeid=19 and pr.relationid = ' + @matterid + ' 
'
)

if @returntop='100 percent' begin
exec
(
'select
		* 
	from 
		#tblResults 
	where 
		 '+ @type + ' 
	order by ' + @OrderBy +' ')


end else begin
	exec
(
'select top ' + @returntop + '
		* 
	from 
		#tblResults 
	where 
		 '+ @type + ' 
	order by ' + @OrderBy +' ')
end

drop table #tblResults
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportCreditorPhoneInsert]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ImportCreditorPhoneInsert]
@PhoneTypeId int,
@AreaCode varchar(50),
@Number varchar(50),
@Extension varchar(50) = null,
@UserId int,
@CreditorId int
AS
BEGIN

declare @phoneId int

Select @phoneid = 0

Select Top 1 @phoneid = c.phoneid From tblCreditorPhone c
join tblphone p on p.phoneid = c.phoneid
where c.CreditorId = @CreditorId
and isnull(p.AreaCode,'') = isnull(@AreaCode,'')
and isnull(p.Number, '') = isnull(@Number, '')
and isnull(p.Extension, '') = isnull(@Extension, '')

IF @phoneId = 0
Begin
	Insert Into tblPhone(
	PhoneTypeID, AreaCode, Number, Extension,
	Created, CreatedBy, LastModified, LastModifiedBy)
	Values (
	@PhoneTypeId, @AreaCode, @Number, @Extension,
	GetDate(), @UserId, GetDate(), @UserId) 

	Select @phoneId = SCOPE_IDENTITY()

	Insert into tblCreditorPhone(CreditorID, PhoneID, Created, CreatedBy, LastModified, LastModifiedBy)
	Values(@CreditorId, @phoneId, GetDate(), @UserId, GetDate(), @UserId)
End

Select @phoneid

END
GO
/****** Object:  StoredProcedure [dbo].[stp_Reporting_SmartDebtor_ErrorCountsByType]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_Reporting_SmartDebtor_ErrorCountsByType]

AS
BEGIN
-- =============================================
-- Author:		Christopher Nott
-- Create date: 07/20/2009
-- Description:	FOR DEBUG - ERRORS COUNTS BY USER FOR SD CALL CONTROLS
-- =============================================
	SET NOCOUNT ON;
	
	DECLARE @DATESTRING datetime

	set @DATESTRING = convert(datetime,convert(varchar,getdate(),110)+' 00:00:00.000')

	select top(20) 
		Errors = count(*) 
        ,[message]
        from tblcallmessagelog cl
        inner join tbluser u on cl.userid = u.userid
        where messagedate > = @DATESTRING 
        

        group by[message]order by errors desc



END
GO
/****** Object:  StoredProcedure [dbo].[stp_DepositAnalyis]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- $7,310,071.27 	 $6,449,317.51 	 $(860,753.76)
-- $7,309,813.27 	 $6,449,317.51 	 $(860,495.76)
-- $7,308,785.27 	 $6,449,317.51 	 $(859,467.76)


-- stp_DepositAnalyis '2/1/2009', '2/28/2009', 1245
CREATE procedure [dbo].[stp_DepositAnalyis]
(
	@startdate datetime,
	@enddate datetime,
	@userid int
)
as

select 
	clientid,
	sum(deposited) [deposited],
	sum(deposited) - max(depositamount) [diff],
	max(bounce) [bounce]
into
	#deposits
from (
	select  
		c.clientid, c.depositamount,
		case when (r.amount is null or r.bounce is not null) then 0 else r.amount end [deposited],
		case when r.bounce is not null then 'Y' else '' end [bounce]
	from tblclient c 
	join tblusercompanyaccess uca on uca.companyid = c.companyid
	join tbluseragencyaccess uaa on uaa.agencyid = c.agencyid and uaa.userid = uca.userid and uaa.userid = @userid
	left join tblregister r on r.clientid = c.clientid
		and month(r.transactiondate) = month(@startdate)
		and year(r.transactiondate) = year(@enddate)
		and r.entrytypeid = 3
	where c.depositstartdate <= @enddate
		and c.clientid not in 
		(
			select clientid
			from tblroadmap
			where clientstatusid in (15, 17, 18)
			and created < dateadd(day,1,@enddate)
		)
		and c.accountnumber is not null
) d
group by clientid


-- what got paid
select d.clientid,
	sum(case when r.entrytypeid = 6 then rp.amount else 0 end) [OvernightFees], 
	sum(case when r.entrytypeid = 5 then rp.amount else 0 end) [ReturnedCheckFees],
	sum(case when r.entrytypeid = 42 then rp.amount else 0 end) [Retainer(w)Fees],
	sum(case when r.entrytypeid = 1 then rp.amount else 0 end) [MaintenanceFees],
	sum(case when r.entrytypeid = 4 then rp.amount else 0 end) [SettlementFees],
	sum(case when r.entrytypeid = 2 then rp.amount else 0 end) [RetainerFees],
	sum(case when r.entrytypeid not in (6,5,42,1,4,2) then rp.amount else 0 end) [OtherFees]
into #payments
from #deposits d
join tblregister r on r.clientid = d.clientid
join tblregisterpayment rp on rp.feeregisterid = r.registerid
	and month(rp.paymentdate) = month(@startdate)
	and year(rp.paymentdate) = year(@enddate)
	and rp.voided = 0
	and rp.bounced = 0
where d.bounce = ''
group by d.clientid


-- expected payments
declare @expectedpayments table (clientid int, entrytypeid int, expected money)
declare @clientid int, @entrytypeid int, @remaining money, @depavail money, @order int
declare curClient cursor for select clientid from #deposits --where clientid = 72607--67884--17891

open curClient
fetch next from curClient into @clientid
while @@fetch_status = 0 begin
	select @depavail = isnull(depositamount,0) from tblclient where clientid = @clientid

	declare curExp cursor for
		select
			a.entrytypeid, 
			assessed - isnull(paid,0) [remaining],
			a.[order]
		from (

			-- fees assessed to-date
			select e.entrytypeid, e.[order], abs(sum(r.amount)) [assessed]
			from tblregister r
			join tblentrytype e on e.entrytypeid = r.entrytypeid
				and e.fee = 1
			where r.clientid = @clientid
				and r.transactiondate <= @enddate
				and r.void is null
			group by e.entrytypeid, e.[order]

		) a
		left join (

			-- fees paid to-date
			select r.entrytypeid, sum(rp.amount) [paid]
			from tblregister r
			join tblregisterpayment rp on rp.feeregisterid = r.registerid
				and rp.paymentdate < @startdate
				and rp.voided = 0
				and rp.bounced = 0
			where r.clientid = @clientid 
				and r.void is null
			group by r.entrytypeid

		) p on p.entrytypeid = a.entrytypeid
		order by [order]

	open curExp
	fetch next from curExp into @entrytypeid, @remaining, @order
	while @@fetch_status = 0 begin
		if @depavail > 0 begin
			-- client has dep avail to pay fees
			if @remaining > 0 begin
				-- pending fee payment
				if (@depavail - @remaining) >= 0 begin
					-- can payoff this fee
					insert @expectedpayments (clientid,entrytypeid,expected)
					values (@clientid,@entrytypeid,@remaining)
					
					set @depavail = @depavail - @remaining
				end
				else begin
					-- can only payoff what is remaining
					insert @expectedpayments (clientid,entrytypeid,expected)
					values (@clientid,@entrytypeid,@depavail)
					
					set @depavail = 0
				end
			end
		end

		fetch next from curExp into @entrytypeid, @remaining, @order
	end

	close curExp
	deallocate curExp

	fetch next from curClient into @clientid
end

close curClient
deallocate curClient

select clientid,
	sum(case when entrytypeid = 6 then expected else 0 end) [OvernightFeesExpected],
	sum(case when entrytypeid = 5 then expected else 0 end) [ReturnedCheckFeesExpected],
	sum(case when entrytypeid = 42 then expected else 0 end) [Retainer(w)FeesExpected],
	sum(case when entrytypeid = 1 then expected else 0 end) [MaintFeesExpected],
	sum(case when entrytypeid = 4 then expected else 0 end) [SettlementFeesExpected],
	sum(case when entrytypeid = 2 then expected else 0 end) [RetainerFeesExpected],
	sum(case when entrytypeid not in (6,5,42,1,4,2) then expected else 0 end) [OtherFeesExpected]
into #expected
from @expectedpayments
group by clientid



-- output
select 
	a.agencyid, a.name [agency], comp.name [company], c.accountnumber, c.clientid, pp.firstname, pp.lastname, 
	c.depositmethod, 
	c.depositamount [DepositExpected], 
	d.deposited [DepositsActual], 
	d.diff, 
	d.bounce,
	isnull(ex.OvernightFeesExpected,0) [OvernightFeesExpected],
	isnull(p.OvernightFees,0) [OvernightFeesPaid],
	isnull(p.OvernightFees,0) - isnull(ex.OvernightFeesExpected,0) [OvernightDiff],
	isnull(ex.ReturnedCheckFeesExpected,0) [ReturnedCheckFeesExpected],
	isnull(p.ReturnedCheckFees,0) [ReturnedCheckFeesPaid],
	isnull(p.ReturnedCheckFees,0) - isnull(ex.ReturnedCheckFeesExpected,0) [ReturnedCheckDiff],
	isnull(ex.[Retainer(w)FeesExpected],0) [Retainer(w)FeesExpected],
	isnull(p.[Retainer(w)Fees],0) [Retainer(w)FeesPaid],
	isnull(p.[Retainer(w)Fees],0) - isnull(ex.[Retainer(w)FeesExpected],0) [Retainer(w)Diff],
	isnull(ex.MaintFeesExpected,0) [MaintFeesExpected],
	isnull(p.MaintenanceFees,0) [MaintFeesPaid],	
	isnull(p.MaintenanceFees,0) - isnull(ex.MaintFeesExpected,0) [MaintDiff],
	isnull(ex.SettlementFeesExpected,0) [SettlementFeesExpected],
	isnull(p.SettlementFees,0) [SettlementFeesPaid],
	isnull(p.SettlementFees,0) - isnull(ex.SettlementFeesExpected,0) [SettlementDiff],
	isnull(ex.RetainerFeesExpected,0) [RetainerFeesExpected],
	isnull(p.RetainerFees,0) [RetainerFeesPaid],
	isnull(p.RetainerFees,0) - isnull(ex.RetainerFeesExpected,0) [RetainerDiff],
	isnull(ex.OtherFeesExpected,0) [OtherFeesExpected],
	isnull(p.OtherFees,0) [OtherFeesPaid],
	isnull(p.OtherFees,0) - isnull(ex.OtherFeesExpected,0) [OtherDiff]
from #deposits d
join tblclient c on c.clientid = d.clientid
join tblagency a on a.agencyid = c.agencyid
join tblcompany comp on comp.companyid = c.companyid
join tblperson pp on pp.personid = c.primarypersonid
left join #payments p on p.clientid = d.clientid
left join #expected ex on ex.clientid = d.clientid
	--where d.clientid = 72607--67884--17891
order by a.agency, comp.company, pp.lastname, pp.firstname

--select * from @expectedpayments

drop table #deposits
drop table #payments
drop table #expected


--==================================================================

--select *
--from tblregister
--where clientid = 67884--17891--71786
----and entrytypeid = 6
--order by registerid

----set @clientid = 17891





--left join (
--
--	--fee paid this month
--	select e.displayname, sum(rp.amount) [paid-this-month]
--	from tblregister r
--	join tblentrytype e on e.entrytypeid = r.entrytypeid
--		and e.fee = 1
--	join tblregisterpayment rp on rp.feeregisterid = r.registerid
--		and month(rp.paymentdate) = 1
--		and year(rp.paymentdate) = 2009
--	where r.clientid = @clientid --71786
--		and r.void is null
--	group by e.displayname
--
--) m on m.displayname = a.displayname


--maint	ret		sett	overn
--25.00	0.00	62.71	15.00
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNotes2bak2]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetNotes2bak2]
	(
		@clientid int,
		@relationid int = null,
		@relationtypeid int = null,
		@orderby varchar(50)='u.lastname asc',
		@clientonly bit=0
	)

as

declare @relationcriteria varchar(1000)

if @clientonly=1 begin
	set @relationcriteria = ' and not exists (select noterelationid from tblnoterelation nnr where nnr.noteid=n.noteid and not nnr.relationtypeid=1)'
end else begin
	set @relationcriteria = ''
end

declare @sql varchar(5000)

set @sql='
	select
		n.noteid,
		n.subject,
		n.value,
		u.firstname + '' '' + u.lastname + ''</br>'' + ug.Name as [by], 
		u.lastname as bylastname, 
		n.created as [date],
		ut.name as usertype,
		(case
			when not rc.color is null then rc.color
			when not uc.color is null then uc.color			
			when not gc.color is null then gc.color
			when not tc.color is null then tc.color
		end ) as color,
		(case
			when not rc.textcolor is null then rc.textcolor
			when not uc.textcolor is null then uc.textcolor			
			when not gc.textcolor is null then gc.textcolor
			when not tc.textcolor is null then tc.textcolor
		end ) as textcolor
	from 
		tblnote n left outer join
		tbluser u on n.createdby=u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype=''User Type'' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype=''User Group'' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype=''User'' left outer join
		(
			select
				nn.noteid,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblnoterelation nr 
				inner join tblnote nn on nr.noteid=nn.noteid
				inner join tblrulecommcolor rcc on rcc.entityid=nr.relationtypeid
			where
				nn.clientid=' + convert(varchar,@clientid) + '
				and rcc.entitytype=''Relation Type''
			group by
				nn.noteid
		) rc on rc.noteid=n.noteid
		inner join tblusergroup as ug on ug.usergroupid = n.usergroupid
	'

if not @relationid is null begin
	set @sql=@sql + 
		' left outer join tblnoterelation nr on n.noteid=nr.noteid'
end

set @sql = @sql +
	' where 
		clientid=' + convert(varchar,@clientid) + 
		@relationcriteria 

if not @relationid is null begin
	set @sql = @sql + 
		' and nr.relationtypeid=' + convert(varchar,@relationtypeid) + '
		and nr.relationid=' + convert(varchar,@relationid)
end

set @sql = @sql + 
	' order by ' + 
		@orderby

exec(@sql)

select 
	n.noteid,
	nr.relationtypeid,
	nr.relationid,
	rt.name as relationtypename,
	dbo.getentitydisplay(rt.relationtypeid,relationid) as relationname,
	rt.iconurl,
	rt.navigateurl
from
	tblnoterelation nr inner join
	tblnote n on nr.noteid=n.noteid inner join
	tblrelationtype rt on nr.relationtypeid=rt.relationtypeid
where 
	clientid=@clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_IncentivesInitial]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_IncentivesInitial]
(
	@RepID int
)
as
begin

	declare @sql varchar(max)

	declare @rolling table
	(
		monthyear datetime,
		initialcount int,
		initialtotal money,
		residualcount int,
		residualtotal money,
		totalcount int,
		totalamt money,
		clientid int,
		leadapplicantid int,
		client varchar(100),
		initial int,
		approved bit
	)

	select top 12 @sql = coalesce(@sql + ', ', '') + cast(initialcount as varchar(10)) + ' [' + convert(varchar(10),created,1) + ']'
	from tblincentives
	where repid = @RepID
	order by created

	--insert @rolling exec stp_UnapprovedIncentives @repid
	
	-- create a starting point if this is their first approval
	if (@sql is null and (select count(*) from @rolling where initial = 9) < 2) begin -- covers 1 or none
		set @sql = '0[_]'
	end
	
	select @sql = coalesce(@sql + ', ', '') + cast(initialcount as varchar(10)) + ' [' + convert(varchar(10),getdate(),1) + ']'
	from @rolling
	where initial = 9

	exec('select ' + @sql)

end
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_UpdateDepositDay]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_enrollment_UpdateDepositDay]
@LeadDepositId int,
@DepositDay int = null,
@DepositAmount money = null,
@UserId int
AS
Update tblLeadDeposits Set
DepositDay = isnull(@DepositDay, DepositDay),
DepositAmount = isnull(@DepositAmount, DepositAmount),
LastModified = GetDate(),
LastModifiedBy = @UserId
Where  LeadDepositId = @LeadDepositId
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateClientBankAccount]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_UpdateClientBankAccount]
@BankAccountId int,
@ClientId int,
@Routing varchar(9),
@Account varchar(50),
@BankType varchar(1),
@UserId int
AS
BEGIN
	Update tblClientBankAccount Set
	RoutingNumber = @Routing,
	AccountNumber = @Account,
	BankType = @BankType,
	LastModified = GetDate(),
	LastModifiedBy = @UserId
	Where BankAccountId = @BankAccountId and ClientId = @ClientId
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Audit_SetCurrentUser]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_Audit_SetCurrentUser]
(
	@userid int
)
as

delete from tblsysprocessuser where spid=@@spid
insert into tblsysprocessuser(spid,userid) values (@@spid,@userid)
GO
/****** Object:  StoredProcedure [dbo].[stp_documents_getClientDocumentsInfo]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_documents_getClientDocumentsInfo]
(
	@clientid int
)
as
BEGIN

	select 
		DocTypeID
		,DisplayName
		, Received
		, Created
		, Createdby
		, pdfPath
		,rowNum
	from
	(
		SELECT     
			DocOrder = CASE 
				WHEN CHARINDEX('Power of Attorney', dt.DisplayName) > 0 THEN 
					1 
				ELSE 
					CASE WHEN CHARINDEX('Legal Service Agreement', dt.DisplayName) > 0 THEN 2 ELSE 999 END 
			END 
			, dr.DocTypeID
			, ISNULL(dt.DisplayName, 'NA') AS DisplayName
			, ISNULL(ds.ReceivedDate, '01-01-1900') AS Received
			, ISNULL(ds.Created, '01-01-1900') AS Created
			, ISNULL(u.FirstName + ' ' + u.LastName + '</br>' + ug.Name, 'NA') AS CreatedBy
			, '\\' + c.StorageServer + '\' + c.StorageRoot + '\' + c.accountnumber + '\ClientDocs\' + c.accountnumber + '_' + dr.Doctypeid + '_' + dr.DocID + '_' + dr.DateString + '.pdf'[pdfPath]
			, row_number() over(partition by DisplayName order by ISNULL(ds.ReceivedDate, '01-01-1900') ) as rowNum
		FROM  
			tblDocRelation AS dr INNER JOIN
			tblDocumentType AS dt ON dr.DocTypeID = dt.TypeID INNER JOIN
			tblDocScan AS ds ON dr.DocID = ds.DocID LEFT OUTER JOIN
			tblUser AS u ON u.UserID = ds.CreatedBy INNER JOIN
			tblUserGroup AS ug ON ug.UserGroupId = u.UserGroupID inner join
			tblClient c on c.ClientID = dr.ClientID
		WHERE     (dr.ClientID = @clientid) AND (dr.RelationType = 'client') AND (dr.DeletedFlag <> 1)
	) as docData
	Order by [DocOrder], displayName,created desc


END


GRANT EXEC ON stp_documents_getClientDocumentsInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_LoadScenario]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_LoadScenario]
(
	@CommScenID int,
	@CompanyID int
)
as
begin

declare @IsPercent bit
set @IsPercent = 1

-- output table 0
select distinct
	e.EntryTypeID
,	e.DisplayName [EntryType]
from
	tblCommFee f
	join tblCommStruct s on s.CommStructID = f.CommStructID and s.CommScenID = @CommScenID and s.CompanyID = @CompanyID
	join tblEntryType e on e.EntryTypeID = f.EntryTypeID
order by
	e.DisplayName

-- output table 1
select
	s.CommStructID
,	s.CommScenID
,	-1 [CommRecID]
,	-1 [ParentCommRecID]
,	s.[Order]
,	'Master Account' [CommRec]
,	'Deposit Account' [ParentCommRec]
,	r.Abbreviation [CommRec]
,	p.Abbreviation [ParentCommRec]
,	s.Created
from
	tblCommStruct s
	join tblCommRec r on r.CommRecID = s.CommRecID
	join tblCommRec p on p.CommRecID = s.ParentCommRecID
where
	s.CommScenID = @CommScenID 
	and s.CompanyID = @CompanyID
	and s.ParentCommStructID is null
order by
	s.[Order]

-- output table 2
select 
	f.EntryTypeID
,	f.CommFeeID
,	f.CommStructID
,	isnull(s.ParentCommStructID, -1) [ParentCommStructID]
,	r.CommRecTypeID
,	r.CommRecID
--,	p.CommRecID [ParentCommRecID]
,	r.Abbreviation [CommRec]
--,	p.Abbreviation [ParentCommRec]
,	f.[Percent]
,	@IsPercent [IsPercent]
,	r.Display [CommRecFull]
from
	tblCommFee f
	join tblCommStruct s on s.CommStructID = f.CommStructID and s.CommScenID = @CommScenID and s.CompanyID = @CompanyID
	join tblCommRec r on r.CommRecID = s.CommRecID
	--join tblCommRec p on p.CommRecID = s.ParentCommRecID
order by
	f.EntryTypeID


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetRelationsFornote]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetRelationsFornote]
	(
		@noteid int
	)

as

select 
	noterelationid,
	n.noteid,
	nr.relationtypeid,
	nr.relationid,
	rt.name as relationtypename,
	dbo.getentitydisplay(rt.relationtypeid,relationid) as relationname,
	rt.iconurl,
	rt.navigateurl
from
	tblnoterelation nr inner join
	tblnote n on nr.noteid=n.noteid inner join
	tblrelationtype rt on nr.relationtypeid=rt.relationtypeid
where 
	n.noteid=@noteid
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetAgencyBatches]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetAgencyBatches]
(
	@date1 datetime,
	@date2 datetime,
	@commrecids nvarchar(500),
	@companyid varchar(3)
)
as

exec ('
SELECT
	b.CommBatchID,
	b.BatchDate,
	sum(bt.Amount) as Amount
FROM
	tblcommbatch b inner join
	tblcommbatchtransfer bt on b.commbatchid = bt.commbatchid and bt.Amount > 0 and bt.companyid = ' + @CompanyID + ' join
	tblcommrec r on bt.commrecid = r.commrecid and r.CommRecId IN (' + @CommRecIds + ')
WHERE
	( CAST(CONVERT(varchar(10), b.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
	( CAST(CONVERT(varchar(10), b.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' )
GROUP BY
	b.CommBatchID,
	b.BatchDate
ORDER BY
	b.BatchDate DESC
')
GO
/****** Object:  StoredProcedure [dbo].[stp_getLeadDeposits]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_getLeadDeposits]
@LeadApplicantId int
AS
	Select * from tblLeadDeposits
	Where LeadApplicantId = @LeadApplicantId
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTasksbak]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetTasksbak]
	(
		@returntop varchar (50) = '100 percent',
		@shortdescription int = 30,
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as


exec
(
	'select top ' + @returntop + '
		tblclienttask.clientid,
		tblperson.firstname + '' '' + tblperson.lastname as clientname,
		tbltasktype.name as tasktypename,
		tbltasktypecategory.tasktypecategoryid,
		tbltasktypecategory.name as tasktypecategoryname,
		tbltaskresolution.name as taskresolutionname,
		tbltask.*,
		substring(tbltask.description, 0, ' + @shortdescription + ') + ''...'' as shortdescription,
		tblassignedto.firstname + '' '' + tblassignedto.lastname as assignedtoname,
		tblresolvedby.firstname + '' '' + tblresolvedby.lastname as resolvedbyname,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname
	from
		tbltask left outer join
		tblclienttask on tbltask.taskid = tblclienttask.taskid left outer join
		tblclient on tblclienttask.clientid = tblclient.clientid left outer join
		tblperson on tblclient.primarypersonid = tblperson.personid left outer join
		tbltasktype on tbltask.tasktypeid = tbltasktype.tasktypeid left outer join
		tbltasktypecategory on tbltasktype.tasktypecategoryid = tbltasktypecategory.tasktypecategoryid left outer join
		tbltaskresolution on tbltask.taskresolutionid = tbltaskresolution.taskresolutionid left outer join
		tbluser as tblassignedto on tbltask.assignedto = tblassignedto.userid left outer join
		tbluser as tblresolvedby on tbltask.resolvedby = tblresolvedby.userid left outer join
		tbluser as tblcreatedby on tbltask.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on tbltask.lastmodifiedby = tbllastmodifiedby.userid
	' + @where + ' ' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_GetLeadBorrowers]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetLeadBorrowers]
(
	@LeadApplicantID int
)
as
begin

select firstname,lastname,address1[address],city,isnull(abbreviation,'')[state],zipcode,ssn,email,1[seq]
from tblleadapplicant l
left join tblstate s on s.stateid=l.stateid 
where leadapplicantid = @LeadApplicantID

union all

select firstname,lastname,[address],city,isnull(abbreviation,'')[state],zipcode,ssn,email,2[seq]
from tblleadcoapplicant l 
left join tblstate s on s.stateid=l.stateid 
where leadapplicantid = @LeadApplicantID

order by seq, firstname

end
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_UserPage_Get]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_UserPage_Get]
	(
		@pagename nvarchar(255),
		@userid int
	)

as

select 
	tblcontrolfunction.functionid,
	tblcontrol.servername,
	tblcontrol.permissiontypeid,
	tblcontrol.action
into
	#tblpagefunctions
from
	tblpage inner join
	tblcontrol on tblpage.pageid=tblcontrol.pageid inner join
	tblcontrolfunction on tblcontrol.controlid=tblcontrolfunction.controlid
where
	tblpage.servername=@pagename


/*
level definition:
	0 - user level
	1 - group level
	2 - user type level
*/

declare @usertypeid int
set @usertypeid=(select usertypeid from tbluser where userid=@userid)

--get all permissions for this page/user combination
select
	tblfunction.parentfunctionid,
	tblpermission.*,
	0 as [level] 
from
	tbluserpermission inner join
	tblpermission on tbluserpermission.permissionid=tblpermission.permissionid inner join
	tblfunction on tblpermission.functionid=tblfunction.functionid
where
	tblfunction.functionid in (select functionid from #tblpagefunctions) and
	tbluserpermission.userid=@userid 

union

--get all permissions for this page/usertype/group combination
select
	tblfunction.parentfunctionid,
	tblpermission.*,
	1 as [level]
from
	tblgrouppermission inner join
	tblpermission on tblgrouppermission.permissionid=tblpermission.permissionid inner join
	tblfunction on tblpermission.functionid=tblfunction.functionid

where
	tblfunction.functionid in (select functionid from #tblpagefunctions) and
	--tblgrouppermission.usertypeid = @usertypeid and
	tblgrouppermission.usergroupid in --easily convertable to a one-to-many with users/groups
		(select usergroupid from tbluser where tbluser.userid=@userid and usergroupid is not null)

union

--get all permissions for this page/usertype combination (null group)
select
	tblfunction.parentfunctionid,
	tblpermission.*,
	2 as [level]
from
	tblgrouppermission inner join
	tblpermission on tblgrouppermission.permissionid=tblpermission.permissionid inner join
	tblfunction on tblpermission.functionid=tblfunction.functionid

where
	tblfunction.functionid in (select functionid from #tblpagefunctions) and
	tblgrouppermission.usertypeid = @usertypeid and
	tblgrouppermission.usergroupid is null


--get all defined controls for this page, with associated functionid
select servername as controlname, functionid, permissiontypeid, action from #tblpagefunctions

drop table #tblpagefunctions
GO
/****** Object:  StoredProcedure [dbo].[stp_ChargebackVoidReasonsNotNewClientsInitialDrafts]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_ChargebackVoidReasonsNotNewClientsInitialDrafts 8, 2008

CREATE procedure [dbo].[stp_ChargebackVoidReasonsNotNewClientsInitialDrafts]
(
	@month int, 
	@year int
)
as

declare @deposits table (registerid int)

-- Get first deposits for clients created in @month/@year
insert @deposits 
select min(r.registerid)
from tblregister r
join tblclient c on c.clientid = r.clientid
	and c.agencyid in (838,840,842,843)
	and month(c.created) = @month and year(c.created) = @year
where r.entrytypeid = 3
group by r.clientid


SELECT distinct 
	cp.CommChargebackID,
	et.displayName AS FeeType, 
	case when (vr.Reason is null or vr.Reason = '') then 'Not Specified' else vr.Reason end [VoidReason],
	cp.Amount
into
	#temp
FROM
	tblCommChargeback AS cp LEFT OUTER JOIN
	tblRegisterPayment AS rp ON rp.RegisterPaymentId = cp.RegisterPaymentID join
	tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
		and rpd.depositregisterid not in (select registerid from @deposits) LEFT OUTER JOIN
	tblRegister AS r ON r.RegisterId = rp.FeeRegisterId LEFT OUTER JOIN
	tblClient AS c ON c.ClientID = r.ClientId LEFT OUTER JOIN
	tblEntryType AS et ON et.EntryTypeId = r.EntryTypeId LEFT OUTER JOIN
	tblAgency AS a ON a.AgencyID = c.AgencyID LEFT OUTER JOIN
	tblCompany AS comp ON comp.CompanyID = c.CompanyID INNER JOIN
	tblCommBatch AS cb ON cb.CommBatchID = cp.CommBatchID INNER JOIN
	tblCommStruct AS cs ON cs.CommStructID = cp.CommStructID INNER JOIN
	tblPerson AS p ON c.PrimaryPersonID = p.PersonID LEFT OUTER JOIN
	(
		SELECT 
			Value, 
			Amount, 
			Reason 
		FROM 
			tblTransactionAudit 
		WHERE 
			(Type = N'register')
	) AS vr ON r.RegisterId = vr.Value LEFT OUTER JOIN
	tblBouncedReasons ON r.BouncedReason = tblBouncedReasons.BouncedID
WHERE     
	(cp.CommBatchID IS NOT NULL)
	and month(cb.batchdate) = @month
	and year(cb.batchdate) = @year
	and a.agencyid in (838,840,842,843)
	and cs.commrecid in (5,17)


select FeeType, VoidReason, sum(Amount)
from #temp
group by FeeType, VoidReason
order by FeeType, VoidReason


drop table #temp
GO
/****** Object:  StoredProcedure [dbo].[stp_Agency_Dashboard_ChargebackDetail]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Agency_Dashboard_ChargebackDetail]
(
	@payment varchar(20),
	@userid int,
	@startdate datetime,
	@enddate datetime,
	@dateperiod char(1),
	@datepartname varchar(20),
	@companyid int = -1
)
as
BEGIN
/*

USAGE:
stp_Agency_Dashboard_ChargebackDetail 'first',375,'11/1/2008','11/30/2008','m','Nov-08'
stp_Agency_Dashboard_ChargebackDetail 'other',375,'11/1/2008','11/30/2008','m','Nov-08'

DEVELOPMENT:
	declare @userid int
	declare @startdate datetime
	declare @enddate datetime
	declare @dateperiod char(1)
	declare @datepartname varchar(20)

	set @userid = 375
	set @startdate = '11/1/2008'
	set @enddate = '11/30/2008'
	set @dateperiod = 'm'
	set @datepartname = 'Nov-08'
*/

	
	if @payment = 'first' 
		begin
			select dp.registerpaymentid 
			into #tempRegPayments
			from tblregisterpaymentdeposit dp 
			join vw_initialdrafts df on df.registerid = dp.depositregisterid
			join tblregister r on r.registerid = dp.depositregisterid
			join tblclient c on c.clientid = r.clientid
			join tbluserclientaccess uc on uc.userid = @UserID and c.created between uc.clientcreatedfrom and uc.clientcreatedto
			join tblusercompanyaccess uca on uca.userid = uc.userid and (@companyid = -1 or uca.companyid = @companyid)

			select cr.display [Recipient], t.displayname [Fee]
			, case when vr.reason is null or vr.reason = '' then 'Not Known' else vr.reason end [Chargeback Reason]
			,sum(cb.amount) [Amount],p.firstname + ' ' + p.lastname [Client Name]
			from tblcommchargeback cb
			join tblcommbatch b on b.commbatchid = cb.commbatchid 
			and b.batchdate >= @startDate and b.batchdate < @enddate
			and dbo.udf_DatePartName(@dateperiod, b.batchdate) = @datepartname
			join #tempRegPayments dpi on dpi.registerpaymentid = cb.registerpaymentid
			join tblcommstruct cs on cs.commstructid = cb.commstructid
			join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
			join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
			join tblcommrec cr on cr.commrecid = cs.commrecid
			join tblregisterpayment rp on rp.registerpaymentid = dpi.registerpaymentid
			join tblregister r on r.registerid = rp.feeregisterid
			join tblperson p on p.clientid = r.clientid and p.relationship = 'Prime'
			join tblclient c on c.clientid = r.clientid
			join tbluserclientaccess uc on uc.userid = uca.userid and c.created between uc.clientcreatedfrom and uc.clientcreatedto
			join tblentrytype t on t.entrytypeid = r.entrytypeid
			LEFT OUTER JOIN (SELECT Value, Amount, Reason FROM dbo.tblTransactionAudit WHERE (Type = N'register')) AS vr ON r.RegisterId = vr.Value 
			group by cr.display, t.displayname, case when vr.reason is null or vr.reason = '' then 'Not Known' else vr.reason end,p.firstname + ' ' + p.lastname
			order by cr.display, t.displayname

			drop table #tempRegPayments
		END
	if @payment = 'other' 
		BEGIN
			select distinct dp.registerpaymentid 
			into #tempRegPayments2
			from tblregisterpaymentdeposit dp 
			left join vw_initialdrafts df on df.registerid = dp.depositregisterid
			join tblregister r on r.registerid = dp.depositregisterid
			join tblclient c on c.clientid = r.clientid
			join tbluserclientaccess uc on uc.userid = @UserID and c.created between uc.clientcreatedfrom and uc.clientcreatedto
			join tblusercompanyaccess uca on uca.userid = uc.userid and (@companyid = -1 or uca.companyid = @companyid)
			where df.registerid is null

			select cr.display [Recipient], t.displayname [Fee]
			, case when vr.reason is null or vr.reason = '' then 'Not Known' else vr.reason end [Chargeback Reason]
			,sum(cb.amount) [Amount],p.firstname + ' ' + p.lastname [Client Name]
			from tblcommchargeback cb
			join tblcommbatch b on b.commbatchid = cb.commbatchid 
			and b.batchdate >= @startDate and b.batchdate < @enddate
			and dbo.udf_DatePartName(@dateperiod, b.batchdate) = @datepartname
			join #tempRegPayments2 dpi on dpi.registerpaymentid = cb.registerpaymentid
			join tblcommstruct cs on cs.commstructid = cb.commstructid
			join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
			join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
			join tblcommrec cr on cr.commrecid = cs.commrecid
			join tblregisterpayment rp on rp.registerpaymentid = dpi.registerpaymentid
			join tblregister r on r.registerid = rp.feeregisterid
			join tblperson p on p.clientid = r.clientid and p.relationship = 'Prime'
			join tblclient c on c.clientid = r.clientid
			join tbluserclientaccess uc on uc.userid = uca.userid and c.created between uc.clientcreatedfrom and uc.clientcreatedto
			join tblentrytype t on t.entrytypeid = r.entrytypeid
			LEFT OUTER JOIN (SELECT Value, Amount, Reason FROM dbo.tblTransactionAudit WHERE (Type = N'register')) AS vr ON r.RegisterId = vr.Value 
			group by cr.display, t.displayname, case when vr.reason is null or vr.reason = '' then 'Not Known' else vr.reason end,p.firstname + ' ' + p.lastname
			order by cr.display, t.displayname

			drop table #tempRegPayments2
		END

	
END




GRANT EXEC ON stp_Agency_Dashboard_ChargebackDetail TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_IncentivesForRep]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_IncentivesForRep]
(
	@RepID int
)
as
begin

	declare @curMth int, @curYr int
	
	set @curMth = month(getdate())
	set @curYr = year(getdate())

	select incentiveid, datename(month,cast(incentivemonth as varchar(2))+'/1/2000')+' '+cast(incentiveyear as varchar(4)) [monthyear], 
			initialcount, initialtotal, residualcount, residualtotal, 
			initialcount+residualcount[totalcount], initialtotal+residualtotal[totalamt], 2[initial],
			incentivemonth, incentiveyear
	into #incentives
	from tblincentives
	where userid = @repid
	
	if not exists (select 1 from tblincentives where userid = @RepID and incentivemonth = @curMth and incentiveyear = @curYr) begin
		create table #current
		(
			incentivemonth int,
			incentiveyear int,
			userid int,
			initialcount int,
			initialpayment money,
			initialtotal money,
			residualpayment money,
			residualcount int,
			residualtotal money,
			totalcount int,
			totalamt money,
			rep varchar(100)
		)		

		insert #current 
		exec stp_UnapprovedIncentives @curMth,@curYr,@RepID,0,0

		insert #incentives
		select datename(month,cast(incentivemonth as varchar(2))+'/1/2000')+' '+cast(incentiveyear as varchar(4)) [monthyear], 
			initialcount, initialtotal, residualcount, residualtotal, 
			initialcount+residualcount[totalcount], initialtotal+residualtotal[totalamt], 2[initial],
			incentivemonth, incentiveyear
		from #current
	end	

--	union all
--
--	select i.incentiveid, i.incentivemonth, i.incentiveyear, datename(month,cast(i.incentivemonth as varchar(2))+'/1/2000')+' '+cast(i.incentiveyear as char(4)) [monthyear], 
--		u.firstname+' '+u.lastname[rep], p.firstname+' '+p.lastname[name], i.initialcount, 0, 
--		case when d.initial = 1 then 0 else 1 end, 0, 0, 0, d.clientid, d.registerid, d.initial
--	from tblincentives i 
--	join tblincentivedetail d on d.incentiveid = i.incentiveid
--	join tblclient c on c.clientid = d.clientid
--	join tblperson p on p.personid = c.primarypersonid
--	join tbluser u on u.userid = i.userid 
--	where i.userid = 1268


	select *
	from #incentives
	order by incentiveyear desc, incentivemonth desc


	drop table #incentives

end
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_InsertDepositDay]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_enrollment_InsertDepositDay]
@DepositDay int,
@LeadApplicantId int,
@DepositAmount money,
@UserId int
AS
Begin
Insert Into tblLeadDeposits(LeadApplicantId, DepositDay, DepositAmount, Created, CreatedBy, LastModified, LastModifiedBy)
Values(@LeadApplicantId,@DepositDay, @DepositAmount, GetDate(), @UserId, GetDate(), @UserId)

Select Scope_identity()
End
GO
/****** Object:  StoredProcedure [dbo].[stp_Statistic_ClientDeposit]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Statistic_ClientDeposit]
(
	@datapoints int = 9,
	@agencyid int = null,
	@attorneyid int = null
)	 
as

declare @attorneystateid int
declare @attorneycompanyid int
if not @attorneyid is null begin
	set @attorneystateid=(select stateid from tblattorney where attorneyid=@attorneyid)
	set @attorneycompanyid=(select companyid from tblattorney where attorneyid=@attorneyid)
end


declare @crAgency varchar(255)
declare @crattorney varchar(255)
set @cragency=''
set @crattorney=''

if not @agencyid is null 
	set @cragency=' and c.agencyid=' + convert(varchar,@agencyid)

if not @attorneyid is null 
	set @crattorney=' and c.companyid=' + convert(varchar,@attorneycompanyid) + 
					' and p.stateid=' + convert(varchar,@attorneystateid)


set @datapoints=@datapoints-1

declare @datefield varchar (500)
declare @datefield2 varchar (500)

declare @field varchar(50)
set @field='r.transactiondate'
set @datefield = 'convert(datetime, convert(varchar(2), month(' + @field + ')) + N''/1/'' + convert(varchar(4), year(' + @field + ')))'


/*
Last deposit
*/

exec('

select top ' + @datapoints + '
	count(timeago) as [count],
	timeago as monthsago
from
(
	select
		datediff
		(
			month,
			'+@datefield+',
			getdate()
		) as timeago,
		('+@datefield+') as transactiondate,
		c.currentclientstatusid
	from
		tblregister r inner join
		(
			select
				nr.clientid,
				max(registerid) as registerid
			from
				tblregister nr inner join
				(
					select
						tblregister.clientid,
						max(transactiondate) as transactiondate
					from
						tblregister
					where
						(
							entrytypeid = 3 or
							entrytypeid = 10
						)
						and bounce is null and void is null
					group by
						tblregister.clientid
				)
				as nnr on nr.clientid = nnr.clientid and nr.transactiondate = nnr.transactiondate
			group by
				nr.clientid
		)
		nr on r.registerid = nr.registerid inner join
		tblclient c on r.clientid = c.clientid inner join
		tblperson p on c.primarypersonid=p.personid
	where
		1=1 ' + @cragency + @crattorney + '
) t
where
	timeago >= 0
	and timeago < 12
	and not currentclientstatusid in (15,16,17)
group by
	t.timeago,t.transactiondate

union

select 
	count(*) as [count],
	-1 as monthsago
from 
	tblclient c inner join
	tblperson p on c.primarypersonid=p.personid
where
	not c.clientid in 
		(select clientid from tblregister where
			bounce is null and void is null and entrytypeid in (3,10)
		)
	and not currentclientstatusid in (15,16,17)
	' + @cragency + @crattorney + '

')


/*
Deposit Consistency
*/
exec('

select top ' + @datapoints + '
	count(timeago) as [count],
	timeago as monthsago
from
(
	select
		datediff
		(
			month,
			'+@datefield+',
			getdate()
		) as timeago,
		('+@datefield+') as transactiondate,
		c.currentclientstatusid
	from
		tblregister r inner join
		(
			select
				nr.clientid,
				max(registerid) as registerid
			from
				tblregister nr inner join
				(
					select
						tblregister.clientid,
						max(transactiondate) as transactiondate
					from
						tblregister
					where
						(
							entrytypeid = 3 or
							entrytypeid = 10
						)
						and bounce is null and void is null
					group by
						tblregister.clientid
				)
				as nnr on nr.clientid = nnr.clientid and nr.transactiondate = nnr.transactiondate
			group by
				nr.clientid
		)
		nr on r.registerid = nr.registerid inner join
		tblclient c on r.clientid = c.clientid inner join
		tblperson p on c.primarypersonid=p.personid
	where 
		1=1	' + @cragency + @crattorney + '
) t
where
	timeago >= 0
	and timeago < 12
	and not currentclientstatusid in (15,16,17)
group by
	t.timeago,t.transactiondate

union

select 
	count(*) as [count],
	-1 as monthsago
from 
	tblclient c inner join
	tblperson p on c.primarypersonid=p.personid
where
	not c.clientid in 
		(select clientid from tblregister where
			bounce is null and void is null and entrytypeid in (3,10)
		)
	and not currentclientstatusid in (15,16,17)
	' + @cragency + @crattorney + '

')
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientReport_WelcomeLetter]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ClientReport_WelcomeLetter]
	(
		@clientId int
	)

as 

SELECT 
	tblPerson.*,
	tblPerson.FirstName + ' ' + tblPerson.LastName as ClientName,
	tblClient.AccountNumber,
	tblState.[Name] as State
FROM
	tblClient INNER JOIN 
	tblPerson ON tblClient.PrimaryPersonId=tblPerson.PersonId INNER JOIN
	tblState ON tblPerson.StateId=tblState.StateId
	
WHERE
	tblClient.ClientId=@clientId
GO
/****** Object:  StoredProcedure [dbo].[stp_CheckScan_LoadHistory]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_CheckScan_LoadHistory]
/*
	(
		@parameter1 int = 5,
		@parameter2 datatype OUTPUT
	)

*/
AS
BEGIN
	SELECT     ic.SaveGUID, CONVERT(varchar, ic.Created, 101) AS Created, uc.FirstName + ' ' + uc.LastName AS CreatedBy, SUM(CASE WHEN Clientid = - 1 AND processed IS NULL 
                      THEN 0 ELSE 1 END) AS [Total Verified Clients], SUM(CASE WHEN Verified IS NULL AND processed IS NULL THEN 0 ELSE 1 END) AS [Total Verified Count], 
                      SUM(CASE WHEN Verified IS NULL THEN 0 ELSE checkamount END) AS [Total Verified Amt], SUM(CASE WHEN Processed IS NULL THEN 0 ELSE 1 END) 
                      AS [Total Processed], SUM(CASE WHEN Processed IS NULL THEN 0 ELSE checkamount END) AS [Total Processed Amt], ISNULL(COUNT(*), 0) AS TotalItems, 
                      ISNULL(SUM(ic.CheckAmount), 0) AS TotalAmt
FROM         tblICLChecks AS ic INNER JOIN
                      tblUser AS uc ON ic.CreatedBy = uc.UserID
WHERE     (ic.DeleteDate IS NULL)
GROUP BY ic.SaveGUID, CONVERT(varchar, ic.Created, 101), uc.FirstName, uc.LastName
ORDER BY Created DESC
END


GRANT EXEC ON stp_CheckScan_LoadHistory TO PUBLIC
GO
/****** Object:  Table [dbo].[tblLeadCategories]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblLeadCategories](
	[CategoryID] [int] IDENTITY(100,1) NOT NULL,
	[Category] [varchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_GetDisbursementTransfers]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
if exists (select * from sysobjects where name = 'stp_GetDisbursementTransfers')
	drop procedure stp_GetDisbursementTransfers
go*/

create procedure [dbo].[stp_GetDisbursementTransfers]
(
	@Date datetime
,	@EffectiveDate datetime
,	@NachaFileId int = -1
,	@NachaRegisterId int = -1
)
as
begin
/*
	History:
	jhernandez		10/29/09	New method for returning dispursement-to-foreign bank transfers 
								for batch processing.
*/


-- Get dispursement-to-foreign bank transfers
select 
	n.NachaRegisterId, n.NachaFileId, n.Amount, n.ShadowStoreId, 
	n.Name, n.RoutingNumber, n.AccountNumber, n.Type [AccountType], 
	e.DisplayName [Notes1],
	t.name [ControlledAccountName]
into #batch
from tblNachaRegister2 n
join tblRegister r on r.RegisterId = n.RegisterId
join tblEntryType e on e.EntryTypeId = r.EntryTypeId
join tblTrust t on t.TrustID = n.TrustID and t.trustid = 23
where n.NachaFileId = @NachaFileId 
and n.ispersonal = 1
 
 
 -- Only create nacha file id if batch has records and is not a re-send
if (exists (select 1 from #batch)) and (@NachaFileId = -1) begin
	insert tblNachaFile ([Date],EffectiveDate) values (@Date,@EffectiveDate)
	select @NachaFileId = scope_identity()

	update #batch set NachaFileId = @NachaFileId
	update tblNachaRegister2 set NachaFileId = @NachaFileId where NachaRegisterId in (select NachaRegisterId from #batch)
end


-- output
select * 
from #batch 
where NachaRegisterId >= @NachaRegisterId
order by NachaRegisterId

-- cleanup
drop table #batch 


end
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyInitialDraftsCommission]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AgencyInitialDraftsCommission]
(
	@startdate datetime = '2006-01-01',
	@enddate datetime = null,
	@dateperiod varchar(1) = 'm',
	@userid int,
	@companyid int = -1
)
AS
BEGIN

	declare @CommVSChargeBack table(Period datetime, CommissionCount int, CommissionAmount money, ChargeBackCount int, ChargeBackAmount money)
	
	select distinct dp.registerpaymentid 
	into #dpt
	from tblregisterpaymentdeposit dp 
	inner join vw_initialdrafts df on df.registerid = dp.depositregisterid
	inner join tblclient c on c.clientid = df.clientid 
	inner join tbluserclientaccess uc on uc.userid = @UserID and c.created between uc.clientcreatedfrom and uc.clientcreatedto
	inner join tblusercompanyaccess uca on uca.userid = uc.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	inner join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = c.agencyid


	--Fill Period
	Insert into  @CommVSChargeBack( CommissionCount, CommissionAmount, Period)
	select count(cp.commpayid) as Qty, 
		   sum(cp.amount) as Amount,  
		   dbo.udf_DatePartStart(@dateperiod,cbt.batchdate) as [period]
	from tblcommpay cp
	inner join tblcommbatch cbt on cbt.commbatchid = cp.commbatchid 
	inner join tblcommstruct cs on cs.commstructid = cp.commstructid
	inner join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
	inner join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	inner join #dpt dpi on dpi.registerpaymentid = cp.registerpaymentid	
	where cbt.batchdate >= @startDate and cbt.batchdate < isnull(@enddate, getdate())
	group by  dbo.udf_DatePartStart(@dateperiod, cbt.batchdate)

	select count(cb.commchargebackid) as Qty, sum(cb.amount) as Amount,  dbo.udf_DatePartStart(@dateperiod,cbt.batchdate) as [period] 
	into #t
	from tblcommchargeback cb
	inner join tblcommbatch cbt on cbt.commbatchid = cb.commbatchid 
	inner join tblcommstruct cs on cs.commstructid = cb.commstructid
	inner join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
	inner join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	inner join #dpt dpi on dpi.registerpaymentid = cb.registerpaymentid	
	where cbt.batchdate >= @startDate and cbt.batchdate < isnull(@enddate, getdate())
	group by  dbo.udf_DatePartStart(@dateperiod, cbt.batchdate)

	Update @CommVSChargeBack Set
	ChargeBackCount = t.Qty,
	ChargeBackAmount = t.Amount
	From @CommVSChargeBack c
	join #t t on t.period = c.period

	Insert into  @CommVSChargeBack( ChargeBackCount, ChargeBackAmount, Period)
	Select  t.qty, t.amount, t.period 
	from #t t
	where t.period not in (select period from @CommVSChargeBack)


	declare @income varchar(1000), @chargeback varchar(1000), @net varchar(1000)

	select @income = coalesce(@income + ', ', '') + cast(isnull(CommissionAmount,0) as varchar(20)) + ' [' + dbo.udf_DatePartName(@DatePeriod, Period) + ']'
	from @CommVSChargeBack
	order by Period

	select @chargeback = coalesce(@chargeback + ', ', '') + cast(isnull(ChargeBackAmount,0) as varchar(20)) 
	from @CommVSChargeBack
	order by Period

	select @net = coalesce(@net + ', ', '') + cast((isnull(CommissionAmount,0) - isnull(ChargeBackAmount,0)) as varchar(20)) 
	from @CommVSChargeBack
	order by Period
	
	if @income is null begin
		set @income = '0 [' + dbo.udf_DatePartName(@DatePeriod, dateadd(day,-1,@enddate)) + ']'
	end
	if @chargeback is null begin
		set @chargeback = '0'
	end
	if @net is null begin
		set @net = '0'
	end

	exec('
		select ''Gross Fee Payments'' [Label], ' + @income + '
		union all
		select ''Chargeback'', ' + @chargeback + '
		union all 
		select ''Net Fee Payments'', ' + @net
		)


	drop table #dpt
	drop table #t

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Setup_RestorePermissions]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Setup_RestorePermissions]
    @name   sysname
AS
BEGIN
    DECLARE @object sysname
    DECLARE @protectType char(10)
    DECLARE @action varchar(60)
    DECLARE @grantee sysname
    DECLARE @cmd nvarchar(500)
    DECLARE c1 cursor FORWARD_ONLY FOR
        SELECT Object, ProtectType, [Action], Grantee FROM #aspnet_Permissions where Object = @name

    OPEN c1

    FETCH c1 INTO @object, @protectType, @action, @grantee
    WHILE (@@fetch_status = 0)
    BEGIN
        SET @cmd = @protectType + ' ' + @action + ' on ' + @object + ' TO [' + @grantee + ']'
        EXEC (@cmd)
        FETCH c1 INTO @object, @protectType, @action, @grantee
    END

    CLOSE c1
    DEALLOCATE c1
END
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getTotals]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_settlementimport_reports_getTotals]
(
@year int,
@month int
)
as
BEGIN
	select 
		[Paid] = Team
		, [Fees] = convert(money,sum(settlementfees))
		, [Units] = count(*)
		, [Balance] = sum(balance)
		, [SettlementAmt] = sum(settlementamt)
		, [AvgSettlementPct] = sum(settlementamt)/ sum(balance)
	from tblSettlementTrackerImports [sti]
	where year(date) =@year and month(date) = @month
	and canceldate is null
	group by team 
	order by team
END


GRANT EXEC ON stp_settlementimport_reports_getTotals TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_Query_Duplicates]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[stp_Query_Duplicates] 
(
	@Select varchar (8000)='',
	@Group varchar (8000)='',
	@Join varchar (8000)='',
	@Value varchar (8000)='',
	@where varchar (8000)= '1=1'
)

as

CREATE TABLE #Duplicates
(
	ClientID int,
	AccountNumber varchar(255),
	ClientStatusID int,
	ClientStatusName varchar(255),
	AgencyID int,
	AgencyName varchar(255),
	AgencyAbbreviation varchar (255),
	Notes int,
	PhoneCalls int,
	Accounts int,
	Registers int,
	Balance money,
	Created datetime,
	CompletedDE bit,	
	CompletedUW bit,

	PersonID int,
	FirstName varchar (255),
	LastName varchar (255),
	SSN varchar(50),
	Gender varchar(1),
	Street varchar (255),
	Street2 varchar (255),
	City varchar (255),
	StateID int,
	StateAbbreviation varchar (255),
	StateName varchar (255),
	ZipCode varchar (255),

	RowIndex varchar(999)
)
--soundex
INSERT INTO
	#Duplicates
EXEC
('
SELECT
	c.ClientID,
	c.AccountNumber,
	cs.ClientStatusID,
	cs.code as ClientStatusName,
	c.AgencyID,
	a.name as AgencyName,
	a.code as AgencyAbbreviation,
	counts.Notes,
	counts.PhoneCalls,
	counts.accounts,
	counts.Registers,
	counts.Balance,
	c.Created,
	convert(bit,(case when c.vwderesolved is null then 0 else 1 end)) as CompletedDE,	
	convert(bit,(case when c.vwuwresolved is null then 0 else 1 end)) as CompletedUW,

	p.PersonID,
	p.FirstName,
	p.LastName,
	p.SSN,
	p.Gender,
	p.Street,
	p.Street2,
	p.City,
	p.StateID,
	s.abbreviation as StateAbbreviation,
	s.name as StateName,
	p.ZipCode,

	(' + @Value + ') AS RowIndex
FROM
	tblclient c left outer join
	tblperson p on c.primarypersonid=p.personid left outer join
	tblstate s on p.stateid=s.stateid left outer join
	tblclientstatus cs on c.currentclientstatusid=cs.clientstatusid left outer join
	tblagency a on c.agencyid=a.agencyid left outer join
	(
		select
			c.clientid,
			(select count(noteid) from tblnote where clientid=c.clientid) as notes,
			(select count(phonecallid) from tblphonecall where personid=p.personid) as phonecalls,
			(select count(accountid) from tblaccount where clientid=c.clientid) as accounts,
			(select count(registerid) from tblregister where clientid=c.clientid) as registers,
			(select top 1 isnull(balance,0) from tblregister where clientid=c.clientid order by transactiondate desc, registerid desc) as balance
		from
			tblclient c inner join
			tblperson p on c.primarypersonid=p.personid
	) as counts on c.clientid=counts.clientid inner join
	(
		SELECT
			' + @Select + '
		FROM
			tblclient nc left outer join
			tblperson np on nc.primarypersonid=np.personid
		GROUP BY
			' + @Group + '
		HAVING
			COUNT(*) > 1
	) as tmp ' + @Join + '
WHERE
	' + @where + '
	
ORDER BY
	rowindex
')

SELECT * FROM #Duplicates

select 
	keyid1 as clientid1,
	keyid2 as clientid2
from 
	tblduplicateexclude
where
	[table]='tblClient'
	and (
		keyid1 in (select clientid from #duplicates)
		or keyid2 in (select clientid from #duplicates)
	)
DROP TABLE #Duplicates
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPersonalStatement]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetPersonalStatement]


as

SELECT
	c.accountnumber,
	CASE c.companyid WHEN '1' then '816' ELSE '801' END [BaseCompany],
	p.firstname + ' ' + p.lastname [Name],
	p.street + ' ' + isnull(p.street2,'') [Street],
	p.city [City],
	s.abbreviation [ST],
	left(p.zipcode,5) [Zip],
	'month range|last' [period], /* period is the previous month i.e. 'From 04/01/2006 to 04/30/2006' */
	DATENAME(month, getdate()) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,datepart(year, getdate())) AS  [Dep. Date],
	c.depositamount [Dep. Amt],

	-ISNULL((
		select 
			sum(amount) 
		from 
			tblRegister INNER JOIN
			tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
		where 
			tblRegister.Clientid=c.ClientId AND
			tblEntryType.Fee=1)
	,0)
	-
	ISNULL((
		select 
			sum(tblregisterpayment.amount) 
		from 
			tblRegisterPayment INNER JOIN
			tblRegister ON tblRegisterPayment.FeeRegisterId=tblRegister.RegisterId		
		where 
			tblRegister.Clientid=c.ClientId)
	,0) as PFOBalance,

	CASE c.depositmethod WHEN 'ACH' THEN 'Y' ELSE 'N' END [ACH],
	CASE c.NoChecks WHEN 1 THEN 'Y' ELSE 'N' END [NoChecks],
	(select 'Payee' = case WHEN accountnumber > 6000000 THEN 'The Seideman Law Firm, P.C.'
		ELSE p.firstname + ' ' + p.lastname+ ' Acct # '+c.accountnumber
		END from tblClient c2 where c2.clientid = c.clientid),
	'P.O. Box 1800' [cslocation1],
	'Rancho Cucamonga, CA 91729-1800' [cslocation2],
	'1-800-914-4832' [desc1],
	'Monday thru Friday 8:00 am to 5:00 pm PST' [desc2]
FROM
	tblClient c
INNER JOIN
	tblPerson p on c.primarypersonid = p.personid 
LEFT JOIN
	tblState s on p.stateid = s.stateid
WHERE
	(SELECT Top 1 ClientStatusId FROM tblRoadmap WHERE tblRoadmap.ClientId=c.ClientId ORDER BY Created DESC, Roadmapid DESC)
		in (10,11,12,14,16)
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationStatsIndividual]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_NegotiationStatsIndividual]
(
	@UserID int
)
as
BEGIN
	SELECT     
		tblUser.FirstName + ' ' + tblUser.LastName AS UserName
		, CASE WHEN status = 'A' THEN 'Accepted' WHEN status = 'R' THEN 'Rejected' END AS Status
		, tblSettlements.OfferDirection, COUNT(*) AS Total
		, Min(tblSettlements.SettlementPercent) AS [Min Settlement %]
		, MAX(tblSettlements.SettlementPercent) AS [Max Settlement %]
		, AVG(tblSettlements.SettlementPercent) AS [Avg Settlement %]
		, MIN(tblSettlements.SettlementAmount) AS [Min Settlement Amt]
		, MAX(tblSettlements.SettlementAmount) AS [Max Settlement Amt]
		, AVG(tblSettlements.SettlementAmount) AS [Avg Settlement Amt]
		, SUM(CASE WHEN datediff(d, settlementduedate, getdate()) * - 1 <= 30 THEN 1 ELSE 0 END) AS [Due Under 30 days], 
		SUM(CASE WHEN datediff(d, settlementduedate, getdate()) * - 1 BETWEEN 31 AND 60 THEN 1 ELSE 0 END) AS [Due in 31-60 days], 
		SUM(CASE WHEN datediff(d, settlementduedate, getdate()) * - 1 BETWEEN 61 AND 90 THEN 1 ELSE 0 END) AS [Due in 61-90 days], 
		SUM(CASE WHEN datediff(d, settlementduedate, getdate()) * - 1 > 90 THEN 1 ELSE 0 END) AS [Due +90 days]
	FROM
		tblSettlements INNER JOIN tblUser ON tblSettlements.CreatedBy = tblUser.UserID
	WHERE     
		(tblSettlements.CreatedBy IN (@UserID))
	GROUP BY tblSettlements.Status, tblSettlements.OfferDirection, tblUser.FirstName, tblUser.LastName
	ORDER BY UserName, Status, tblSettlements.OfferDirection
END
GO
/****** Object:  StoredProcedure [dbo].[stp_DisbursementReport]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_DisbursementReport]
(
	@UserID int
,	@StartDate datetime 
,	@EndDate datetime
,	@CompanyID int
)
AS
BEGIN

SELECT 
	FeeType, 
	Company, 
	Agency, 
	ClientID,
	CName,
	AccountNumber,
	BatchID,
	convert(varchar, PaymentDate, 110) as PaymentDate, 
	sum(Amount) as Amount,
	Bounced, 
	Voided, 
	BouncedDescription, 
	InitialDraft, 
	VoidAmount, 
	VoidReason 
FROM 
(
	SELECT 
		e.Name [FeeType]
	,	ShortCoName [Company]
	,	a.Name [Agency]
	,	c.ClientID
	,	p.FirstName + ' ' + p.LastName [CName]
	,	c.AccountNumber
	,	cp.CommBatchID [BatchID]
	,	rp.PaymentDate
	,	cp.Amount 
	,	r.Bounce [Bounced]
	,	r.Void [Voided]
	,	br.BouncedDescription
	,	(CASE WHEN r.InitialDraftYN = 1 THEN 'Yes' ELSE 'No' END) as InitialDraft
	,	ISNULL(vr.Amount, 0) as VoidAmount
	,	vr.Reason as VoidReason
	FROM 
		tblCommPay cp
		join tblcommbatch b on b.commbatchid = cp.commbatchid and b.batchdate between @StartDate and @EndDate  
		join tblcommstruct cs on cs.commstructid = cp.commstructid
		join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID	
		join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
		join tblcompany comp on comp.companyid = uca.companyid
		join tblRegisterPayment rp on rp.RegisterPaymentID = cp.RegisterPaymentID 
		join tblRegister r on r.RegisterID = rp.FeeRegisterID 
		join tblEntryType e on e.EntryTypeID = r.EntryTypeID
		join tblClient c on c.ClientID = r.ClientID 
		join tbluserclientaccess uc on uc.userid = uca.userid and c.created between uc.clientcreatedfrom and uc.clientcreatedto
		join tblAgency a on a.AgencyID = c.AgencyID
		join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = a.agencyid
		left join tblPerson p on p.PersonID = c.PrimaryPersonID
		left join tblBouncedReasons br on br.BouncedID = r.BouncedReason
		left outer join (SELECT [Value], Amount, Reason FROM tblTransactionAudit WHERE [Type] = 'register') as vr on r.RegisterId = vr.Value 

	UNION ALL 

	SELECT 
		e.Name [FeeType]
	,	ShortCoName [Company]
	,	a.Name [Agency]
	,	c.ClientID
	,	p.FirstName + ' ' + p.LastName [CName]
	,	c.AccountNumber
	,	cp.CommBatchID [BatchID]
	,	rp.PaymentDate
	,	-cp.Amount as Amount 
	,	r.Bounce [Bounced]
	,	r.Void [Voided]
	,	br.BouncedDescription
	,	(CASE WHEN r.InitialDraftYN = 1 THEN 'Yes' ELSE 'No' END) as InitialDraft
	,	ISNULL(vr.Amount, 0) as VoidAmount
	,	vr.Reason as VoidReason
	FROM 
		tblCommChargeback cp 
		join tblcommbatch b on b.commbatchid = cp.commbatchid and b.batchdate between @StartDate and @EndDate    
		join tblcommstruct cs on cs.commstructid = cp.commstructid
		join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID	
		join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
		join tblcompany comp on comp.companyid = uca.companyid
		join tblRegisterPayment rp on rp.RegisterPaymentID = cp.RegisterPaymentID 
		join tblRegister r on r.RegisterID = rp.FeeRegisterID 
		join tblEntryType e on e.EntryTypeID = r.EntryTypeID
		join tblClient c on c.ClientID = r.ClientID 
		join tbluserclientaccess uc on uc.userid = uca.userid and c.created between uc.clientcreatedfrom and uc.clientcreatedto
		join tblAgency a on a.AgencyID = c.AgencyID
		join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = a.agencyid
		left join tblPerson p on p.PersonID = c.PrimaryPersonID
		left join tblBouncedReasons br on br.BouncedID = r.BouncedReason
		left outer join (SELECT [Value], Amount, Reason FROM tblTransactionAudit WHERE [Type] = 'register') as vr on r.RegisterId = vr.Value 

) as derivedtable 

GROUP BY 
	FeeType,
	Company,
	Agency,
	CName,
	Clientid,
	Accountnumber,
	BatchID,
	PaymentDate,
	Bounced, 
	Voided, 
	BouncedDescription, 
	InitialDraft, 
	VoidAmount, 
	VoidReason
ORDER BY
	FeeType,
	Company,
	Agency,
	CName

END
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyPaymentDetail]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AgencyPaymentDetail]
(
	@payment varchar(20),
	@type varchar(20),
	@startdate datetime,
	@enddate datetime,
	@dateperiod char(1),
	@datepartname varchar(20),
	@UserID int,
	@companyid int = -1
)
AS
BEGIN


if @payment = 'first' begin

	select dp.registerpaymentid 
	into #dpt
	from tblregisterpaymentdeposit dp 
	join vw_initialdrafts df on df.registerid = dp.depositregisterid
	join tblclient c on c.clientid = df.clientid
	join tbluserclientaccess uc on uc.userid = @UserID and c.created between uc.clientcreatedfrom and uc.clientcreatedto
	join tblusercompanyaccess uca on uca.userid = uc.userid and (@companyid = -1 or uca.companyid = @companyid)

	if @type = 'Gross Fee Payments' begin

		-- Initial Draft Income
		select cr.display [Recipient], t.displayname [Fee], sum(cp.amount) [Amount]
		from tblcommpay cp
		join tblcommbatch b on b.commbatchid = cp.commbatchid 
			and b.batchdate >= @startDate and b.batchdate < @enddate
			and dbo.udf_DatePartName(@dateperiod, b.batchdate) = @datepartname
		join #dpt dpi on dpi.registerpaymentid = cp.registerpaymentid
		join tblcommstruct cs on cs.commstructid = cp.commstructid
		join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
		join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
		join tblcommrec cr on cr.commrecid = cs.commrecid
		join tblregisterpayment rp on rp.registerpaymentid = dpi.registerpaymentid
		join tblregister r on r.registerid = rp.feeregisterid
		join tblentrytype t on t.entrytypeid = r.entrytypeid
		group by cr.display, t.displayname
		order by cr.display, t.displayname

	end
	else if @type = 'Chargeback' begin

		-- Initial Draft Chargebacks
		select cr.display [Recipient], t.displayname [Fee], sum(cb.amount) [Amount]
		from tblcommchargeback cb
		join tblcommbatch b on b.commbatchid = cb.commbatchid 
			and b.batchdate >= @startDate and b.batchdate < @enddate
			and dbo.udf_DatePartName(@dateperiod, b.batchdate) = @datepartname
		join #dpt dpi on dpi.registerpaymentid = cb.registerpaymentid
		join tblcommstruct cs on cs.commstructid = cb.commstructid
		join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
		join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
		join tblcommrec cr on cr.commrecid = cs.commrecid
		join tblregisterpayment rp on rp.registerpaymentid = dpi.registerpaymentid
		join tblregister r on r.registerid = rp.feeregisterid
		join tblentrytype t on t.entrytypeid = r.entrytypeid
		group by cr.display, t.displayname
		order by cr.display, t.displayname

	end
	else if @type = 'Net Fee Payments' begin

		select Recipient, Fee, sum(Amount) [Amount]
		from (
			-- Initial Draft Income
			select cr.display [Recipient], t.displayname [Fee], cp.Amount
			from tblcommpay cp
			join tblcommbatch b on b.commbatchid = cp.commbatchid 
				and b.batchdate >= @startDate and b.batchdate < @enddate
				and dbo.udf_DatePartName(@dateperiod, b.batchdate) = @datepartname
			join #dpt dpi on dpi.registerpaymentid = cp.registerpaymentid
			join tblcommstruct cs on cs.commstructid = cp.commstructid
			join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
			join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
			join tblcommrec cr on cr.commrecid = cs.commrecid
			join tblregisterpayment rp on rp.registerpaymentid = dpi.registerpaymentid
			join tblregister r on r.registerid = rp.feeregisterid
			join tblentrytype t on t.entrytypeid = r.entrytypeid

			union all

			-- Initial Draft Chargebacks
			select cr.display [Recipient], t.displayname [Fee], -cb.Amount
			from tblcommchargeback cb
			join tblcommbatch b on b.commbatchid = cb.commbatchid 
				and b.batchdate >= @startDate and b.batchdate < @enddate
				and dbo.udf_DatePartName(@dateperiod, b.batchdate) = @datepartname
			join #dpt dpi on dpi.registerpaymentid = cb.registerpaymentid
			join tblcommstruct cs on cs.commstructid = cb.commstructid
			join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
			join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
			join tblcommrec cr on cr.commrecid = cs.commrecid
			join tblregisterpayment rp on rp.registerpaymentid = dpi.registerpaymentid
			join tblregister r on r.registerid = rp.feeregisterid
			join tblentrytype t on t.entrytypeid = r.entrytypeid

		) dev
		group by Recipient, Fee
		order by Recipient, Fee

	end

	drop table #dpt
end
else if @payment = 'other' begin

	select distinct dp.registerpaymentid 
	into #dpt2
	from tblregisterpaymentdeposit dp 
	left join vw_initialdrafts df on df.registerid = dp.depositregisterid
	join tblregister r on r.registerid = dp.depositregisterid
	join tblclient c on c.clientid = r.clientid
	join tbluserclientaccess uc on uc.userid = @UserID and c.created between uc.clientcreatedfrom and uc.clientcreatedto
	join tblusercompanyaccess uca on uca.userid = uc.userid and (@companyid = -1 or uca.companyid = @companyid)
	where df.registerid is null

	if @type = 'Gross Fee Payments' begin

		-- All Other Payment Income
		select cr.display [Recipient], t.displayname [Fee], sum(cp.amount) [Amount]
		from tblcommpay cp
		join tblcommbatch b on b.commbatchid = cp.commbatchid 
			and b.batchdate >= @startDate and b.batchdate < @enddate
			and dbo.udf_DatePartName(@dateperiod, b.batchdate) = @datepartname
		join #dpt2 dpi on dpi.registerpaymentid = cp.registerpaymentid
		join tblcommstruct cs on cs.commstructid = cp.commstructid
		join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
		join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
		join tblcommrec cr on cr.commrecid = cs.commrecid
		join tblregisterpayment rp on rp.registerpaymentid = dpi.registerpaymentid
		join tblregister r on r.registerid = rp.feeregisterid
		join tblentrytype t on t.entrytypeid = r.entrytypeid
		group by cr.display, t.displayname
		order by cr.display, t.displayname

	end
	else if @type = 'Chargeback' begin

		-- All Other Payment Chargebacks
		select cr.display [Recipient], t.displayname [Fee], sum(cb.amount) [Amount]
		from tblcommchargeback cb
		join tblcommbatch b on b.commbatchid = cb.commbatchid 
			and b.batchdate >= @startDate and b.batchdate < @enddate
			and dbo.udf_DatePartName(@dateperiod, b.batchdate) = @datepartname
		join #dpt2 dpi on dpi.registerpaymentid = cb.registerpaymentid
		join tblcommstruct cs on cs.commstructid = cb.commstructid
		join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
		join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
		join tblcommrec cr on cr.commrecid = cs.commrecid
		join tblregisterpayment rp on rp.registerpaymentid = dpi.registerpaymentid
		join tblregister r on r.registerid = rp.feeregisterid
		join tblentrytype t on t.entrytypeid = r.entrytypeid
		group by cr.display, t.displayname
		order by cr.display, t.displayname

	end
	else if @type = 'Net Fee Payments' begin

		select Recipient, Fee, sum(Amount) [Amount]
		from (
			-- All Other Payment Income
			select cr.display [Recipient], t.displayname [Fee], cp.Amount
			from tblcommpay cp
			join tblcommbatch b on b.commbatchid = cp.commbatchid 
				and b.batchdate >= @startDate and b.batchdate < @enddate
				and dbo.udf_DatePartName(@dateperiod, b.batchdate) = @datepartname
			join #dpt2 dpi on dpi.registerpaymentid = cp.registerpaymentid
			join tblcommstruct cs on cs.commstructid = cp.commstructid
			join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
			join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
			join tblcommrec cr on cr.commrecid = cs.commrecid
			join tblregisterpayment rp on rp.registerpaymentid = dpi.registerpaymentid
			join tblregister r on r.registerid = rp.feeregisterid
			join tblentrytype t on t.entrytypeid = r.entrytypeid

			union all

			-- All Other Payment Chargebacks
			select cr.display [Recipient], t.displayname [Fee], -cb.Amount
			from tblcommchargeback cb
			join tblcommbatch b on b.commbatchid = cb.commbatchid 
				and b.batchdate >= @startDate and b.batchdate < @enddate
				and dbo.udf_DatePartName(@dateperiod, b.batchdate) = @datepartname
			join #dpt2 dpi on dpi.registerpaymentid = cb.registerpaymentid
			join tblcommstruct cs on cs.commstructid = cb.commstructid
			join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
			join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@companyid = -1 or uca.companyid = @companyid)
			join tblcommrec cr on cr.commrecid = cs.commrecid
			join tblregisterpayment rp on rp.registerpaymentid = dpi.registerpaymentid
			join tblregister r on r.registerid = rp.feeregisterid
			join tblentrytype t on t.entrytypeid = r.entrytypeid

		) dev
		group by Recipient, Fee
		order by Recipient, Fee

	end

	drop table #dpt2
end


END
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertEchoSurvey]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_InsertEchoSurvey]
(
	@path varchar(300)
)
as
begin

	exec('
	bulk insert #echosurvey from ''' + @path + ''' with (firstrow = 2, fieldterminator = '','')
	
	insert tblechosurvey
	select *, getdate()
	from #echosurvey
	
	drop table #echosurvey
	')

end
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_deletetracker]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_deletetracker]

	(
		@TrackerImportID int 
	)
AS
BEGIN
	DELETE FROM tblSettlementTrackerImports WHERE (TrackerImportID = @TrackerImportID)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Statistic_CaseRetention]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Statistic_CaseRetention]
	(
		@dategrouping int = 2,
		@datapoints int = 9,
		@agencyid int = null,
		@attorneyid int = null
	)
 
as

declare @attorneystateid int
declare @attorneycompanyid int
if not @attorneyid is null begin
	set @attorneystateid=(select stateid from tblattorney where attorneyid=@attorneyid)
	set @attorneycompanyid=(select companyid from tblattorney where attorneyid=@attorneyid)
end

declare @crAttorney varchar(255)
set @crattorney=''

declare @crAgency varchar(255)
set @cragency=''

declare @datepart varchar(10)

if @dategrouping = 0 begin-- daily grouping
	set @datepart = 'day'
end else if @dategrouping = 1 begin-- weekly grouping
	set @datepart = 'week'
end else if @dategrouping = 2 begin-- monthly grouping
	set @datepart = 'month'
end else if @dategrouping = 3 begin-- yearly grouping
	set @datepart = 'year'
end

/*
Case retention length
*/

if not @agencyid is null 
	set @cragency=' and c.agencyid=' + convert(varchar,@agencyid)

if not @attorneyid is null 
	set @crattorney=' and c.companyid=' + convert(varchar,@attorneycompanyid) + 
					' and p.stateid=' + convert(varchar,@attorneystateid)

exec('
select top '+@datapoints+'
	''Case Retention'' as statistic,
	 count(timeafter) as [count],
	timeafter as timeunits
from
	(
	select 
		datediff
		(
			'+@datepart+',
			c.created,
			(select top 1 created from tblroadmap r where r.clientid=c.clientid and clientstatusid in (15,16,17) order by r.created desc, r.roadmapid desc)
		) as timeafter,
		c.*
	from	
		tblclient c inner join tblperson p on c.primarypersonid=p.personid
	where
		currentclientstatusid in (15,16,17)
		' + @cragency + @crattorney + '
	) t
where
	timeafter >= 0
	and timeafter < '+@datapoints+'
group by
	t.timeafter
order by
	t.timeafter asc
')
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientReport_CreditorLetter]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[stp_ClientReport_CreditorLetter]
	(
		@clientId int
	)

as 

declare @secPersonId int
set @secPersonId = (SELECT TOP 1 PersonId FROM tblPerson WHERE ClientId=@ClientId AND NOT PersonId = (SELECT PrimaryPersonId FROM tblClient WHERE ClientId=@ClientId))

SELECT 
	tblPerson.FirstName + ' ' + tblPerson.LastName as ClientName,
	sec.FirstName + ' ' + sec.LastName as ClientName2,
		tblAttorney.FirstName + ' ' + Coalesce(tblAttorney.MiddleName,'') + 
		(CASE WHEN tblAttorney.MiddleName is NULL THEN '' ELSE ' ' END) + 
		tblAttorney.LastName + 
		(CASE WHEN tblAttorney.Suffix is NULL THEN '' ELSE ', ' END)
		+ Coalesce(tblAttorney.Suffix,'') AS AttorneyName,

	tblCreditorInstance.AccountNumber,
	tblCreditorInstance.ReferenceNumber,
	tblCreditor.[Name] as CreditorName,
	tblCreditor.Street as CreditorStreet,
	tblCreditor.Street2 as CreditorStreet2,
	tblCreditor.City as CreditorCity,
	(SELECT [Name] FROM tblState WHERE StateId=tblCreditor.StateId) as CreditorState,
	(SELECT [Name] FROM tblState WHERE StateId=tblPerson.StateId) as PrimaryPersonState,
	tblCreditor.ZipCode as CreditorZipCode
FROM
	tblAccount INNER JOIN 
	tblCreditorInstance ON tblAccount.CurrentCreditorInstanceId=tblCreditorInstance.CreditorInstanceId INNER JOIN
	tblCreditor ON tblCreditorInstance.CreditorId=tblCreditor.CreditorId INNER JOIN
	tblClient ON tblAccount.ClientId=tblClient.ClientId INNER JOIN
	tblPerson ON tblClient.PrimaryPersonId=tblPerson.PersonId LEFT OUTER JOIN
	tblAttorney ON tblAttorney.CompanyId=tblClient.CompanyId AND tblAttorney.StateId=tblPerson.StateId LEFT OUTER JOIN
	tblPerson as sec ON sec.PersonId=@secPersonId
WHERE
	tblAccount.ClientId=@clientId
GO
/****** Object:  StoredProcedure [dbo].[stp_VerificationCall_GetForClient]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_VerificationCall_GetForClient]
@ClientId int
AS
Select v.VerificationCallId, 
v.StartDate as [Submitted],
v.EndDate as [Completed],
isnull(u.firstname,'') + ' ' + isnull(u.lastname,'') [SubmittedBy],
v.RecordedCallPath,
v.DocumentPath,
v.RecordedCallPath,
v.RecCallIdKey,
isnull(LastStep, 'Error') as LastStep
from tblVerificationCall v
inner join tbluser u on u.userid = v.executedby
Where v.ClientId = @ClientId
Order By v.StartDate Desc
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientPaymentsCredits]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetClientPaymentsCredits]
(
	@Date datetime
,	@EffectiveDate datetime
,	@NachaFileId int = -1
,	@NachaRegisterId int = -1
)
as
begin
/*
	History:
	jhernandez		06/20/08	New method for returning client payments for batch processing
	jhernandez		06/25/08	Remove filtering items created today. If CheckSite's system
								is unavailable we'll want to send items out on next 
								attempt.
	jhernandez		07/09/08	Order by NachaRegisterId
	jhernandez		07/15/08	Also return credits (voided transactions that will credit
								the clients' shadow store). Also renamed proc from
								stp_GetClientPayments to stp_GetClientPaymentsCredits.
	jhernandez		07/24/08	Optional parameters @NachaFileId and @NachaRegisterId
								used for re-sending a batch.	
	jhernandez		11/18/08	Use tblNachaRegister2.Name for ControlledAccountName
*/


-- Get client payments and credits
select 
	n.NachaRegisterId, n.NachaFileId, n.Amount, n.ShadowStoreId,
	n.Name [ControlledAccountName], 
	case when r.AccountID is null then e.DisplayName else e.DisplayName + ' for Account ' + convert(varchar(50), r.AccountID) end [Notes1],
	n.Flow
into #batch
from tblNachaRegister2 n
join tblRegister r on r.RegisterId = n.RegisterId
left join tblRegisterPayment p on p.RegisterPaymentId = n.RegisterPaymentId -- left join needed to pickup settlement payments
join tblEntryType e on e.EntryTypeId = r.EntryTypeId
join tblTrust t on t.TrustID = n.TrustID
where n.NachaFileId = @NachaFileId 
and n.accountnumber is null
 
 
 -- Only create nacha file id if batch has records and is not a re-send
if (exists (select 1 from #batch)) and (@NachaFileId = -1) begin
	insert tblNachaFile ([Date],EffectiveDate) values (@Date,@EffectiveDate)
	select @NachaFileId = scope_identity()

	update #batch set NachaFileId = @NachaFileId
	update tblNachaRegister2 set NachaFileId = @NachaFileId where NachaRegisterId in (select NachaRegisterId from #batch)
end


-- output
select * 
from #batch 
where NachaRegisterId >= @NachaRegisterId
order by NachaRegisterId

-- cleanup
drop table #batch 


end
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyNonInitialDraftsCommission]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AgencyNonInitialDraftsCommission]
(
	@startdate datetime = '2006-01-01',
	@enddate datetime = null,
	@dateperiod varchar(1) = 'm',
	@userid int,
	@companyid int = -1
)
AS
BEGIN

	declare @CommVSChargeBack table(Period datetime, CommissionCount int, CommissionAmount money, ChargeBackCount int, ChargeBackAmount money)
	
	select distinct dp.registerpaymentid 
	into #dpt
	from tblregisterpaymentdeposit dp 
	left join vw_initialdrafts df on df.registerid = dp.depositregisterid
	join tblregister r on r.registerid = dp.depositregisterid
	join tblclient c on c.clientid = r.clientid
	join tbluserclientaccess uc on uc.userid = @UserID and c.created between uc.clientcreatedfrom and uc.clientcreatedto
	join tblusercompanyaccess uca on uca.userid = uc.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	join tbluseragencyaccess ua on ua.userid = uc.userid and ua.agencyid = c.agencyid
	where df.registerid is null


	--Fill Period
	Insert into  @CommVSChargeBack( CommissionCount, CommissionAmount, Period)
	select count(cp.commpayid) as Qty, 
		   sum(cp.amount) as Amount,  
		   dbo.udf_DatePartStart(@dateperiod,cbt.batchdate) as [period]
	from tblcommpay cp
	inner join tblcommbatch cbt on cbt.commbatchid = cp.commbatchid 
	inner join tblcommstruct cs on cs.commstructid = cp.commstructid
	inner join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
	inner join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	inner join #dpt dpi on dpi.registerpaymentid = cp.registerpaymentid
	where cbt.batchdate >= @startDate and cbt.batchdate < isnull(@enddate, getdate())
	group by  dbo.udf_DatePartStart(@dateperiod, cbt.batchdate)

	select count(cb.commchargebackid) as Qty, sum(cb.amount) as Amount,  dbo.udf_DatePartStart(@dateperiod,cbt.batchdate) as [period] 
	into #t
	from tblcommchargeback cb
	inner join tblcommbatch cbt on cbt.commbatchid = cb.commbatchid 
	inner join tblcommstruct cs on cs.commstructid = cb.commstructid
	inner join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @UserID
	inner join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and (@CompanyID = -1 or uca.companyid = @CompanyID)
	inner join #dpt dpi on dpi.registerpaymentid = cb.registerpaymentid
	where cbt.batchdate >= @startDate and cbt.batchdate < isnull(@enddate, getdate())
	group by  dbo.udf_DatePartStart(@dateperiod, cbt.batchdate)

	Update @CommVSChargeBack Set
	ChargeBackCount = t.Qty,
	ChargeBackAmount = t.Amount
	From @CommVSChargeBack c
	join #t t on t.period = c.period

	Insert into  @CommVSChargeBack( ChargeBackCount, ChargeBackAmount, Period)
	Select  t.qty, t.amount, t.period 
	from #t t
	where t.period not in (select period from @CommVSChargeBack)


	declare @income varchar(1000), @chargeback varchar(1000), @net varchar(1000)

	select @income = coalesce(@income + ', ', '') + cast(isnull(CommissionAmount,0) as varchar(20)) + ' [' + dbo.udf_DatePartName(@DatePeriod, Period) + ']'
	from @CommVSChargeBack
	order by Period

	select @chargeback = coalesce(@chargeback + ', ', '') + cast(isnull(ChargeBackAmount,0) as varchar(20)) 
	from @CommVSChargeBack
	order by Period

	select @net = coalesce(@net + ', ', '') + cast((isnull(CommissionAmount,0) - isnull(ChargeBackAmount,0)) as varchar(20)) 
	from @CommVSChargeBack
	order by Period

	if @income is null begin
		set @income = '0 [' + dbo.udf_DatePartName(@DatePeriod, dateadd(day,-1,@enddate)) + ']'
	end
	if @chargeback is null begin
		set @chargeback = '0'
	end
	if @net is null begin
		set @net = '0'
	end

	exec('
		select ''Gross Fee Payments'' [Label], ' + @income + '
		union all
		select ''Chargeback'', ' + @chargeback + '
		union all 
		select ''Net Fee Payments'', ' + @net
		)


	drop table #dpt
	drop table #t

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Setup_RemoveAllRoleMembers]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Setup_RemoveAllRoleMembers]
    @name   sysname
AS
BEGIN
    CREATE TABLE #aspnet_RoleMembers
    (
        Group_name      sysname,
        Group_id        smallint,
        Users_in_group  sysname,
        User_id         smallint
    )

    INSERT INTO #aspnet_RoleMembers
    EXEC sp_helpuser @name

    DECLARE @user_id smallint
    DECLARE @cmd nvarchar(500)
    DECLARE c1 cursor FORWARD_ONLY FOR
        SELECT User_id FROM #aspnet_RoleMembers

    OPEN c1

    FETCH c1 INTO @user_id
    WHILE (@@fetch_status = 0)
    BEGIN
        SET @cmd = 'EXEC sp_droprolemember ' + '''' + @name + ''', ''' + USER_NAME(@user_id) + ''''
        EXEC (@cmd)
        FETCH c1 INTO @user_id
    END

    CLOSE c1
    DEALLOCATE c1
END
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getYTD]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_settlementimport_reports_getYTD]
as
BEGIN
	declare @start datetime
	declare @end datetime

	set @start = DATEADD(yy, DATEDIFF(yy,0,getdate()), 0);
	set @end = DATEADD(yy, 1,@start);

	with mycte as (
	select  [DateValue] = @start
	 union all 
	select DateValue + 1 
	from    mycte    
	where   DateValue + 1 < @end)
	select  
		[SettMonth] = Month([DateValue])
		, [Fees] = isnull(convert(money,sum(settlementfees)),0)
		, [Units] = count(settlementfees)
	from mycte left join
	tblSettlementTrackerImports sti on sti.[due] = mycte.DateValue
	where canceldate is null --and [date] >= @start
	group by Month([DateValue])
	order by Month([DateValue])
	OPTION  (MAXRECURSION 0)
END


GRANT EXEC ON stp_settlementimport_reports_getYTD TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_ChartCommissionComparision]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ChartCommissionComparision]
(
	@startdate datetime=null,
	@enddate datetime=null,
	@groupby int = 0,
	@splitby int = 2,
	@commrecids varchar(500) = null,
	@commrecidsop varchar(5) = null
)
as

create table #commrecids (commrecid int)
if @commrecids is null begin
	insert into #commrecids(commrecid) select commrecid from tblcommrec
end else begin
	exec ('insert into #commrecids(commrecid) 
			select commrecid from tblcommrec 
			where ' + @commrecidsop + ' commrecid in (' + @commrecids + ')'
	)
end


declare @groupstr varchar(500)
declare @splitstr varchar(500)
declare @field varchar(50)
set @field='batchdate'

if @groupby = 0 begin -- daily grouping
	if @splitby = 1 begin --day of week
		set @groupstr = 'datepart(dw,' + @field + ')'
	end else if @splitby = 2 begin --day of month
		set @groupstr = 'day(' + @field + ')'
	end else if @splitby = 3 begin --day of year
		set @groupstr = 'datepart(dy,' + @field + ')'
	end
end else if @groupby = 1 begin -- weekly grouping
	if @splitby = 2 begin --week of month
		set @groupstr = 'dbo.monthweek(' + @field + ')'
	end else if @splitby = 3 begin --week of year
		set @groupstr = 'datepart(wk,' + @field + ')'
	end
end else if @groupby = 2 begin -- monthly grouping
	if @splitby = 3 begin--month of year
		set @groupstr = 'month(' + @field + ')'
	end
end

set @groupstr = 'convert(int,' + @groupstr + ')'

if @splitby = 1 begin -- weekly grouping
	set @splitstr = 'dateadd(day, 1 - datepart(dw, ( convert(varchar, ' + @field + ', 101) )), ( convert(varchar, ' + @field + ', 101) ))'
end else if @splitby = 2 begin -- monthly grouping
	set @splitstr = 'convert(datetime, convert(varchar(2), month(' + @field + ')) + N''/1/'' + convert(varchar(4), year(' + @field + ')))'
end else if @splitby = 3 begin -- yearly grouping
	set @splitstr = 'convert(datetime, N''1/1/'' + convert(varchar(12), year(' + @field + ')))'
end

declare @sql varchar(8000)

set @sql = 
'select 
	' + @groupstr + ' as [group],
	' + @splitstr + ' as splitdate,
	sum(amount) as amount
from


(
select 
	batchdate,
	cp.amount
from
	tblcommbatch cb
	inner join tblcommpay cp on cp.commbatchid=cb.commbatchid
	inner join tblcommstruct cst on cp.commstructid=cst.commstructid 
where commrecid in (select commrecid from #commrecids) '

if @startdate is not null
	set @sql = @sql + ' and CAST(CONVERT(char(10), cb.BatchDate, 101) AS datetime) >= ''' + convert(varchar, @startdate) + ''''

if @enddate is not null 
	set @sql = @sql + ' and CAST(CONVERT(char(10), cb.BatchDate, 101) AS datetime) <= ''' +  convert(varchar, @enddate) + ''''


set @sql = @sql + 
' UNION ALL '

--chargebacks

set @sql = @sql + 
'SELECT 
	batchdate,
	cp.amount
FROM 
	tblCommBatch cb INNER JOIN 
	(SELECT [Percent],CommChargeBackId,CommPayID,ChargeBackDate,RegisterPaymentId,CommStructID,-Amount as Amount,CommBatchId FROM tblCommChargeBack) cp on cb.CommBatchId=cp.CommBatchId INNER JOIN 
	tblCommStruct cs ON cp.CommStructId=cs.CommStructId 
WHERE
	commrecid in (select commrecid from #commrecids) '

if @startdate is not null
	set @sql = @sql + ' and CAST(CONVERT(char(10), cb.BatchDate, 101) AS datetime) >= ''' + convert(varchar, @startdate) + ''''

if @enddate is not null 
	set @sql = @sql + ' and CAST(CONVERT(char(10), cb.BatchDate, 101) AS datetime) <= ''' +  convert(varchar, @enddate) + ''''

set @sql = @sql +
') t '

set @sql=@sql + '
group by
   ' + @splitstr + ', ' + @groupstr + '
order by
   ' + @splitstr + ', ' + @groupstr


print(@sql)
exec(@sql)
GO
/****** Object:  StoredProcedure [dbo].[stp_FeeDistributionAddresses]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_FeeDistributionAddresses] 
	  @CompanyId int = 0,
	  @StateId int = NULL,
	  @AgencyId int = NULL,     
	  @date1 datetime = NULL, 
      @date2 datetime = NULL

AS

BEGIN

SET NOCOUNT ON

DECLARE @MinPaymentId int

/*Select top 1 @MinPaymentId = RegisterPaymentId From tblCommPay Order by CommPayId asc
IF @MinPaymentId Is Null SELECT @MinPaymentId = 0*/

Select @MinPaymentId = 11730
Select @date1 = IsNull(@date1, Cast('1/1/1900' AS DATETIME))
Select @date2 = IsNull(@date2, Cast('12/31/2999' AS DATETIME))

SELECT 
			c.ClientId AS [ClientId],
            p.[firstname] + ' ' +  p.[lastname] AS [ClientName],
			c.Created AS [Created],
			isnull(u.[Name], 'Not Provided') AS [StatusName],
			p.SSN AS [SSN],
			case when 
				c.currentclientstatusid not in (15,17,18) 
			then 1 
			else 0 
			end AS [Active],
			co.[CompanyId] AS [SAId],
			co.[Name] AS [SA],
			a.[AgencyId] AS [AgencyId],
            a.[Name] AS [Agency],
			CASE WHEN p.Street Is Null	THEN ''	ELSE p.Street	+ ' ' End +
			CASE WHEN p.Street2	Is Null THEN '' ELSE p.Street2  + ' ' End +
			CASE WHEN p.City Is Null	THEN ''	ELSE p.City		+ ' ' End + 
			CASE WHEN s.[Abbreviation] Is Null THEN '' ELSE s.[Abbreviation] + ' ' End +
			CASE WHEN p.ZipCode Is Null THEN '' ELSE p.ZipCode  + ' ' End AS [ClientAddress],
			p.Street AS [Street],
			p.Street2 AS [Street2],
			p.City AS [City],
			s.[StateId] AS [StateId],
			s.[Abbreviation] AS [State],
			p.ZipCode AS [ZipCode],
			c.AccountNumber AS [AccountNumber]
FROM tblClient c
INNER JOIN tblperson p ON c.ClientId = p.ClientId
INNER JOIN tblCompany co ON co.CompanyID = c.CompanyID
INNER JOIN tblAgency a ON a.AgencyID = c.AgencyID
LEFT JOIN tblClientStatus u ON c.CurrentClientStatusId = u.ClientStatusId
LEFT JOIN tblState s ON p.StateID = s.StateId
WHERE
p.Relationship = 'Prime'
AND co.CompanyId = @CompanyId
AND (@StateId IS NULL OR (s.StateId = @StateId))
AND (@AgencyId IS NULL OR (a.AgencyId = @AgencyId))
Order By 
s.[Abbreviation],
co.[Name],
a.[Name],
p.[firstname]

END
GO
/****** Object:  StoredProcedure [dbo].[stp_UserAgency]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_UserAgency]
(
	@UserID int
)
as
begin


if exists (select 1 from tblUser where UserID = @UserID and AgencyID = -99) begin
	select -99, 'ALL', 'ALL'
end
else if exists (select 1 from tblUserAgencyAccess where UserID = @UserID) begin
	select a.AgencyID, a.Code, a.Name
	from tblUserAgencyAccess u
	join tblAgency a on a.AgencyID = u.AgencyID
	where u.UserID = @UserID
	order by a.Name
end
else begin
	select '-1', 'None', 'None'
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_ChargebackVoidReasons]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_ChargebackVoidReasons 8, 2008

CREATE procedure [dbo].[stp_ChargebackVoidReasons]
(
	@month int, 
	@year int
)
as

declare @deposits table (registerid int)

-- Get first deposits for clients created in @month/@year
insert @deposits 
select min(r.registerid)
from tblregister r
join tblclient c on c.clientid = r.clientid
	and c.agencyid in (838,840,842,843)
	and month(c.created) = @month and year(c.created) = @year
where r.entrytypeid = 3
group by r.clientid


SELECT distinct 
	cp.CommChargebackID,
	et.displayName AS FeeType, 
	case when (vr.Reason is null or vr.Reason = '') then 'Not Specified' else vr.Reason end [VoidReason],
	cp.Amount
into
	#temp
FROM
	tblCommChargeback AS cp LEFT OUTER JOIN
	tblRegisterPayment AS rp ON rp.RegisterPaymentId = cp.RegisterPaymentID join
	tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
		and rpd.depositregisterid in (select registerid from @deposits) LEFT OUTER JOIN
	tblRegister AS r ON r.RegisterId = rp.FeeRegisterId LEFT OUTER JOIN
	tblClient AS c ON c.ClientID = r.ClientId LEFT OUTER JOIN
	tblEntryType AS et ON et.EntryTypeId = r.EntryTypeId LEFT OUTER JOIN
	tblAgency AS a ON a.AgencyID = c.AgencyID LEFT OUTER JOIN
	tblCompany AS comp ON comp.CompanyID = c.CompanyID INNER JOIN
	tblCommBatch AS cb ON cb.CommBatchID = cp.CommBatchID INNER JOIN
	tblCommStruct AS cs ON cs.CommStructID = cp.CommStructID INNER JOIN
	tblPerson AS p ON c.PrimaryPersonID = p.PersonID LEFT OUTER JOIN
	(
		SELECT 
			Value, 
			Amount, 
			Reason 
		FROM 
			tblTransactionAudit 
		WHERE 
			(Type = N'register')
	) AS vr ON r.RegisterId = vr.Value LEFT OUTER JOIN
	tblBouncedReasons ON r.BouncedReason = tblBouncedReasons.BouncedID
WHERE     
	(cp.CommBatchID IS NOT NULL)
	and month(cb.batchdate) = @month
	and year(cb.batchdate) = @year
	and a.agencyid in (838,840,842,843)
	and cs.commrecid in (5,17)


select FeeType, VoidReason, sum(Amount)
from #temp
group by FeeType, VoidReason
order by FeeType, VoidReason


drop table #temp
GO
/****** Object:  StoredProcedure [dbo].[stp_VerificationCallLog_Insert]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_VerificationCallLog_Insert]
@VerificationCallId int,
@QuestionNo int,
@AnsweredNo bit
AS
Begin
 Insert Into tblVerificationCallLog (VerificationCallId, QuestionNo, AnsweredNo)
 Values (@VerificationCallId, @QuestionNo, @AnsweredNo)
 
 Select scope_identity()
End
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateAllClientsAccountWithCurrentCreditorInstanceInfo]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_UpdateAllClientsAccountWithCurrentCreditorInstanceInfo]
as
BEGIN
	set NOCOUNT ON
	declare @tblCredData table(RowID int not null identity(1,1) primary key,accountid int,clientid int,CurrentCredInstID int,CurrentCredInstCreatedDate datetime,AcctAmt money
	,LastCredInstCreatedID int,LastCredInstAmt money,LastCredInstCreatedDate datetime,LastCredInstCreatedUserInfo varchar(max),LastCredInstCreatedUserID int, AmtDifference money)
	declare @i int
	declare @max int

	insert into @tblCredData
	select accountid,clientid,currentcreditorinstanceid[CurrentCredInstID],[CurrentCredInstCreatedDate],AcctAmt,creditorinstanceid[LastCredInstCreatedID]
	,[LastCredInstAmt],created[LastCredInstCreatedDate],LastCredInstCreatedUserInfo,[LastCredInstCreatedUserID],[AmtDifference] = AcctAmt - LastCredInstAmt
	from (select a.clientid,a.accountid, a.currentamount[AcctAmt], a.currentcreditorinstanceid, ci.amount[LastCredInstAmt]
	, ci.creditorinstanceid, ci.created, ccur.created [CurrentCredInstCreatedDate]
	, u.firstname + ' ' + u.lastname + '(' + ug.name + ')' [LastCredInstCreatedUserInfo],ci.createdby[LastCredInstCreatedUserID]
	, row_number () over(partition by ci.accountid order by ci.created desc)[credRow] 
	from tblaccount a inner join tblcreditorinstance ci on ci.accountid = a.accountid 
		inner join tblcreditorinstance ccur on ccur.creditorinstanceid = a.currentcreditorinstanceid
	inner join tbluser u on u.userid = ci.createdby
	inner join tblusergroup ug on u.usergroupid=ug.usergroupid 
	where  not AccountStatusID in (54,55) and year(a.created) > 2006) as credData
	where AcctAmt - LastCredInstAmt <> 0 and [credRow] = 1 
	order by created desc
	/*use to check
	select * from tblaccount where accountid = 471061
	select * from tblcreditorinstance where accountid = 471061 order by created desc
	*/

	select @i = min(RowID) from @tblCredData
	select @max = max(RowID) from @tblCredData

	print 'Total rows : ' + cast(@max as varchar)

	while @i <= @max 
		begin 
			declare @msg varchar(max)
			declare @accountid int  
			declare @clientid int 
			declare @CurrentCredInstID int   
			declare @LastCredInstCreatedID int   
			declare @AcctAmt money
			declare @LastCredInstAmt money
			declare @LastCreatedUserInfo varchar(max)
			declare @LastCreatedUserID int

			select @accountid=accountid,@clientid=clientid,@CurrentCredInstID=CurrentCredInstID
				,@LastCredInstCreatedID=LastCredInstCreatedID,@AcctAmt=AcctAmt,@LastCredInstAmt=LastCredInstAmt 
				,@LastCreatedUserInfo=LastCredInstCreatedUserInfo,@LastCreatedUserID=LastCredInstCreatedUserID
			from @tblCredData where RowID = @i 
			--do some stuff    
			set @msg = 'Updating ClientID/AccountID ' + cast(@clientid as varchar) + '/' + cast(@accountid as varchar) + ' : '
			set @msg = @msg + '  Changing CurrentCreditorInstanceID from ' + cast(@CurrentCredInstID as varchar) + ' to ' + cast(@LastCredInstCreatedID as varchar)
			set @msg = @msg + '  Changing Amount from ' + cast(@AcctAmt as varchar) + ' to ' + cast(@LastCredInstAmt as varchar)
			set @msg = @msg + '  Created By ' + @LastCreatedUserInfo 
			
			update tblAccount 
			set CurrentCreditorInstanceID = @LastCredInstCreatedID, CurrentAmount = @LastCredInstAmt,LastModified  = getdate(), LastModifiedBy = @LastCreatedUserID
			where (accountid = @accountid)
			
			print (@msg)
			set @i = @i + 1
		end
	set NOCOUNT OFF

END
GO
/****** Object:  StoredProcedure [dbo].[stp_RefundReport]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 03/24/2009
-- Description:	Refund report
-- =============================================
CREATE PROCEDURE [dbo].[stp_RefundReport] 
	-- Add the parameters for the stored procedure here
	@StartDate VARCHAR(50) = '01/01/1900', 
	@EndDate VARCHAR(50) = '12/31/2050',
	@AccountNumber INT = 0
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @amount1 MONEY
	DECLARE @amount2 MONEY
	DECLARE @NewPosBalance MONEY
	DECLARE @SDate SMALLDATETIME
	DECLARE @EDate SMALLDATETIME

	DECLARE @Month NVARCHAR(50)
	DECLARE @Date SMALLDATETIME
	DECLARE @AcctNum INT
	DECLARE @ClientName NVARCHAR(150)
	DECLARE @LawFirm NVARCHAR(150)
	DECLARE @Agent NVARCHAR(150)
	DECLARE @Reason NVARCHAR(150)
	DECLARE @Refund NVARCHAR(50)
	DECLARE @CSR NVARCHAR(2)
	DECLARE @RetainerFeesPaid MONEY
	DECLARE @MaintenanceFeesPaid MONEY
	DECLARE @SettlementFeesPaid MONEY
	DECLARE @TotalPotentalRefund MONEY
	DECLARE @RefundAmount MONEY
	DECLARE @PosBalance MONEY

	SET @SDate = CONVERT(SMALLDATETIME, @StartDate)
	SET @EDate = CONVERT(SMALLDATETIME, @EndDate) 

DECLARE @tblCancelled AS TABLE
(
	[Month] NVARCHAR(50),
	[Date] SMALLDATETIME,
	[AcctNum] INT,
	[ClientName] NVARCHAR(150),
	[LawFirm] NVARCHAR(150),
	[Agent] NVARCHAR(150),
	[Reason] NVARCHAR(150),
	[Refund] NVARCHAR(50),
	[CSR] NVARCHAR(2),
	[RetainerFeesPaid] DECIMAL(18, 2),
	[MaintenanceFeesPaid] MONEY,
	[SettlementFeesPaid] MONEY,
	[TotalPotentalRefund] DECIMAL(18, 2),
	[RefundAmount] MONEY,
	[PosBalance] DECIMAL(18, 2)
)
	
INSERT INTO @tblCancelled

SELECT DATENAME(MONTH, rg.created) [Month],
rg.created [Date], 
cl.AccountNumber [Account Number],
p.firstname + ' ' + p.lastname [Client Name],
co.ShortCoName [Law Firm],
ag.Name [Agent],
CASE WHEN us.username IS NOT NULL THEN (SELECT TOP 1 rde.Description FROM tblreasons res
JOIN tblreasonsdesc rde ON rde.ReasonsDescID = res.ReasonsDescID
WHERE res.value = cl.clientid) ELSE ' ' END [Reason],
et.DisplayName [Refund],
UPPER(LEFT(us.UserName, 2)) [CSR],
CASE WHEN us.username IS NOT NULL THEN (SELECT CAST(SUM(rp.Amount) AS MONEY) FROM tblregister r
JOIN tblclient cl ON cl.clientid = r.clientid
JOIN tblregisterpayment rp on rp.feeregisterid = r.registerid
WHERE rp.voided IS NOT NULL
AND r.clientid = rg.clientid
AND entrytypeid IN (2, 42)) ELSE 0 END [Retainer Fees Paid],
CASE WHEN us.username IS NOT NULL THEN (SELECT CAST(SUM(rp.Amount) AS MONEY) FROM tblregister r
JOIN tblclient cl ON cl.clientid = r.clientid
JOIN tblregisterpayment rp on rp.feeregisterid = r.registerid
WHERE rp.voided IS NOT NULL
AND r.clientid = rg.clientid
AND entrytypeid IN (1)) ELSE 0 END [Maintenance Fees Paid],
CASE WHEN us.username IS NOT NULL THEN (SELECT CAST(SUM(rp.Amount) AS MONEY) FROM tblregister r
JOIN tblclient cl ON cl.clientid = r.clientid
JOIN tblregisterpayment rp on rp.feeregisterid = r.registerid
WHERE rp.voided IS NOT NULL
AND r.clientid = rg.clientid
AND entrytypeid IN (4, 18)) ELSE 0 END [Settlement Fees Paid],
CASE WHEN us.username IS NOT NULL THEN (SELECT CAST(SUM(rp.Amount) AS MONEY) FROM tblregister r
JOIN tblclient cl ON cl.clientid = r.clientid
JOIN tblregisterpayment rp on rp.feeregisterid = r.registerid
WHERE rp.voided IS NOT NULL
AND r.clientid = rg.clientid
AND entrytypeid NOT IN (3)) ELSE 0 END [Total Potental Refund],
(rg.amount * -1)  [Refund Amount],
CASE WHEN us.username IS NOT NULL THEN((SELECT CAST(SUM(r.amount) AS MONEY) FROM tblregister r
WHERE r.entrytypeid IN (3)
AND bounce IS NULL
AND r.clientid = rg.clientid) - (SELECT CAST(SUM(r.amount) AS MONEY) FROM tblregister r
WHERE r.entrytypeid NOT IN (3, 21)
AND r.clientid = rg.clientid)) ELSE 0 END [Positive Balance]
FROM tblRoadMap rm
JOIN tblClient cl ON cl.clientid = rm.clientid
JOIN tblperson p ON p.clientid = cl.clientid
	AND p.Relationship = 'Prime'
JOIN tblclientstatus cs ON cs.ClientStatusID = rm.ClientStatusID
JOIN tblcompany co ON co.companyid = cl.CompanyID
JOIN tblagency ag ON ag.AgencyID = cl.agencyid
LEFT JOIN tblregister rg ON rg.ClientId = cl.ClientID
JOIN tblentrytype et ON et.EntryTypeId = rg.EntryTypeId
JOIN tblUser us ON us.userid = rm.Createdby
WHERE rm.clientstatusid IN (17)
AND rm.created BETWEEN @SDate AND @EDate
AND rg.entrytypeid IN (21, 50)
ORDER BY rm.clientid

DECLARE c_cancelled CURSOR FOR SELECT * FROM @tblCancelled
OPEN c_cancelled

FETCH NEXT FROM c_cancelled INTO @Month, @Date, @AcctNum, @ClientName, @LawFirm, @Agent, @Reason, @Refund, @CSR, @RetainerFeesPaid, @MaintenanceFeesPaid, @SettlementFeesPaid, @TotalPotentalRefund, @RefundAmount, @PosBalance
WHILE @@FETCH_STATUS = 0
	BEGIN
		
			SELECT @amount1 = SUM(r.amount) FROM tblregister r
			INNER JOIN tblClient c ON c.clientid = r.clientid
			WHERE r.entrytypeid IN (3)
			AND bounce IS NULL
			AND c.AccountNumber = @AcctNum  

			SELECT @amount2 = SUM(r.amount) * -1 FROM tblregister r
			INNER JOIN tblClient c ON c.clientid = r.clientid
			WHERE r.entrytypeid NOT IN (3, 21)
			AND c.AccountNumber = @AcctNum

			SET @NewPosBalance = @amount1 - @amount2

			IF @NewPosBalance > 0
				BEGIN
					IF @RefundAmount <= @NewPosBalance
						BEGIN
							SET @RefundAmount = 0
						END
					IF @RefundAmount > @NewPosBalance
						BEGIN
							SET @RefundAmount = @RefundAmount - @NewPosBalance
						END
					UPDATE @tblCancelled SET PosBalance = @NewPosBalance, RefundAmount = @RefundAmount WHERE AcctNum = @AcctNum
				END
			IF @NewPosBalance <= 0 
				BEGIN
					UPDATE @tblCancelled SET PosBalance = 0 WHERE AcctNum = @AcctNum
				END
			IF @SettlementFeesPaid IS NULL
				BEGIN
					UPDATE @tblCancelled SET SettlementFeesPaid = 0.00 WHERE AcctNum = @AcctNum
				END
			IF @MaintenanceFeesPaid IS NULL
				BEGIN
					UPDATE @tblCancelled SET MaintenanceFeesPaid = 0.00 WHERE AcctNum = @AcctNum
				END
			IF @RetainerFeesPaid IS NULL
				BEGIN
					UPDATE @tblCancelled SET RetainerFeesPaid = 0.00 WHERE AcctNum = @AcctNum
				END
			IF @TotalPotentalRefund IS NULL
				BEGIN
					UPDATE @tblCancelled SET TotalPotentalRefund = 0.00 WHERE AcctNum = @AcctNum
				END
			IF @RefundAmount <= @NewPosBalance
				BEGIN
					UPDATE @tblCancelled SET Refund = 'NO' WHERE AcctNum = @AcctNum
				END
			IF	@RefundAmount > @NewPosBalance
				BEGIN
					UPDATE @tblCancelled SET Refund = 'YES' WHERE AcctNum = @AcctNum
				END

				SET @NewPosBalance = 0
				SET @RetainerFeesPaid  = 0
				SET @MaintenanceFeesPaid  = 0
				SET @SettlementFeesPaid  = 0
				SET @TotalPotentalRefund  = 0
				SET @RefundAmount  = 0
				SET @PosBalance  = 0
				SET @amount1 = 0
				SET @amount2 = 0

		FETCH NEXT FROM c_cancelled INTO @Month, @Date, @AcctNum, @ClientName, @LawFirm, @Agent, @Reason, @Refund, @CSR, @RetainerFeesPaid, @MaintenanceFeesPaid, @SettlementFeesPaid, @TotalPotentalRefund, @RefundAmount, @PosBalance
	END
CLOSE c_cancelled
DEALLOCATE c_cancelled

SELECT * FROM @tblCancelled
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMatterNotesForCommunication]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <01 - 29 January 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Returns the Matter Notes for Communication        
*/
CREATE procedure [dbo].[stp_GetMatterNotesForCommunication]
	(
		@clientid int,
		@relationid int = null,
		@relationtypeid int = null,
		@orderby varchar(50)='u.lastname asc',
		@clientonly bit=0
	)
as
declare @relationcriteria varchar(1000)

if @clientonly=1 begin
	set @relationcriteria = ' and not exists (select noterelationid from tblnoterelation nnr where nnr.noteid=n.noteid and not nnr.relationtypeid=1)'
end else begin
	set @relationcriteria = ''
end

declare @sql varchar(5000)

set @sql='
	select
		n.noteid,
		n.subject,
		n.value,
		u.firstname + '' '' + u.lastname + ''</br>'' + ug.Name as [by], 
		u.lastname as bylastname, 
		n.created as [date],
		ut.name as usertype,
		(case
			when not rc.color is null then rc.color
			when not uc.color is null then uc.color			
			when not gc.color is null then gc.color
			when not tc.color is null then tc.color
		end ) as color,
		(case
			when not rc.textcolor is null then rc.textcolor
			when not uc.textcolor is null then uc.textcolor			
			when not gc.textcolor is null then gc.textcolor
			when not tc.textcolor is null then tc.textcolor
		end ) as textcolor, 
		nr.relationtypeid
	from 
		tblnote n left outer join
		tbluser u on n.createdby=u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype=''User Type'' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype=''User Group'' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype=''User'' left outer join
		(
			select
				nn.noteid,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblnoterelation nr 
				inner join tblnote nn on nr.noteid=nn.noteid
				inner join tblrulecommcolor rcc on rcc.entityid=nr.relationtypeid
			where
				nn.clientid=' + convert(varchar,@clientid) + '
				and rcc.entitytype=''Relation Type''
			group by
				nn.noteid
		) rc on rc.noteid=n.noteid
		inner join tblusergroup as ug on ug.usergroupid = n.usergroupid
	'

--if not @relationid is null  
	set @sql=@sql + 
		' left outer join tblnoterelation nr on n.noteid=nr.noteid'

set @sql = @sql +
	' where 
		clientid=' + convert(varchar,@clientid) + 
		@relationcriteria 

if not @relationid is null begin
	set @sql = @sql + 
		' and nr.relationtypeid=' + convert(varchar,@relationtypeid) + '
		and nr.relationid=' + convert(varchar,@relationid)
end

set @sql = @sql + 
	' order by ' + 
		@orderby

exec(@sql)

select 
	n.noteid,
	nr.relationtypeid,
	nr.relationid,
	rt.name as relationtypename,
	dbo.getentitydisplay(rt.relationtypeid,relationid) as relationname,
	rt.iconurl,
	rt.navigateurl
from
	tblnoterelation nr inner join
	tblnote n on nr.noteid=n.noteid inner join
	tblrelationtype rt on nr.relationtypeid=rt.relationtypeid
where 
	clientid=@clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationDataPaging]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NegotiationDataPaging]
(
	@EntityID int,
	@DisplayColumns  varchar(max),
	@OrderBy  varchar(max),
	@PageNum int,
	@PageSize int,
	@FilterClause varchar(max) = NULL
)
as

BEGIN

	declare @start as int set @start = (@PageNum-1)*@PageSize
	declare @end as int set @end = (@PageNum*@PageSize)
	declare @ssql varchar(max)

	if @start = 0
		begin
			set @start=1
		END
	else
		begin
			set @start=@start+1
		end

	set @ssql = 'SELECT Distinct * '
	set @ssql = @ssql + 'FROM '
	set @ssql = @ssql + '	( '
	set @ssql = @ssql + '		SELECT '
	set @ssql = @ssql + '			row_number() OVER (ORDER BY lastoffer desc, p.FirstName, p.LastName) as RowNum, '
	set @ssql = @ssql + '			c.ClientID,  '
	set @ssql = @ssql + '			a.AccountID,  '
	set @ssql = @ssql + '			p.SSN,  '
	set @ssql = @ssql + '			p.FirstName + '' '' + p.LastName AS ApplicantFullName,  '
	set @ssql = @ssql + '			p.LastName AS ApplicantLastName,  '
	set @ssql = @ssql + '			p.FirstName AS ApplicantFirstName,  '
	set @ssql = @ssql + '			ISNULL(s.Abbreviation, ''Non-US'') AS ApplicantState,  '
	set @ssql = @ssql + '			p.City AS ApplicantCity, '
	set @ssql = @ssql + '			p.ZipCode AS ApplicantZipCode,  '
	set @ssql = @ssql + '			c.AccountNumber AS SDAAccount, '
	set @ssql = @ssql + '			FundsAvailable,  '
	set @ssql = @ssql + '			ISNULL(cr2.Name, '''') AS OriginalCreditor,  '
	set @ssql = @ssql + '			cr.Name as CurrentCreditor,  '
	set @ssql = @ssql + '			ISNULL(cs.Abbreviation, ''Non-US'') AS CurrentCreditorState,  '
	set @ssql = @ssql + '			CONVERT(varchar(20), ci.AccountNumber) AS CurrentCreditorAccountNumber, '
	set @ssql = @ssql + '			  (	SELECT MIN(CurrentAmount) AS CurrentAmount '
	set @ssql = @ssql + '				FROM dbo.tblAccount '
	set @ssql = @ssql + '				WHERE ClientID = c.ClientID  '
	set @ssql = @ssql + '					AND AccountStatusID NOT IN (54, 55)) AS LeastDebtAmount,  '
	set @ssql = @ssql + '			a.CurrentAmount, '
	set @ssql = @ssql + '			isnull(ad.description,'''') as AccountStatus,  '
	set @ssql = @ssql + '			DATEDIFF(day, a.Created, GETDATE()) AS AccountAge,  '
	set @ssql = @ssql + '			DATEDIFF(day, ISNULL(YEAR(p.DateOfBirth), YEAR(GETDATE())), YEAR(GETDATE())) AS ClientAge, '
	set @ssql = @ssql + '			nlo.LastOffer,       '
	set @ssql = @ssql + '			nlo.OfferDirection  '
	set @ssql = @ssql + '		FROM '
	set @ssql = @ssql + '			tblClient AS c  '
	set @ssql = @ssql + '		INNER JOIN  '
	set @ssql = @ssql + '		( '
	set @ssql = @ssql + '			select  '
	set @ssql = @ssql + '				clf.clientid, '
	set @ssql = @ssql + '				isnull(clf.SDABalance,0) - isnull(clf.PFOBalance,0) - sum(case when rf.entrytypeid = 3 and rf.Hold > GETDATE() then isnull(rf.amount,0) else 0 end) - sum(case when rf.entrytypeid = 43 and rf.Hold > GETDATE() then isnull(rf.amount,0) else 0 end) as [FundsAvailable]  '
	set @ssql = @ssql + '			FROM  '
	set @ssql = @ssql + '				tblclient as clf  '
	set @ssql = @ssql + '			left outer join   '
	set @ssql = @ssql + '				tblRegister as rf on clf.clientid = rf.clientid  '
	set @ssql = @ssql + '			WHERE  '
	set @ssql = @ssql + '				rf.Void IS NULL '
	set @ssql = @ssql + '				AND rf.Bounce IS NULL '
	set @ssql = @ssql + '				AND rf.Clear IS NULL '
	set @ssql = @ssql + '			group by  '
	set @ssql = @ssql + '				clf.clientid '
	set @ssql = @ssql + '				,clf.SDABalance '
	set @ssql = @ssql + '				, clf.PFOBalance '
	set @ssql = @ssql + '		) as funds on c.clientid = funds.clientid   '
	set @ssql = @ssql + '		inner join '
	set @ssql = @ssql + '			tblPerson p on p.personid = c.primarypersonid '
	set @ssql = @ssql + '		inner join '
	set @ssql = @ssql + '			tblAccount a on a.ClientID = c.ClientID AND (a.AccountStatusID is null or a.AccountStatusID NOT IN (54, 55))  '
	set @ssql = @ssql + '		inner join  '
	set @ssql = @ssql + '			tblAccountEntityXref ax on ax.accountid = a.accountid and ax.entityid = ' + cast(@EntityID as varchar)
	set @ssql = @ssql + '		left join '
	set @ssql = @ssql + '			tblAccountStatus ad on ad.AccountStatusID = a.AccountStatusID '
	set @ssql = @ssql + '		inner join  '
	set @ssql = @ssql + '			tblCreditorInstance ci on ci.CreditorInstanceID = a.CurrentCreditorInstanceID '
	set @ssql = @ssql + '		inner join  '
	set @ssql = @ssql + '			tblCreditor cr on cr.CreditorID = ci.CreditorID '
	set @ssql = @ssql + '		left outer join '
	set @ssql = @ssql + '			tblCreditor cr2 on ci.ForCreditorID = cr2.CreditorID  '
	set @ssql = @ssql + '		LEFT OUTER JOIN '
	set @ssql = @ssql + '			dbo.tblState AS s ON p.StateID = s.StateID  '
	set @ssql = @ssql + '		LEFT OUTER JOIN  '
	set @ssql = @ssql + '			dbo.tblState AS cs ON cr.StateID = cs.StateID  '
	set @ssql = @ssql + '		LEFT OUTER JOIN '
	set @ssql = @ssql + '			vw_NegotiationLastOffer nlo on nlo.AccountID = a.AccountID '
	if (@FilterClause IS NULL)
		BEGIN
			set @ssql = @ssql + '		WHERE ' 
		END
	ELSE IF (@FilterClause = '')
		BEGIN
			set @ssql = @ssql + '		WHERE  ' 
		END
	ELSE
		BEGIN
			set @ssql = @ssql + '		WHERE ' +  @FilterClause + ' AND '
		END	
	set @ssql = @ssql + '			c.CurrentClientStatusID not in (15, 16, 17, 18)  '
	set @ssql = @ssql + '	) as drv '
	set @ssql = @ssql + 'WHERE RowNum between ' + cast(@start as varchar) + ' and ' + cast(@end as varchar) + ' '
	set @ssql = @ssql + 'ORDER BY lastoffer desc, ApplicantFirstName, ApplicantLastName '

	exec(@ssql)
END


GRANT EXEC ON stp_NegotiationDataPaging TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_UpdateRemoveDups]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_UpdateRemoveDups]
/*
	(
		@parameter1 int = 5,
		@parameter2 datatype OUTPUT
	)

*/
AS
declare @tblsett table (settid numeric, count float)

insert into @tblsett
select settlementid, count(*) 
from tblsettlementtrackerimports 
group by settlementid
having count(*) > 1

declare @tbldups table(RowNum int,settlementid numeric, trackerimportid numeric)
declare @tblmoredup table (clientacctnumber numeric,name varchar(200),currentcreditor varchar(500),creditoraccountnum varchar(50), rowCnt int)
declare @tbltids table (RowNum int,clientacctnumber numeric,name varchar(200),currentcreditor  varchar(200),creditoraccountnum  varchar(200),rowCnt int,trackerimportid numeric)

insert into @tbldups
select row_number () over(PARTITION BY settlementid order by trackerimportid desc)[RowNum] ,settlementid,trackerimportid from tblsettlementtrackerimports
where settlementid in (select settid from @tblsett)

delete from tblsettlementtrackerimports where trackerimportid in (select trackerimportid from @tbldups where rownum <> 1)

insert into @tblmoredup
select clientacctnumber, name, currentcreditor, creditoraccountnum, count(*)
from tblsettlementtrackerimports sti
group by clientacctnumber, name, currentcreditor, creditoraccountnum
having count(*) > 1
order by clientacctnumber, name, currentcreditor, creditoraccountnum

insert into @tbltids
select row_number () over(PARTITION BY sti.currentcreditor order by sti.trackerimportid desc)[RowNum],md.*,sti.trackerimportid
from tblsettlementtrackerimports sti 
inner join @tblmoredup md on md.clientacctnumber = sti.clientacctnumber and md.currentcreditor = sti.currentcreditor
and md.creditoraccountnum = sti.creditoraccountnum

delete from tblsettlementtrackerimports where trackerimportid in (select trackerimportid from  @tbltids where rownum <> 1)


declare @tblsettids table (settid numeric)

insert into @tblsettids 
select settlementid from tblsettlements with(nolock) where active = 0 and status = 'a'

delete from tblSettlementTrackerImports where settlementid in(select settid from @tblsettids )
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationAssignmentHeaderDelete]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
 Author: Bereket S. Data>
 Description: This stored Procedure delets Negotiation filter
*/

CREATE PROCEDURE [dbo].[stp_NegotiationAssignmentHeaderDelete]
AS
SET NOCOUNT ON

DELETE tblNegotiationAssignment
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_getLeadCoApplicants]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_getLeadCoApplicants]
(
	@applicantid int
)
as
BEGIN
	
	SELECT
		[Full name]
		,relationship 
		,[address]
		,city
		,[StateZip] = isnull(s.abbreviation,'') + '/' + isnull(zipcode,'')
		,ssn
		,dob
		,[Home] = case when homephone = '(   )    -    ' then '' else homephone end
		,[Bus] = case when busphone = '(   )    -    ' then '' else busphone end
		,[Cell] = case when cellphone = '(   )    -    ' then '' else cellphone end
		,[Fax] = case when faxnumber = '(   )    -    ' then '' else faxnumber end
		,email
	from 
		tblLeadCoApplicant [coapp]
		left outer join tblstate s on s.stateid = coapp.stateid
	where 
		leadapplicantid = @applicantid
END
GO
/****** Object:  StoredProcedure [dbo].[stp_UserCommRecs]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_UserCommRecs]
(
	@UserID int
)
as
begin


if exists (select 1 from tblUser where UserID = @UserID and CommRecID = -99) begin
	select -99, 'ALL', 'ALL'
end
else if exists (select 1 from tblUserCommRecAccess where UserID = @UserID) begin
	select r.CommRecID, r.Abbreviation, r.Display
	from tblUserCommRecAccess u
	join tblCommRec r on r.CommRecID = u.CommRecID
	where u.UserID = @UserID
	order by r.Display
end
else begin
	select '-1', 'None', 'None'
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationDataPaging_GetTotalRecords]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NegotiationDataPaging_GetTotalRecords]
(
@EntityID int,
@FilterClause varchar(max) = NULL
)
as
declare @ssql varchar(max)

set @ssql = 'SELECT count(distinct AccountID)'
set @ssql = @ssql + 'FROM '
set @ssql = @ssql + '	( '
set @ssql = @ssql + '		SELECT '
set @ssql = @ssql + '			row_number() OVER (ORDER BY lastoffer desc, p.FirstName, p.LastName) as RowNum, '
set @ssql = @ssql + '			c.ClientID,  '
set @ssql = @ssql + '			a.AccountID,  '
set @ssql = @ssql + '			p.SSN,  '
set @ssql = @ssql + '			p.FirstName + '' '' + p.LastName AS ApplicantFullName,  '
set @ssql = @ssql + '			p.LastName AS ApplicantLastName,  '
set @ssql = @ssql + '			p.FirstName AS ApplicantFirstName,  '
set @ssql = @ssql + '			ISNULL(s.Abbreviation, ''Non-US'') AS ApplicantState,  '
set @ssql = @ssql + '			p.City AS ApplicantCity, '
set @ssql = @ssql + '			p.ZipCode AS ApplicantZipCode,  '
set @ssql = @ssql + '			c.AccountNumber AS SDAAccount, '
set @ssql = @ssql + '			FundsAvailable,  '
set @ssql = @ssql + '			ISNULL(cr2.Name, '''') AS OriginalCreditor,  '
set @ssql = @ssql + '			cr.Name as CurrentCreditor,  '
set @ssql = @ssql + '			ISNULL(cs.Abbreviation, ''Non-US'') AS CurrentCreditorState,  '
set @ssql = @ssql + '			CONVERT(varchar(20), ci.AccountNumber) AS CurrentCreditorAccountNumber, '
set @ssql = @ssql + '			  (	SELECT MIN(CurrentAmount) AS CurrentAmount '
set @ssql = @ssql + '				FROM dbo.tblAccount '
set @ssql = @ssql + '				WHERE ClientID = c.ClientID  '
set @ssql = @ssql + '					AND AccountStatusID NOT IN (54, 55)) AS LeastDebtAmount,  '
set @ssql = @ssql + '			a.CurrentAmount, '
set @ssql = @ssql + '			isnull(ad.description,'''') as AccountStatus,  '
set @ssql = @ssql + '			DATEDIFF(day, a.Created, GETDATE()) AS AccountAge,  '
set @ssql = @ssql + '			DATEDIFF(day, ISNULL(YEAR(p.DateOfBirth), YEAR(GETDATE())), YEAR(GETDATE())) AS ClientAge, '
set @ssql = @ssql + '			nlo.LastOffer,       '
set @ssql = @ssql + '			nlo.OfferDirection  '
set @ssql = @ssql + '		FROM '
set @ssql = @ssql + '			tblClient AS c  '
set @ssql = @ssql + '		INNER JOIN  '
set @ssql = @ssql + '		( '
set @ssql = @ssql + '			select  '
set @ssql = @ssql + '				clf.clientid, '
set @ssql = @ssql + '				isnull(clf.SDABalance,0) - isnull(clf.PFOBalance,0) - sum(case when rf.entrytypeid = 3 and rf.Hold > GETDATE() then isnull(rf.amount,0) else 0 end) - sum(case when rf.entrytypeid = 43 and rf.Hold > GETDATE() then isnull(rf.amount,0) else 0 end) as [FundsAvailable]  '
set @ssql = @ssql + '			FROM  '
set @ssql = @ssql + '				tblclient as clf  '
set @ssql = @ssql + '			left outer join   '
set @ssql = @ssql + '				tblRegister as rf on clf.clientid = rf.clientid  '
set @ssql = @ssql + '			WHERE  '
set @ssql = @ssql + '				rf.Void IS NULL '
set @ssql = @ssql + '				AND rf.Bounce IS NULL '
set @ssql = @ssql + '				AND rf.Clear IS NULL '
set @ssql = @ssql + '			group by  '
set @ssql = @ssql + '				clf.clientid '
set @ssql = @ssql + '				,clf.SDABalance '
set @ssql = @ssql + '				, clf.PFOBalance '
set @ssql = @ssql + '		) as funds on c.clientid = funds.clientid   '
set @ssql = @ssql + '		inner join '
set @ssql = @ssql + '			tblPerson p on p.personid = c.primarypersonid '
set @ssql = @ssql + '		inner join '
set @ssql = @ssql + '			tblAccount a on a.ClientID = c.ClientID AND (a.AccountStatusID is null or a.AccountStatusID NOT IN (54, 55))  '
set @ssql = @ssql + '		inner join  '
set @ssql = @ssql + '			tblAccountEntityXref ax on ax.accountid = a.accountid and ax.entityid = ' + cast(@EntityID as varchar)
set @ssql = @ssql + '		left join '
set @ssql = @ssql + '			tblAccountStatus ad on ad.AccountStatusID = a.AccountStatusID '
set @ssql = @ssql + '		inner join  '
set @ssql = @ssql + '			tblCreditorInstance ci on ci.CreditorInstanceID = a.CurrentCreditorInstanceID '
set @ssql = @ssql + '		inner join  '
set @ssql = @ssql + '			tblCreditor cr on cr.CreditorID = ci.CreditorID '
set @ssql = @ssql + '		left outer join '
set @ssql = @ssql + '			tblCreditor cr2 on ci.ForCreditorID = cr2.CreditorID  '
set @ssql = @ssql + '		LEFT OUTER JOIN '
set @ssql = @ssql + '			dbo.tblState AS s ON p.StateID = s.StateID  '
set @ssql = @ssql + '		LEFT OUTER JOIN  '
set @ssql = @ssql + '			dbo.tblState AS cs ON cr.StateID = cs.StateID  '
set @ssql = @ssql + '		LEFT OUTER JOIN '
set @ssql = @ssql + '			vw_NegotiationLastOffer nlo on nlo.AccountID = a.AccountID '
if (@FilterClause IS NULL)
	BEGIN
		set @ssql = @ssql + '		WHERE ' 
	END
ELSE IF (@FilterClause = '')
	BEGIN
		set @ssql = @ssql + '		WHERE ' 
	END
ELSE
	BEGIN
		set @ssql = @ssql + '		WHERE ' +  @FilterClause + ' AND '
	END	
set @ssql = @ssql + '			c.CurrentClientStatusID not in (15, 16, 17, 18)  '
set @ssql = @ssql + '	) as drv '

exec(@ssql)

GRANT EXEC ON stp_NegotiationDataPaging_GetTotalRecords TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getPaidFeesTotal]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_settlementimport_reports_getPaidFeesTotal]
as
BEGIN
	select 
		[Team] = Team
		, [Fees] = convert(money,sum(settlementfees))
	from tblSettlementTrackerImports
	where canceldate is null
	group by team 
	order by team
END


GRANT EXEC ON stp_settlementimport_reports_getPaidFeesTotal TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetAgencyBatches_palmer]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetAgencyBatches_palmer]
	(
		@date1 datetime=null,
		@date2 datetime=null,
		@commrecid nvarchar(50),
		@range varchar(50)=''
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

exec ('
SELECT ' + @range + '
	batch.CommBatchID,
	batch.BatchDate,
	sum(batchtransfer.Amount) as Amount
FROM
	tblCommBatch batch inner join
	tblCommBatchTransfer batchtransfer on batch.CommBatchID = batchtransfer.CommBatchID inner join
	tblCommRec commrec on batchtransfer.CommRecID = commrec.CommRecID
WHERE
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) and
	batchtransfer.CommRecID in (' + @CommRecID + ') and
	(
		SELECT TOP 1
			CommStructID
		FROM
			tblCommPay
		WHERE
			CommBatchID = batch.CommBatchID
	) > 55
GROUP BY
	batch.CommBatchID,
	batch.BatchDate
ORDER BY
	batch.BatchDate DESC
')
GO
/****** Object:  StoredProcedure [dbo].[stp_GetFilteredCreditLiabilities]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetFilteredCreditLiabilities]
(
	@ReportID as integer
)
as
begin

	select l.*, s.firstname, c.*, st.stateid 
	from tblcreditliability l 
	join tblcreditsource s on s.creditsourceid = l.creditsourceid 
	join tblcreditliabilitylookup c on c.creditliabilitylookupid = l.creditliabilitylookupid
	left join tblstate st on st.abbreviation = c.statecode
	where l.reportid = @ReportID 
		and l.unpaidbalance > 0 
		and l.accounttype <> 'Mortgage' 
		and l.loantype not in (
			'Automobile',
			'AutoLease',
			'ReturnedCheck',
			'FamilySupport',
			'ChildSupport',
			'Business',
			'BusinessCreditCard',
			'ConventionalRealEstateMortgage',
			'Educational',
			'FHARealEstateMortgage',
			'GovernmentOverpayment',
			'GovernmentUnsecuredGuaranteeLoan',
			'HomeEquityLineOfCredit',
			'HomeImprovement',
			'HouseholdGoodsAndOtherCollateralAuto',
			'HouseholdGoodsSecured',
			'Lease',
			'MobileHome',
			'Mortgage',
			'PartiallySecured',
			'RealEstateJuniorLiens',
			'RealEstateMortgageWithoutOtherCollateral',
			'RealEstateSpecificTypeUnknown',
			'Secured',
			'SecuredHomeImprovement',
			'TimeSharedLoan'
			) 
	order by s.coborrower, s.firstname, c.creditorname

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientIntakeInfobak2]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <04 - 30 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Retrives the details for Client Intake PDF
*/
CREATE procedure [dbo].[stp_GetClientIntakeInfobak2]
@AccoutnID  bigint
As
Begin
select [FirmAccount#] = AccountID,  [Litigation Document]=LitigationDocument,
[Date Client Received Document]=convert(varchar,ClientDocReceivedDate,110), [How Documents Received]=HowDocReceived,
[Is plaintiff a collection company?]=case isplaintiffcompany when 1 then 'Yes' when 0 then 'No' else '' end,
[Do you dispute the amount?]=case isamountdispute when 1 then 'Yes' when 0 then 'No' else '' end,
[Amount]=Amount,
[Do you own any real estate?]=case isrealestateowner when 1 then 'Yes' when 0 then 'No' else '' end,
[is this your primary residence1?]=case isresidenceofpropertyone  when 1 then 'Yes' when 0 then 'No' else '' end,
[How long have you owned it1?]=durationownerdpropertyone,
[Approximate fair market value1]= Convert(varchar,Convert(money,AppMarketvalpropertyone ),1),--AppMarketvalpropertyone,
[What is the payoff1]=Convert(varchar,Convert(money,payoffpropertyone ),1),--payoffpropertyone,
[Any liens on property1]=case Liensonpropertyone when 1 then 'Yes' else 'No' end ,
[Mortgage Payment1]=Convert(varchar,Convert(money,Totalequitypropertyone ),1),--Totalequitypropertyone,
[Are you current on house payments1]=Housepaymentspropertyone,
[How many people live there1]=peoplelivepropertyone,
[Is this a rental property1?]=case IsRentalPropertyOne  when 1 then 'Yes' when 0 then 'No' else '' end,
[How much is the rent1?]=Convert(varchar,Convert(money,RentOnPropertyOne ),1),--RentOnPropertyOne,
[is this your primary residence2?]=case isresidenceofpropertytwo  when 1 then 'Yes' when 0 then 'No' else '' end,
[How long have you owned it2?]=durationownerdpropertytwo,
[Approximate fair market value2]=Convert(varchar,Convert(money,AppMarketvalpropertytwo ),1),--AppMarketvalpropertytwo,
[What is the payoff2]=Convert(varchar,Convert(money,payoffpropertytwo ),1),--payoffpropertytwo,
[Any liens on property2]=case Liensonpropertytwo when 1 then 'Yes' else 'No' end ,
[Mortgage Payment2]=Convert(varchar,Convert(money,Totalequitypropertytwo ),1),--Totalequitypropertytwo,
[Are you current on house payments2]=Housepaymentspropertytwo,
[How many people live there2]=peoplelivepropertytwo,
[Is this a rental property2?]=case IsRentalPropertyTwo  when 1 then 'Yes' when 0 then 'No' else '' end,
[How much is the rent2?]=Convert(varchar,Convert(money,RentOnPropertyTwo ),1),--RentOnPropertyTwo,
[Are you employed?]=case Iscurrentlyworking when 1 then 'Yes' when 0 then 'No' else '' end,
[Are you self employed?]=case IsSelfEmployed when 1 then 'Yes' when 0 then 'No' else '' end,
[Employer/Company]=employername,
[Length of the current employment]= cast(cast(currentemployerduration /12 as int) as varchar) +' years ' + cast(cast(currentemployerduration %12 as int) as varchar)+' months',
[Take home pay]=Convert(varchar,Convert(money,takehomepay ),1),--takehomepay,
[Per]=per,
[Any other wage garnishments]=otherwage,
[Other sources of income]=otherincomesource,
[Receiving any type of Aid?]=case isreceivingaid when 1 then 'Yes' when 0 then 'No' else '' end,
[Type of Aid?]=typeofaid,

--[Name on any account over $500?]=case Anyaccount when 1 then 'Yes' when 0 then 'No' else '' end,
[Do you have bank accounts?]=case haveBankAccs when 1 then 'Yes' when 0 then 'No' else '' end,
[Name of the bank1]=bankaccone,
[Source of money deposited in account1]=BankAmtsourceaccone,
[Approximate balance in account1]=Convert(varchar,Convert(money,AppBalanceaccone ),1),--AppBalanceaccone,
[Account Type1]=case AccTypeOne when 1 then 'Checking' when 2 then 'Saving' when 3 then ' Others' end,
[Name of the bank2]=bankacctwo,
[Source of money deposited in account2]=BankAmtsourceacctwo,
[Approximate balance in account2]=Convert(varchar,Convert(money,AppBalanceacctwo ),1),--AppBalanceacctwo,
[Account Type2]=case AccTypeTwo when 1 then 'Checking' when 2 then 'Saving' when 3 then ' Others' end,

--[At what bank?]=bankaccthree,
--[Source of money deposited in account]=BankAmtsourceaccthree,
--[Approximate balance in account]=AppBalanceaccthree,
[Do you have other assets?]=case haveOtherAssets when 1 then 'Yes' when 0 then 'No' else '' end,
[Assets]=Assets ,
[Client declined additional legal services?]=case declinedlegalservices when 1 then 'Yes' when 0 then 'No' else '' end,
[Client sent to local counsel?]=case sentlocalcounsel when 1 then 'Yes' when 0 then 'No' else '' end,
[Note]=notes,
[Verified]=case isverified when 1 then 'Yes' when 0 then 'No' else '' end,
[VerifiedDate]=verifieddate,
[VerifiedBy]=(select FirstName +' '+isnull(lastname,'') from tbluser where userid=VerifiedBy),
[LegalServicesClient]=(select FirstName +' '+isnull(lastname,'') from tbluser where userid=LegalServicesClientID),
 case [FeePaidBy] when -1 then 'By Client' 
else (select [name] from tblCompany  where companyid=[FeePaidBy])
end  as [FeePaid],
Phone=[Phone],
Levies1=[Levies1],
Levies2=[Levies2],
IReceived =Convert(varchar,Convert(money,[IReceived] ),1),
WageVal, TypeOfAidPension, TypeOfAidUnemp, TypeOfAidRetire, 
AmtReceivedPension =Convert(varchar,Convert(money,AmtReceivedPension ),1),
AmtReceivedUnemp =Convert(varchar,Convert(money,AmtReceivedUnemp ),1), 
AmtReceivedRetire =Convert(varchar,Convert(money,AmtReceivedRetire ),1)

from tblclientintakeform where accountid=@AccoutnID  
End
GO
/****** Object:  StoredProcedure [dbo].[stp_ChargebackVoidReasonsNewClientsInitialDrafts]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_ChargebackVoidReasonsNewClientsInitialDrafts 8, 2008

CREATE procedure [dbo].[stp_ChargebackVoidReasonsNewClientsInitialDrafts]
(
	@month int, 
	@year int
)
as

declare @deposits table (registerid int)

-- Get first deposits for clients created in @month/@year
insert @deposits 
select min(r.registerid)
from tblregister r
join tblclient c on c.clientid = r.clientid
	and c.agencyid in (838,840,842,843)
	and month(c.created) = @month and year(c.created) = @year
where r.entrytypeid = 3
group by r.clientid


SELECT distinct 
	cp.CommChargebackID,
	et.displayName AS FeeType, 
	case when (vr.Reason is null or vr.Reason = '') then 'Not Specified' else vr.Reason end [VoidReason],
	cp.Amount
into
	#temp
FROM
	tblCommChargeback AS cp LEFT OUTER JOIN
	tblRegisterPayment AS rp ON rp.RegisterPaymentId = cp.RegisterPaymentID join
	tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
		and rpd.depositregisterid in (select registerid from @deposits) LEFT OUTER JOIN
	tblRegister AS r ON r.RegisterId = rp.FeeRegisterId LEFT OUTER JOIN
	tblClient AS c ON c.ClientID = r.ClientId LEFT OUTER JOIN
	tblEntryType AS et ON et.EntryTypeId = r.EntryTypeId LEFT OUTER JOIN
	tblAgency AS a ON a.AgencyID = c.AgencyID LEFT OUTER JOIN
	tblCompany AS comp ON comp.CompanyID = c.CompanyID INNER JOIN
	tblCommBatch AS cb ON cb.CommBatchID = cp.CommBatchID INNER JOIN
	tblCommStruct AS cs ON cs.CommStructID = cp.CommStructID INNER JOIN
	tblPerson AS p ON c.PrimaryPersonID = p.PersonID LEFT OUTER JOIN
	(
		SELECT 
			Value, 
			Amount, 
			Reason 
		FROM 
			tblTransactionAudit 
		WHERE 
			(Type = N'register')
	) AS vr ON r.RegisterId = vr.Value LEFT OUTER JOIN
	tblBouncedReasons ON r.BouncedReason = tblBouncedReasons.BouncedID
WHERE     
	(cp.CommBatchID IS NOT NULL)
	and month(cb.batchdate) = @month
	and year(cb.batchdate) = @year
	and a.agencyid in (838,840,842,843)
	and cs.commrecid in (5,17)


select FeeType, VoidReason, sum(Amount)
from #temp
group by FeeType, VoidReason
order by FeeType, VoidReason


drop table #temp
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_GetLetterOfRepSentDate]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_LetterTemplates_GetLetterOfRepSentDate]
(
	@clientID int,
	@CreditorInstanceID int
)
as
BEGIN
	SELECT 
		DocTypeID
		, SentDate 
	FROM 
		vwSentLetters 
	where 
		(doctypeid in('D4006','9002')) 
		and (clientid = @clientID) 
		and (AccountID in 
				(
					SELECT 
						a.accountid 
					FROM  tblAccount a 
						INNER JOIN tblCreditorInstance c1 on a.CurrentCreditorInstanceID = c1.CreditorInstanceID 
					WHERE 
						a.ClientID = @clientID 
						and a.CurrentCreditorInstanceID = @CreditorInstanceID
				)
		) 
	order by sentDate desc	
END



GRANT EXEC ON stp_LetterTemplates_GetLetterOfRepSentDate TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetAgencyCommission]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetAgencyCommission]
	(
		@companyids nvarchar(50),
		@date1 datetime=null,
		@date2 datetime=null,
		@commrecid nvarchar(50),
		@range varchar(50)='',
		@ClientCreatedDateFrom datetime = '1/1/1900',
		@ClientCreatedDateTo datetime = '1/1/2050'
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

create table #temp
(
	CommBatchID int,
	CompanyID int
)

INSERT INTO
	#temp
SELECT
	cp.CommBatchID,
	cs.CompanyID
FROM
	tblCommPay as cp
	inner join tblCommStruct as cs on cs.CommStructID = cp.CommStructID
	inner join tblRegisterPayment p on p.RegisterPaymentId = cp.RegisterPaymentID
	inner join tblRegister r on r.RegisterId = p.FeeRegisterId
	inner join tblClient c on c.ClientID = r.ClientID
		and (c.Created between @ClientCreatedDateFrom and @ClientCreatedDateTo)
GROUP BY
	cp.CommBatchID,
	cs.CompanyID

exec ('
SELECT ' + @range + '
	batch.CommBatchID,
	batch.BatchDate,
	sum(batchtransfer.Amount) as Amount,
	(SELECT ShortCoName FROM tblCompany WHERE CompanyID = comp.CompanyID) as Company,
	batchtransfer.CommRecID
FROM
	tblCommBatch batch inner join
	tblCommBatchTransfer batchtransfer on batch.CommBatchID = batchtransfer.CommBatchID inner join
	tblCommRec commrec on batchtransfer.CommRecID = commrec.CommRecID inner join
	#temp as comp on comp.CommBatchID = batch.CommBatchID
WHERE
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) and
	batchtransfer.CommRecID in (' + @CommRecID + ') and
	comp.CompanyID in (' + @companyids + ')
GROUP BY
	batch.CommBatchID,
	batch.BatchDate,
	comp.CompanyID,
	batchtransfer.CommRecID
ORDER BY
	batch.BatchDate DESC
')

drop table #temp
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getDailySettlementCounts]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_reports_getDailySettlementCounts]
(
	@year int,
	@month int
)
AS
BEGIN
	declare @tbldata table ([date] varchar(10), generated int, paid int)

	insert into @tbldata
	select 
		[date] =  convert(varchar(10), date, 101)
		, [Generated]= sum (case when year(date) = @year and month(date) = @month then 1 else 0 end)
		,paid= 0
		from tblsettlementtrackerimports
		where year(date) = @year and month(date) = @month
		group by [date]
		order by [date] desc

	insert into @tbldata
	select 
		[date] =  convert(varchar(10), paid, 101)
		, [Generated]= 0
		,paid= sum (case when year(paid) = @year and month(paid) = @month then 1 else 0 end)
		from tblsettlementtrackerimports
		where year(paid) = @year and month(paid) = @month
		group by paid
		order by paid desc


	select date, [Generated]=sum(generated), [Paid]=sum(paid) 
	from @tbldata
	group by date

END


GRANT EXEC ON stp_settlementimport_reports_getDailySettlementCounts TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GlobalCommission_RetFee]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GlobalCommission_RetFee]
(
	@startdate datetime,
	@enddate datetime
)

AS

if @startdate is null
begin
	set @startdate = dateadd(day, 10, dateadd(day, -day(getdate()), dateadd(month, -1, getdate())))
end

if @enddate is null
begin
	set @enddate = dateadd(month, 1, @startdate)
end

CREATE TABLE #globalComm (
	clientid int,
	AcctNo int,
	clientName nvarchar(255),
	start datetime,
	RetFees decimal(18,2),
	BegBal decimal(18,2),
	NewTrans decimal(18,2),
	EndBal decimal(18,2),
	PayRate decimal(18,2),
	repComm decimal(18,2),
	agencyid int,
	status int
)

INSERT INTO #globalComm(	
	clientid,
	AcctNo,
	ClientName,
	start,
	agencyid,
	status
)

SELECT	c.clientid,
	c.accountnumber,
	p.firstname + ' '+ p.lastname,
	c.created,
	c.agencyid,
	c.currentclientstatusid
FROM tblClient c
INNER JOIN tblPerson p ON c.primarypersonid = p.personid

UPDATE #globalComm 
SET 
	RetFees = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 2 AND r.clientid = #globalComm.clientid AND (bounce is null and void is null)),0),
	
	BegBal = isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 2 AND r.clientid = #globalComm.clientid AND (bounce is null and void is null)),0) -  -- retainer fees assessed
	isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.ENTRYTYPEID = 2 and not (bounced =1 or voided =1) and rp.paymentdate < @startdate),0), -- retainer payments
	
	NewTrans = ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.ENTRYTYPEID = 2 and not (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0),

	EndBal =
		(isnull((SELECT (SUM(amount)*-1) FROM tblRegister r WHERE entrytypeid = 2 AND r.clientid = #globalComm.clientid AND (bounce is null and void is null)),0) 
			- isnull((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.ENTRYTYPEID = 2 and not (bounced =1 or voided =1) and rp.paymentdate < @startdate),0))
				- (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.ENTRYTYPEID = 2 and not (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)),
	PayRate = .5,
	repComm = (ISNULL((SELECT SUM(RP.amount) FROM TBLREGISTERPAYMENT RP INNER JOIN TBLREGISTER R ON RP.FEEREGISTERID = R.REGISTERID WHERE R.CLIENTID = #globalComm.clientid AND R.ENTRYTYPEID = 2 and not (bounced =1 or voided =1) and rp.paymentdate >= @startdate and rp.PaymentDate < @enddate),0)) * .5

SELECT	AcctNo,
		ClientName,
		convert(nvarchar,start,110) as [Start Date],
		NewTrans,
		PayRate,
		repComm
FROM	#globalComm 
WHERE 	agencyid = 812 
AND NOT	status IN (15,17,18)
AND NewTrans > 0
ORDER BY AcctNo

DROP TABLE #globalComm
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getConversionStats]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_enrollment_getConversionStats]
as
BEGIN
	select 
		  u.firstname + ' ' + u.lastname [Name]
		, sum(case when la.statusid not in (7) then 1 else 0 end) [Pipe]
		, sum(case when la.statusid in (7) then 1 else 0 end) [Closed]
	from 
		tblleadapplicant la
	join 
		tbluser u on u.userid = la.repid
	group by 
		u.firstname + ' ' + u.lastname
END
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetPayRates]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetPayRates]
	(
		@date as datetime = null,
		@companyid int = null
	)

as

if @date is null 
	set @date = getdate()

select
	tblagency.name as Agency,
	tblagency.agencyid,
	tblcommrec.abbreviation as CommRec,
	tblcommrec.commrecid,
	tblentrytype.displayname as FeeType,
	tblentrytype.entrytypeid,
	sum(tblcommfee.[Percent]) as [Percent]	
from
	tblagency inner join
	tblcommscen on tblcommscen.agencyid=tblagency.agencyid inner join
	tblcommstruct on tblcommstruct.commscenid=tblcommscen.commscenid inner join
	tblcommrec on tblcommstruct.commrecid=tblcommrec.commrecid inner join
	tblcommfee on tblcommstruct.commstructid=tblcommfee.commstructid inner join
	tblentrytype on tblentrytype.entrytypeid=tblcommfee.entrytypeid 
where
	tblcommscen.startdate<@date and (tblcommscen.enddate>@date or tblcommscen.enddate is null)
	and (@companyid is null or tblcommstruct.companyid = @companyid)
group by 
	tblagency.name, tblagency.agencyid, tblcommrec.abbreviation, tblcommrec.commrecid, tblentrytype.displayname, tblentrytype.entrytypeid	
order by
	tblagency.name, [FeeType], [CommRec]
GO
/****** Object:  StoredProcedure [dbo].[stp_CreateLeadsFromSystemCalls]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_CreateLeadsFromSystemCalls]
AS
BEGIN
declare @firstname nvarchar(100), @lastname nvarchar(100)
declare @leadphone nvarchar(20), @StateId int , @LeadSourceId int, @CompanyId int, @ProductID int
declare  @Cost money, @CallIdKey varchar(50), @repid int
declare @lastrun datetime

SELECT top 1 @lastrun = cast(stuff(stuff(stuff(convert(varchar,run_date)+right('0'+convert(varchar,run_time), 6),9,0,' '),12,0,':'),15,0,':') as datetime) 
FROM     msdb.dbo.sysjobhistory h 
         INNER JOIN msdb.dbo.sysjobs j ON h.job_id = j.job_id 
WHERE   j.[name] = 'Create Leads from System Calls'
and step_name = '(Job outcome)'
and run_status = 1
order by run_date desc, run_time  desc

declare new_leads_cursor cursor For
select  
'' as firstname, 
'' as lastname, 
right(c.remotenumberfmt, 14) as leadphone, 
isnull(w.stateid,0) as stateid, 
p.defaultsourceid , 
isnull(s.companyid,0) as companyid, 
p.productid, 
p.cost, 
d.callidkey
from "DMF-SQL-0001".I3_CIC.dbo.calldetail c
inner join tblcalldnis d on c.callid = d.callidkey
inner join tblleadproducts p on d.dnis = p.productcode
left join tblleadapplicant l on (l.callidkey = d.callidkey or right(c.remotenumberfmt, 14) = l.leadphone or right(c.remotenumberfmt, 14) = l.homephone or right(c.remotenumberfmt, 14) = l.cellphone)
left join vw_areacode_state w on w.areacode = c.remotenumberlocomp1
left join tblstate s on w.stateid = s.stateid
left join tblcalllog g on g.callidkey = d.callidkey and g.eventname = 'pickup'
where (c.stationid = 'system' or c.localname='system' or g.callidkey is null) 
and c.calldirection = 'inbound'
and c.initiateddate > dateadd(hour, -2, @lastrun)
and p.isdnis=1 and p.active=1
and cast(convert(varchar ,c.initiateddate, 110)  + ' ' + isnull(p.starttime,'12:00 AM') as datetime) < = c.initiateddate  and cast(convert(varchar ,c.initiateddate, 110)  + ' ' + isnull(p.endtime, '11:59:59.999 PM') as datetime) >  c.initiateddate   
and l.leadapplicantid is null
and c.localname <> 'Fax Server'
order by c.initiateddate 

Open new_leads_cursor

Fetch Next From new_leads_cursor 
Into @firstname, @lastname, @leadphone, @StateId, @LeadSourceId, @CompanyId, @ProductID, @Cost, @CallIdKey

WHILE @@FETCH_STATUS = 0
BEGIN
	If Not Exists(Select Top 1 leadapplicantid from tblleadapplicant where @leadphone=leadphone or @leadphone=homephone or @leadphone=cellphone or @callidkey=callidkey)
	Begin

		select top 1 @repid = userid from tblrgrreps order by lastleadassignedto	

		if @repid is null
			select @repid = 0
		else
			update tblrgrreps set lastleadassignedto=getdate() where userid=@repid

		insert into tblleadapplicant(FirstName, LastName, LeadPhone, StateId, LeadSourceId, CompanyId, StatusId, ProductID, Cost, CallIdKey, created, createdbyid, repid)
		values(@firstname, @lastname, @leadphone, @stateid, @LeadSourceid , @companyid, 16, @productid, @cost, @callidkey, getdate(), 29, @repid)
	End


	Fetch Next From new_leads_cursor 
	Into @firstname, @lastname, @leadphone, @StateId, @LeadSourceId, @CompanyId, @ProductID, @Cost, @CallIdKey

END

close new_leads_cursor
deallocate new_leads_cursor

END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTrusts]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetTrusts]
	(
		@returntop varchar (50) = '100 percent',
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as


exec
(
	'select top ' + @returntop + '
		tbltrust.*,
		ISNULL(tblState.Name, ''Virtual'') as statename,
		ISNULL(tblState.Abbreviation, ''VIRT'')  as stateabbreviation,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedbyname
	from
		tbltrust left outer join
		tblstate on tbltrust.stateid = tblstate.stateid left outer join
		tbluser as tblcreatedby on tbltrust.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on tbltrust.lastmodifiedby = tbllastmodifiedby.userid '
	+ @where + ' ' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getPending]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_settlementimport_reports_getPending]
(
@year int,
@month int
)
as
BEGIN
	select 
	[Pending] = Team
	, [Fees] = convert(money,sum(settlementfees))
	, [Units] = count(*)
	from tblSettlementTrackerImports
	where paid is null and year(date) = @year and month(date) = @month and canceldate is null
	group by team 
	order by team
END

GRANT EXEC ON stp_settlementimport_reports_getPending TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetCommissionBatchPaymentsSummary5]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_ReportGetCommissionBatchPaymentsSummary5 '3','9/19/08','9/19/08','2'

CREATE procedure [dbo].[stp_ReportGetCommissionBatchPaymentsSummary5]
	(
		@CommRecIDs varchar(255),
		@date1 datetime=null,
		@date2 datetime=null,
		@CompanyID varchar(3)
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

exec
(
	'
	create table #batches
	(
		commbatchid int,
		commbatchtransferid int,
		commrec varchar(50),
		commrecid int,
		parentcommrecid int,
		amount money,
		transferamount money
	)
	
	insert
		#batches
	select distinct
		b.commbatchid,
		bt.commbatchtransferid,
		r.abbreviation as commrec,
		bt.commrecid,
		bt.parentcommrecid,
		bt.amount,
		bt.transferamount
	from
		tblcommbatch b inner join
		tblcommbatchtransfer bt on b.commbatchid = bt.commbatchid inner join
		tblcommrec r on bt.commrecid = r.commrecid and r.CommRecId IN (' + @CommRecIds + ') join
		tblcommscen s on s.commscenid = b.commscenid join
		tblcommstruct cs on cs.commscenid = s.commscenid 
			and cs.companyid = ' + @CompanyID + ' 
			and cs.commrecid = bt.commrecid 
			and cs.parentcommrecid = bt.parentcommrecid
			and cs.companyid = bt.companyid
	where
		( CAST(CONVERT(varchar(15), b.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
		( CAST(CONVERT(varchar(15), b.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) 
	
	
	-- Exception #1: Avert(29) did not have its own commstructs back then
	if (cast(''' + @date1 + ''' as datetime) < cast(''10/24/2008'' as datetime) and charindex(''29'',''' + @CommRecIds + ''') > 0) begin
		insert
			#batches
		select distinct
			b.commbatchid,
			bt.commbatchtransferid,
			r.abbreviation as commrec,
			bt.commrecid,
			bt.parentcommrecid,
			bt.amount,
			bt.transferamount
		from
			tblcommbatch b inner join
			tblcommbatchtransfer bt on b.commbatchid = bt.commbatchid inner join
			tblcommrec r on bt.commrecid = r.commrecid
		where
			( CAST(CONVERT(char(10), b.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
			( CAST(CONVERT(char(10), b.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) and
			r.CommRecId IN (29) and
			bt.companyid = ' + @CompanyID + '
	end
	
	print ''jjfdsfs''
	-- Exception #2: Lexxiom > TSLF OA prior to PSM companyid overhaul release
	if (cast(''' + @date1 + ''' as datetime) < cast(''11/10/2008'' as datetime) and (charindex(''3,'',''' + @CommRecIds + ''') > 0 or ' + @CommRecIds + ' = 3) and ' + @CompanyID + ' = 2) begin
		print ''in''
		insert
			#batches
		select distinct
			b.commbatchid,
			bt.commbatchtransferid,
			r.abbreviation as commrec,
			bt.commrecid,
			bt.parentcommrecid,
			bt.amount,
			bt.transferamount
		from
			tblcommbatch b inner join
			tblcommbatchtransfer bt on b.commbatchid = bt.commbatchid inner join
			tblcommrec r on bt.commrecid = r.commrecid and r.CommRecId IN (3) join
			tblcommscen s on s.commscenid = b.commscenid join
			tblcommstruct cs on cs.commscenid = s.commscenid 
				and cs.companyid = 2 
				and cs.commrecid = bt.commrecid 
				and cs.parentcommrecid = bt.parentcommrecid
				and cs.parentcommrecid = 4
		where
			( CAST(CONVERT(varchar(15), b.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
			( CAST(CONVERT(varchar(15), b.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) 
	end

select * from #batches
		
	
	select
		ut.AgencyId,
		ut.Agency,	
		ut.EntryTypeId,
		ut.FeeType,
		ut.AmountPaid,
		tt.commrec,
		tt.commrecid,
		tt.parentcommrecid,
		tt.amount,
		tt.transferamount--,
		--ut.commstructid
	from
		(
			select distinct
				commrec,
				commrecid,
				parentcommrecid,
				sum(amount) [amount],
				sum(transferamount) [transferamount]
			from
				#batches
			group by
				commrec,
				commrecid,
				parentcommrecid
		)
		as tt left join
		(
			SELECT
				AgencyId,
				Agency,	
				EntryTypeId,
				FeeType,
				CommRec,
				CommRecId,
				ParentCommRecId,
				sum(Amount) as AmountPaid--,
				--commstructid as commstructid
			FROM
				(
				SELECT 
					tblCommPay.Amount,
					
					tblAgency.AgencyId,
					tblAgency.Name as Agency,

					tblEntryType.EntryTypeId,
					tblEntryType.DisplayName as FeeType,

					tblCommRec.Abbreviation as CommRec,
					tblCommStruct.CommRecId,
					tblCommStruct.ParentCommRecId--,
					--tblCommStruct.commstructid as commstructid
				FROM
					tblCommPay INNER JOIN
					tblRegisterPayment ON tblCommPay.RegisterPaymentID=tblRegisterPayment.RegisterPaymentID INNER JOIN
					tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructID and tblCommStruct.CompanyID = ' + @CompanyID + ' INNER JOIN
					tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN
					tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId INNER JOIN
					tblRegister tblFeeRegister ON tblRegisterPayment.FeeRegisterId=tblFeeRegister.RegisterId INNER JOIN
					tblEntryType ON tblFeeRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
					tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId INNER JOIN
					tblCommBatch on tblCommPay.CommBatchId=tblCommBatch.CommBatchId

				WHERE
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
					tblCommRec.CommRecId IN (' + @CommRecIds + ')
				
				UNION ALL

				SELECT 
					-tblCommPay.Amount as amount,
					tblAgency.AgencyId,
					tblAgency.Name as Agency,

					tblEntryType.EntryTypeId,
					tblEntryType.DisplayName as FeeType,

					tblCommRec.Abbreviation as CommRec,
					tblCommStruct.CommRecId,
					tblCommStruct.ParentCommRecId--,
					--tblCommStruct.commstructid as commstructid
				FROM
					tblCommChargeBack tblCommPay INNER JOIN
					tblRegisterPayment ON tblCommPay.RegisterPaymentID=tblRegisterPayment.RegisterPaymentID INNER JOIN
					tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructID and tblCommStruct.CompanyID = ' + @CompanyID + ' INNER JOIN
					tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN
					tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId INNER JOIN
					tblRegister tblFeeRegister ON tblRegisterPayment.FeeRegisterId=tblFeeRegister.RegisterId INNER JOIN
					tblEntryType ON tblFeeRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
					tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId INNER JOIN
					tblCommBatch on tblCommPay.CommBatchId=tblCommBatch.CommBatchId

				WHERE
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
					( CAST(CONVERT(varchar(15), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) AND
					tblCommRec.CommRecId IN (' + @CommRecIds + ')
					
				
				)
				derivetbl
			GROUP BY
				EntryTypeId,FeeType,Agency,CommRec,AgencyId,CommRecId,ParentCommRecId--,commstructid
		)
		as ut on tt.commrecid = ut.commrecid and
		(
			(
				tt.parentcommrecid = ut.parentcommrecid
			)
			or
			(
				tt.parentcommrecid is null and
				ut.parentcommrecid is null
			)
		)
	ORDER BY
		Agency,EntryTypeId,tt.CommRecID'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientReport_InformationSheet]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[stp_ClientReport_InformationSheet]
	(
		@clientId int
	)

as 

declare @secPersonId int
set @secPersonId = (SELECT TOP 1 PersonId FROM tblPerson WHERE ClientId=@ClientId AND NOT PersonId = (SELECT PrimaryPersonId FROM tblClient WHERE ClientId=@ClientId))

SELECT 
	(SELECT [Name] FROM tblLanguage WHERE LanguageId=prim.LanguageID) as Lang,
	DepositMethod,
	DepositAmount,
	DepositDay,
	
	prim.FirstName + ' ' + prim.LastName as Name1,
	prim.Street as Street1,
	prim.Street2 as Street1b,
	prim.City as City1,
	(SELECT [Name] FROM tblState WHERE StateId=prim.StateId) as State1,
	prim.ZipCode as Zip1,
	prim.DateOfBirth as DOB1,
	prim.SSN as SSN1,
	(SELECT TOP 1 AreaCode + Number + ' ' + isnull(Extension,'') FROM tblPhone WHERE PhoneTypeId=27 AND tblPhone.PhoneID IN (SELECT PhoneID FROM tblPersonPhone WHERE PersonId=prim.PersonId)) as HomePhone1,
	(SELECT TOP 1 AreaCode + Number + ' ' + isnull(Extension,'') FROM tblPhone WHERE PhoneTypeId=29 AND tblPhone.PhoneID IN (SELECT PhoneID FROM tblPersonPhone WHERE PersonId=prim.PersonId)) as HomeFax1,
	(SELECT TOP 1 AreaCode + Number + ' ' + isnull(Extension,'') FROM tblPhone WHERE PhoneTypeId=21 AND tblPhone.PhoneID IN (SELECT PhoneID FROM tblPersonPhone WHERE PersonId=prim.PersonId)) as BusinessPhone1,
	(SELECT TOP 1 AreaCode + Number + ' ' + isnull(Extension,'') FROM tblPhone WHERE PhoneTypeId=23 AND tblPhone.PhoneID IN (SELECT PhoneID FROM tblPersonPhone WHERE PersonId=prim.PersonId)) as BusinessFax1,
	(SELECT TOP 1 AreaCode + Number + ' ' + isnull(Extension,'') FROM tblPhone WHERE PhoneTypeId=31 AND tblPhone.PhoneID IN (SELECT PhoneID FROM tblPersonPhone WHERE PersonId=prim.PersonId)) as CellPhone1,
	prim.EmailAddress as Email1,

	sec.FirstName + ' ' + sec.LastName as Name2,
	sec.LastName as LastName2,
	sec.Street as Street2,
	sec.Street2 as Street2b,
	sec.City as City2,
	(SELECT [Name] FROM tblState WHERE StateId=sec.StateId) as State2,
	sec.ZipCode as Zip2,
	sec.DateOfBirth as DOB2,
	sec.SSN as SSN2,
	(SELECT TOP 1 AreaCode + Number + ' ' + Extension FROM tblPhone WHERE PhoneTypeId=27 AND tblPhone.PhoneID IN (SELECT PhoneID FROM tblPersonPhone WHERE PersonId=@secPersonId)) as HomePhone2,
	(SELECT TOP 1 AreaCode + Number + ' ' + Extension FROM tblPhone WHERE PhoneTypeId=29 AND tblPhone.PhoneID IN (SELECT PhoneID FROM tblPersonPhone WHERE PersonId=@secPersonId)) as HomeFax2,
	(SELECT TOP 1 AreaCode + Number + ' ' + Extension FROM tblPhone WHERE PhoneTypeId=21 AND tblPhone.PhoneID IN (SELECT PhoneID FROM tblPersonPhone WHERE PersonId=@secPersonId)) as BusinessPhone2,
	(SELECT TOP 1 AreaCode + Number + ' ' + Extension FROM tblPhone WHERE PhoneTypeId=23 AND tblPhone.PhoneID IN (SELECT PhoneID FROM tblPersonPhone WHERE PersonId=@secPersonId)) as BusinessFax2,
	(SELECT TOP 1 AreaCode + Number + ' ' + Extension FROM tblPhone WHERE PhoneTypeId=31 AND tblPhone.PhoneID IN (SELECT PhoneID FROM tblPersonPhone WHERE PersonId=@secPersonId)) as CellPhone2,
	sec.EmailAddress as Email2
FROM 
	tblClient INNER JOIN
	tblPerson as prim ON tblClient.PrimaryPersonId=prim.PersonId LEFT OUTER JOIN
	tblPerson as sec ON sec.PersonId=@secPersonId
	
WHERE
	tblClient.ClientId=@clientId
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_UpdateNegotiatorNames]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_UpdateNegotiatorNames]
/*
	(
		@parameter1 int = 5,
		@parameter2 datatype OUTPUT
	)

*/
AS
BEGIN
/*
	update tblSettlementTrackerImports 
	set negotiator = u.firstname + ' ' + u.lastname
	from tblSettlementTrackerImports sti
	inner join tblsettlements s with(nolock) on s.settlementid = sti.settlementid
	inner join tbluser u with(nolock) on u.userid = s.createdby
	where  year(sti.importdate) = year(getdate())
	and month(sti.importdate) = month(getdate())
*/	
	update tblsettlementtrackerimports 
set negotiator = u.firstname + ' ' + u.lastname
from tblsettlementtrackerimports sti
inner join tbluser u on u.username = sti.negotiator
	
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientDeposits]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetClientDeposits]
(
	@Date datetime
,	@EffectiveDate datetime
,	@NachaFileId int = -1
,	@NachaRegisterId int = -1
)
as
begin
/*
	History:
	jhernandez		06/20/08	New method for returning client deposits for batch processing
	jhernandez		06/25/08	Remove filtering items created today. If CheckSite's system
								is unavailable we'll want to send items out on next 
								attempt.
	jhernandez		07/02/08	Include SDA balance transfer deposits
	jhernandez		07/09/08	Order by NachaRegisterId
	jhernandez		07/21/08	Added Flow and Reverse deposits
	jhernandez		07/24/08	Optional parameters @NachaFileId and @NachaRegisterId
								used for re-sending a batch.	
*/


-- Get deposits
select n.NachaRegisterId, n.NachaFileId, n.Amount, n.ShadowStoreId, 
	n.Name, n.RoutingNumber, n.AccountNumber, n.Type [AccountType], n.IsPersonal,
	case when r.AccountID is null then e.DisplayName 
		else e.DisplayName + ' for Account ' + convert(varchar(50), r.AccountID) 
	end [Notes1],
	n.Flow
into #batch
from tblNachaRegister2 n
join tblRegister r on r.RegisterId = n.RegisterId
join tblEntryType e on e.EntryTypeId = r.EntryTypeId
 and e.EntryTypeId in (3,45,47) -- Deposit, Transfer deposit, Reverse deposit
where n.NachaFileId = @NachaFileId
 and len(n.RoutingNumber) = 9
 and n.RegisterPaymentId is null
 
 
 -- Only create nacha file id if batch has records and is not a re-send
if (exists (select 1 from #batch)) and (@NachaFileId = -1) begin
	insert tblNachaFile ([Date],EffectiveDate) values (@Date,@EffectiveDate)
	select @NachaFileId = scope_identity()

	update #batch set NachaFileId = @NachaFileId
	update tblNachaRegister2 set NachaFileId = @NachaFileId where NachaRegisterId in (select NachaRegisterId from #batch)
end


-- output
select * 
from #batch 
where NachaRegisterId >= @NachaRegisterId
order by NachaRegisterId

-- cleanup
drop table #batch


end
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyGetClientInfo]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_AgencyGetClientInfo]
	(
		@agencyId int,
		@strWhere varchar (8000) = '',
		@orderby varchar (8000) = 'tblPerson.LastName ASC'
	)

as

declare @userId int
set @userId = (SELECT UserID FROM tblAgency WHERE AgencyId=@agencyId)

exec('

SELECT 
	tblClient.ClientID,
	tblClient.AccountNumber,
	tblClient.DepositMethod, 
	tblClient.DepositAmount, 
	tblPerson.FirstName, 
	tblPerson.LastName, 
	tblPerson.SSN,
	tblNote.[Value] AS Comments,
	tblAgencyExtraFields01.LeadNumber, 
	tblAgencyExtraFields01.DateSent, 
	tblAgencyExtraFields01.DateReceived, 
	tblAgencyExtraFields01.SeidemanPullDate, 
	tblAgencyExtraFields01.DebtTotal, 
	tblAgencyExtraFields01.MissingInfo,
	tblCurrentStatus.ClientStatusId as ClientStatusId,
	tblClientStatus.[Name] as ClientStatusName,
	tblClient.ReceivedLSA

FROM 
	tblClient INNER JOIN 
	tblPerson ON tblClient.PrimaryPersonId=tblPerson.PersonId LEFT OUTER JOIN 
	tblAgencyExtraFields01 ON tblClient.ClientId=tblAgencyExtraFields01.ClientId LEFT OUTER JOIN
	(SELECT RoadmapId, ClientId, ClientStatusId FROM tblRoadmap WHERE RoadmapId=
		(SELECT TOP 1 RoadmapId FROM tblRoadmap a where a.ClientId=tblRoadmap.ClientId ORDER BY RoadmapId DESC))  tblCurrentStatus ON tblClient.ClientId=tblCurrentStatus.ClientId LEFT OUTER JOIN
	tblClientStatus ON tblCurrentStatus.ClientStatusId=tblClientStatus.ClientStatusId LEFT OUTER JOIN
	(SELECT RoadmapId, ClientId, Created AS Enrolled FROM tblRoadmap WHERE ClientStatusId=5) tblEnrolled ON tblClient.ClientId=tblEnrolled.ClientId LEFT OUTER JOIN
	tblNote ON tblAgencyExtraFields01.NoteId=tblNote.NoteId

WHERE
	tblClient.AgencyId = ' + @agencyId + ' ' + @strWhere + '
ORDER BY '
	+ @OrderBy
)
GO
/****** Object:  StoredProcedure [dbo].[stp_PaymentsToLexxiom]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_PaymentsToLexxiom '6/8/10', '6/9/10', 856

CREATE procedure [dbo].[stp_PaymentsToLexxiom]
(
	@from datetime,
	@to datetime,
	@agencyid int
)
as
begin

SELECT
	AgencyId,
	Agency,	
	Company,
	EntryTypeId,
	FeeType,
	CommRec,
	CommRecId,
	ParentCommRecId,
	sum(Amount) as AmountPaid
into 
	#payments
FROM
	(
	SELECT 
		tblCommPay.Amount,	
		tblAgency.AgencyId,
		tblAgency.Name as Agency,
		tblEntryType.EntryTypeId,
		tblEntryType.DisplayName as FeeType,
		tblCommRec.Abbreviation as CommRec,
		tblCommStruct.CommRecId,
		tblCommStruct.ParentCommRecId,
		c.name [company]
	FROM
		tblCommPay INNER JOIN
		tblRegisterPayment ON tblCommPay.RegisterPaymentID=tblRegisterPayment.RegisterPaymentID INNER JOIN
		tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructID  INNER JOIN
		tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN
		tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId INNER JOIN
		tblRegister tblFeeRegister ON tblRegisterPayment.FeeRegisterId=tblFeeRegister.RegisterId INNER JOIN
		tblEntryType ON tblFeeRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
		tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId INNER JOIN
		tblCommBatch on tblCommPay.CommBatchId=tblCommBatch.CommBatchId join
		tblcompany c on c.companyid = tblcommstruct.companyid
	WHERE
		tblCommBatch.BatchDate between @from and @to
		and tblCommRec.CommRecId IN (4,27)
		and tblagency.agencyid = @agencyid
	
	UNION ALL

	SELECT 
		-tblCommPay.Amount as amount,
		tblAgency.AgencyId,
		tblAgency.Name as Agency,
		tblEntryType.EntryTypeId,
		tblEntryType.DisplayName as FeeType,
		tblCommRec.Abbreviation as CommRec,
		tblCommStruct.CommRecId,
		tblCommStruct.ParentCommRecId,
		c.name [company]
	FROM
		tblCommChargeBack tblCommPay INNER JOIN
		tblRegisterPayment ON tblCommPay.RegisterPaymentID=tblRegisterPayment.RegisterPaymentID INNER JOIN
		tblCommStruct ON tblCommPay.CommStructId=tblCommStruct.CommStructID INNER JOIN
		tblCommScen ON tblCommStruct.CommScenId=tblCommScen.CommScenId INNER JOIN
		tblAgency ON tblCommScen.AgencyId=tblAgency.AgencyId INNER JOIN
		tblRegister tblFeeRegister ON tblRegisterPayment.FeeRegisterId=tblFeeRegister.RegisterId INNER JOIN
		tblEntryType ON tblFeeRegister.EntryTypeId=tblEntryType.EntryTypeId INNER JOIN
		tblCommRec ON tblCommStruct.CommRecId=tblCommRec.CommRecId INNER JOIN
		tblCommBatch on tblCommPay.CommBatchId=tblCommBatch.CommBatchId join
		tblcompany c on c.companyid = tblcommstruct.companyid
	WHERE
		tblCommBatch.BatchDate between @from and @to
		and tblCommRec.CommRecId IN (4,27)
		and tblagency.agencyid = @agencyid
	)
	derivetbl
GROUP BY
	EntryTypeId,FeeType,Agency,CommRec,AgencyId,CommRecId,ParentCommRecId,company


-- output
select distinct feetype
from #payments
order by feetype

select distinct company
from #payments
order by company

select * 
from #payments 
order by agency, company, feetype

drop table #payments


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTransactionsByUser]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_GetTransactionsByUser 996, '1/19/10', '1/20/10 23:59', @commstructid=680

CREATE procedure [dbo].[stp_GetTransactionsByUser]
(
	@userid int,
	@startdate datetime,
	@enddate datetime,
	@batchdate varchar(10) = null,
	@batchid int = null,
	@commstructid int = null
)
as
begin

create table #transactions
(
	transdate datetime,
	payments money,
	chargebacks money,
	commbatchid int,
	batchdate datetime,
	commstructid int,
	entrytype varchar(50),
	accountnumber varchar(20)
)

insert #transactions (transdate, payments, chargebacks, commbatchid, batchdate, commstructid, accountnumber, entrytype)
select transdate, payments, chargebacks, commbatchid, batchdate, commstructid, accountnumber, entrytype
from (
	select rp.paymentdate[transdate], cp.amount[payments], null[chargebacks], cp.commbatchid, b.batchdate, cs.commstructid, 
		c.accountnumber, e.name[entrytype]
	from tblcommpay cp
	join tblRegisterPayment as rp on rp.RegisterPaymentID = cp.RegisterPaymentID and rp.paymentdate between @startdate and @enddate
	join tblRegister as r on r.RegisterID = rp.FeeRegisterID
	join tblClient c on c.clientid = r.clientid
	join tblEntrytype e on e.entrytypeid = r.entrytypeid
	join tblCommStruct as cs on cs.CommStructID = cp.CommStructID 
	join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
	join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid 
	left join tblcommbatch b on b.commbatchid = cp.commbatchid
	where (@batchid is null or b.commbatchid = @batchid)
	and (@batchdate is null or convert(varchar(10),b.batchdate,101) = @batchdate)
	and (@commstructid is null or cs.commstructid = @commstructid)

	union all

	select cb.chargebackdate[transdate], null, cb.amount, cb.commbatchid, b.batchdate, cs.commstructid,
		c.accountnumber, e.name[entrytype]
	from tblcommchargeback cb
	join tblRegisterPayment as rp on rp.RegisterPaymentID = cb.RegisterPaymentID
	join tblRegister as r on r.RegisterID = rp.FeeRegisterID
	join tblClient c on c.clientid = r.clientid
	join tblEntrytype e on e.entrytypeid = r.entrytypeid
	join tblCommStruct as cs on cs.CommStructID = cb.CommStructID 
	join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
	join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid 
	left join tblcommbatch b on b.commbatchid = cb.commbatchid
	where cb.chargebackdate between @startdate and @enddate
	and (@batchid is null or b.commbatchid = @batchid)
	and (@batchdate is null or convert(varchar(10),b.batchdate,101) = @batchdate)
	and (@commstructid is null or cs.commstructid = @commstructid)
) d


-- output
select *
from #transactions
order by [transdate]

select distinct convert(varchar(10),batchdate,101)[batchdate]
from #transactions
where batchdate is not null
order by [batchdate]

select distinct cast(commbatchid as varchar(10))[commbatchid]
from #transactions
where commbatchid is not null
order by commbatchid

select distinct cast(commstructid as varchar(10))[commstructid]
from #transactions
order by commstructid


drop table #transactions


end
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getYTDFees]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_settlementimport_reports_getYTDFees]
as
BEGIN
	select 
		[YearDue] = year(getdate()) 
		, sum(case when month(due) = 1 then settlementfees else 0 end) [Jan]
		, sum(case when month(due) = 2 then settlementfees else 0 end) [Feb]
		, sum(case when month(due) = 3 then settlementfees else 0 end) [Mar]
		, sum(case when month(due) = 4 then settlementfees else 0 end) [Apr]
		, sum(case when month(due) = 5 then settlementfees else 0 end) [May]
		, sum(case when month(due) = 6 then settlementfees else 0 end) [Jun]
		, sum(case when month(due) = 7 then settlementfees else 0 end) [Jul]
		, sum(case when month(due) = 8 then settlementfees else 0 end) [Aug]
		, sum(case when month(due) = 9 then settlementfees else 0 end) [Sep]
		, sum(case when month(due) = 10 then settlementfees else 0 end) [Oct]
		, sum(case when month(due) = 11 then settlementfees else 0 end) [Nov]
		, sum(case when month(due) = 12 then settlementfees else 0 end) [Dec]
	from tblSettlementTrackerImports
	where Year(due) = year(getdate())
END


GRANT EXEC ON stp_settlementimport_reports_getYTDFees TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTransactionByType_FeeAdjustments]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetTransactionByType_FeeAdjustments]
	(
		@clientId int
	)

as

select
	r.*,
	et.[name] as entrytypename,
	r.adjustedregisterid,
	ar.transactiondate as adjustedregistertransactiondate,
	ar.amount as adjustedregisteramount,
	ar.originalamount as adjustedregisteroriginalamount,
	ar.entrytypeid as adjustedregisterentrytypeid,
	aret.name as adjustedregisterentrytypename
from
	tblregister r INNER JOIN
	tblentrytype et ON r.entrytypeid = et.entrytypeid inner join
	tblregister ar on r.adjustedregisterid = ar.registerid inner join
	tblentrytype aret on ar.entrytypeid = aret.entrytypeid
where
	r.clientid = @clientid and
	aret.fee = 1
order by
	r.transactiondate, r.registerid
GO
/****** Object:  StoredProcedure [dbo].[stp_VerificationCall_GetQuestions]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_VerificationCall_GetQuestions]
@LanguageId int = null
AS
Select [Order] as QuestionNo, Case When @LanguageId = 1 Then QuestionTextEN Else QuestionTextSP End as  QuestionText from  tblVerificationQuestion
Order By [Order] Asc
GO
/****** Object:  StoredProcedure [dbo].[stp_Login]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Login]
	(
		@username varchar (255),
		@password varchar (255)
	)

as

select * from tbluser where username = @username and [password] = @password
GO
/****** Object:  StoredProcedure [dbo].[stp_DeleteRelation]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DeleteRelation]
	(
		@relationtypeid int,
		@relationid int
	)

as

-- for notes
delete
from
	tblnoterelation
where
	relationtypeid = @relationtypeid and
	relationid = @relationid


-- for phone calls
delete
from
	tblphonecallrelation
where
	relationtypeid = @relationtypeid and
	relationid = @relationid
GO
/****** Object:  StoredProcedure [dbo].[stp_MarketingDashboard]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_MarketingDashboard]
(
	@datefrom datetime = '1/1/2000', 
	@dateto datetime = '1/1/2050',
	@description varchar(50) = 'All'
)
as
begin

declare @ldatefrom datetime, @ldateto datetime, @ldescription varchar(50)

set @ldatefrom = @datefrom--'1/1/2010'
set @ldateto = @dateto--'2/20/2010 23:59'
set @ldescription = @description--'Today'


-- by description
select @ldescription[description],
	cast(sum(case when (g.groupname = 'Success' or l.reasonid = 24) and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when (g.groupname = 'Success' or l.reasonid = 24) and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) as money)) * 100) as varchar(30)) + '%)' [Success],
	cast(sum(case when g.groupname = 'Failures' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Failures' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) as money)) * 100) as varchar(30)) + '%)' [Failures],
	cast(sum(case when g.groupname = 'No Contact' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'No Contact' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) as money)) * 100) as varchar(30)) + '%)' [No Contact],
	cast(sum(case when g.groupname = 'Bad Leads' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Bad Leads' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) as money)) * 100) as varchar(30)) + '%)' [Bad Leads],
	cast(sum(case when g.groupname = 'Pipeline' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Pipeline' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) as money)) * 100) as varchar(30)) + '%)' [Pipeline],
	cast(sum(case when g.groupname = 'New' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'New' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) as money)) * 100) as varchar(30)) + '%)' [New],
	cast(sum(case when g.groupname = 'Recycled' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Recycled' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) as money)) * 100) as varchar(30)) + '%)' [Recycled],
	sum(case when l.refund = 0 then 1 else 0 end) [Total Leads],
	sum(case when l.refund = 1 then 1 else 0 end) [Refund]
from tblleadapplicant l with (nolock)
join vw_enrollment_CurrentStatusCreated s on s.leadapplicantid = l.leadapplicantid
join tblleadstatus ls on ls.statusid = s.currentstatusid
join tblleadstatusgroup g on g.statusgroupid = ls.statusgroupid
where l.created between @ldatefrom and @ldateto


-- by category
select @ldescription[description], isnull(c.category,'No Product ID')[category],
	cast(sum(case when (g.groupname = 'Success' or l.reasonid = 24) and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when (g.groupname = 'Success' or l.reasonid = 24) and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Success],
	cast(sum(case when g.groupname = 'Failures' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Failures' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Failures],
	cast(sum(case when g.groupname = 'No Contact' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'No Contact' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [No Contact],
	cast(sum(case when g.groupname = 'Bad Leads' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Bad Leads' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Bad Leads],
	cast(sum(case when g.groupname = 'Pipeline' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Pipeline' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Pipeline],
	cast(sum(case when g.groupname = 'New' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'New' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [New],
	cast(sum(case when g.groupname = 'Recycled' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Recycled' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Recycled],
	sum(case when l.refund = 0 then 1 else 0 end) [Total Leads],
	sum(case when l.refund = 1 then 1 else 0 end) [Refund]
from tblleadapplicant l with (nolock)
left join tblleadproducts p on p.productid = l.productid
left join tblleadvendors v on v.vendorid = p.vendorid
left join tblleadcategories c on c.categoryid = v.categoryid
join vw_enrollment_CurrentStatusCreated s on s.leadapplicantid = l.leadapplicantid
join tblleadstatus ls on ls.statusid = s.currentstatusid
join tblleadstatusgroup g on g.statusgroupid = ls.statusgroupid
where l.created between @ldatefrom and @ldateto
group by isnull(c.category,'No Product ID')
order by [category]


-- by vendor
select @ldescription[description], c.category, v.vendorcode,
	cast(sum(case when (g.groupname = 'Success' or l.reasonid = 24) and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when (g.groupname = 'Success' or l.reasonid = 24) and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Success],
	cast(sum(case when g.groupname = 'Failures' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Failures' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Failures],
	cast(sum(case when g.groupname = 'No Contact' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'No Contact' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [No Contact],
	cast(sum(case when g.groupname = 'Bad Leads' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Bad Leads' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Bad Leads],
	cast(sum(case when g.groupname = 'Pipeline' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Pipeline' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Pipeline],
	cast(sum(case when g.groupname = 'New' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'New' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [New],
	cast(sum(case when g.groupname = 'Recycled' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Recycled' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Recycled],
	sum(case when l.refund = 0 then 1 else 0 end) [Total Leads],
	sum(case when l.refund = 1 then 1 else 0 end) [Refund]
from tblleadapplicant l with (nolock)
join tblleadproducts p on p.productid = l.productid
join tblleadvendors v on v.vendorid = p.vendorid
join tblleadcategories c on c.categoryid = v.categoryid
join vw_enrollment_CurrentStatusCreated s on s.leadapplicantid = l.leadapplicantid
join tblleadstatus ls on ls.statusid = s.currentstatusid
join tblleadstatusgroup g on g.statusgroupid = ls.statusgroupid
where l.created between @ldatefrom and @ldateto
group by c.category, v.vendorcode
order by [category], [vendorcode]


-- by product
select @ldescription[description], c.category, v.vendorcode, p.productdesc,
	cast(sum(case when (g.groupname = 'Success' or l.reasonid = 24) and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when (g.groupname = 'Success' or l.reasonid = 24) and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Success],
	cast(sum(case when g.groupname = 'Failures' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Failures' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Failures],
	cast(sum(case when g.groupname = 'No Contact' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'No Contact' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [No Contact],
	cast(sum(case when g.groupname = 'Bad Leads' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Bad Leads' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Bad Leads],
	cast(sum(case when g.groupname = 'Pipeline' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Pipeline' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Pipeline],
	cast(sum(case when g.groupname = 'New' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'New' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [New],
	cast(sum(case when g.groupname = 'Recycled' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Recycled' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Recycled],
	sum(case when l.refund = 0 then 1 else 0 end) [Total Leads],
	sum(case when l.refund = 1 then 1 else 0 end) [Refund]
from tblleadapplicant l with (nolock)
join tblleadproducts p on p.productid = l.productid
join tblleadvendors v on v.vendorid = p.vendorid
join tblleadcategories c on c.categoryid = v.categoryid
join vw_enrollment_CurrentStatusCreated s on s.leadapplicantid = l.leadapplicantid
join tblleadstatus ls on ls.statusid = s.currentstatusid
join tblleadstatusgroup g on g.statusgroupid = ls.statusgroupid
where l.created between @ldatefrom and @ldateto
group by c.category, v.vendorcode, p.productdesc
order by [category], [vendorcode], [productdesc]


-- dont know why but when grouping by affiliate joing by the view takes over 1 min to run. dumping the view first into
-- a temp table and the query runs in < 2sec
select leadapplicantid, currentstatusid
into #status
from (
	select l.leadapplicantid, l.statusid [currentstatusid], l.created [leadcreated], max(r.created)[statuscreated]
	from tblleadapplicant l with (nolock)
	join tblleadstatusroadmap r on r.leadapplicantid = l.leadapplicantid and r.leadstatusid = l.statusid
	group by l.leadapplicantid, l.statusid, l.created
) d
where statuscreated between @ldatefrom and @ldateto


-- by affiliate (where avail) only 3rd party internet leads currently providing this info
select @ldescription[description], c.category, v.vendorcode, p.productdesc, a.affiliatedesc,
	cast(sum(case when (g.groupname = 'Success' or l.reasonid = 24) and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when (g.groupname = 'Success' or l.reasonid = 24) and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Success],
	cast(sum(case when g.groupname = 'Failures' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Failures' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Failures],
	cast(sum(case when g.groupname = 'No Contact' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'No Contact' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [No Contact],
	cast(sum(case when g.groupname = 'Bad Leads' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Bad Leads' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Bad Leads],
	cast(sum(case when g.groupname = 'Pipeline' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Pipeline' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Pipeline],
	cast(sum(case when g.groupname = 'New' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'New' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [New],
	cast(sum(case when g.groupname = 'Recycled' and l.refund = 0 then 1 else 0 end) as varchar(10)) + ' (' + cast(((cast(sum(case when g.groupname = 'Recycled' and l.refund = 0 then 1 else 0 end) as money) / cast(sum(case when l.refund = 0 then 1 else 0 end) + .01 as money)) * 100) as varchar(30)) + '%)' [Recycled],
	sum(case when l.refund = 0 then 1 else 0 end) [Total Leads],
	sum(case when l.refund = 1 then 1 else 0 end) [Refund]
from tblleadapplicant l with (nolock)
join tblleadaffiliates a on a.affiliateid = l.affiliateid 
join tblleadproducts p on p.productid = a.productid
join tblleadvendors v on v.vendorid = p.vendorid
join tblleadcategories c on c.categoryid = v.categoryid
join #status s on s.leadapplicantid = l.leadapplicantid
join tblleadstatus ls on ls.statusid = s.currentstatusid
join tblleadstatusgroup g on g.statusgroupid = ls.statusgroupid
where l.created between @ldatefrom and @ldateto
group by c.category, v.vendorcode, p.productdesc, a.affiliatedesc
order by c.category, v.vendorcode, p.productdesc, a.affiliatedesc


drop table #status


end
GO
/****** Object:  StoredProcedure [dbo].[get_ClientAccountSums]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[get_ClientAccountSums]
(
	@clientId int,
	@settled bit=null,
	@removed bit=null
)

AS

SET NOCOUNT ON

SELECT
	sum(total.CurrentAmount) as Total,
	sum(total.OriginalAmount) as OriginalTotal,
	sum(active.CurrentAmount) as TotalActive,
	sum(active.OriginalAmount) as OriginalTotalActive
FROM
	(
		SELECT
			a.AccountID,
			sum(a.CurrentAmount) as CurrentAmount,
			sum(a.OriginalAmount) as OriginalAmount
		FROM
			tblAccount a inner join
			tblCreditorInstance ci on a.CurrentCreditorInstanceID = ci.CreditorInstanceID
		WHERE
			clientid = @clientid
			and	(
				@settled is null or 
				(@settled = 1 and not settled is null) or
				(@settled = 0 and settled is null)
			)
			and	(
				@removed is null or 
				(@removed = 1 and not removed is null) or
				(@removed = 0 and removed is null)
			)
		GROUP BY
			a.AccountID
	) as total left join
	(
		SELECT
			a.AccountID,
			sum(a.CurrentAmount) as CurrentAmount,
			sum(a.OriginalAmount) as OriginalAmount
		FROM
			tblAccount a inner join
			tblCreditorInstance ci on a.CurrentCreditorInstanceID = ci.CreditorInstanceID
		WHERE
			clientid = @clientid 
			and settled is null 
			and removed is null
			and	(
				@settled is null or 
				(@settled = 1 and not settled is null) or
				(@settled = 0 and settled is null)
			)
			and	(
				@removed is null or 
				(@removed = 1 and not removed is null) or
				(@removed = 0 and removed is null)
			)
		GROUP BY
			a.AccountID
	) as active on total.AccountID = active.AccountID
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getPaid]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_settlementimport_reports_getPaid]
(
@year int,
@month int
)
as
BEGIN
	select 
	[Paid] = Team
	, [Fees] = sum(case when year(paid) = @year and month(paid) = @month  then settlementfees else 0 end)
	, [Units] = sum(case when year(paid) = @year and month(paid) = @month then 1 else 0 end)
	, [PctPaid] = convert(float,sum(case when year(paid) = @year and month(paid) = @month  then 1 else 0 end))/isnull(nullif(convert(float,(select count(*) from tblSettlementTrackerImports where year(date) = @year and month(date) = @month and team = sti.team)),0),1)
	, [AvgSettlementFeeAmt] = case when sum(case when year(paid) = @year and month(paid) = @month  then 1 else 0 end) =0 then 0 else sum(case when year(date) = @year and month(date) = @month and canceldate is null and expired is null then settlementfees else 0 end)/isnull(nullif(sum(case when year(date) = @year and month(date) = @month and not paid is null and canceldate is null and expired is null then 1 else 0 end),0),1)end
	, [AvgSettlementPct] = sum(case when year(paid) = @year and month(paid) = @month  then settlementamt else 0 end)/isnull(nullif(sum(case when year(date) = @year and month(date) = @month and canceldate is null and expired is null then balance else 0 end),0),1)
	from tblSettlementTrackerImports [sti]
	where not paid is null
	--and year(date) = @year and month(date) = @month and canceldate is null
	group by team 
	having sum(case when year(paid) = @year and month(paid) = @month and not paid is null then 1 else 0 end)>1
	order by team
END

GRANT EXEC ON stp_settlementimport_reports_getPaid TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetBankMasterAccount]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 12/07/2009
-- Description:	Gets the Bank Master Account number
-- =============================================
CREATE PROCEDURE [dbo].[stp_GetBankMasterAccount] 
(	
		@BankID int 
)
AS
BEGIN
	SET NOCOUNT ON;
		SELECT MasterAccountNo FROM tblBank_NACHA WHERE NACHABankID = @BankID
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetEnrollmentForClient]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetEnrollmentForClient]
	(
		@clientid int
	)

as

select
	tblenrollment.*,
	tblbehind.[name] as behindname,
	tblconcern.[name] as concernname,
	tblagency.[name] as agencyname,
	tblcompany.[name] as companyname
from
	tblenrollment left outer join
	tblbehind on tblenrollment.behindid = tblbehind.behindid left outer join
	tblconcern on tblenrollment.concernid = tblconcern.concernid left outer join
	tblagency on tblenrollment.agencyid = tblagency.agencyid left outer join
	tblcompany on tblenrollment.companyid = tblcompany.companyid
where
	tblenrollment.clientid = @clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMediationsForClient]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetMediationsForClient]
	(
		@clientid int
	)

as

select
	tblmediation.*,
	tblaccount.clientid,
	tblaccount.originalamount,
	tblaccount.currentamount,
	tblaccount.currentcreditorinstanceid,
	tblcreditorinstance.accountnumber,
	tblcreditorinstance.creditorid as currentcreditorid,
	tblcreditor.name as currentcreditorname,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.lastname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tblmediation inner join
	tblaccount on tblmediation.accountid = tblaccount.accountid inner join
	tblcreditorinstance on tblaccount.currentcreditorinstanceid = tblcreditorinstance.creditorinstanceid inner join
	tblcreditor on tblcreditorinstance.creditorid = tblcreditor.creditorid left outer join
	tbluser as tblcreatedby on tblmediation.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblmediation.lastmodifiedby = tbllastmodifiedby.userid
where
	tblaccount.clientid = @clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetStatementForClient]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetStatementForClient]

@clientid int

as

SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

select
	@clientid as ClientID,
	tcl.AccountNumber as ClientNumber,
	0 as registerfirst,
    r.registerid as id,
	r.transactiondate as date,
	r.checknumber,
	r.entrytypeid,
	et.[name] as entrytypename,
	r.originalamount,
	r.amount,
	r.sdabalance,
	r.pfobalance,
	r.description,
	r.accountid,
	c.name as accountcreditorname,
	ci.accountnumber,
	a.currentamount as accountcurrentamount,
	r.adjustedregisterid,
	ar.transactiondate as adjustedregistertransactiondate,
	ar.amount as adjustedregisteramount,
	ar.originalamount as adjustedregisteroriginalamount,
	ar.entrytypeid as adjustedregisterentrytypeid,
	--aret.name as adjustedregisterentrytypename,
	ar.accountid as adjustedregisteraccountid,
	arc.name as adjustedregisteraccountcreditorname,
	arci.accountnumber as adjustedregisteraccountnumber,
	r.achmonth,
	r.achyear,
	r.feemonth,
	r.feeyear,
	case when r.bounce is null and r.void is null then 0 else 1 end as bouncedorvoided,
	n.numnotes,
    pc.numphonecalls

into #tempresults

from
	tblregister r
	inner join tblentrytype et on r.entrytypeid = et.entrytypeid 
	left join tblClient tcl on r.ClientID = tcl.ClientID
	left join tblaccount a on r.accountid = a.accountid 
	left join tblcreditorinstance ci on a.originalcreditorinstanceid = ci.creditorinstanceid 
	left join tblcreditor c on ci.creditorid = c.creditorid 
	left join tblregister ar on r.adjustedregisterid = ar.registerid 
	left join tblaccount ara on ar.accountid = ara.accountid 
	left join tblcreditorinstance arci on ara.originalcreditorinstanceid = arci.creditorinstanceid 
	left join tblcreditor arc on arci.creditorid = arc.creditorid 
	left join tblentrytype aret on ar.entrytypeid = aret.entrytypeid 
	left join
	(
		select count(distinct noteid) as numnotes, relationid
		from tblnoterelation
		where relationtypeid = 4
		group by relationid
	)
	as n on r.registerid = n.relationid left join
	(
		select count(distinct phonecallid) as numphonecalls, relationid
		from tblphonecallrelation
		where relationtypeid = 4
		group by relationid
	)
	as pc on r.registerid = pc.relationid
	where r.ClientID = @clientid
	and (r.Bounce IS NULL 
	and r.Void IS NULL)
union all
select
	@clientid as ClientID,
	tcl.AccountNumber as ClientNumber,
	1 as registerfirst,
    rp.registerpaymentid as id,
    rp.paymentdate as date,
    '' as checknumber,
    -1 as entrytypeid,
    'Payment' as entrytypename,
    null as originalamount,
    rp.amount,
    rp.sdabalance,
    rp.pfobalance,
    null as description,
    null as accountid,
    null as accountcreditorname,
    null as accountnumber,
    null as accountcurrentamount,
    r.registerid as adjustedregisterid,
    r.transactiondate as adjustedregistertransactiondate,
    r.amount as adjustedregisteramount,
    r.originalamount as adjustedregisteroriginalamount,
    r.entrytypeid as adjustedregisterentrytypeid,
    --ret.name as adjustedregisterentrytypename,
    r.accountid as adjustedregisteraccountid,
    c.name as adjustedregisteraccountcreditorname,
    ci.accountnumber as adjustedregisteraccountnumber,
    null as achmonth,
    null as achyear,
    null as feemonth,
    null as feeyear,
    case when bounced = 0 and voided = 0 then 0 else 1 end as bouncedorvoided,
    n.numnotes,
    pc.numphonecalls
from
    tblregisterpayment rp
	inner join tblregister r on rp.feeregisterid = r.registerid 
	left join tblClient tcl on r.ClientID = tcl.ClientID
	left join tblaccount a on r.accountid = a.accountid 
	left join tblcreditorinstance ci on a.originalcreditorinstanceid = ci.creditorinstanceid 
	left join tblcreditor c on ci.creditorid = c.creditorid 
	left join tblentrytype ret on r.entrytypeid = ret.entrytypeid 
	left join
    (
	    select count(distinct noteid) as numnotes, relationid
		from tblnoterelation
		where relationtypeid = 5
		group by relationid
    )
    as n on rp.registerpaymentid = n.relationid left join
    (
		select count(distinct phonecallid) as numphonecalls, relationid
		from tblphonecallrelation
		where relationtypeid = 5
		group by relationid
    )
	as pc on rp.registerpaymentid = pc.relationid 
	where r.ClientID = @clientid
	and (rp.Bounced = 0 
	and rp.Voided = 0)
	
	order by Date, RegisterFirst, ID

	insert into tblStatementResults
	(
		ClientID,
		AccountNumber,
		RegisterFirst,
		registerID,
		TransactionDate,
		CheckNo,
		EntryTypeID,
		EntryTypeName,
		OrigionalAmt,
		Amount,
		SDABalance,
		PFOBalance,
		description,
		AccountID,
		CreditorName,
		CreditorAcctNo,
		CurrentAmount,
		AdjustRegisterID,
		AdjTransactionDate,
		AdjRegAmount,
		AdjRegOrigAmount,
		AdjRegEntryTypeID,
		AdjRegAcctID,
		AdjRegAcctCreditorName,
		AdjRegAcctAcctNo,
		ACHMonth,
		ACHYear,
		FeeMonth,
		FeeYear,
		BounceOrVoid,
		NumNotes,
		NumPhoneCalls
	)
	select * from #tempresults

drop table #tempresults
GO
/****** Object:  StoredProcedure [dbo].[stp_SmartDebtor_KPI_Grouping]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SmartDebtor_KPI_Grouping]
(
 @startDate datetime,
 @endDate datetime
)
as
BEGIN



--load all valid dnis
declare @phonelists table(forDate datetime, dnis varchar(4))
declare @dnislist table(forDate datetime, dnis varchar(4))

--get max date before startdate
insert into @phonelists 
select distinct fordate, right(phone ,4)
from tblleadphonelist
where fordate = (
	select max(fordate)
	from tblleadphonelist
	where fordate <= @startdate and deleted = 0
)

insert into @phonelists
select fordate, dnis
from (
	select distinct fordate, right(phone ,4)[dnis]
	from tblleadphonelist
	where fordate >= @startdate and deleted = 0
) r
where not exists (select 1 from @phonelists p where p.fordate = r.fordate and p.dnis = r.dnis)

--select * from @phonelists

declare @forDate datetime, @nextfordate datetime, @dnis char(4)
declare curList cursor for select forDate, dnis from @phonelists

open curList
fetch next from curList into @forDate, @dnis
while @@fetch_status = 0 begin 
	set @nextfordate = null;

	select @nextfordate = min(fordate) from @phonelists where fordate > @fordate;

	if @nextfordate is null begin
		set @nextfordate = dateadd(d,7,@fordate);
	end;

	with mycte as (
		select @fordate as DateValue
		union all 
		select DateValue + 1 
		from    mycte    
		where   DateValue + 1 < convert(varchar,@nextfordate) 
	) 
	insert @dnislist (fordate,dnis) 
	select DateValue, @dnis from mycte where datevalue between @fordate and @nextfordate
	OPTION (MAXRECURSION 0)

	fetch next from curList into @forDate, @dnis
end

close curList
deallocate curList

--select * from @dnislist order by fordate


declare @tblData table(
	[Type] varchar(25),
	DNIS varchar(10),
	I3CallIDKey varchar(150),
	StationID varchar(150),
	initiated datetime
)


insert into @tblData
select 
[Type] = 'INTERNET',
[DNIS] = '00000' ,
[I3CallIDKey] = '00000' ,
[StationID] = '00000' ,
[initiated]= la.created
from tblleadapplicant la 
where la.leadsourceid in (5,7,8)  
and la.Created between @startdate and @enddate
and la.refund = 0


insert into @tblData
select
 [Type] = 'PHONE'
,[DNIS] = substring(cd.dnis,5,4)
,[I3CallIDKey] = cd.callid
,[StationID] = case when cd.stationid = 'System' or cd.calldurationseconds < 10 then 'System' else '' end
,[initiated]= cd.ConnectedDate
from [DMF-SQL-0001].i3_cic.dbo.calldetail cd 
join @dnislist td on convert(varchar(10),td.fordate,101) = convert(varchar(10),cd.ConnectedDate,101)
	and td.dnis = substring(cd.dnis,charindex(':',cd.dnis)+1,4)
	and td.fordate <= @enddate
join tblleadapplicant l on l.callidkey = cd.callid	
where cd.dnis is not null 
and cd.calldirection = 'inbound' 
and cd.calltype = 'external' 
and cd.ConnectedDate between @startdate and @enddate
and cd.InteractionType = 0 
and l.refund = 0



declare @tblRpt table (ConnectDate varchar(10), 
						TotalInboundCalls int, 
						TotalInternet int, 
						TotalSystemCalls int, 
						TotalCallsAnswered int, 
						NumCasesAgainstMarketingDollars int, 
						CostPerLead Money,
						ConversionPercent float, 
						MarketingBudgetSpentPerDay Money, 
						CostPerConversionDay Money, 
						TotalNumCases int) 


-- Submitted cases
create table #submitted
(
	leadapplicantid int,
	submitted datetime
)

if @startdate > '3/31/2010' begin
	-- this count should match the Verification transfer history
	insert #submitted
	select leadapplicantid, min(created) [submitted]
	from tblleadstatusroadmap 
	where leadstatusid in (10) -- In Process
	and created between @startdate and @enddate
	group by leadapplicantid
end
else begin
	insert #submitted
	select leadapplicantid, min(created) [submitted]
	from tblleadstatusroadmap 
	where leadstatusid in (6,10) -- Signed, In Process
	and created between @startdate and @enddate
	group by leadapplicantid
end
	

insert @tblRpt 
select 
 [ConnectDate] = convert(varchar(10),initiated,101) 
, [TotalInboundCalls] = SUM(CASE WHEN [TYPE] = 'PHONE' THEN 1 ELSE 0 END) 
, [TotalInternet] = SUM(CASE WHEN [TYPE] = 'INTERNET' THEN 1 ELSE 0 END) 
, [TotalSystemCalls] = sum(case when Stationid = 'System' then 1 else 0 end) 
, [TotalCallsAnswered] = 0 
, [NumCasesAgainstMarketingDollars] = 0 
, [CostPerLead] = 0  	
, [ConversionPercent] = 0 
, [MarketingBudgetSpentPerDay] = 0 
, [CostPerConversionDay] = 0
, [TotalNumCases] = (select count(leadapplicantid) from #submitted where convert(varchar(10),submitted,101) = convert(varchar(10),initiated,101)) 
from @tblData
group by convert(varchar(10),initiated,101)
order by convert(varchar(10),initiated,101);

drop table #submitted


declare @numDate varchar(10) 
declare @nextDate varchar(10)
declare NumCur cursor for select convert(varchar(10),connectdate, 101)from @tblRpt 

open NumCur 
fetch next from NumCur into @numDate 
while @@fetch_status = 0 begin 
  declare @numCnt int 

  set @nextDate = convert(varchar(10),dateadd(d,1,@numDate), 101) 

  select @numCnt = count(*)
  from vw_enrollment_CurrentStatusCreated v
  join tblleadapplicant l on l.leadapplicantid = v.leadapplicantid
  where (v.currentstatusid in (6,7,10,11,18,19) or l.reasonid = 24) -- success statuses
  and leadcreated between @numDate and @nextDate  
  and l.refund = 0

  update @tblRpt set NumCasesAgainstMarketingDollars = @numCnt where connectdate between @numDate and @nextDate

  fetch next from NumCur into @numDate 
end 
close NumCur deallocate NumCur 


update @tblRpt
set MarketingBudgetSpentPerDay = cost
from @tblRpt r
join (
	select convert(varchar(10),created,101) [created], sum(cost)[cost]
	from tblleadapplicant
	where refund = 0
	group by convert(varchar(10),created,101)
) l
on l.created = r.ConnectDate


update @tblRpt set CostPerConversionDay = case when NumCasesAgainstMarketingDollars = 0 then 0 else convert(float,MarketingBudgetSpentPerDay) / convert(float,NumCasesAgainstMarketingDollars) end;
update @tblRpt set TotalCallsAnswered = TotalInboundCalls - TotalSystemCalls; 
update @tblRpt set ConversionPercent = NumCasesAgainstMarketingDollars / convert(float,TotalCallsAnswered + TotalInternet) where (TotalCallsAnswered + TotalInternet) > 0


declare @inboundoffset int, @systemoffset int

-- since we weren't tracking inbound calls earlier this year use these call totals tracked manually
if month(@startdate) = 1 and year(@startdate) = 2010 begin
	set @inboundoffset = 855
	set @systemoffset = 160
end
else if month(@startdate) = 2 and year(@startdate) = 2010 begin
	-- this offset accounts for Feb 1-4
	set @inboundoffset = 74
	set @systemoffset = 8
end
else begin
	set @inboundoffset = 0
	set @systemoffset = 0
end


select 
  [StartEnd] = datename(m,@startDate) + ' ' + datename(yy,@startDate) 
, [Inbound Calls] = sum(TotalInboundCalls) + @inboundoffset 
, [Internet Leads] = sum(TotalInternet)
, [Total Leads] = sum(TotalInboundCalls) + sum(TotalInternet) + @inboundoffset 
, [System Calls] = sum(TotalSystemCalls) + @systemoffset 
, [Calls Answered] = sum(TotalInboundCalls) + @inboundoffset - sum(TotalSystemCalls) - @systemoffset 
, [Num Cases Against Marketing Dollars] = sum(NumCasesAgainstMarketingDollars)
, [Cost Per Lead] = Case when (sum(TotalInboundCalls) + sum(TotalInternet)) = 0 Then 0 else sum(MarketingBudgetSpentPerDay) / (sum(TotalInboundCalls) + sum(TotalInternet) + @inboundoffset) end 
, [Conversion Pct] = sum(NumCasesAgainstMarketingDollars) / convert(float,sum(TotalInboundCalls) + @inboundoffset - sum(TotalSystemCalls) - @systemoffset + sum(TotalInternet)) 
, [Marketing Budget Spent] = sum(MarketingBudgetSpentPerDay)
, [Cost Per Conversion Day] = case when sum(NumCasesAgainstMarketingDollars) = 0 then 0 else sum(MarketingBudgetSpentPerDay) / sum(NumCasesAgainstMarketingDollars)end
, [Submitted Cases] = sum(TotalNumCases)
from @tblRpt   


select datename(m,@startDate) + ' ' + datename(yy,@startDate) [StartEnd]
,ConnectDate
,TotalInboundCalls
,TotalInternet
,TotalInboundCalls + TotalInternet [Total Leads]
,TotalSystemCalls
,TotalCallsAnswered
,NumCasesAgainstMarketingDollars
,[CostPerLead] = Case when TotalInboundCalls + TotalInternet = 0 Then 0 else MarketingBudgetSpentPerDay/(TotalInboundCalls + TotalInternet) end
,ConversionPercent
,MarketingBudgetSpentPerDay
,CostPerConversionDay
,TotalNumCases
from @tblRpt 
ORDER BY cast(CONNECTDATE as datetime)


END

GRANT EXEC ON stp_SmartDebtor_KPI_Grouping TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMatterAuditrev05]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <05 - 15 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Retrives the details for matter road map
*/
CREATE procedure [dbo].[stp_GetMatterAuditrev05]
@MatterID as int=0
as 
select 1 as seq, 0 as taskid, null as resolved,
 ma.fieldname as [description], null as due , u.firstname+' '+u.lastname Createdbyname,   ma.updatedate as created,
case fieldname when 'MatterStatusCodeId' then  
(select matterStatusCode as oldfieldvalue from tblMatterStatusCode where matterstatuscodeid=oldvalue) +'-->'+
(select matterStatusCode as newfieldvalue from tblMatterStatusCode where matterstatuscodeid=newvalue)
when 'AttorneyId' then  
case when oldvalue  is null then 'NONE' when oldvalue =0 then 'TBD' else
(select  FirstName +' '+Lastname as oldfieldvalue from tblAttorney where attorneyid=oldvalue) 
end +'-->'+
case when newvalue  is null then 'NONE' when newvalue =0 then 'TBD' else
(select FirstName +' '+Lastname as newfieldvalue from tblAttorney where attorneyid=newvalue)
end
when 'MatterStatusId' then 
isnull((select  isnull(Matterstatus,'') as oldfieldvalue from tblmatterstatus where matterstatusid=oldvalue) ,'')
  +'-->'+
isnull((select  isnull(Matterstatus,'') as newfieldvalue from tblmatterstatus where matterstatusid=newvalue) ,'')
  
when 'MatterSubStatusId' then 
isnull((select  isnull(MatterSubStatus,'') as oldfieldvalue from tblmattersubstatus where MatterSubStatusId=oldvalue),'') 
  +'-->'+
isnull((select  isnull(MatterSubStatus,'') as newfieldvalue from tblmattersubstatus where MatterSubStatusId=newvalue) ,'')
 
when 'CreditorInstanceId' then  
case when oldvalue  is null then 'NONE' when oldvalue =0 then 'TBD' else
isnull((select c.Name from tblcreditorinstance Ci, tblcreditor c 
where ci.creditorid=c.creditorid and ci.creditorinstanceid=oldvalue),'') 
end +'-->'+
case when newvalue  is null then 'NONE' when newvalue =0 then 'TBD' else
isnull((select c.Name from tblcreditorinstance Ci, tblcreditor c where ci.creditorid=c.creditorid and ci.creditorinstanceid=newvalue),'')
end

 
 
end as change
 from tblmatteraudit ma  
inner join tbluser u on ma.username=u.userid
 where replace(replace(pk,'<MatterId=',''),'>','')=@MatterID
 and Type='U' 

 union 
 
select 2 as seq,   tbltask.taskid, tbltask.Resolved,   tbltask.Description, tbltask.Due , 
		tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname ,tbltask.created, '' as change
		 	from
		tbltask left outer join
		tblclienttask on tbltask.taskid = tblclienttask.taskid left outer join
		tblclient on tblclienttask.clientid = tblclient.clientid left outer join
		tblperson on tblclient.primarypersonid = tblperson.personid left outer join
		tbltasktype on tbltask.tasktypeid = tbltasktype.tasktypeid left outer join
		tbltasktypecategory on tbltasktype.tasktypecategoryid = tbltasktypecategory.tasktypecategoryid left outer join
		tbltaskresolution on tbltask.taskresolutionid = tbltaskresolution.taskresolutionid left outer join
		tbluser as tblassignedto on tbltask.assignedto = tblassignedto.userid left outer join
		tbluser as tblresolvedby on tbltask.resolvedby = tblresolvedby.userid left outer join
		tbluser as tblcreatedby on tbltask.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on tbltask.lastmodifiedby = tbllastmodifiedby.userid
		left outer join tblmattertask on tblmattertask.taskid = tbltask.taskid	
		left outer join tblUserType as tblassignedtousertype on tblassignedtousertype.usertypeid =tblassignedto.usertypeid
		left outer join tbluserGroup as tblassignedtousergroup on tblassignedtousergroup.usergroupid = tblassignedto.usergroupid
	  WHERE tblmattertask.MatterID=@MatterID and IsNull(tbltask.parentTaskID,0)=0

union

	select 3 as seq, 0 as taskid, null as resolved, 		 
		n.value as description,null as due, 
		u.firstname + ' ' + u.lastname + '</br>' + ug.Name as createdbyname, 
	 
		n.created as created,
		ut.name as change 
	from 
		tblnote n left outer join
		tbluser u on n.createdby=u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype='User Type' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype='User Group' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype='User' left outer join
		(
			select
				nn.noteid,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblnoterelation nr 
				inner join tblnote nn on nr.noteid=nn.noteid
				inner join tblrulecommcolor rcc on rcc.entityid=nr.relationtypeid
			where
				nr.relationid=@matterid
				and rcc.entitytype='Relation Type'
			group by
				nn.noteid
		) rc on rc.noteid=n.noteid
		inner join tblusergroup as ug on ug.usergroupid = n.usergroupid
	 left outer join tblnoterelation nr on n.noteid=nr.noteid  
  where 
		nr.relationid= @matterid  and nr.relationtypeid=19 

union

select  4 as seq, 0 as taskid , pc.endtime as resolved,
pc.subject+':'+pc.body +'->'+p.firstname + ' ' + p.lastname  as description,null as due, 
tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,pc.starttime as  created,
case pc.direction when 1 then 'out' else 'in' end  change
	from 	tblphonecall pc left outer join
		tblperson p on pc.personid = p.personid left outer join
		tbluser u on pc.userid = u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tbluser as tblcreatedby on pc.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on pc.lastmodifiedby = tbllastmodifiedby.userid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype='User Type' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype='User Group' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype='User' left outer join
		(
			select
				npc.phonecallid,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblphonecallrelation pcr 
				inner join tblphonecall npc on pcr.phonecallid=npc.phonecallid
				inner join tblrulecommcolor rcc on rcc.entityid=pcr.relationtypeid
			where
				pcr.relationID= @matterid
				and rcc.entitytype='Relation Type'
			group by
				npc.phonecallid
		) rc on rc.phonecallid=pc.phonecallid
		inner join tblusergroup as ug on ug.usergroupid = pc.usergroupid
	  left outer join tblphonecallrelation pcr on pc.phonecallid=pcr.phonecallid 
  where pcr.relationID=@matterid and pcr.relationtypeid=19  

union 

SELECT  5 as seq, dr.DocRelationID as taskid , null as resolved, dt.DisplayName as description, isnull(ds.ReceivedDate, '01/01/1900') as due,  
isnull(u.FirstName + ' ' + u.LastName + '</br>' + ug.Name, '') as createdbyname,
isnull(dr.RelatedDate, '01/01/1900') as Created, 
--isnull(ds.Created, '01/01/1900') as Created, 
case deletedflag when 1 then 'Deleted' else '' end as  change FROM tblDocRelation as dr inner join tblDocumentType as dt  
on dt.TypeID = dr.DocTypeID left join tblDocScan as ds on ds.DocID = dr.DocID left join tblUser as u on u.UserID = dr.RelatedBy inner join tblusergroup as ug on ug.usergroupid = u.usergroupid  
WHERE dr.RelationID =@MatterID and dr.RelationType = 'matter' and (DeletedFlag = 0 or DeletedBy = -1)  
 

union

	select 6 as seq, 0 as taskid, null as resolved, 		 
		n.MailSubject as description,null as due, 
		u.firstname + ' ' + u.lastname + '</br>' + ug.Name as createdbyname, 
	 
		n.createdDate as created,
		ut.name as change 
	from 
		tblEmailRelayLog n left outer join
		tbluser u on n.createdby=u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype='User Type' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype='User Group' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype='User' left outer join
		(
			select
				nn.EMailLogID,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblEmailRelayRelation nr 
				inner join tblEmailRelayLog nn on nr.EMailLogID=nn.EMailLogID
				inner join tblrulecommcolor rcc on rcc.entityid=nr.relationtypeid
			where
				nr.relationid=@matterid
				and rcc.entitytype='Relation Type'
			group by
				nn.EMailLogID
		) rc on rc.EMailLogID=n.EMailLogID
		inner join tblusergroup as ug on ug.usergroupid = n.usergroupid
	 left outer join tblEmailRelayRelation nr on n.EMailLogID=nr.EMailLogID  
  where 
		nr.relationid= @matterid  and nr.relationtypeid=19 
order by created
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getCancelled]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_reports_getCancelled]
	(
		@year int,
		@month int
	)
AS
BEGIN
	declare @totalAmt money
	select @totalAmt = sum(settlementfees) from tblSettlementTrackerImports where year(canceldate) = year(getdate()) and month(canceldate) = @month 
	select 
		[Amount] = '$' + convert(varchar, sum(case when year(canceldate) = @year and month(canceldate) = @month and paid is null then settlementfees else 0 end),1)
		, [Total] = sum(case when year(canceldate) = @year and month(canceldate) = @month  then 1 else 0 end)
		, [Pct] = case when sum(case when year([date]) = @year and month([date]) = @month then 1 else 0 end) = 0 then 0
					else 
					sum(case when year(canceldate) = @year and month(canceldate) = @month  then 1 else 0 end)/cast(sum(case when year([date]) = @year and month([date]) = @month then 1 else 0 end) as float)end *100 
	from 
		tblSettlementTrackerImports
	
END


GRANT EXEC ON stp_settlementimport_reports_getCancelled TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationInsertCreditor]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_NegotiationInsertCreditor]
(
	@CreditorName varchar(50)
,	@Street1 varchar(50)
,	@Street2 varchar(50)
,	@City varchar(50)
,	@StateID int
,	@ZipCode varchar(50)
,	@CreatedBy int
,	@Validated bit
)
as
begin

insert tblCreditor (
	Name,
	Street,
	Street2,
	City,
	StateID,
	ZipCode,
	Created,
	CreatedBy,
	LastModified,
	LastModifiedBy,
	Validated
)
values (
	@CreditorName,
	@Street1,
	@Street2,
	@City,
	@StateID,
	@ZipCode,
	getdate(),
	@CreatedBy,
	getdate(),
	@CreatedBy,
	@Validated
)


select scope_identity()


end
GO
/****** Object:  StoredProcedure [dbo].[stp_SaveUserCompany]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SaveUserCompany]
(
	@UserID int
,	@CompanyIDs varchar(50)
)
as
begin


if @CompanyIDs = '-1' begin
	delete from tblUserCompany where UserID = @UserID
end
else if not exists (select 1 from tblUserCompany where UserID = @UserID) begin
	insert tblUserCompany values (@UserID, @CompanyIDs)
end
else begin
	update tblUserCompany set CompanyIDs = @CompanyIDs where UserID = @UserID
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_SmartDebtor_GetAgentInfoFromUserID]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_SmartDebtor_GetAgentInfoFromUserID]
(
	@userid int
)
as
BEGIN
	/* dev
	declare @userid int
	set @userid = 443
	*/

	declare @username varchar(50)
	Select @username = username from tbluser where userid = @userid
	select 
		ParaLegalExt = case Department when 'Litigation' then replace(BusinessPhone, '/','7') else replace(BusinessPhone, '/','')end 
		,firstname + ' ' + LastName as ParaLegalName 
	from 
	[dmf-sql-0001].i3_cic.dbo.indivdetails 
	where 
		icuserid = @username 
	order by 
		ParaLegalExt

END


GRANT EXEC ON stp_SmartDebtor_GetAgentInfoFromUserID TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[_stp_CollectACHCommissionNEWTest]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--create table _tblCollectACHCommissionNEWLog (date datetime,companyid int, trustid int, commrecid int, recdisplay varchar(50), parentcommrecid int, pardisplay varchar(50), transferamount money)

CREATE procedure [dbo].[_stp_CollectACHCommissionNEWTest] as

declare @vtblCommBatches table
(
	CompanyID int,
	TrustID int,
	CommBatchTransferID int,
	CommRecID int,
	RecDisplay varchar(100),
	RecIsPersonal bit,
	RecRoutingNumber varchar(9),
	RecAccountNumber varchar(25),
	RecAccountType varchar,
	ParentCommRecID int,
	ParDisplay varchar(100),
	ParIsPersonal bit,
	ParRoutingNumber varchar(9),
	ParAccountNumber varchar(25),
	ParAccountType varchar,
	TransferAmount money
)

INSERT INTO
	@vtblCommBatches
SELECT
	cbt.CompanyID,
	cbt.TrustID,
	cbt.CommBatchTransferID,
	rec.CommRecID as CommRecID,
	rec.Display as RecDisplay,
	~rec.IsCommercial as RecIsPersonal,
	rec.RoutingNumber as RecRoutingNumber,
	rec.AccountNumber as RecAccountNumber,
	isnull(rec.[Type], 'C') as RecAccountType,
	par.CommRecID as ParentCommRecID,
	par.Display as ParDisplay,
	~par.IsCommercial as ParIsPersonal,
	par.RoutingNumber as ParRoutingNumber,
	par.AccountNumber as ParAccountNumber,
	isnull(par.[Type], 'C') as ParAccountType,
	round(cbt.TransferAmount, 2)
FROM
	tblCommBatchTransfer as cbt
	inner join tblCommRec as rec on rec.CommRecID = cbt.CommRecID and rec.IsLocked = 0 and lower(rec.Method) = 'ach'
	left join tblCommRec as par on par.CommRecID = cbt.ParentCommRecID
WHERE
	cbt.CheckDate is null
	and cbt.CheckNumber is null
	and cbt.CompanyID is not null
	and cbt.CommBatchTransferID not in
	(
		select distinct
			nc.TypeID
		from
			tblNachaCabinet as nc
		join 
			tblNachaRegister nr on nr.NachaRegisterID = nc.NachaRegisterID
		where
			nr.IsDeclined = 0
			and lower(nc.Type) = 'commbatchtransferid'
			and nc.TrustID = 20 -- Colonial clients
			
		union
		
		select
			nc.typeid
		from
			tblnachacabinet nc 
		join
			tblnacharegister2 nr on nc.nacharegisterid = nr.nacharegisterid
		where
			lower(nc.Type) = 'commbatchtransferid'
			and nc.TrustID = 22 -- CheckSite clients

		union

		select 
			cbt.commbatchtransferid [typeid]
		from 
			tblcommbatchtransfer cbt
		join 
			tblcommbatch b on b.commbatchid = cbt.commbatchid
				and b.batchdate < cast(convert(char(10),getdate(),101) as datetime) -- cut off date for new workflow **for testing this has to be set
																					-- to today's date since the new records wont be inserted into
																					-- nachacabinet yet
		where 
			cbt.commrecid in (31,34,38) -- Ini, Moss, Peav GCA's
	)

insert 
	_tblCollectACHCommissionNEWLog (date,companyid, trustid, commrecid, recdisplay, parentcommrecid, pardisplay, transferamount)
SELECT
	getdate(),
	CompanyID,
	TrustID,
	CommRecID,
	RecDisplay,
	--RecIsPersonal,
	--RecRoutingNumber,
	--RecAccountNumber,
	--RecAccountType,
	ParentCommRecID,
	ParDisplay,
	--ParIsPersonal,
	--ParRoutingNumber,
	--ParAccountNumber,
	--ParAccountType,
	sum(TransferAmount) as TransferAmount
FROM
	@vtblCommBatches
WHERE
	ParentCommRecID is not null
		and parentcommrecid not in (4,27) -- 
GROUP BY
	CompanyID,
	TrustID,
	CommRecID,
	RecDisplay,
	--RecIsPersonal,
	--RecRoutingNumber,
	--RecAccountNumber,
	--RecAccountType,
	ParentCommRecID,
	ParDisplay--,
	--ParIsPersonal,
	--ParRoutingNumber,
	--ParAccountNumber,
	--ParAccountType
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMattertasks]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <04 - 23 December 2009>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Populating the tasks of a matter

*/



CREATE procedure [dbo].[stp_GetMattertasks]
(
	@MatterId int
)
AS


BEGIN

Select *, (Select FromUTC from tblTimeZone Where DBIsHere=1) as DBTimeDiff
FROM dbo.tblMatterTask M, dbo.tblTask T left outer join tblTimeZone Z 
on T.DueDateZoneDisplay=Z.TimeZoneID
Where M.TaskID=T.TaskID and M.MatterID=@MatterId
and t.Resolved is null
order by Created

END
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_UpdateExpiredSettlements]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_UpdateExpiredSettlements]
/*
	(
		@parameter1 int = 5,
		@parameter2 datatype OUTPUT
	)

*/
AS
BEGIN
	declare @tblsett table(settlementid numeric)

	insert into @tblsett
	select s.settlementid
	from tblsettlements s
	inner join tblaccount a on s.creditoraccountid = a.accountid
	where settlementduedate < dateadd(d,-1,getdate()) and active = 1 and status = 'a' and accountstatusid <> 54
	order by settlementduedate desc
	
	update tblsettlementtrackerimports
	set expired = due
	where settlementid in (select settlementid from @tblsett) and paid is null and canceldate is null
END
GO
/****** Object:  StoredProcedure [dbo].[stp_HomepageChartEnrollmentDidNotQualify]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_HomepageChartEnrollmentDidNotQualify]
 (
  @refwhere varchar (8000) = '',
  @dategrouping int = 0
 )
 
as
 

declare @datefield varchar (500)
declare @field varchar(50)
set @field='tblenrollment.created'

if @dategrouping = 0 -- daily grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar, ' + @field + ', 101))'
	end
else if @dategrouping = 1 -- weekly grouping
	begin
		set @datefield = 'dateadd(day, 1 - datepart(dw, ( convert(varchar, ' + @field + ', 101) )), ( convert(varchar, ' + @field + ', 101) ))'
	end
else if @dategrouping = 2 -- monthly grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar(2), month(' + @field + ')) + N''/1/'' + convert(varchar(4), year(' + @field + ')))'
	end
else if @dategrouping = 3 -- yearly grouping
	begin
		set @datefield = 'convert(datetime, N''1/1/'' + convert(varchar(12), year(' + @field + ')))'
	end
 
exec
(
 'select
   ' + @datefield + ' as [time],
   count(tblenrollment.enrollmentid) as CountEnrollment
 from
   tblenrollment inner join
		tblclient on tblenrollment.clientid=tblclient.clientid where qualified=0 '
 + @refwhere + ' 
 group by
   ' + @datefield + '
 having
   not ' + @datefield + ' is null
 order by 
   ' + @datefield
)
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTaskRoadMap]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <01- 11 March 2010>
      Category    : [TimeMatter]
      Type        : {Update}
      Decription  : Returns RoadMap of Tasks 
				    List Parent and childs tasks
					-used in Task Detail screen
*/

CREATE PROCEDURE [dbo].[stp_GetTaskRoadMap]
(
	@TaskId int,
	@OrderBy varchar(100)=''
)

As
declare @clientjoin varchar(2000)
--DECLARE @TaskId int
--SET @TaskId=53

-- 1. show the Child
--- if the task is parent task then show all its children

IF (Select ParentTaskId from tblTask where taskId=@TaskId) is null
BEGIN
---1. Show the parent union
--2. show its children
set @clientjoin = '
select taskId,(Select FirstName+'' ''+ LastName from tbluser Where UserID=tblTask.AssignedTo) as AssignedTo, 
Case tblTask.TaskTypeID When 0 Then ''Ad Hoc'' Else (Select [Name] from tbltasktype Where TaskTypeID=tblTask.TaskTypeID) End as TaskType,
Description, tblTask.Created as CreatedDate, tblTask.Due as DueDate,
(Select FirstName+'' ''+ LastName from tbluser Where UserID=tblTask.CreatedBy) as CreatedBy,Resolved,tr.TaskResolutionId 
from dbo.tblTask left  join dbo.tblTaskResolution tr on tr.TaskResolutionId=dbo.tblTask.TaskResolutionId
where TaskId = '+ cast(@TaskId as varchar)+' 
union
select taskId,(Select FirstName+'' ''+ LastName from tbluser Where UserID=tblTask.AssignedTo) as AssignedTo, 
Case tblTask.TaskTypeID When 0 Then ''Ad Hoc'' Else (Select [Name] from tbltasktype Where TaskTypeID=tblTask.TaskTypeID) End as TaskType,
Description, tblTask.Created as CreatedDate, tblTask.Due as DueDate,
(Select FirstName+'' ''+ LastName from tbluser Where UserID=tblTask.CreatedBy) as CreatedBy,Resolved,tr.TaskResolutionId 
from dbo.tblTask left  join dbo.tblTaskResolution tr on tr.TaskResolutionId=dbo.tblTask.TaskResolutionId
where ParentTaskId ='+ cast(@TaskId as varchar)+' order by '+@OrderBy  
--print @clientjoin
exec(@clientjoin)
END
ELSE
begin
 -- the task is a child task union
---2. show the parrent
set @clientjoin = '
select taskId,(Select FirstName+'' ''+ LastName from tbluser Where UserID=tblTask.AssignedTo) as AssignedTo, 
Case tblTask.TaskTypeID When 0 Then ''Ad Hoc'' Else (Select [Name] from tbltasktype Where TaskTypeID=tblTask.TaskTypeID) End as TaskType,
Description, tblTask.Created as CreatedDate, tblTask.Due as DueDate,
(Select FirstName+'' ''+ LastName from tbluser Where UserID=tblTask.CreatedBy) as CreatedBy,Resolved,tr.TaskResolutionId 
from  dbo.tblTask left join dbo.tblTaskResolution tr on tr.TaskResolutionId=dbo.tblTask.TaskResolutionId
where TaskId='+ cast(@TaskId as varchar)+'  
union
select taskId,(Select FirstName+'' ''+ LastName from tbluser Where UserID=tblTask.AssignedTo) as AssignedTo, 
Case tblTask.TaskTypeID When 0 Then ''Ad Hoc'' Else (Select [Name] from tbltasktype Where TaskTypeID=tblTask.TaskTypeID) End as TaskType,
Description, tblTask.Created as CreatedDate, tblTask.Due as DueDate,
(Select FirstName+'' ''+ LastName from tbluser Where UserID=tblTask.CreatedBy) as CreatedBy,Resolved,tr.TaskResolutionId 
from tblTask left join dbo.tblTaskResolution tr on tr.TaskResolutionId=dbo.tblTask.TaskResolutionId
where TaskId = (Select ParentTaskId from tbltask where TaskId='+ cast(@TaskId as varchar)+')' +' order by '+@OrderBy  
--print @clientjoin
exec(@clientjoin)
end
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getNegotiatorTotals]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_reports_getNegotiatorTotals]

	(
		@year int,
		@month int
	)


AS
BEGIN

declare @tblTeam table([NegotiatorName] varchar(150),[TotalFees] money,[TotalBalance]  money,[TotalSettAmt] money,[TotalUnits] int
,[TotalAvgPct] float,[PaidFees] money,[PaidBalance] money,[PaidSettAmt] money,[PaidUnits] int,[PaidAvgPct] float,[PctPaid] float, [AllSubmissions] int)

insert into @tblTeam
select 
[NegotiatorName] = Negotiator
,[TotalFees] = convert(money,sum(case when year(date) = @year and month(date) = @month and canceldate is null then settlementfees else 0 end))
,[TotalBalance]  =  sum(case when year(date) = @year and month(date) = @month and canceldate is null then balance else 0 end)
,[TotalSettAmt] =  sum(case when year(date) = @year and month(date) = @month and canceldate is null then settlementamt else 0 end)
,[TotalUnits] = sum(case when year(date) = @year and month(date) = @month and canceldate is null then 1 else 0 end)
,[TotalAvgPct] = case when sum(case when year(date) = @year and month(date) = @month and canceldate is null then balance else 0 end) = 0 then 0 else sum(case when year(date) = @year and month(date) = @month and canceldate is null then settlementamt else 0 end)/sum(case when year(date) = @year and month(date) = @month and canceldate is null then balance else 0 end)end
,[PaidFees] = convert(money,sum(case when year(paid) =@year and month(paid) = @month and paid is not null and canceldate is null then settlementfees else 0 end))
,[PaidBalance] = sum(case when year(paid) =@year and month(paid) = @month and paid is not null and canceldate is null  then balance else 0 end)
,[PaidSettAmt] = sum(case when year(paid) =@year and month(paid) = @month and paid is not null and canceldate is null  then settlementamt else 0 end)
,[PaidUnits] = sum(case when  year(paid) =@year and month(paid) = @month and paid is not null and canceldate is null  then 1 else 0 end)
,[PaidAvgPct] = case when sum(case when year(paid) =@year and month(paid) = @month and paid is not null and canceldate is null  then balance else 0 end) = 0 then 0 else sum(case when year(paid) =@year and month(paid) = @month and paid is not null and canceldate is null  then settlementamt else 0 end)/sum(case when year(paid) =@year and month(paid) = @month and paid is not null and canceldate is null  then balance else 0 end) end
,[PctPaid] = sum(case when  year(paid) =@year and month(paid) = @month and paid is not null and canceldate is null  then 1 else 0 end)/cast(isnull(nullif(sum(case when year(date) = @year and month(date) = @month and canceldate is null then 1 else 0 end),0),0) as float)
,[AllSubmissions] = sum(case when year(date) = @year and month(date) = @month then 1 else 0 end)
from tblSettlementTrackerImports [sti]
--where year(date) =@year and month(date) = @month 
group by Negotiator 
having sum(case when  year(paid) =@year and month(paid) = @month and paid is not null and canceldate is null  then 1 else 0 end) > 1
order by Negotiator

select * from @tblTeam where totalunits > 0 order by negotiatorname

END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetJobStepLastRunTime]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[stp_GetJobStepLastRunTime]  
@StepName Varchar(max)
AS
BEGIN
select top 1 CONVERT(DATETIME, RTRIM(run_date)) + (run_time * 9  + run_time % 10000 * 6 + run_time % 100 * 10 + 25 * run_duration) / 216e4 
from msdb.dbo.sysjobhistory
where step_name = @StepName
and run_status = 1
order by instance_id desc
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SaveUserAgencyAccess]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SaveUserAgencyAccess]
(
	@UserID int,
	@AgencyIDs varchar(1000)
)
as
begin

if @AgencyIDs = '-99' begin
	select @AgencyIDs = coalesce(@AgencyIDs + ',', '') + cast(AgencyID as varchar(4))
	from tblAgency
end

insert 
	tblUserAgencyAccess (UserID, AgencyID)
select 
	UserID, AgencyID
from 
(
	select @UserID as UserID, a.AgencyID
	from dbo.splitstr(@AgencyIDs,',') s
	join tblAgency a on a.AgencyID = s.Value
) dev
where not exists (select 1 from tblUserAgencyAccess u where u.UserID = dev.UserID and u.AgencyID = dev.AgencyID)


delete from tblUserAgencyAccess
where UserID = @UserID
and AgencyID not in (select [value] from dbo.splitstr(@AgencyIDs,','))


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPhonesForPerson]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetPhonesForPerson]
	(
		@personid int
	)

as

select
	tblpersonphone.personphoneid,
	tblphone.*,
	tblphonetype.[name] as phonetypename,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tblphone inner join
	tblpersonphone on tblphone.phoneid = tblpersonphone.phoneid inner join
	tblphonetype on tblphone.phonetypeid = tblphonetype.phonetypeid left outer join
	tbluser as tblcreatedby on tblphone.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblphone.lastmodifiedby = tbllastmodifiedby.userid
where
	tblpersonphone.personid = @personid
order by
	tblphonetype.[name]
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationStatsGroup]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_NegotiationStatsGroup]
(
	@UserID int
)
as
BEGIN
	SELECT     
		tblUser.FirstName + ' ' + tblUser.LastName AS UserName
		, CASE WHEN status = 'A' THEN 'Accepted' WHEN status = 'R' THEN 'Rejected' END AS Status
		, tblSettlements.OfferDirection, COUNT(*) AS Total
		, Min(tblSettlements.SettlementPercent) AS [Min Settlement %]
		, MAX(tblSettlements.SettlementPercent) AS [Max Settlement %]
		, AVG(tblSettlements.SettlementPercent) AS [Avg Settlement %]
		, MIN(tblSettlements.SettlementAmount) AS [Min Settlement Amt]
		, MAX(tblSettlements.SettlementAmount) AS [Max Settlement Amt]
		, AVG(tblSettlements.SettlementAmount) AS [Avg Settlement Amt]
		, SUM(CASE WHEN datediff(d, settlementduedate, getdate()) * - 1 <= 30 THEN 1 ELSE 0 END) AS [Due Under 30 days], 
		SUM(CASE WHEN datediff(d, settlementduedate, getdate()) * - 1 BETWEEN 31 AND 60 THEN 1 ELSE 0 END) AS [Due in 31-60 days], 
		SUM(CASE WHEN datediff(d, settlementduedate, getdate()) * - 1 BETWEEN 61 AND 90 THEN 1 ELSE 0 END) AS [Due in 61-90 days], 
		SUM(CASE WHEN datediff(d, settlementduedate, getdate()) * - 1 > 90 THEN 1 ELSE 0 END) AS [Due +90 days]
	FROM
		tblSettlements INNER JOIN tblUser ON tblSettlements.CreatedBy = tblUser.UserID
	WHERE     
		(tblSettlements.CreatedBy IN (
			SELECT UserID FROM tblUser AS tblUser_2 WHERE (UserGroupID =(
				SELECT UserGroupID FROM tblUser AS tblUser_1 WHERE (UserID = @UserID))
				)
			)
		)
	GROUP BY tblSettlements.Status, tblSettlements.OfferDirection, tblUser.FirstName, tblUser.LastName
	ORDER BY UserName, Status, tblSettlements.OfferDirection
END
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetCommissionBatches]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetCommissionBatches]
(
	@date1 datetime,
	@date2 datetime,
	@CompanyID int
)
as

select cb.commbatchid, nr.name [AgencyName], cbt.CommRecID, sum(cbt.amount) [Amount]
from tblnacharegister nr
join tblnachacabinet nc on nc.nacharegisterid = nr.nacharegisterid
	and nc.type = 'CommBatchTransferID'
join tblcommbatchtransfer cbt on cbt.commbatchtransferid = nc.typeid
join tblcommbatch cb on cb.commbatchid = cbt.commbatchid
	and cb.batchdate between @date1 and dateadd(dd,1,@date2)
where nr.amount > 0
	and cbt.amount <> 0
	and nr.nachafileid > 0
	and nr.companyid = @companyid
	and nr.name not like '%General Clearing Account%'
group by cb.commbatchid, nr.name, cbt.CommRecID
order by nr.name
GO
/****** Object:  StoredProcedure [dbo].[stp_GetChildTasksForTask]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetChildTasksForTask]
	(
		@taskid int
	)

as


select
	tbltasktype.name as tasktypename,
	tbltasktypecategory.tasktypecategoryid,
	tbltasktypecategory.name as tasktypecategoryname,
	tbltaskresolution.name as taskresolutionname,
	tbltask.*,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tbltask left outer join
	tbltasktype on tbltask.tasktypeid = tbltasktype.tasktypeid left outer join
	tbltasktypecategory on tbltasktype.tasktypecategoryid = tbltasktypecategory.tasktypecategoryid left outer join
	tbltaskresolution on tbltask.taskresolutionid = tbltaskresolution.taskresolutionid left outer join
	tbluser as tblcreatedby on tbltask.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tbltask.lastmodifiedby = tbllastmodifiedby.userid
where
	tbltask.parenttaskid = @taskid
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getYTDUnits]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_settlementimport_reports_getYTDUnits]
as
BEGIN
	select 
		[YearDue] = year(getdate()) 
		, sum(case when month(due) = 1 then 1 else 0 end) [Jan]
		, sum(case when month(due) = 2 then 1 else 0 end) [Feb]
		, sum(case when month(due) = 3 then 1 else 0 end) [Mar]
		, sum(case when month(due) = 4 then 1 else 0 end) [Apr]
		, sum(case when month(due) = 5 then 1 else 0 end) [May]
		, sum(case when month(due) = 6 then 1 else 0 end) [Jun]
		, sum(case when month(due) = 7 then 1 else 0 end) [Jul]
		, sum(case when month(due) = 8 then 1 else 0 end) [Aug]
		, sum(case when month(due) = 9 then 1 else 0 end) [Sep]
		, sum(case when month(due) = 10 then 1 else 0 end) [Oct]
		, sum(case when month(due) = 11 then 1 else 0 end) [Nov]
		, sum(case when month(due) = 12 then 1 else 0 end) [Dec]
	from tblSettlementTrackerImports
	where Year(due) = year(getdate())
END


GRANT EXEC ON stp_settlementimport_reports_getYTDUnits TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_checkscan_getChecksToProcessByRegisterIDs]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_checkscan_getChecksToProcessByRegisterIDs]
(
@regIDS varchar(max),
@companyid int
)
as 
BEGIN
	--declare @regIDS varchar(max)
	--declare @companyid int
	
	--set @companyid = 3
	--set @regIDS = '2260244,2260245'

	declare @ssql varchar(max)

	set @ssql = 'select [rowNum]= ROW_NUMBER() over (order by check21id), c.companyid,nc.*,[amount] = r.amount '
	set @ssql = @ssql + 'from tblICLChecks nc inner join tblregister r on nc.registerid= r.registerid '
	set @ssql = @ssql + 'inner join tblclient c on c.clientid = nc.clientid '
	set @ssql = @ssql + 'Where r.bounce is null and r.void is null and nc.processed is null '
	set @ssql = @ssql + 'and r.registerid in (' + @regIDS + ')'
	set @ssql = @ssql + 'and c.companyid = ' + cast(@companyid as varchar)
	
	exec (@ssql)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMatterAudit]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <06 - 17 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Retrives the details for matter road map
*/
CREATE procedure [dbo].[stp_GetMatterAudit]
@MatterID as int=0
as 
select 1 as seq, 0 as taskid, null as resolved,
 ma.fieldname as [description], null as due , u.firstname+' '+u.lastname Createdbyname,   ma.updatedate as created,
case fieldname when 'AttorneyId' then  
case when oldvalue  is null then 'NONE' when oldvalue =0 then 'TBD' else
(select  FirstName +' '+Lastname as oldfieldvalue from tblAttorney where attorneyid=oldvalue) 
end +'-->'+
case when newvalue  is null then 'NONE' when newvalue =0 then 'TBD' else
(select FirstName +' '+Lastname as newfieldvalue from tblAttorney where attorneyid=newvalue)
end
when 'MatterStatusId' then 
isnull((select  isnull(Matterstatus,'') as oldfieldvalue from tblmatterstatus where matterstatusid=oldvalue) ,'')
  +'-->'+
isnull((select  isnull(Matterstatus,'') as newfieldvalue from tblmatterstatus where matterstatusid=newvalue) ,'')
  
when 'MatterSubStatusId' then 
isnull((select  isnull(MatterSubStatus,'') as oldfieldvalue from tblmattersubstatus where MatterSubStatusId=oldvalue),'') 
  +'-->'+
isnull((select  isnull(MatterSubStatus,'') as newfieldvalue from tblmattersubstatus where MatterSubStatusId=newvalue) ,'')
 
when 'CreditorInstanceId' then  
case when oldvalue  is null then 'NONE' when oldvalue =0 then 'TBD' else
isnull((select c.Name from tblcreditorinstance Ci, tblcreditor c 
where ci.creditorid=c.creditorid and ci.creditorinstanceid=oldvalue),'') 
end +'-->'+
case when newvalue  is null then 'NONE' when newvalue =0 then 'TBD' else
isnull((select c.Name from tblcreditorinstance Ci, tblcreditor c where ci.creditorid=c.creditorid and ci.creditorinstanceid=newvalue),'')
end

 
 
end as change
 from tblmatteraudit ma  
inner join tbluser u on ma.username=u.userid
 where replace(replace(pk,'<MatterId=',''),'>','')=@MatterID
 and Type='U' 

 union 
 
select 2 as seq,   tbltask.taskid, tbltask.Resolved,   tbltask.Description, tbltask.Due , 
		tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname ,tbltask.created, '' as change
		 	from
		tbltask left outer join
		tblclienttask on tbltask.taskid = tblclienttask.taskid left outer join
		tblclient on tblclienttask.clientid = tblclient.clientid left outer join
		tblperson on tblclient.primarypersonid = tblperson.personid left outer join
		tbltasktype on tbltask.tasktypeid = tbltasktype.tasktypeid left outer join
		tbltasktypecategory on tbltasktype.tasktypecategoryid = tbltasktypecategory.tasktypecategoryid left outer join
		tbltaskresolution on tbltask.taskresolutionid = tbltaskresolution.taskresolutionid left outer join
		tbluser as tblassignedto on tbltask.assignedto = tblassignedto.userid left outer join
		tbluser as tblresolvedby on tbltask.resolvedby = tblresolvedby.userid left outer join
		tbluser as tblcreatedby on tbltask.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on tbltask.lastmodifiedby = tbllastmodifiedby.userid
		left outer join tblmattertask on tblmattertask.taskid = tbltask.taskid	
		left outer join tblUserType as tblassignedtousertype on tblassignedtousertype.usertypeid =tblassignedto.usertypeid
		left outer join tbluserGroup as tblassignedtousergroup on tblassignedtousergroup.usergroupid = tblassignedto.usergroupid
	  WHERE tblmattertask.MatterID=@MatterID and IsNull(tbltask.parentTaskID,0)=0

union

	select 3 as seq, 0 as taskid, null as resolved, 		 
		n.value as description,null as due, 
		u.firstname + ' ' + u.lastname + '</br>' + ug.Name as createdbyname, 
	 
		n.created as created,
		ut.name as change 
	from 
		tblnote n left outer join
		tbluser u on n.createdby=u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype='User Type' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype='User Group' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype='User' left outer join
		(
			select
				nn.noteid,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblnoterelation nr 
				inner join tblnote nn on nr.noteid=nn.noteid
				inner join tblrulecommcolor rcc on rcc.entityid=nr.relationtypeid
			where
				nr.relationid=@matterid
				and rcc.entitytype='Relation Type'
			group by
				nn.noteid
		) rc on rc.noteid=n.noteid
		inner join tblusergroup as ug on ug.usergroupid = n.usergroupid
	 left outer join tblnoterelation nr on n.noteid=nr.noteid  
  where 
		nr.relationid= @matterid  and nr.relationtypeid=19 

union

select  4 as seq, 0 as taskid , pc.endtime as resolved,
pc.subject+':'+pc.body +'->'+p.firstname + ' ' + p.lastname  as description,null as due, 
tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,pc.starttime as  created,
case pc.direction when 1 then 'out' else 'in' end  change
	from 	tblphonecall pc left outer join
		tblperson p on pc.personid = p.personid left outer join
		tbluser u on pc.userid = u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tbluser as tblcreatedby on pc.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on pc.lastmodifiedby = tbllastmodifiedby.userid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype='User Type' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype='User Group' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype='User' left outer join
		(
			select
				npc.phonecallid,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblphonecallrelation pcr 
				inner join tblphonecall npc on pcr.phonecallid=npc.phonecallid
				inner join tblrulecommcolor rcc on rcc.entityid=pcr.relationtypeid
			where
				pcr.relationID= @matterid
				and rcc.entitytype='Relation Type'
			group by
				npc.phonecallid
		) rc on rc.phonecallid=pc.phonecallid
		inner join tblusergroup as ug on ug.usergroupid = pc.usergroupid
	  left outer join tblphonecallrelation pcr on pc.phonecallid=pcr.phonecallid 
  where pcr.relationID=@matterid and pcr.relationtypeid=19  

union 

SELECT  5 as seq, dr.DocRelationID as taskid , null as resolved, dt.DisplayName as description, isnull(ds.ReceivedDate, '01/01/1900') as due,  
isnull(u.FirstName + ' ' + u.LastName + '</br>' + ug.Name, '') as createdbyname,
isnull(dr.RelatedDate, '01/01/1900') as Created, 
--isnull(ds.Created, '01/01/1900') as Created, 
case deletedflag when 1 then 'Deleted' else '' end as  change FROM tblDocRelation as dr inner join tblDocumentType as dt  
on dt.TypeID = dr.DocTypeID left join tblDocScan as ds on ds.DocID = dr.DocID left join tblUser as u on u.UserID = dr.RelatedBy inner join tblusergroup as ug on ug.usergroupid = u.usergroupid  
WHERE dr.RelationID =@MatterID and dr.RelationType = 'matter' and (DeletedFlag = 0 or DeletedBy = -1)  
 

union

	select 6 as seq, 0 as taskid, null as resolved, 		 
		n.MailSubject as description,null as due, 
		u.firstname + ' ' + u.lastname + '</br>' + ug.Name as createdbyname, 
	 
		n.createdDate as created,
		ut.name as change 
	from 
		tblEmailRelayLog n left outer join
		tbluser u on n.createdby=u.userid left outer join
		tblusertype ut on u.usertypeid=ut.usertypeid left outer join
		tblrulecommcolor tc on u.usertypeid=tc.entityid and tc.entitytype='User Type' left outer join
		tblrulecommcolor gc on u.usergroupid=gc.entityid and gc.entitytype='User Group' left outer join
		tblrulecommcolor uc on u.userid=uc.entityid and uc.entitytype='User' left outer join
		(
			select
				nn.EMailLogID,
				max(color) as color,
				max(textcolor) as textcolor
			from
				tblEmailRelayRelation nr 
				inner join tblEmailRelayLog nn on nr.EMailLogID=nn.EMailLogID
				inner join tblrulecommcolor rcc on rcc.entityid=nr.relationtypeid
			where
				nr.relationid=@matterid
				and rcc.entitytype='Relation Type'
			group by
				nn.EMailLogID
		) rc on rc.EMailLogID=n.EMailLogID
		inner join tblusergroup as ug on ug.usergroupid = n.usergroupid
	 left outer join tblEmailRelayRelation nr on n.EMailLogID=nr.EMailLogID  
  where 
		nr.relationid= @matterid  and nr.relationtypeid=19 
order by created
GO
/****** Object:  StoredProcedure [dbo].[stp_SettlementImport_CountSettlements]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_SettlementImport_CountSettlements]
(
@year int,
@month int
)
as
BEGIN
	select count(*) 
	from tblSettlementTrackerImports
	where year(date) = @year and month(date) = @month
END


GRANT EXEC ON stp_SettlementImport_CountSettlements TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientID_or_AccountNo]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 10/22/2007
-- Description:	Get ClientID or AccountNo for a client
-- =============================================
CREATE PROCEDURE [dbo].[stp_GetClientID_or_AccountNo] 
	-- Add the parameters for the stored procedure here
	@ClientID int = 0, 
	@AccountNo int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    if @ClientID <> 0
		begin
			SELECT ClientID, AccountNumber FROM tblClient WHERE ClientID = @ClientID
		end
	if @AccountNo <> 0
		begin
			SELECT ClientID, AccountNumber FROM tblClient WHERE AccountNumber = @AccountNo
		end
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SaveUserCommRecAccess]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SaveUserCommRecAccess]
(
	@UserID int,
	@CommRecIDs varchar(1000)
)
as
begin

if @CommRecIDs = '-99' begin
	select @CommRecIDs = coalesce(@commrecids + ',', '') + cast(CommRecID as varchar(4))
	from tblCommRec
	where IsTrust = 0
end

insert 
	tblUserCommRecAccess (UserID, CommRecID)
select 
	UserID, CommRecID
from 
(
	select @UserID as UserID, r.CommRecID
	from dbo.splitstr(@CommRecIDs,',') s
	join tblCommRec r on r.CommRecID = s.Value
) dev
where not exists (select 1 from tblUserCommRecAccess u where u.UserID = dev.UserID and u.CommRecID = dev.CommRecID)


delete from tblUserCommRecAccess
where UserID = @UserID
and CommRecID not in (select [value] from dbo.splitstr(@CommRecIDs,','))


end
GO
/****** Object:  StoredProcedure [dbo].[stp_Matter_getAllDuplicateDocumentIDs]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_Matter_DuplicateDocumentIDs 'A1005250906'
--stp_Matter_getAllDuplicateDocumentIDs

CREATE procedure [dbo].[stp_Matter_getAllDuplicateDocumentIDs]
as
BEGIN
	declare @tbldocs table(docid varchar(100),doccnt int)

	insert into @tbldocs
	select docid, count(* )
	from tbldocrelation with(nolock)
	where relationtype = 'matter'
	group by docid
	having count(*)>1
	option (fast 1000)
	
	
	select 
	dr.docid
	,[User]=u.firstname + ' ' + u.lastname
	,dt.displayname
	,dr.clientid
	,dr.relationid
	,dr.docrelationid
	,dr.relationtype
	,ds.docscanid 
	, case when patindex('%\\litsvr%',dr.subfolder) <> 1 or dr.subfolder is null then
	'\\' + c.StorageServer + '\' + c.StorageRoot + '\' + c.AccountNumber 
	+ case when dr.subfolder is null or dr.subfolder = 'ClientDocs' then '\ClientDocs\' 
		else replace('\creditordocs\' + dr.SubFolder,'\\','\')  end 
	+ c.AccountNumber + '_' + dr.DocTypeID + '_' + dr.DocID + '_' + dr.DateString + '.pdf' 
	else
		dr.subfolder
	end
	AS docPath 
	
	from tbldocrelation  dr with(nolock)
	inner join tblclient c on c.clientid = dr.clientid
	inner join tbldocscan ds on ds.docid = dr.docid and dr.relatedby = ds.createdby
	inner join tbluser u on u.userid = dr.relatedby
	inner join tbldocumenttype dt on dt.typeid = dr.doctypeid
	where dr.docid in (select docid from @tbldocs)
	order by dr.docid, dr.clientid
	option (fast 100)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SmartDebtor_KPI_getDetails]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	[stp_Reporting_SmartDebtor_KPI] '12/27/2009 12:00:00 AM','1/19/2010 12:00:00 AM'
--proc params, comment out when creating proc
create procedure [dbo].[stp_SmartDebtor_KPI_getDetails]
(
	@startDate datetime,
	@endDate datetime
)
as
BEGIN
	/* dev use
	declare @startDate datetime
	declare @endDate datetime
	set @startDate = '01/11/2010 12:00:00 AM'
	set @endDate = '01/12/2010 12:00:00 AM'
	*/

	--proc variables
	declare @val varchar(4)
	-- hard coded values (need to find where these come from)
	declare @TransferPercentGoal float
	declare @NumCasesGoal int
	declare @ConversionPercentGoal float
	declare @MarketingBudgetPerDay money
	declare @CostPerConversionGoal money

	-- set values
	set @TransferPercentGoal = 85.00
	set @NumCasesGoal  = 12
	set @ConversionPercentGoal = 12.00
	set @MarketingBudgetPerDay = 5531.00
	set @CostPerConversionGoal = 416.67


	declare @tblDNIS table(forDate varchar(10),dnis varchar(4))

	insert into @tblDNIS 
	select convert(varchar(10),fordate,101),right(phone ,4)
	from tblleadphonelist
	where fordate = (
	select max(fordate)
	from tblleadphonelist
	where fordate <= @startdate and deleted = 0)
	group by convert(varchar(10),fordate,101), right(phone ,4)
	order by convert(varchar(10),fordate,101)


	--load all valid dnis

	insert into @tblDNIS 
	select convert(varchar(10),fordate,101),right(phone ,4)
	from tblleadphonelist
	where fordate >= @startdate and deleted = 0
	group by convert(varchar(10),fordate,101), right(phone ,4)
	order by convert(varchar(10),fordate,101)



	declare @tblData table([Type] varchar(25),DNIS varchar(10),I3CallIDKey varchar(150),LocalCallIDKey varchar(150),StationID varchar(150),[Screen Pop]varchar(150),initiated datetime,initDay int,Created datetime,[Status] varchar(150),[Full Name] varchar(150),[City]  varchar(150)
	,[State]  varchar(150),Concerns  varchar(150),LawFirm varchar(150),Associate varchar(150),Rep varchar(150),[Total Debt] money,RemoteNumber  varchar(50),HoldDuration  varchar(150),LeadStatusId int,FirstAppointmentDate  int,LeadCreatedDate datetime,LeadSourceID int)


	insert into @tblData
	select [Type] = 'INTERNET',[DNIS] = '00000' ,[I3CallIDKey] = '00000' ,[LocalCallIDKey] = '*****',[StationID] = '00000' ,[Screen Pop]= '00000' 
	,[initiated]= la.created,[initDay] = day(la.created),[Created] = la.created,[Status] = isnull(ls.description,''),[Full Name] = isnull(la.fullname,'')
	,[City] = isnull(la.city,''),[State] = isnull(st.name,''),Concerns = isnull(con.description,''),LawFirm = isnull(comp.ShortCoName,'')
	,Associate = isnull(u2.firstname +' ' + u2.lastname,''),Rep = isnull(u.firstname + ' ' + u.lastname,''),[Total Debt] = isnull(calc.totaldebt,0)
	,[RemoteNumber] = '00000' ,[HoldDuration] = '00000' ,[LeadStatusId] = la.statusid 
	,[FirstAppointmentDate] = case when not FirstAppointmentDate is null then 1 else 0 end ,[LeadCreatedDate] = la.Created ,[LeadSourceID]=la.LeadSourceID 
	from tblleadapplicant la 
	left join tblleadstatus ls on la.statusid = ls.statusid 
	left join tblstate st on la.stateid = st.stateid 
	left join tblcompany comp on la.companyid = comp.companyid 
	left join tblleadconcerns con on la.concernsid = con.concernsid 
	left join tbluser u on repid = u.userid 
	left join tbluser u2 on createdbyid = u2.userid 
	left join tblleadcalculator calc on la.leadapplicantid = calc.leadapplicantid 
	where la.leadsourceid in (5,7,8)  
	and la.Created between @startdate and @enddate

	insert into @tblData
	select [Type] = 'PHONE',[DNIS] = substring(cd.dnis,5,4),[I3CallIDKey] = cd.callid,[LocalCallIDKey] = isnull(lc.callidkey,'')
	,[StationID] = case when cd.stationid = 'System' then 'System' else '' end,[Screen Pop]= cd.localname
	,[initiated]= cd.ConnectedDate,[initDay] = datename(day,cd.ConnectedDate),[Created] = isnull(lc.created,'')
	,[Status] = isnull(ls.description,''),[Full Name] = isnull(la.fullname,''),[City] = isnull(la.city,'')
	,[State] = isnull(st.name,''),Concerns = isnull(con.description,''),LawFirm = isnull(comp.ShortCoName,'')
	,Associate = isnull(u2.firstname +' ' + u2.lastname,''),Rep = isnull(u.firstname + ' ' + u.lastname,''),[Total Debt] = isnull(calc.totaldebt,0)
	,[RemoteNumber] = cd.remoteNumber ,[HoldDuration] = cd.HoldDurationSeconds ,[LeadStatusId] = la.statusid 
	,[FirstAppointmentDate] = case when not FirstAppointmentDate is null then 1 else 0 end ,[LeadCreatedDate] = la.Created ,[LeadSourceID]=la.LeadSourceID 
	from [DMF-SQL-0001].i3_cic.dbo.calldetail cd 
	left join tblleadcall lc on lc.callidkey = cd.callid 
	left join tblleadapplicant la on la.leadapplicantid = lc.leadapplicantid 
	left join tblleadstatus ls on la.statusid = ls.statusid 
	left join tblstate st on la.stateid = st.stateid 
	left join tblcompany comp on la.companyid = comp.companyid 
	left join tblleadconcerns con on la.concernsid = con.concernsid 
	left join tbluser u on repid = u.userid 
	left join tbluser u2 on createdbyid = u2.userid 
	left join tblleadcalculator calc on lc.leadapplicantid = calc.leadapplicantid 
	left join @tblDNIS td on td.fordate = cd.ConnectedDate and td.dnis = substring(cd.dnis,charindex(':',cd.dnis)+1,4)
	where cd.dnis is not null and not la.leadsourceid in (5,7,8) 
	--and substring(cd.dnis,charindex(':',cd.dnis)+1,4) in (SELECT right(dnis,4)[dnis] from tblleaddnis where dnis <> '' )
	and calldirection ='inbound' and calltype ='external' 
	and cd.ConnectedDate between @startdate and @enddate
	and cd.InteractionType = 0 

	select * from @tblData

END
GO
/****** Object:  StoredProcedure [dbo].[stp_AddCreditorValidationTasks]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AddCreditorValidationTasks]
(
	@creditorid int,
	@userid int
)
as
begin

-- get clients using this now validated creditor, if they have no other pending validations
-- create a task notifying them that they can resolve

-- note: run this proc just before creditor is validated in case validation is to use existing

select distinct a.clientid
into #clients1
from tblcreditorinstance ci
join tblaccount a on a.currentcreditorinstanceid = ci.creditorinstanceid
where ci.creditorid = @creditorid

declare cur cursor for
	select a.clientid, cl.currentclientstatusid, ci.lastmodifiedby
	from tblcreditorinstance ci
	join tblaccount a on a.currentcreditorinstanceid = ci.creditorinstanceid
	join #clients1 c on c.clientid = a.clientid
	join tblcreditor cr on cr.creditorid = ci.creditorid
	join tblclient cl on cl.clientid = c.clientid
	where ci.creditorid <> @creditorid
	group by a.clientid, cl.currentclientstatusid, ci.lastmodifiedby
	having sum(case when cr.validated = 0 then 1 else 0 end) = 0

declare @clientid int, @taskid int, @currentclientstatusid int, @lastmodifiedby int

open cur
fetch next from cur into @clientid, @currentclientstatusid, @lastmodifiedby
while @@fetch_status = 0 begin

	if @currentclientstatusid < 14 begin
		insert tbltask (tasktypeid,[description],assignedto,due,created,createdby,lastmodified,lastmodifiedby)
		select (case when @currentclientstatusid < 10 then 12 else 13 end), 
			'Creditors validated. You can now resolve this worksheet.',
			@lastmodifiedby, getdate(), getdate(), @userid, getdate(), @userid
			
		select @taskid = scope_identity()
		
		insert tblclienttask (clientid,taskid,created,createdby,lastmodified,lastmodifiedby)
		values (@clientid,@taskid,getdate(),@userid,getdate(),@userid)
	end

	fetch next from cur into @clientid, @currentclientstatusid, @lastmodifiedby
end

close cur
deallocate cur
drop table #clients1

end
GO
/****** Object:  StoredProcedure [dbo].[stp_SettlementImport_DeleteSettlements]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_SettlementImport_DeleteSettlements]
(
@year int,
@month int
)
as
BEGIN
	/*
	declare @year int
	declare @month int

	set @year = 2009
	set @month = 7
	*/
	delete from tblSettlementTrackerImports	WHERE YEAR(Date) = @year AND MONTH(Date) = @month

END



GRANT EXEC ON stp_SettlementImport_DeleteSettlements TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationNotesSelect]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NegotiationNotesSelect]
	(
		@clientid int,
		@relationid int = null,
		@relationtypeid int = null,
		@clientonly bit=0
	)

as

declare @Noterelationcriteria varchar(1000)
declare @Phonerelationcriteria varchar(1000)

if @clientonly=1 begin
	set @Noterelationcriteria = ' and not exists (select noterelationid from tblnoterelation nnr where nnr.noteid=n.noteid and not nnr.relationtypeid=1)'
	set @Phonerelationcriteria = ' and not exists (select phonecallrelationid from tblphonecallrelation npcr where npcr.phonecallid=pc.phonecallid and not npcr.relationtypeid=1)'
end else begin
	set @Noterelationcriteria = ''
	set @Phonerelationcriteria = ''
end

declare @sql varchar(5000)

set @sql='
Select 
	[Type],[ID],isnull(subject,'''') as [subject] ,[Description],[by],bylastname,usertype,[date],personid,userid,clientid,phonenumber,direction,starttime,endtime,color,textcolor,Staff,CommDate,CommTime,CommTable
FROM 
	(select 
		''NOTE'' as [Type]
		,n.noteid as [ID]
		,n.subject 
		,n.value as [Description]
		,u.firstname + '' '' + u.lastname as [by]
		,u.lastname as bylastname 
		,ut.name as usertype
		,n.created as [date]
		,null as personid
		,u.userid
		,n.clientid
		,''''  as phonenumber
		,''''  as direction
		,''''  as starttime
		,''''  as endtime 
		,(case when not rc.color is null then rc.color when not uc.color is null then uc.color when not gc.color is null then gc.color when not tc.color is null then tc.color end ) as color 
		,(case when not rc.textcolor is null then rc.textcolor when not uc.textcolor is null then uc.textcolor when not gc.textcolor is null then gc.textcolor when not tc.textcolor is null then tc.textcolor end ) as textcolor 
		,'''' as Staff
		,'''' as CommDate
		,'''' as CommTime
		,'''' as CommTable
	from 
		tblnote n left outer join tbluser u 
		on n.createdby=u.userid left outer join tblusertype ut 
		on u.usertypeid=ut.usertypeid left outer join tblrulecommcolor tc 
		on u.usertypeid=tc.entityid and tc.entitytype=''User Type'' left outer join tblrulecommcolor gc 
		on u.usergroupid=gc.entityid and gc.entitytype=''User Group'' left outer join tblrulecommcolor uc 
		on u.userid=uc.entityid and uc.entitytype=''User'' left outer join 
		(select nn.noteid, max(color) as color,max(textcolor) as textcolor 
		from tblnoterelation nr inner join tblnote nn on nr.noteid=nn.noteid inner join tblrulecommcolor rcc on rcc.entityid=nr.relationtypeid 
		where nn.clientid='+ convert(varchar,@clientid) + ' and rcc.entitytype=''Relation Type'' group by nn.noteid ) rc on rc.noteid=n.noteid'

if not @relationid is null begin
	set @sql=@sql + ' left outer join tblnoterelation nr on n.noteid=nr.noteid'
end

set @sql = @sql + ' where n.clientid=' + convert(varchar,@clientid) + @Noterelationcriteria 

if not @relationid is null begin
	set @sql = @sql + ' and nr.relationtypeid=' + convert(varchar,@relationtypeid) + ' and nr.relationid=' + convert(varchar,@relationid)
end

set @sql = @sql + ' union '

set @sql = @sql + '
	select 
		''PHONE'' as [Type]
		,pc.phonecallid as [ID]
		,pc.subject
		,pc.body as [Description]
		,u.firstname + '' '' + u.lastname as [by]
		, u.lastname as bylastname 
		,ut.name as usertype
		, pc.created as [date]
		,pc.personid
		,pc.userid
		,pc.clientid
		,pc.phonenumber
		,pc.direction
		,pc.starttime
		,pc.endtime 
		,(case when not rc.color is null then rc.color when not uc.color is null then uc.color when not gc.color is null then gc.color when not tc.color is null then tc.color end ) as color 
		,(case when not rc.textcolor is null then rc.textcolor when not uc.textcolor is null then uc.textcolor when not gc.textcolor is null then gc.textcolor when not tc.textcolor is null then tc.textcolor end ) as textcolor 
		,'''' as Staff
		,'''' as CommDate
		,'''' as CommTime
		,'''' as CommTable
	from tblphonecall pc left outer join tblperson p 
	on pc.personid = p.personid left outer join tbluser u 
	on pc.userid = u.userid left outer join tblusertype ut 
	on u.usertypeid=ut.usertypeid left outer join tbluser as tblcreatedby 
	on pc.createdby = tblcreatedby.userid left outer join tbluser as tbllastmodifiedby 
	on pc.lastmodifiedby = tbllastmodifiedby.userid left outer join tblrulecommcolor tc 
	on u.usertypeid=tc.entityid and tc.entitytype=''User Type'' left outer join tblrulecommcolor gc 
	on u.usergroupid=gc.entityid and gc.entitytype=''User Group'' left outer join tblrulecommcolor uc 
	on u.userid=uc.entityid and uc.entitytype=''User'' left outer join 
	(
		select 
			npc.phonecallid
			,max(color) as color
			,max(textcolor) as textcolor 
		from tblphonecallrelation pcr inner join tblphonecall npc 
			on pcr.phonecallid=npc.phonecallid inner join tblrulecommcolor rcc 
			on rcc.entityid=pcr.relationtypeid 
		where 
			npc.clientid='+ convert(varchar,@clientid) + ' 
			and rcc.entitytype=''Relation Type'' 
		group by npc.phonecallid) rc on rc.phonecallid=pc.phonecallid '
if not @relationid is null begin
	set @sql=@sql + ' left outer join tblphonecallrelation pcr on pc.phonecallid=pcr.phonecallid '
end
set @sql = @sql + ' where pc.clientid=' + convert(varchar,@clientid) + @Phonerelationcriteria 

if not @relationid is null begin
	set @sql = @sql + ' and pcr.relationtypeid=' + convert(varchar,@relationtypeid) + ' and pcr.relationid=' + convert(varchar,@relationid)
end

set @sql = @sql + ') as CommData Order By [date] desc'

exec(@sql)
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneyRegisterFees]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AttorneyRegisterFees]
(
	@companyid int,
	@transactiondate datetime
)
as
begin


select 
	case attorneyentrytypeid
		when 1 then 'Account Maintenance Fees'
		when 2 then 'Enrollment Service Fees'
		when 4 then 'Settlement Processing Fees'
		else 'Other Fees'
	end [type], 
	count(*) [fees],
	sum(amount) [amount]
from tblattorneyregister
where cast(convert(varchar(10),transactiondate,101) as datetime) = @transactiondate
and companyid = @companyid
group by attorneyentrytypeid
order by [type] 


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNotesForRoadmap]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetNotesForRoadmap]
	(
		@roadmapid int
	)

as

select
	tblroadmapnote.roadmapnoteid,
	tblroadmapnote.roadmapid,
	tblnote.*,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tblnote inner join
	tblroadmapnote on tblnote.noteid = tblroadmapnote.noteid left outer join
	tbluser as tblcreatedby on tblnote.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblnote.lastmodifiedby = tbllastmodifiedby.userid
where
	tblroadmapnote.roadmapid = @roadmapid
order by
	tblnote.created, tblnote.noteid
GO
/****** Object:  StoredProcedure [dbo].[stp_Reporting_SmartDebtorTopOutbound]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_Reporting_SmartDebtorTopOutbound]
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @DATESTRING datetime
	set @DATESTRING = convert(datetime,convert(varchar,getdate(),110)+' 00:00:00.000')

	select top (20) u.firstname+ ' '+u.lastname as Username, count(*) 
	from tblcalllog cl 
	inner join tbluser u on cl.eventby = u.userid 
	where eventname = 'makecall' 
	and eventdate >= @DATESTRING 
	group by u.firstname+ ' '+u.lastname
	order by count(*) desc

END
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_getLeadCalculations]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_LetterTemplates_getLeadCalculations]
(
	@applicantid int
)
as
BEGIN
	SELECT     
		TotalDebt=Isnull(TotalDebt,0)
		,InitialDeposit=Isnull(InitialDeposit,0)
		,DepositCommittment=Isnull(DepositCommittment,0)
		,MaintenanceFee=Isnull(MaintenanceFee,0)
		,MaintenanceFeeCap=Isnull(MaintenanceFeeCap,0)
		,[SubMaintenanceFee]	= isnull(SubMaintenanceFee,0)
		,[SettlementPct] = isnull(SettlementPct,0)
		,SettlementFeePct=Isnull(SettlementFeePct,0)
		,NoAccts=Isnull(NoAccts,0)
		,EstGrowth=Isnull(EstGrowth,0)
		,PBMIntRate=Isnull(PBMIntRate,0)
		,PBMMinAmt=Isnull(PBMMinAmt,0)
		,PBMMinPct=Isnull(PBMMinPct,0)
		,DateOfFirstDeposit=DateOfFirstDeposit
		,ReOccurringDepositDay=Isnull(ReOccurringDepositDay,0) 
		,ServiceFeePerAcct=Isnull(ServiceFeePerAcct,0)
	FROM         
		tblLeadCalculator
	WHERE
		Leadapplicantid = @applicantid   
END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getLeads2]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_enrollment_getLeads2]
(
	@SearchStr varchar(100) = '%',
	@StartRowIndex int,
	@PageSize int
)
as
BEGIN
	-- everyone sees all available leads
	
	declare @PhoneSearchStr varchar(12)
	
	select @PhoneSearchStr = replace(replace(replace(replace(@SearchStr,'(',''),')',''),' ',''),'-','')
	
	set @StartRowIndex = @StartRowIndex + 1


	select * from (
		SELECT     
			  la.LeadApplicantID
			, la.LeadTransferInDate
			, case when len(rtrim(ltrim(la.FullName))) > 0 then la.FullName else '[No Name]' end [FullName]
			, case when rtrim(ltrim(la.LeadPhone)) = '(   )    -' then la.HomePhone else la.LeadPhone end [HomePhone]
			, lc.TotalDebt
			, so.Name
			, st.Description
			, ROW_NUMBER() OVER(order by la.LeadTransferInDate) as RowNum
		FROM 
			tblLeadApplicant la 
		LEFT JOIN
			tblLeadCalculator lc on lc.LeadApplicantID = la.LeadApplicantID
		LEFT OUTER JOIN		
			tblLeadStatus AS st ON la.StatusID = st.StatusID 
		LEFT OUTER JOIN	
			tblLeadSources AS so ON la.LeadSourceID = so.LeadSourceID
		WHERE     
			la.RepID = 0 
			AND (la.FullName like @SearchStr 
					or replace(replace(replace(replace(la.HomePhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr 
					or replace(replace(replace(replace(la.LeadPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
					or replace(replace(replace(replace(la.BusinessPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
					or replace(replace(replace(replace(la.CellPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
				)
	) d
	where RowNum between @StartRowIndex and (@StartRowIndex + @PageSize) - 1
	
	
	-- get the total # of records this query returns
	SELECT     
		count(*)
	FROM 
		tblLeadApplicant la 
	LEFT JOIN
		tblLeadCalculator lc on lc.LeadApplicantID = la.LeadApplicantID
	LEFT OUTER JOIN		
		tblLeadStatus AS st ON la.StatusID = st.StatusID 
	LEFT OUTER JOIN	
		tblLeadSources AS so ON la.LeadSourceID = so.LeadSourceID
	WHERE     
		la.RepID = 0 
		AND (la.FullName like @SearchStr 
				or replace(replace(replace(replace(la.HomePhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr 
				or replace(replace(replace(replace(la.LeadPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
				or replace(replace(replace(replace(la.BusinessPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
				or replace(replace(replace(replace(la.CellPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
			)

	
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetEntityDisplay]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[stp_GetEntityDisplay]
(
	@relationtypeid int,
	@relationid int
)

AS

select dbo.getentitydisplay (@relationtypeid, @relationid)
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getFirmPaidCancelled]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_reports_getFirmPaidCancelled]
	(
		@year int,
		@month int
	)
AS
BEGIN
	declare @totalAmt money
	select @totalAmt = sum(settlementamt) from tblSettlementTrackerImports where year(canceldate) = year(getdate()) and month(canceldate) = @month 

	select 
		[LawFirm] 
		, [Paid] =  sum(case when year(paid) = @year and month(paid) = @month  then 1 else 0 end)
		, [PctPaid] = cast(sum(case when year(paid) = @year and month(paid) = @month then 1 else 0 end) as float)/cast(count(*) as float)
		, [Cancelled] = sum(case when year(canceldate) = @year and month(canceldate) = @month then 1 else 0 end)
		, [PctCancelled] = cast(sum(case when year(canceldate) = @year and month(canceldate) = @month then 1 else 0 end) as float)/cast(count(*) as float)
	FROM tblSettlementTrackerImports
	--where 
	--	year(date) = @year
	--	and month(date) = @month
	group by LawFirm	
END

GRANT EXEC ON stp_settlementimport_reports_getFirmPaidCancelled TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetEmailsForClient]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <03 - 15 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Decription  : Get All emails for the client
				    use IsDeleted
*/
CREATE procedure [dbo].[stp_GetEmailsForClient]
(
		@ClientID int,
		@orderby varchar(50)='[date] desc',  
		@shortvalue int = 150
)

as
exec
(
	'select
		''email'' as type,
		t.createddate as [date],
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + ''</br>'' + ug.Name as [by],
		t.[MailSubject] as message,
		substring(t.[MailSubject], 0, ' + @shortvalue + ') + ''...'' as shortmessage,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedby,
		t.EMailLogID as fieldid
	from
		tblEmailRelayLog as t inner join
		tblclient on t.clientid = tblclient.clientid inner join
		tblperson on tblclient.primarypersonid = tblperson.personid left outer join
		tbluser as tblcreatedby on t.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on t.createdby = tbllastmodifiedby.userid inner join 
		tblusergroup as ug on ug.usergroupid = t.usergroupid left outer join
		tblEmailRelayRelation rl on t.EMailLogID = rl.EMailLogID left outer join 
		tblrelationtype rt on rt.relationtypeid = rl.relationtypeid left outer join
		tblmatter mtr on rl.relationid=mtr.matterid left outer join
		tblclient ct on rl.relationid=ct.clientid

	Where isnull(mtr.IsDeleted,0)=0 and t.clientid = ' + @clientid + '
	
	order by ' +  @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_UpdatePaidSettlementStatus]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_UpdatePaidSettlementStatus]
AS
BEGIN
	declare @tblsett table(settlementid numeric,accountstatusid int,settled datetime)

	insert into @tblsett
	select s.settlementid,a.accountstatusid, isnull(a.settled,a.lastmodified)
	from tblsettlements s
	inner join tblaccount a on s.creditoraccountid = a.accountid
	where settlementid in (
	select settlementid from tblsettlementtrackerimports where paid is null or year(paid) = 1900 ) and accountstatusid = 54
	option (fast 100)
	--select * from @tblsett 

	update tblsettlementtrackerimports
	set [status] = acct.code, paid = s.settled
	from @tblsett s
	inner join tblsettlementtrackerimports sti on sti.settlementid = s.settlementid
	inner join tblaccountstatus acct on acct.accountstatusid = s.accountstatusid
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetRoadmapsForClient]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetRoadmapsForClient]
	(
		@clientid int
	)

as

select
	tblclientstatus.parentclientstatusid,
	tblclientstatus.[name] as clientstatusname,
	tblroadmap.*,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tblroadmap inner join
	tblclientstatus on tblroadmap.clientstatusid = tblclientstatus.clientstatusid left outer join
	tbluser as tblcreatedby on tblroadmap.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblroadmap.lastmodifiedby = tbllastmodifiedby.userid
where
	tblroadmap.clientid = @clientid
order by
	tblroadmap.created
GO
/****** Object:  StoredProcedure [dbo].[stp_ConvertToMaintFeeCap]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ConvertToMaintFeeCap]
@ClientId int,
@UserId int
AS
Begin

	declare @oldmaintfeecap money 
	declare @newmaintfeecap money 
	declare @oldmonthlyfee money
	declare @newmonthlyfee money
	declare @oldsubsequentmonthlyfee money
	declare @newsubsequentmonthlyfee money
	declare @oldsubmaintfeestart datetime
	declare @newsubmaintfeestart datetime
	declare @oldadditionalaccfee money
	declare @newadditionalaccfee money
	
	
	select @oldmaintfeecap = null
	
	--only for SD clients
	If exists(Select l.LeadApplicantId From tblLeadApplicant l inner join  tblImportedClient i on i.ExternalClientId = l.LeadApplicantId and i.SourceId = 1 inner join tblClient c on c.ServiceImportId = i.importId Where c.clientid = @ClientId)
	begin
		--only for not maint fee cap clients
		--get the old values
		select 
			@oldmaintfeecap = maintenancefeecap,
			@oldmonthlyfee = monthlyfee,
			@oldsubsequentmonthlyfee = subsequentmaintfee,
			@oldsubmaintfeestart = submaintfeestart,
			@oldadditionalaccfee = AdditionalAccountFee
		from tblclient
		where clientid = @clientid
		
		if @oldmaintfeecap is null or not @oldmaintfeecap > 0
		begin
			--convert to struct
			
			--get the new values
			select @newmaintfeecap = Cast(Value as Money) From tblproperty where [name] = 'EnrollmentMaintenanceFeeCap'	
			select @newmonthlyfee = 10.00 -- This value should not be hard-coded
			select @newsubsequentmonthlyfee = null
			select @newsubmaintfeestart = null
			select @newadditionalaccfee = 0.00
					
			--convert client
			update tblclient set
			maintenancefeecap = @newmaintfeecap,
			monthlyfee = @newmonthlyfee,
			subsequentmaintfee = @newsubsequentmonthlyfee,
			submaintfeestart = @newsubmaintfeestart,
			additionalaccountfee = @newadditionalaccfee,
			LastModified = GetDate(),
			LastModifiedBy = @UserId
			where clientid = @clientid
			
			--update leadtables
			Update tblLeadCalculator Set
			maintenancefeecap = @newmaintfeecap,
			servicefeeperacct = @newmonthlyfee
			where leadapplicantid = (Select l.LeadApplicantId From tblLeadApplicant l inner join  tblImportedClient i on i.ExternalClientId = l.LeadApplicantId and i.SourceId = 1 inner join tblClient c on c.ServiceImportId = i.importId Where c.clientid = @ClientId)
						
			--log changes
			insert into tblConvertFeeStructLookup	(ClientId, Converted, ConvertedBy, 
													FromStruct, ToStruct, 
													oldmonthlyfee, newmonthlyfee,
													oldsubsequentmonthlyfee, newsubsequentmonthlyfee,
													oldsubmaintfeestart, newsubmaintfeestart,
													oldadditionalaccfee, newadditionalaccfee,
													oldmaintfeecap, newmaintfeecap)
											values	(@ClientId, GetDate(), @UserId, 
													 1, 2,
													 @oldmonthlyfee, @newmonthlyfee,
													 @oldsubsequentmonthlyfee, @newsubsequentmonthlyfee,
													 @oldsubmaintfeestart, @newsubmaintfeestart,
													 @oldadditionalaccfee, @newadditionalaccfee,
													 @oldmaintfeecap, @newmaintfeecap)	
													 
			--addnote
			Insert Into tblNote(Subject, Value, Created, CreatedBy, LastModified, LastModifiedBy, OldTable, OldId, ClientID )
			Values ('SD Client Fee Structure Conversion', 'Client converted to a new fee structure. Service fee per account with a maximum fee amount', GetDate(), @UserId, GetDate(), @UserId, Null, Null, @ClientID)
										 
													
		end 
		else
			RAISERROR ('This client does not qualify for conversion',11, 1)
	end
	else
		RAISERROR ('This client does not qualify for conversion',11, 1)
End
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateMatterTask]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <07 - 15 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Updates the tasks of a matter
*/
CREATE PROCEDURE [dbo].[stp_UpdateMatterTask]
(
	@TaskId int,
	@MatterId int,
	@DueDate datetime,
	@TaskTypeId int,
	@Description varchar(500),
	@AssignedTo int,
	@ClientId int,	
	@UserId int,
	@DueZoneDisplay int,
	@AssignedToGroupId int
)
as

if @TaskId>0
Begin

--	Declare @DBTimeDiff as int
--	Declare @FromUTC as int
--	Select @DBTimeDiff=FromUTC from tblTimeZone Where DBIsHere=1
--	Select @FromUTC=FromUTC from tblTimeZone Where TimeZoneID=@DueZoneDisplay
--	
--	Set @DueDate=DateAdd(hh,(@FromUTC-@DBTimeDiff),@DueDate)

	UPDATE dbo.tblTask 
	SET TaskTypeID=@TaskTypeId, Description=@Description, AssignedTo=@AssignedTo,
	Due=@DueDate, LastModified=getdate() ,LastModifiedBy=@UserId, 
	DueDateZoneDisplay=@DueZoneDisplay, AssignedToGroupId=@AssignedToGroupId
	WHERE TaskID=@TaskId

End
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getTeamTotals]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_settlementimport_reports_getTeamTotals]
(
@year int,
@month int
)
as
BEGIN
	select 
	[TeamName]= team 
	,[TotalFees] = sum(settlementfees)
	,[TotalBalance] = sum(balance)
	,[TotalSettAmt] = sum(settlementamt)
	,[TotalUnits]= count(*)
	,[TotalAvgPct] = sum(settlementamt)/sum(balance)
	,[PaidFees] = sum(case when paid is not null then settlementfees else 0 end)
	,[PaidBalance]= sum(case when paid is not null then balance else 0 end)
	,[PaidSettAmt]= sum(case when paid is not null then settlementamt else 0 end)
	,[PaidUnits] = sum(case when paid is not null then 1 else 0 end)
	,[PaidAvgPct]=case when sum(case when paid is not null then balance else 0 end) = 0 then 0 else sum(case when paid is not null then settlementamt else 0 end)/sum(case when paid is not null then balance else 0 end)end
	,[PctPaid] = sum(case when paid is not null then 1 else 0 end)/convert(float,count(*))
	from tblsettlementtrackerimports sti 
	where year(date) = @year and month(date) = @month
	group by team
	order by team

END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterGetParentXref]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NegotiationFilterGetParentXref]
(
	@ParentFilterID int
)

AS

--DELETE
--	tblNegotiationFilterParentXref
--WHERE
--	FilterID not in (SELECT FilterID FROM tblNegotiationFilters)
--	or ParentFilterID not in (SELECT FilterID FROM tblNegotiationFilters)

SELECT FilterID FROM tblNegotiationFilterParentXref WHERE ParentFilterID = @ParentFilterID
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_allnonselfGenProducts]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_enrollment_allnonselfGenProducts]
(
	@date datetime
)
as

declare @month int, @year int

set @month = month(@date)
set @year = year(@date)

select v.vendorcode, p.productid,
	sum(case when month(l.created) = @month and year(l.created) = @year then 1 else 0 end) [totalleads],
	max(cast(convert(varchar(10),l.created,101) as datetime))[productlastlead]
into #temp
from tblleadproducts p 
join tblleadvendors v on v.vendorid = p.vendorid 
join tblleadapplicant l on l.productid = p.productid 
where v.categoryid <> 101 
and month(l.created) = @month
and year(l.created) = @year
and l.refund = 0
group by v.vendorcode, p.productid


select c.category, '' [vendorcode], -1 [productid], '' [productcode], 0 [currentcost], 0 [cost], 
	sum(case when month(l.created) = @month and year(l.created) = @year then 1 else 0 end) [noleads], 
	min(l.created) [firstlead],
	max(l.created)[lastlead], 
	max(l.created)[productlastlead], 
	sum(case when month(l.created) = @month and year(l.created) = @year then 1 else 0 end) [totalleads],
	0 [seq],
	0 [newcost], 
	'1/1/1900' [effectivedate],
	sum(l.cost) [spent]
from tblleadvendors v
join tblleadcategories c on c.categoryid = v.categoryid 
join tblleadproducts p on p.vendorid = v.vendorid
left join tblleadapplicant l on l.productid = p.productid 
where v.categoryid <> 101
and month(l.created) = @month
and year(l.created) = @year
and l.refund = 0
group by c.category

union all

select c.category, v.vendorcode, p.productid, p.productcode, p.cost [currentcost], l.cost, 
	sum(case when month(l.created) = @month and year(l.created) = @year then 1 else 0 end) [noleads],
	min(l.created) [firstlead],
	max(l.created) [lastlead],
	t.productlastlead,
	t.totalleads,
	1 [seq],
	case when month(getdate()) = @month and year(getdate()) = @year then isnull(p.newcost,0) else 0 end [newcost],
	case when month(getdate()) = @month and year(getdate()) = @year then isnull(p.effectivedate,'1/1/1900') else '1/1/1900' end [effectivedate],
	sum(l.cost) [spent]
from tblleadproducts p 
join tblleadvendors v on v.vendorid = p.vendorid 
join tblleadcategories c on c.categoryid = v.categoryid 
join tblleadapplicant l on l.productid = p.productid 
join #temp t on t.vendorcode = v.vendorcode and t.productid = p.productid
where v.categoryid <> 101 
and month(l.created) = @month
and year(l.created) = @year
and l.refund = 0
group by c.category, v.vendorcode, p.productid, p.productcode, p.cost, l.cost, t.productlastlead, t.totalleads, p.newcost, p.effectivedate
order by c.category, v.vendorcode, seq, t.productlastlead desc, t.totalleads desc, [noleads] desc, productcode

drop table #temp
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPersonsForClient]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetPersonsForClient]
	(
		@clientid int
	)

as

select
	tblperson.*,
	(case tblperson.relationship when 'prime' then 1 else 0 end) as isprime,
	tblstate.[name] as statename,
	tblstate.abbreviation as stateabbreviation,
	tbllanguage.[name] as languagename,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tblperson left outer join
	tblstate on tblperson.stateid = tblstate.stateid inner join
	tbllanguage on tblperson.languageid = tbllanguage.languageid left outer join
	tbluser as tblcreatedby on tblperson.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblperson.lastmodifiedby = tbllastmodifiedby.userid
where
	tblperson.clientid = @clientid
order by
	isprime desc, tblperson.canauthorize desc, tblperson.dateofbirth desc
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getLeads]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_enrollment_getLeads]
(
	@userid int = 0, -- not needed
	@SearchStr varchar(100) = '%'
)
as
BEGIN
	-- everyone sees all available leads
	
	declare @PhoneSearchStr varchar(12)
	
	select @PhoneSearchStr = replace(replace(replace(replace(@SearchStr,'(',''),')',''),' ',''),'-','')

	SELECT     
		  la.LeadApplicantID
		, la.LeadTransferInDate
		, case when len(rtrim(ltrim(la.FullName))) > 0 then la.FullName else '[No Name]' end [FullName]
		, case when rtrim(ltrim(la.LeadPhone)) = '(   )    -' then la.HomePhone else la.LeadPhone end [HomePhone]
		, lc.TotalDebt
		, so.Name
		, st.Description
		, isnull(la.EnrollmentPage, '') as EnrollmentPage
		, case when la.rgrid is not null and la.created = la.lastmodified then 99 else 0 end [RgrId]
		, case when la.CreatedById is not null and la.created = la.lastmodified and la.CreatedById = 29 then 29 else 0 end [CreatedById]
	FROM 
		tblLeadApplicant la with(nolock)
	LEFT JOIN
		tblLeadCalculator lc with(nolock) on lc.LeadApplicantID = la.LeadApplicantID
	LEFT OUTER JOIN		
		tblLeadStatus AS st with(nolock) ON la.StatusID = st.StatusID 
	LEFT OUTER JOIN	
		tblLeadSources AS so with(nolock) ON la.LeadSourceID = so.LeadSourceID
	WHERE     
		(la.RepID = 0 or la.RepID is null)
		AND (la.FullName like @SearchStr 
					or replace(replace(replace(replace(la.HomePhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr 
					or replace(replace(replace(replace(la.LeadPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
					or replace(replace(replace(replace(la.BusinessPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
					or replace(replace(replace(replace(la.CellPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
				)
	ORDER BY
		la.LeadTransferInDate desc
END
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertMatterTask]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <10 - 15 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Saving the tasks of a matter
*/
CREATE PROCEDURE [dbo].[stp_InsertMatterTask]
(
	@MatterId int,
	@ParentTaskID int=NULL,
	@DueDate datetime,
	@TaskTypeId int,
	@Description varchar(500),
	@AssignedTo int,
	@ClientId int,	
	@UserId int,
	@DueZoneDisplay int,
	@AssignedToGroupId int
)

as

DECLARE @OldMaxTaskId int
DECLARE @NewMaxTaskId int
SET @OldMaxTaskId =(SELECT MAX(TaskId) from dbo.tblTask)

--Declare @DBTimeDiff as int
--Declare @FromUTC as int
--Select @DBTimeDiff=FromUTC from tblTimeZone Where DBIsHere=1
--Select @FromUTC=FromUTC from tblTimeZone Where TimeZoneID=@DueZoneDisplay
--
--Set @DueDate=DateAdd(hh,(@FromUTC-@DBTimeDiff),@DueDate)

INSERT INTO dbo.tblTask
(
ParentTaskID
,TaskTypeID
,Description
,AssignedTo
,Due
,DueDateZoneDisplay
,Resolved
,ResolvedBy
,TaskResolutionID
,Created
,CreatedBy
,LastModified
,LastModifiedBy
,AssignedToGroupId
)


VALUES
(
 @ParentTaskID
,@TaskTypeId
,@Description
,@AssignedTo
,@DueDate
,NULL
,NULL 
,NULL
,NULL 
,getdate()
,@UserId
,getdate()
,@UserId
,@AssignedToGroupId
)

--InsertInto TaskClient
SET @NewMaxTaskId = SCOPE_IDENTITY()
--SET @NewMaxTaskId =(SELECT MAX(TaskId) from dbo.tblTask)
insert INTO tblClientTask
(

ClientID
,TaskID
,Created
,CreatedBy
,LastModified
,LastModifiedBy

)

select  
@ClientId,
TaskId,
getdate(),
@UserId,
getdate(),
@UserId

from tblTask where TaskId = @NewMaxTaskId
--between @OldMaxTaskId+1 and @NewMaxTaskId
--InsertInto Matter

INSERT INTO dbo.tblMatterTask
(
MatterId
,TaskId
,CreatedDatetime
,CreatedBy
)

select 

@MatterId as MatterId,
TaskId,
Created,
CreatedBy
from tblTask  where TaskId = @NewMaxTaskId
--between @OldMaxTaskId+1 and @NewMaxTaskId
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getExpiredCancelledByTeam]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_reports_getExpiredCancelledByTeam]
	(
		@year int,
		@month int 
	)
AS
BEGIN
	declare @tblTeamData table(team varchar(100), Expired int, cancelled int)
		
	insert into @tblTeamData 
	select 
		Team
		, [Expired] = sum(case when year(expired) = @year and month(expired) = @month and paid is null then 1 else 0 end)
		, [Cancelled] = sum(case when year(canceldate) = @year and month(canceldate) = @month  then 1 else 0 end)
	from 
		tblSettlementTrackerImports
	group by Team 

	select * from @tblTeamData where cancelled > 0	
END


GRANT EXEC ON stp_settlementimport_reports_getExpiredCancelledByTeam TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationDashboardGet]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_NegotiationDashboardGet]
(
	@ids nvarchar(100),
	@query nvarchar(MAX) = null,
	@orderby nvarchar(500) = null,
	@groupby nvarchar(500) = null
)

AS

if @query is null
begin
	set @query = '*'
end

if @groupby is null
begin
	set @groupby = ''
end
else
begin
	set @groupby = 'GROUP BY ' + @groupby
end

if @orderby is null
begin
	set @orderby = ''
end
else
begin
	set @orderby = 'ORDER BY ' + @orderby
end

declare @filterclause nvarchar(MAX)

declare @fcTable table
(
	FilterClause nvarchar(MAX)
)

INSERT INTO
	@fcTable
exec
('
declare @fc nvarchar(MAX)

SELECT
	@fc = (CASE WHEN len(rtrim(ltrim(AggregateClause))) > 0 THEN coalesce(@fc + '' or '', '''') + ''('' + cast(AggregateClause as nvarchar(MAX)) + '')'' ELSE @fc END)
FROM
	tblNegotiationFilters
WHERE
	FilterID in (' + @ids + ')

SELECT @fc
')

SELECT TOP 1 @filterclause = FilterClause FROM @fcTable

if @filterclause is null or len(@filterclause) = 0
begin
	set @filterclause = '1 = 0'
end

EXEC 
('
	SELECT
		' + @query + '
	FROM
		tblCache_vwNegotiationDistributionSource
	WHERE
		' + @filterclause + '
	' + @groupby + '
	' + @orderby
)
GO
/****** Object:  StoredProcedure [dbo].[stp_SELECT_GetNegotiationClients]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SELECT_GetNegotiationClients]
@percent varchar(3)
as
SELECT     c.AccountNumber AS [SDA Acct #], p.FirstName AS [App. First Name], p.LastName AS [App. Last Name], SUBSTRING(p.SSN, 1, 3) 
                      + '-' + SUBSTRING(p.SSN, 4, 2) + '-' + SUBSTRING(p.SSN, 6, 4) AS [App. SSN], ISNULL(p2.FirstName, ' ') AS [CoApp. First Name], ISNULL(p2.LastName, 
                      ' ') AS [CoApp. Last Name], ISNULL(SUBSTRING(p2.SSN, 1, 3) + '-' + SUBSTRING(p2.SSN, 4, 2) + '-' + SUBSTRING(p2.SSN, 6, 4), ' ') AS [CoApp. SSN],
                          (SELECT     TOP (1) Balance
                            FROM          tblRegister AS r
                            WHERE      (ClientId = c.ClientID)
                            ORDER BY RegisterId DESC) AS [SDA Balance], ISNULL(cr2.Name, ' ') AS [Orig.Creditor], cr.Name AS Creditor, CONVERT(varchar, ci.AccountNumber) 
                      AS [Creditor Acct #], ISNULL(aid.Description, ' ') AS [Acct Status], ci.Amount AS [Current Amount],
                          (SELECT     TOP (1) ci2.Amount
                            FROM          tblCreditorInstance AS ci2 INNER JOIN
                                                   tblAccount AS a2 ON ci2.CreditorInstanceID = a2.CurrentCreditorInstanceID
                            WHERE      (a2.ClientID = c.ClientID)
                            ORDER BY ci2.CreditorInstanceID DESC) * (CONVERT(decimal(18, 2), 10) / 100) AS [%Amt]
FROM         tblClient AS c INNER JOIN
                      tblPerson AS p ON c.PrimaryPersonID = p.PersonID LEFT OUTER JOIN
                          (SELECT     ClientID, FirstName, LastName, SSN
                            FROM          tblPerson AS pij
                            WHERE      (Relationship = 'Spouse')) AS p2 ON p2.ClientID = c.ClientID INNER JOIN
                      tblAccount AS a ON a.ClientID = c.ClientID INNER JOIN
                      tblCreditorInstance AS ci ON a.CurrentCreditorInstanceID = ci.CreditorInstanceID INNER JOIN
                      tblCreditor AS cr ON ci.CreditorID = cr.CreditorID LEFT OUTER JOIN
                      tblCreditor AS cr2 ON ci.ForCreditorID = cr2.CreditorID LEFT OUTER JOIN
                      tblAccountStatus AS aid ON a.AccountStatusID = aid.AccountStatusID
WHERE     (c.CurrentClientStatusID NOT IN (15, 16, 17, 18)) AND (a.AccountStatusID NOT IN (54, 55)) AND
                          ((SELECT     TOP (1) Balance
                              FROM         tblRegister AS r
                              WHERE     (ClientId = c.ClientID)
                              ORDER BY RegisterId DESC) >
                          (SELECT     TOP (1) ci2.Amount
                            FROM          tblCreditorInstance AS ci2 INNER JOIN
                                                   tblAccount AS a2 ON ci2.CreditorInstanceID = a2.CurrentCreditorInstanceID
                            WHERE      (a2.ClientID = c.ClientID)
                            ORDER BY ci2.CreditorInstanceID DESC) * (CONVERT(decimal(18, 2), @percent) / 100)) OR
                      (c.CurrentClientStatusID NOT IN (15, 16, 17, 18)) AND (a.AccountStatusID IS NULL) AND
                          ((SELECT     TOP (1) Balance
                              FROM         tblRegister AS r
                              WHERE     (ClientId = c.ClientID)
                              ORDER BY RegisterId DESC) >
                          (SELECT     TOP (1) ci2.Amount
                            FROM          tblCreditorInstance AS ci2 INNER JOIN
                                                   tblAccount AS a2 ON ci2.CreditorInstanceID = a2.CurrentCreditorInstanceID
                            WHERE      (a2.ClientID = c.ClientID)
                            ORDER BY ci2.CreditorInstanceID DESC) * (CONVERT(decimal(18, 2), @percent) / 100))
ORDER BY [App. Last Name]
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_getNegotiatorTeams]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_getNegotiatorTeams]
as
BEGIN
	SELECT DISTINCT
	dbo.udf_Negotiators_getGroup(ne.negotiationentityid)[Team]
	,FirstName + ' ' + LastName AS [User]
	, UserName 
	FROM tblUser u left outer join tblnegotiationentity ne on u.userid = ne.userid
	WHERE (UserGroupID = 4) 
	order by [user]
END


GRANT EXEC ON stp_settlementimport_getNegotiatorTeams TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getReadyToExport]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_enrollment_getReadyToExport]
(
	@UserId int = 0,
	@Manager bit = 0
)
as
BEGIN
	/*
		ExportStatus 3: Locked during Export, 1: Exported, 0: Not Exported, 2: Error
	*/
	IF @Manager = 1
		BEGIN
			SELECT 
				  la.LeadApplicantID
				, la.LeadTransferInDate
				, case when len(rtrim(ltrim(la.FullName))) > 0 then la.FullName else '[No Name]' end [FullName]
				, case when rtrim(ltrim(la.HomePhone)) = '(   )    -' then '' else la.HomePhone end [HomePhone]
				, lc.TotalDebt
				, so.Name
				, st.Description
				, u.FirstName + ' ' + u.LastName AS AssignedTo
				, '' [LastContacted] -- date avail?
				, isnull(la.EnrollmentPage, 'newenrollment.aspx') as EnrollmentPage	   
			FROM tblLeadApplicant AS la 
				JOIN tblUser AS u ON la.RepID = u.UserID 
				LEFT JOIN tblLeadCalculator lc on lc.LeadApplicantID = la.LeadApplicantID
				LEFT OUTER JOIN tblLeadStatus AS st ON la.StatusID = st.StatusID 
				LEFT OUTER JOIN tblLeadSources AS so ON la.LeadSourceID = so.LeadSourceID
				LEFT OUTER JOIN tblLeadExportDetail ed ON la.LeadApplicantId = ed.LeadApplicantId AND ed.ExportStatus in (1,3)
			WHERE     
				la.StatusID IN (7)
				AND ed.LeadApplicantId Is NULL
			ORDER BY
				la.LeadTransferInDate
		END
	ELSE 
		BEGIN
			SELECT 
				  la.createdbyid
				, la.repid
				, la.LeadApplicantID
				, la.LeadTransferInDate
				, case when len(rtrim(ltrim(la.FullName))) > 0 then la.FullName else '[No Name]' end [FullName]
				, case when rtrim(ltrim(la.HomePhone)) = '(   )    -' then '' else la.HomePhone end [HomePhone]
				, lc.TotalDebt
				, so.Name
				, st.Description
				, u.FirstName + ' ' + u.LastName AS AssignedTo
				, '' [LastContacted] -- date avail?
				, isnull(la.EnrollmentPage, 'newenrollment.aspx') as EnrollmentPage	
			FROM tblLeadApplicant AS la 
				JOIN tblUser AS u ON la.RepID = u.UserID 
				LEFT JOIN tblLeadCalculator lc on lc.LeadApplicantID = la.LeadApplicantID
				LEFT OUTER JOIN tblLeadStatus AS st ON la.StatusID = st.StatusID 
				LEFT OUTER JOIN tblLeadSources AS so ON la.LeadSourceID = so.LeadSourceID
				LEFT OUTER JOIN tblLeadExportDetail ed ON la.LeadApplicantId = ed.LeadApplicantId AND ed.ExportStatus in (1,3)
			WHERE     
				la.StatusID IN (7) AND la.RepID = @UserID
				AND ed.LeadApplicantId IS NULL
			ORDER BY
				la.LeadTransferInDate
		END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_UnresolveUWForClient]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_UnresolveUWForClient]
	(
		@ClientId int
	)

as

delete from tblroadmap where clientstatusid in (12,11,14) and clientid=@clientid

select tbltask.taskid as taskid into #tmp from tbltask inner join tblclienttask on tbltask.taskid=tblclienttask.taskid where tblclienttask.clientid=@clientid and tasktypeid=6

delete from tblclienttask where taskid in(
	select taskid from #tmp
)

delete from tbltask where taskid in (
	select taskid from #tmp
)

update tblclient set vwuwresolved=null,vwuwresolvedby=null where clientid=@clientid

drop table #tmp
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getExpired]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_settlementimport_reports_getExpired]
(
@year int,
@month int
)
as
BEGIN
	--declare @month int
	--set @month = 9

	select 
		[Amount] = '$' +  convert(varchar, sum(case when year(expired) = @year and month(expired) = @month and paid is null then settlementfees else 0 end),1)
	, [Total] = sum(case when year(expired) = @year and month(expired) = @month and paid is null then 1 else 0 end)
	from tblSettlementTrackerImports
END


GRANT EXEC ON stp_settlementimport_reports_getExpired TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportClientIntake]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_ReportClientIntake 858

CREATE procedure [dbo].[stp_ReportClientIntake]
(
	@agencyid varchar(max) = null
)
as
BEGIN
	declare @agencyClause varchar(max)

	if @agencyid is null 
		set @agencyClause = ''
	else
		set @agencyClause = ' and AgencyID in (' + @agencyid + ')'

	exec('
	declare @vtblClientRM table(ClientID int,ClientStatusID int,CreatedDate datetime,rowNum int)

	insert into @vtblClientRM
	select distinct 
	clientid, ClientStatusid, convert(varchar(10),created,101) ,
	RANK() OVER 
		(PARTITION BY clientid,ClientStatusid ORDER BY clientid , ClientStatusid ,convert(varchar(10),created,101) desc ) AS ''RANK''
	from tblroadmap 
	order by clientid, ClientStatusid

	delete from @vtblClientRM where rowNum > 1

	--total client retention by month enrolled, days retained
	select 
	month(c.created)
	, DATENAME(mm,c.created) + ''-'' + right(DATENAME(yy,c.created),2) as [Label]
	, count(*) as [Total]
	from tblclient as c inner join @vtblClientRM as r
	on c.clientid = r.clientid and r.clientstatusid in (17,18) and currentclientstatusid in (17,18) ' + @agencyClause + '
	 where year(c.created) = year(getdate())
	group by month(c.created),DATENAME(mm,c.created) + ''-'' + right(DATENAME(yy,c.created),2)
	order by month(c.created)
	')

END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_selfGenInternetProducts]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_enrollment_selfGenInternetProducts]
(
	@date datetime
)
as

declare @month int, @year int

set @month = month(@date)
set @year = year(@date)

select v.vendorcode, p.productid,
	sum(case when month(l.created) = @month and year(l.created) = @year then 1 else 0 end) [totalleads],
	max(cast(convert(varchar(10),l.created,101) as datetime))[productlastlead]
into #temp
from tblleadproducts p 
join tblleadvendors v on v.vendorid = p.vendorid 
join tblleadapplicant l on l.productid = p.productid 
where v.categoryid = 101 
and month(l.created) = @month
and year(l.created) = @year
and l.refund = 0
group by v.vendorcode, p.productid


select vendorcode, -1 [productid], 'Default Cost' [productcode], defaultcost [currentcost], defaultcost [cost], 
	sum(case when month(l.created) = @month and year(l.created) = @year then 1 else 0 end) [noleads], 
	min(l.created) [firstlead],
	max(l.created)[lastlead], 
	max(l.created)[productlastlead], 
	sum(case when month(l.created) = @month and year(l.created) = @year then 1 else 0 end) [totalleads],
	0 [seq],
	0 [newcost], 
	'1/1/1900' [effectivedate],
	sum(l.cost) [spent]
from tblleadvendors v
join tblleadproducts p on p.vendorid = v.vendorid
left join tblleadapplicant l on l.productid = p.productid 
where categoryid = 101
and month(l.created) = @month
and year(l.created) = @year
and l.refund = 0
group by v.vendorcode, v.defaultcost

union all

select v.vendorcode, p.productid, p.productcode, p.cost [currentcost], l.cost, 
	sum(case when month(l.created) = @month and year(l.created) = @year then 1 else 0 end) [noleads],
	min(l.created) [firstlead],
	max(l.created) [lastlead],
	t.productlastlead,
	t.totalleads,
	1 [seq],
	case when month(getdate()) = @month and year(getdate()) = @year then isnull(p.newcost,0) else 0 end [newcost],
	case when month(getdate()) = @month and year(getdate()) = @year then isnull(p.effectivedate,'1/1/1900') else '1/1/1900' end [effectivedate],
	sum(l.cost) [spent]
from tblleadproducts p 
join tblleadvendors v on v.vendorid = p.vendorid 
join tblleadapplicant l on l.productid = p.productid 
join #temp t on t.vendorcode = v.vendorcode and t.productid = p.productid
where v.categoryid = 101 
and month(l.created) = @month
and year(l.created) = @year
and l.refund = 0
group by v.vendorcode, p.productid, p.productcode, p.cost, l.cost, t.productlastlead, t.totalleads, p.newcost, p.effectivedate

order by v.vendorcode, seq, t.productlastlead desc, t.totalleads desc, [noleads] desc, productcode

drop table #temp
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCommRecAccessUsers]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetCommRecAccessUsers]
as
begin

select -1 [userid], '' [user]
union
select distinct u.userid, u.firstname + ' ' + u.lastname
from tbluser u
join tblusercommrecaccess ua on ua.userid = u.userid
order by [user]


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetDocsForDataEntry]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetDocsForDataEntry]
	(
		@dataentryid int
	)

as


select
	tbldoc.*,
	tbldocfolder.name as docfoldername,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tbldoc inner join
	tbldataentrydoc on tbldoc.docid = tbldataentrydoc.docid inner join
	tbldocfolder on tbldoc.docfolderid = tbldocfolder.docfolderid left outer join
	tbluser as tblcreatedby on tbldoc.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tbldoc.lastmodifiedby = tbllastmodifiedby.userid
where
	tbldataentrydoc.dataentryid = @dataentryid
order by
	tbldoc.[name]
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getTotalSubmissions]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_reports_getTotalSubmissions]
	(
		@year int,
		@month int
	)
AS
BEGIN
	select 
		[Amount] = '$' + convert(varchar, CONVERT(money, isnull(sum(settlementfees) ,0.00)),1)
		, [Total] = Count(*)
	from 
		tblSettlementTrackerImports
	where 
		@year = year(date)
		and @month = month(date)
END

GRANT EXEC ON stp_settlementimport_reports_getTotalSubmissions TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneyListing]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AttorneyListing]
(
	@CompanyID int
,	@Where varchar(2000) = ''
)
as 
begin
/*
	History:
	jhernandez		12/04/07		Created.
	jhernandez		03/04/08		Added FullName
	jhernandez		03/05/08		Added optional search criteria
*/

exec('
select
  a.AttorneyID
, a.FirstName
, isnull(a.MiddleName, '''') as MiddleName
, a.LastName
, isnull(a.Suffix, '''') as Suffix
, isnull(a.UserID, -1) [UserID]
, case when r.AttyPivotID > 0 then ''true'' else ''false'' end [Associated]
, isnull(r.AttyRelation, '''') as Relation 
, a.LastName + '', '' + a.FirstName + '' '' + isnull(a.MiddleName, '''') as [FullName]
from
 tblAttorney a 
left join tblAttyRelation r 
 on r.AttorneyID = a.AttorneyID 
  and r.CompanyID = ' + @CompanyID + '
left join tblAttorneyType t
 on t.Type = r.AttyRelation ' 
+ @Where + '
order by
 a.LastName, a.FirstName
')

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetEchoSurveyComments]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetEchoSurveyComments]
(
	@insertdate datetime
)
as
begin

	select comment from tblEchoSurvey where cast(convert(varchar(10),insert_date,101) as datetime) = @insertdate and comment is not null
	union
	select done_better_comment from tblEchoSurvey where cast(convert(varchar(10),insert_date,101) as datetime) = @insertdate and done_better_comment is not null
	union
	select done_to_satisfy_comment from tblEchoSurvey where cast(convert(varchar(10),insert_date,101) as datetime) = @insertdate and done_to_satisfy_comment is not null

end
GO
/****** Object:  StoredProcedure [dbo].[stp_Matter_DuplicateDocumentIDs]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_Matter_DuplicateDocumentIDs 'A1003171053'


CREATE procedure [dbo].[stp_Matter_DuplicateDocumentIDs]
(
@docid varchar(50) = Null
)
as
BEGIN
	declare @tbldocs table(docid varchar(100),doccnt int)

	insert into @tbldocs
	select docid, count(* )
	from tbldocrelation with(nolock)
	where relationtype = 'matter'
	group by docid
	having count(*)>1
	option (fast 1000)
	
	if @docid is not null
		BEGIN
			delete from @tbldocs where docid not in (@docid)
		END

	select dr.docid,dr.clientid,dr.relationid,dr.docrelationid,dr.relationtype,ds.docscanid 
		, case when patindex('%\\litsvr%',dr.subfolder) <> 1 or dr.subfolder is null then
		'\\' + c.StorageServer + '\' + c.StorageRoot + '\' + c.AccountNumber 
		+ case when dr.subfolder is null or dr.subfolder = 'ClientDocs' then '\ClientDocs\' 
			else replace('\creditordocs\' + dr.SubFolder,'\\','\')  end 
		+ c.AccountNumber + '_' + dr.DocTypeID + '_' + dr.DocID + '_' + dr.DateString + '.pdf' 
		else
			dr.subfolder
		end
		AS docPath 
		,[User]=u.firstname + ' ' + u.lastname
		,dt.displayname
	from tbldocrelation  dr with(nolock)
	inner join tblclient c on c.clientid = dr.clientid
	inner join tbldocscan ds on ds.docid = dr.docid and dr.relatedby = ds.createdby
	inner join tbluser u on u.userid = dr.relatedby
	inner join tbldocumenttype dt on dt.typeid = dr.doctypeid
	where dr.docid in (select docid from @tbldocs)
	order by dr.docid, dr.clientid
END
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateCommBatches]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_UpdateCommBatches]
(
	@agencyid int, 
	@companyid int, 
	@oldcommrecid int, 
	@newcommrecid int,
	@startdate datetime, 
	@enddate datetime
)
as
begin

declare @oldcommstructid int, @newcommstructid int, @mincommbatchid int


select @oldcommstructid = cs.commstructid
from tblcommstruct cs
join tblcommscen s on s.commscenid = cs.commscenid
	and s.agencyid = @agencyid
where cs.companyid = @companyid
	and cs.commrecid = @oldcommrecid


select @newcommstructid = cs.commstructid
from tblcommstruct cs
join tblcommscen s on s.commscenid = cs.commscenid
	and s.agencyid = @agencyid
where cs.companyid = @companyid
	and cs.commrecid = @newcommrecid


-- only batches since we started pushing funds to the new commrec should be updated
select @mincommbatchid  = min(commbatchid)
from tblcommbatchtransfer
where commrecid = @newcommrecid


update tblcommpay
set commstructid = @newcommstructid
from tblcommpay cp
join tblregisterpayment rp on rp.registerpaymentid = cp.registerpaymentid
join tblregister r on r.registerid = rp.feeregisterid
join tblclient c on c.clientid = r.clientid
	and c.created between @startdate and @enddate
where cp.commbatchid >= @mincommbatchid
	and cp.commstructid = @oldcommstructid


update tblcommchargeback
set commstructid = @newcommstructid
from tblcommchargeback cb
join tblregisterpayment rp on rp.registerpaymentid = cb.registerpaymentid
join tblregister r on r.registerid = rp.feeregisterid
join tblclient c on c.clientid = r.clientid
	and c.created between @startdate and @enddate
where cb.commbatchid >= @mincommbatchid
	and cb.commstructid = @oldcommstructid


end
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getPipelines]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_enrollment_getPipelines]
(
	@UserId int = 0,
	@Manager bit = 0,
	@SearchStr varchar(100) = '%'
)
as
BEGIN
	-- pipelines are leads that have been assigned and are not closed(7)
	
	declare @PhoneSearchStr varchar(12)
	
	select @PhoneSearchStr = replace(replace(replace(replace(@SearchStr,'(',''),')',''),' ',''),'-','')

	IF @Manager = 1
		BEGIN
			SELECT 
				  la.LeadApplicantID
				, la.LeadTransferInDate
				, case when len(rtrim(ltrim(la.FullName))) > 0 then la.FullName else '[No Name]' end [FullName]
				, case when rtrim(ltrim(la.LeadPhone)) = '(   )    -' then la.HomePhone else la.LeadPhone end [HomePhone]
				, lc.TotalDebt
				, so.Name
				, st.Description
				, u.FirstName + ' ' + u.LastName AS AssignedTo
				, '' [LastContacted] -- date avail?
				, u.UserID [AssignedToID]
				, case 
					when lsa.completed is not null then '16x16_pdf.png'
					when lsa.leadapplicantid is not null then '16x16_pdf_grey.png'
					else 'spacer.gif' end [LSAImg]
				, case 
					when ver.completed is not null then '16x16_check.png'
					when ver.leadapplicantid is not null then '16x16_check_grey.png'
					else 'spacer.gif' end [VerImg]
				, isnull(la.EnrollmentPage, '') as EnrollmentPage
				, case when la.PublisherId is not null and la.created = la.lastmodified then 99 else 0 end [PublisherId]
				, case when la.RgrId is not null and la.created = la.lastmodified then 99 else 0 end [RgrId]
				, case when st.StatusID = 18 then 1 else 0 end [StatusWeight]
				, case when la.CreatedById is not null and la.created = la.lastmodified and la.CreatedById = 29 then 29 else 0 end [CreatedById]
			FROM tblLeadApplicant AS la 
				JOIN tblUser AS u ON la.RepID = u.UserID 
				LEFT JOIN tblLeadCalculator lc on lc.LeadApplicantID = la.LeadApplicantID
				LEFT OUTER JOIN tblLeadStatus AS st ON la.StatusID = st.StatusID 
				LEFT OUTER JOIN tblLeadSources AS so ON la.LeadSourceID = so.LeadSourceID
				LEFT JOIN vw_enrollment_LSA_complete lsa on lsa.leadapplicantid = la.leadapplicantid
				LEFT JOIN vw_enrollment_Ver_complete ver on ver.leadapplicantid = la.leadapplicantid
			WHERE     
				la.StatusID NOT IN (7) 
				AND (la.FullName like @SearchStr 
						or replace(replace(replace(replace(la.HomePhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr 
						or replace(replace(replace(replace(la.LeadPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
						or replace(replace(replace(replace(la.BusinessPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
						or replace(replace(replace(replace(la.CellPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
					)
				-- as of 2/11/10 Signed leads are now being converted to clients so exclude these now too
				AND la.LeadApplicantID not in (
					select l.leadapplicantid
					from tblleadapplicant l
					join tblimportedclient i on i.externalclientid = l.leadapplicantid
					join tblclient c on c.serviceimportid = i.importid
					where l.statusid = 10 -- In Process
				)
			ORDER BY
				[StatusWeight] desc, la.LeadTransferInDate desc
		END
	ELSE 
		BEGIN
			if len(@SearchStr) > 1 set @UserID = null -- User is searching, return all matching pipelines, but they wont be able to work on any not assigned to them
		
			SELECT 
				  la.createdbyid
				, la.repid
				, la.LeadApplicantID
				, la.LeadTransferInDate
				, case when len(rtrim(ltrim(la.FullName))) > 0 then la.FullName else '[No Name]' end [FullName]
				, case when rtrim(ltrim(la.LeadPhone)) = '(   )    -' then la.HomePhone else la.LeadPhone end [HomePhone]
				, lc.TotalDebt
				, so.Name
				, st.Description
				, u.FirstName + ' ' + u.LastName AS AssignedTo
				, '' [LastContacted] -- date avail?
				, u.UserID [AssignedToID]
				, case 
					when lsa.completed is not null then '16x16_pdf.png'
					when lsa.leadapplicantid is not null then '16x16_pdf_grey.png'
					else 'spacer.gif' end [LSAImg]
				, case 
					when ver.completed is not null then '16x16_check.png'
					when ver.leadapplicantid is not null then '16x16_check_grey.png'
					else 'spacer.gif' end [VerImg]
				, isnull(la.EnrollmentPage, '') as EnrollmentPage
				, case when la.PublisherId is not null and la.created = la.lastmodified then 99 else 0 end [PublisherId]
				, case when la.RgrId is not null and la.created = la.lastmodified then 99 else 0 end [RgrId]
				, case when st.StatusID = 18 then 1 else 0 end [StatusWeight]
				, case when la.CreatedById is not null and la.created = la.lastmodified and la.CreatedById = 29 then 29 else 0 end [CreatedById]
			FROM tblLeadApplicant AS la 
				JOIN tblUser AS u ON la.RepID = u.UserID 
				LEFT JOIN tblLeadCalculator lc on lc.LeadApplicantID = la.LeadApplicantID
				LEFT OUTER JOIN tblLeadStatus AS st ON la.StatusID = st.StatusID 
				LEFT OUTER JOIN tblLeadSources AS so ON la.LeadSourceID = so.LeadSourceID
				LEFT JOIN vw_enrollment_LSA_complete lsa on lsa.leadapplicantid = la.leadapplicantid
				LEFT JOIN vw_enrollment_Ver_complete ver on ver.leadapplicantid = la.leadapplicantid
			WHERE     
				la.StatusID NOT IN (7) 
				AND (@UserID is null or la.RepID = @UserID) 
				AND (la.FullName like @SearchStr 
						or replace(replace(replace(replace(la.HomePhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr 
						or replace(replace(replace(replace(la.LeadPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr 
						or replace(replace(replace(replace(la.BusinessPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
						or replace(replace(replace(replace(la.CellPhone,'(',''),')',''),' ',''),'-','') like @PhoneSearchStr
					)
				-- as of 2/11/10 Signed leads are now being converted to clients so exclude these now too
				AND la.LeadApplicantID not in (
					select l.leadapplicantid
					from tblleadapplicant l
					join tblimportedclient i on i.externalclientid = l.leadapplicantid
					join tblclient c on c.serviceimportid = i.importid
					where l.statusid = 10 -- In Process
				)
			ORDER BY
				[StatusWeight] desc, la.LeadTransferInDate desc
		END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAgencyDetail]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GetAgencyDetail] 
	-- Parameters for the stored procedure here only one
	@AgencyID int = -1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Get the Agency table 0
	SELECT a.[Name],
		isnull(a.ImportAbbr, '') [ImportAbbr],
		a.UserID,
		a.Created,
        isnull(u1.UserName,'') [CreatedBy],
		a.LastModified,
		isnull(u2.UserName,'') [LastModifiedBy],
		isnull(a.CheckingSavings, '') [CheckingSavings],
		isnull(a.Contact1, '') [Contact1],
		isnull(a.Contact2, '') [Contact2],
		isnull(a.commercial, '') [Commercial],
		NULL, -- change this
		a.IsCommRec,
		NULL [PaidTo] -- change this
	FROM tblAgency a
	LEFT JOIN tblUser u1
	ON u1.UserID = a.CreatedBy
	LEFT JOIN tblUser u2
	ON u2.UserID = a.LastModifiedBy
	WHERE a.AgencyID = @AgencyID

	-- Get the AgencyAddress 1
	SELECT aa.AddressTypeID,
		isnull(aa.Address1, '') [Address1],
		isnull(aa.Address2,'') [Address2],
		isnull(aa.City, '') [City],
		isnull(aa.[State], '') [State],
		isnull(aa.ZipCode, '') [ZipCode],
		aa.AgencyID
	FROM tblAgencyAddress aa
	WHERE aa.AgencyID = @AgencyID
	
	-- Get the AgencyPhone 2
	SELECT ap.AgencyPhoneID,
		ap.AgencyId,
		ap.PhoneID
	FROM tblAgencyPhone ap
    WHERE ap.AgencyID = @AgencyID

	SELECT ap.PhoneID,
		aph.AreaCode,
		aph.Number,
		aph.PhoneTypeID,
		aph.PhoneID
	FROM tblAgencyPhone ap
	INNER JOIN tblPhone aph
	ON aph.PhoneID = ap.PhoneID
    WHERE ap.AgencyID = @AgencyID

	-- Get the ChildAgency 3
	SELECT a.AgencyID,
		isnull(a.[Name], '') [Name],
		isnull(a.ImportAbbr, '') [ImportAbbr],
		UserID,
		isnull(a.CheckingSavings, 'C') [CheckingSavings],
		isnull(a.Contact1, '') [Contact1],
		isnull(a.Contact2, '') [Contact2],
		@AgencyId [ParentAgency]
	FROM tblChildAgency c  
	inner join tblAgency a on (c.AgencyId = a.AgencyId )
	WHERE c.ParentAgencyId = @AgencyID
	
	-- Get the CommRec 4
	SELECT CommRecId, 
		CommRecTypeID,
		isnull(Abbreviation, '') [Abbreviation],
		isnull(Display, '') [Display],
		isnull(Method, '') [Method],
		isnull(BankName, '') [BankName],
		isnull(RoutingNumber, '') [RoutingNumber],
		isnull(AccountNumber, '') [AccountNumber],
		isnull(Type,'C') [Type],
		isnull(IsCommercial, 'False') [IsCommercial],
		isnull(IsLocked, 'False') [IsLocked],
		isnull(IsTrust, 'False') [IsTrust],
		CompanyID,
		AgencyID,
		AccountTypeID
	FROM tblCommRec
	WHERE AgencyID = @AgencyID
		
	-- Get the CommRecAddress 5
	SELECT a.CommRecAddressId, 
		a.CommRecID, 
		a.Contact1,
		isnull(a.Contact2, '') [Contact2],
		isnull(a.Address1, '') [Address1],
		isnull(a.Address2, '') [Address2],
		isnull(a.City, '') [City],
		isnull(a.[State], '') [State],
		isnull(a.ZipCode, '') [ZipCode]
	FROM tblCommRecAddress a
	INNER JOIN tblCommRec cr ON (cr.CommRecId = a.CommRecId)
	WHERE cr.AgencyID = @AgencyID 

	-- Get the CommRecPhone 6
	SELECT p.CommRecPhoneId, 
		p.CommRecID,
		p.PhoneNumber
	FROM tblCommRecPhone p
	INNER JOIN tblCommRec cr ON (cr.CommRecId = p.CommRecId)
	WHERE cr.AgencyID = @AgencyID 

	-- Get the Agent 8 (oops look down)
	SELECT t.AgentId, 
		t.AgencyID,
		isnull(t.FirstName, '') [FirstName],
		isnull(t.LastName, '') [LastName],
		isnull(t.Street, '') [Street],
		isnull(t.Street2, '') [Street2],
		isnull(t.City, '') [City],
		t.StateID,
		isnull(t.ZipCode, '') [ZipCode]
	FROM tblAgent t
	INNER JOIN tblAgencyAgent a ON (a.AgentId = t.AgentId)
	WHERE a.AgencyID = @AgencyID 

	-- Get the AgentPhone 7 (sorry about that)
	SELECT agp.AgentID,
		agp.PhoneID,
		tp.AreaCode,
		tp.Number,
		tp.PhoneTypeID
	FROM tblAgentPhone agp
	INNER JOIN tblPhone tp
	ON tp.phoneID = agp.AgentPhoneID
	WHERE agp.AgentID IN (SELECT AgentID FROM tblAgent WHERE AgencyID = @AgencyID)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_getLeadBanks]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_LetterTemplates_getLeadBanks]
(
	@applicantid int
)
as
BEGIN
	select 
		BankName
		, RoutingNumber
		, Accountnumber
	from tblLeadBanks 
	where leadapplicantid = @applicantid
END
GO
/****** Object:  StoredProcedure [dbo].[stp_getScheduledDepositsPosted]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_getScheduledDepositsPosted]
(
	@StartDate varchar(10),
	@EndDate varchar(10),
	@ClientID int
)
as
BEGIN
	declare @ssql varchar(max)
	set @ssql = 'SELECT '
	set @ssql = @ssql + 'r.registerid, r.transactiondate, r.amount '
	set @ssql = @ssql + 'FROM tblRegister r '
	set @ssql = @ssql + 'WHERE r.entrytypeid = 3 and r.Clientid = ' + cast(@ClientID as varchar)
	set @ssql = @ssql + ' and convert(varchar(6), convert(datetime, convert(varchar, r.achyear) + ''/'' +  convert(varchar, r.achmonth) + ''/01''), 112) ' 
	set @ssql = @ssql + 'between ''' + @StartDate + ''' and ''' + @EndDate + ''''
	exec(@ssql)

END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAccountNumber_Fuzz]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GetAccountNumber_Fuzz]
as

SET TRANSACTION ISOLATION LEVEL READ COMMITTED

begin tran myTran

declare @accountnum bigint
declare @newaccountnum bigint

select @accountnum = cast([Value] as bigint)
from tblProperty
where PropertyID = 29

set @newaccountnum = @accountnum + 1

while ((select count(ClientID) from tblClient where AccountNumber in (@newaccountnum, @accountnum)) > 0)
begin
	set @newaccountnum = @newaccountnum + 1
	set @accountnum = @accountnum + 1
end

update tblProperty
set [Value] = cast(@newaccountnum as varchar(15)),
	LastModified = getdate() 
where PropertyID = 29

SELECT @accountnum

commit tran myTran
GO
/****** Object:  StoredProcedure [dbo].[stp_GetProperties]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetProperties]

as

select
	tblproperty.*,
	tblpropertycategory.[name] as propertycategoryname,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tblproperty inner join
	tblpropertycategory on tblproperty.propertycategoryid = tblpropertycategory.propertycategoryid left outer join
	tbluser as tblcreatedby on tblproperty.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblproperty.lastmodifiedby = tbllastmodifiedby.userid
GO
/****** Object:  StoredProcedure [dbo].[stp_Matters_GetAttachmentsForRelation]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_Matters_GetAttachmentsForRelation]

	(
		@accountid int,
		@clientid int
	)


AS
BEGIN
	SELECT dr.RelationID
		, dr.DocRelationID
		, dt.DisplayName
		, isnull(dr.relateddate, '01/01/1900') as ReceivedDate--, isnull(ds.ReceivedDate, '01/01/1900') as ReceivedDate
		, isnull(dr.relateddate, '01/01/1900') as Created
		, isnull(u.FirstName + ' ' + u.LastName + '</br>' + ug.Name, '') as CreatedBy 
	FROM 
		tblDocRelation as dr with(nolock) 
		inner join tblDocumentType as dt with(nolock) on dt.TypeID = dr.DocTypeID 
		--left join tblDocScan as ds with(nolock) on ds.DocID = dr.DocID 
		left join tblUser as u with(nolock) on u.UserID = dr.relatedby
		inner join tblusergroup as ug with(nolock) on ug.usergroupid = u.usergroupid     
	WHERE 
		dr.RelationID  in 
		(
			 select m.MatterId 
			 from dbo.tblMatter m 
			 join dbo.tblClient c on c.ClientId=m.ClientId 
			 join tblAccount ac with(nolock) on ac.ClientId=c.ClientId and ac.AccountId= @accountid   
			 join tblCreditorInstance ti with(nolock) on ti.CreditorInstanceId=m.CreditorInstanceId and ti.AccountId= ac.AccountId  
			 where c.ClientId=@clientid and IsNull(m.IsDeleted,0)=0   
		)  
		and dr.RelationType = 'matter' 
		and (DeletedFlag = 0 or DeletedBy = -1)   
	ORDER BY  dr.relateddate desc 
 END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTransferredClients]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetTransferredClients]
(
	@UserID int = -1
)
as
begin

	select c.clientid, c.accountnumber, p.firstname + ' ' + p.lastname[client], 
		c.created [statuscreated],
		c.depositstartdate, co.shortconame[company], g.name[language],
		case 
			when lsa.completed is not null then '16x16_pdf.png'
			when lsa.leadapplicantid is not null then '16x16_pdf_grey.png'
			else 'spacer.gif' end [LSAImg],
		case 
			when ver.completed is not null then '16x16_check.png'
			when ver.leadapplicantid is not null then '16x16_check_grey.png'
			else 'spacer.gif' end [VerImg]
	from tblclient c
	join tblimportedclient i on i.importid = c.serviceimportid
	join tblleadapplicant l on l.leadapplicantid = i.externalclientid 
	join tblperson p on p.personid = c.primarypersonid
	join tblcompany co on co.companyid = c.companyid
	join tbllanguage g on g.languageid = p.languageid
	left join vw_enrollment_LSA_complete lsa on lsa.leadapplicantid = l.leadapplicantid
	left join vw_enrollment_Ver_complete ver on ver.leadapplicantid = l.leadapplicantid
	where ((c.AssignedUnderwriter is null and @UserID = -1) or (c.AssignedUnderwriter = @UserID))
	and c.currentclientstatusid in (7,23,24) -- Recieved LSA, Returned to CID, Return to Compliance
	and l.statusid in (10,19) -- In Process, Return to Compliance
	order by [statuscreated]

end
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Profile_GetProperties]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Profile_GetProperties]
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @CurrentTimeUtc       datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN

    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL

    SELECT @UserId = UserId
    FROM   dbo.aspnet_Users
    WHERE  ApplicationId = @ApplicationId AND LoweredUserName = LOWER(@UserName)

    IF (@UserId IS NULL)
        RETURN
    SELECT TOP 1 PropertyNames, PropertyValuesString, PropertyValuesBinary
    FROM         dbo.aspnet_Profile
    WHERE        UserId = @UserId

    IF (@@ROWCOUNT > 0)
    BEGIN
        UPDATE dbo.aspnet_Users
        SET    LastActivityDate=@CurrentTimeUtc
        WHERE  UserId = @UserId
    END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneyBalance]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AttorneyBalance]
(
	@companyid int
)
as
begin


select endingbal
from tblattorneystatements
where companyid = @companyid
and statementdate = cast(convert(varchar(10),dateadd(day,-1,getdate()),101) as datetime) -- get yesterday's ending bal 


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMatterTasks2]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <03 - 18 February 2009>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Returns the tasks for Matters        
					Display only editable Tasks
*/
CREATE procedure [dbo].[stp_GetMatterTasks2]
(
      @MatterId int,
	  @OrderBy varchar(100)=''
)
AS

--- Display only editable Tasks
BEGIN
declare @clientjoin varchar(1000)

set @clientjoin = ' Select T.TaskID, M.MatterID, T.Created as CreatedDate, T.Due as DueDate, T.TaskResolutionId,
Case T.TaskTypeID When 0 Then ''Ad Hoc''Else (Select [Name] from tbltasktype Where TaskTypeID=T.TaskTypeID) End as TaskType,
(Select FirstName+'' ''+ LastName from tbluser Where UserID=T.AssignedTo) as AssignedTo, T.Description,
(Select FirstName+'' ''+ LastName from tbluser Where UserID=T.CreatedBy) as CreatedBy, T.Resolved
FROM dbo.tblMatterTask M, dbo.tblTask T
Where M.TaskID=T.TaskID and M.MatterID='+ cast(@MatterId as varchar)+' order by '+@OrderBy

exec(@clientjoin)


END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetDocumentNumber]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GetDocumentNumber]
as

SET TRANSACTION ISOLATION LEVEL READ COMMITTED

begin tran myTran

declare @docnum bigint
declare @newdocnum bigint

select @docnum = cast([Value] as bigint)
from tblProperty
where [NAME] = 'CurrentDocumentNumber'

set @newdocnum = @docnum + 1

IF(@newdocnum > '9999999')
	BEGIN
		UPDATE tblProperty
		SET [Value] = char(ascii([Value]) + 1)
		WHERE [NAME] = 'DocumentNumberPrefix'
		
		SET @newdocnum = '0000001'
	END

update tblProperty
set [Value] = right(replicate('0',7)+ convert(varchar(10),@newdocnum),7) , LastModified = getdate()
where [NAME] = 'CurrentDocumentNumber'

select right(replicate('0',7)+ convert(varchar(10),@docnum),7)

commit tran myTran
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPhonesForCreditor]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetPhonesForCreditor]
	(
		@creditorid int
	)

as

select
	tblcreditorphone.creditorphoneid,
	tblphone.*,
	tblphonetype.[name] as phonetypename,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tblphone inner join
	tblcreditorphone on tblphone.phoneid = tblcreditorphone.phoneid inner join
	tblphonetype on tblphone.phonetypeid = tblphonetype.phonetypeid left outer join
	tbluser as tblcreatedby on tblphone.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblphone.lastmodifiedby = tbllastmodifiedby.userid
where
	tblcreditorphone.creditorid = @creditorid
order by
	tblphonetype.[name]
GO
/****** Object:  StoredProcedure [dbo].[stp_GenerateMatterNumber]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <06 - 22 February 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Decription : Generate MatterNumber in the format         
				   ClientAccountNumber-last 4 digit of Creditor AccountNumber
*/


CREATE procedure [dbo].[stp_GenerateMatterNumber]
(
	@ClientId int,
	@AccountId int,
	@MatterTypeId int
)
AS

--***** AutoGenerate Matter Number****	
--***** Check if the AccountId and ClientId ***** 
--***** has valid records with Creditor Instance  ****

BEGIN

If @AccountId=0
Begin
	select 
	0 as CreditorInstanceId,
	c.AccountNumber,
	c.ClientId,
	(Select max(isNull(MatterID,0))+1 from tblMatter) as MatterNumber,
	CONVERT(VARCHAR(10),getdate(),  101) AS MatterDate
	--,getdate() as MatterDate 

	from dbo.tblClient c 

	where c.ClientId = @ClientId

End
else If @AccountId>0 
Begin
	
select 
	ci.CreditorInstanceId,
	ci.AccountNumber,
	a.ClientId,
	c.AccountNumber,
	--ci.AccountNumber,
	--c.AccountNumber+'-'+RIGHT(ci.AccountNumber,4) as MatterNumber,
	(Select max(isNull(MatterID,0))+1 from tblMatter) as MatterNumber,
	CONVERT(VARCHAR(10),getdate(),  101) AS MatterDate
	--,getdate() as MatterDate 

	from dbo.tblCreditorInstance ci 
	join dbo.tblAccount a on a.AccountId=ci.AccountId
	join dbo.tblClient c on c.ClientId=a.ClientId

	where ci.AccountId=@AccountId and c.ClientId = @ClientId

End

--else If @MatterTypeId=2
--Begin
--	select 
--	0 as CreditorInstanceId,
--	c.AccountNumber,
--	c.ClientId,
--	(Select max(isNull(MatterID,0))+1 from tblMatter) as MatterNumber,
--	CONVERT(VARCHAR(10),getdate(),  101) AS MatterDate
--	--,getdate() as MatterDate 
--
--	from dbo.tblClient c 
--
--	where c.ClientId = @ClientId
--End
--else If @MatterTypeId=3
--Begin
--	select 
--	0 as CreditorInstanceId,
--	c.AccountNumber,
--	c.ClientId,
--	(Select max(isNull(MatterID,0))+1 from tblMatter) as MatterNumber,
--	CONVERT(VARCHAR(10),getdate(),  101) AS MatterDate
--	--,getdate() as MatterDate 
--
--	from dbo.tblClient c 
--
--	where c.ClientId = @ClientId
--End
--
--else If @MatterTypeId=4
--Begin
--	select 
--	0 as CreditorInstanceId,
--	c.AccountNumber,
--	c.ClientId,
--	(Select max(isNull(MatterID,0))+1 from tblMatter) as MatterNumber,
--	CONVERT(VARCHAR(10),getdate(),  101) AS MatterDate
--	--,getdate() as MatterDate 
--
--	from dbo.tblClient c 
--
--	where c.ClientId = @ClientId
--End
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAssignedClients]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetAssignedClients]
as
begin

	select c.clientid, c.accountnumber, p.firstname + ' ' + p.lastname[client], 
		c.created [statuscreated],
		c.depositstartdate, co.shortconame[company], g.name[language],
		case 
			when lsa.completed is not null then '16x16_pdf.png'
			when lsa.leadapplicantid is not null then '16x16_pdf_grey.png'
			else 'spacer.gif' end [LSAImg],
		case 
			when ver.completed is not null then '16x16_check.png'
			when ver.leadapplicantid is not null then '16x16_check_grey.png'
			else 'spacer.gif' end [VerImg],
		u.firstname + ' ' + u.lastname [assignedto],
		u.userid,
		datediff(day,AssignedUnderwriterDate,getdate()) [daysassigned]
	from tblclient c
	join tblimportedclient i on i.importid = c.serviceimportid
	join tblleadapplicant l on l.leadapplicantid = i.externalclientid
	join tblperson p on p.personid = c.primarypersonid
	join tblcompany co on co.companyid = c.companyid
	join tbllanguage g on g.languageid = p.languageid
	join tbluser u on u.userid = c.AssignedUnderwriter
	left join vw_enrollment_LSA_complete lsa on lsa.leadapplicantid = l.leadapplicantid
	left join vw_enrollment_Ver_complete ver on ver.leadapplicantid = l.leadapplicantid
	where c.currentclientstatusid in (7,23,24) -- Recieved LSA, Returned to CID, Return to Compliance
	and l.statusid in (10,19) -- In Process
	order by [statuscreated]

end
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Users_DeleteUser]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Users_DeleteUser]
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @TablesToDeleteFrom int,
    @NumTablesDeletedFrom int OUTPUT
AS
BEGIN
    DECLARE @UserId               uniqueidentifier
    SELECT  @UserId               = NULL
    SELECT  @NumTablesDeletedFrom = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
	SET @TranStarted = 0

    DECLARE @ErrorCode   int
    DECLARE @RowCount    int

    SET @ErrorCode = 0
    SET @RowCount  = 0

    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a
    WHERE   u.LoweredUserName       = LOWER(@UserName)
        AND u.ApplicationId         = a.ApplicationId
        AND LOWER(@ApplicationName) = a.LoweredApplicationName

    IF (@UserId IS NULL)
    BEGIN
        GOTO Cleanup
    END

    -- Delete from Membership table if (@TablesToDeleteFrom & 1) is set
    IF ((@TablesToDeleteFrom & 1) <> 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        DELETE FROM dbo.aspnet_Membership WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
               @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_UsersInRoles table if (@TablesToDeleteFrom & 2) is set
    IF ((@TablesToDeleteFrom & 2) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_UsersInRoles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_UsersInRoles WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Profile table if (@TablesToDeleteFrom & 4) is set
    IF ((@TablesToDeleteFrom & 4) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_Profile WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_PersonalizationPerUser table if (@TablesToDeleteFrom & 8) is set
    IF ((@TablesToDeleteFrom & 8) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationPerUser WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Users table if (@TablesToDeleteFrom & 1,2,4 & 8) are all set
    IF ((@TablesToDeleteFrom & 1) <> 0 AND
        (@TablesToDeleteFrom & 2) <> 0 AND
        (@TablesToDeleteFrom & 4) <> 0 AND
        (@TablesToDeleteFrom & 8) <> 0 AND
        (EXISTS (SELECT UserId FROM dbo.aspnet_Users WHERE @UserId = UserId)))
    BEGIN
        DELETE FROM dbo.aspnet_Users WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:
    SET @NumTablesDeletedFrom = 0

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
	    ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_WebEvent_LogEvent]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_WebEvent_LogEvent]
        @EventId         char(32),
        @EventTimeUtc    datetime,
        @EventTime       datetime,
        @EventType       nvarchar(256),
        @EventSequence   decimal(19,0),
        @EventOccurrence decimal(19,0),
        @EventCode       int,
        @EventDetailCode int,
        @Message         nvarchar(1024),
        @ApplicationPath nvarchar(256),
        @ApplicationVirtualPath nvarchar(256),
        @MachineName    nvarchar(256),
        @RequestUrl      nvarchar(1024),
        @ExceptionType   nvarchar(256),
        @Details         ntext
AS
BEGIN
    INSERT
        dbo.aspnet_WebEvent_Events
        (
            EventId,
            EventTimeUtc,
            EventTime,
            EventType,
            EventSequence,
            EventOccurrence,
            EventCode,
            EventDetailCode,
            Message,
            ApplicationPath,
            ApplicationVirtualPath,
            MachineName,
            RequestUrl,
            ExceptionType,
            Details
        )
    VALUES
    (
        @EventId,
        @EventTimeUtc,
        @EventTime,
        @EventType,
        @EventSequence,
        @EventOccurrence,
        @EventCode,
        @EventDetailCode,
        @Message,
        @ApplicationPath,
        @ApplicationVirtualPath,
        @MachineName,
        @RequestUrl,
        @ExceptionType,
        @Details
    )
END
GO
/****** Object:  StoredProcedure [dbo].[stp_VerificationCall_GetI3FilePath]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_VerificationCall_GetI3FilePath]
@RecCallIdKey varchar(50)
AS
	Select RecordingFileName from dbo.RecordingData
where CallIdKey = @RecCallIdKey
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNewUniqueID]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GetNewUniqueID]
as

SET TRANSACTION ISOLATION LEVEL READ COMMITTED

begin tran myTran

declare @newid bigint

select @newid = cast([Value] as bigint) + 1
from tblProperty
where [Name] = 'NewUniqueID'

update tblProperty
set [Value] = cast(@newid as varchar(15)),
	LastModified = getdate()
where [Name] = 'NewUniqueID'

select @newid

commit tran myTran

return @newid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPrimaryPersonForClient]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetPrimaryPersonForClient]
	(
		@clientid int
	)

as

select
	tblperson.*,
	(case tblperson.relationship when 'prime' then 1 else 0 end) as isprime,
	tblstate.[name] as statename,
	tblstate.abbreviation as stateabbreviation,
	tbllanguage.[name] as languagename,
	tblclient.accountnumber,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tblclient inner join
	tblperson on tblclient.primarypersonid = tblperson.personid inner join
	tblstate on tblperson.stateid = tblstate.stateid inner join
	tbllanguage on tblperson.languageid = tbllanguage.languageid left outer join
	tbluser as tblcreatedby on tblperson.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblperson.lastmodifiedby = tbllastmodifiedby.userid
where
	tblclient.clientid = @clientid and
	(case tblperson.relationship when 'prime' then 1 else 0 end) = 1
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertMatter]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Revision	: <10 - 15 March 2010>
	Category	: [TimeMatter]
	Type        : {New}
	Decription	: Creating an new matter
				  use IsDeleted
*/


CREATE PROCEDURE [dbo].[stp_InsertMatter]
(
   @MatterId int = NULL,
   @ClientId int,
   @MatterStatusCodeId int,
   @MatterNumber varchar(50),
   @MatterDate datetime,
   @MatterMemo varchar(200),
   @CreatedBy int,
   @AccountId int,
   @AttorneyId int,
   @CreditorInstanceId int	=0,
   @MatterTypeID int,
   @MatterStatusId int,
   @MatterSubStatusId int
)
AS

--** todo need to add transaction and validation *//
--** could be done in MatterData Helper class ***/

DECLARE @latestCreditorInstanceId int

--if @MatterTypeID=1
--Begin
	if @CreditorInstanceId=-1
		set @latestCreditorInstanceId=NULL
--	else if @CreditorInstanceId=0
--		set @latestCreditorInstanceId=0
	else	
--	if @CreditorInstanceId=0
--		SET @latestCreditorInstanceId=(select TOP 1 CreditorInstanceId from tblCreditorInstance where AccountId =@AccountId order by Created desc)
--	else
		set @latestCreditorInstanceId=@CreditorInstanceId
--End
--else
--Begin
--	if @AccountId=-1
--		set @LatestCreditorInstanceId=NULL
--	else if @AccountId=0
--		set @LatestCreditorInstanceId=0
--	else
--		set @LatestCreditorInstanceId=@CreditorInstanceId
--End

If @AttorneyId=-1
	set @AttorneyId=NULL


IF @MatterId is null 
BEGIN 
INSERT INTO dbo.tblMatter
(
ClientId,
MatterStatusCodeId,
MatterNumber,
MatterDate,
MatterMemo,
CreatedDateTime,
CreatedBy,
CreditorInstanceId,
AttorneyId,
MatterTypeID,
IsDeleted,
MatterStatusId,
MatterSubStatusId
)

VALUES 
(
@ClientId
,@MatterStatusCodeId
,@MatterNumber
,@MatterDate
,@MatterMemo
,getdate()
,@CreatedBy
,@latestCreditorInstanceId
,@AttorneyId
--,1
,@MatterTypeID
,0
,@MatterStatusId
,@MatterSubStatusId
)

DECLARE @MatId int
SET @MatId = (SELECT MAX(MatterId) FROM dbo.tblMatter)

SELECT NEWID = SCOPE_IDENTITY()

END


ELSE
BEGIN

-- Note need to put transaction here !
---Also CreditorInstanceId is also an identifying ID!
-- need to be able to update creditor instance too!

UPDATE dbo.tblMatter

SET MatterStatusCodeId	= @MatterStatusCodeId,
    MatterNumber		= @MatterNumber,
    MatterMemo			= @MatterMemo,
	AttorneyId		    = @AttorneyId,
	MatterTypeId		= @MattertypeId,
	CreditorInstanceId  = @latestCreditorInstanceId,
	MatterStatusId		= @MatterStatusId,
	MatterSubStatusId  = @MatterSubStatusId

where  MatterId =@MatterId 


END
GO
/****** Object:  StoredProcedure [dbo].[stp_VerificationHistory]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_VerificationHistory]
as
begin


select cast(convert(varchar(10),v.completed,101) as datetime) [completed],
	'' [company],
	'' [rep],
	'' [client],
	count(*) [clients],
	1 [seq]
from vw_enrollment_Ver_complete v
where v.completed is not null
and v.completed > dateadd(d,-30,cast(convert(varchar(10),getdate(),101) as datetime))
group by convert(varchar(10),v.completed,101)

union all

select cast(convert(varchar(10),v.completed,101) as datetime) [completed],
	co.shortconame [company],
	'' [rep],
	'' [client],
	count(*) [clients],
	2 [seq]
from vw_enrollment_Ver_complete v
join vw_leadapplicant_client l on l.leadapplicantid = v.leadapplicantid
join tblclient c on c.clientid = l.clientid
join tblcompany co on co.companyid = c.companyid
where v.completed is not null
and v.completed > dateadd(d,-30,cast(convert(varchar(10),getdate(),101) as datetime))
group by convert(varchar(10),v.completed,101), co.shortconame

union all

select cast(convert(varchar(10),v.completed,101) as datetime) [completed],
	co.shortconame [company],
	u.firstname + ' ' + u.lastname [rep],
	'' [client],
	count(*) [clients],
	3 [seq]
from vw_enrollment_Ver_complete v
join vw_leadapplicant_client lc on lc.leadapplicantid = v.leadapplicantid
join tblclient c on c.clientid = lc.clientid
join tblcompany co on co.companyid = c.companyid
join tblleadapplicant l on l.leadapplicantid = lc.leadapplicantid
join tbluser u on u.userid = l.repid
where v.completed is not null
and v.completed > dateadd(d,-30,cast(convert(varchar(10),getdate(),101) as datetime))
group by convert(varchar(10),v.completed,101), co.shortconame, u.firstname, u.lastname

union all

select cast(convert(varchar(10),v.completed,101) as datetime) [completed],
	co.shortconame [company],
	u.firstname + ' ' + u.lastname [rep],
	c.accountnumber + ' - ' + p.firstname + ' ' + p.lastname [client],
	1 [clients],
	4 [seq]
from vw_enrollment_Ver_complete v
join vw_leadapplicant_client lc on lc.leadapplicantid = v.leadapplicantid
join tblclient c on c.clientid = lc.clientid
join tblcompany co on co.companyid = c.companyid
join tblleadapplicant l on l.leadapplicantid = lc.leadapplicantid
join tbluser u on u.userid = l.repid
join tblperson p on p.personid = c.primarypersonid
where v.completed is not null
and v.completed > dateadd(d,-30,cast(convert(varchar(10),getdate(),101) as datetime))

order by [completed] desc, [company], [rep], client


end
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetPasswordWithFormat]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetPasswordWithFormat]
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @UpdateLastLoginActivityDate    bit,
    @CurrentTimeUtc                 datetime
AS
BEGIN
    DECLARE @IsLockedOut                        bit
    DECLARE @UserId                             uniqueidentifier
    DECLARE @Password                           nvarchar(128)
    DECLARE @PasswordSalt                       nvarchar(128)
    DECLARE @PasswordFormat                     int
    DECLARE @FailedPasswordAttemptCount         int
    DECLARE @FailedPasswordAnswerAttemptCount   int
    DECLARE @IsApproved                         bit
    DECLARE @LastActivityDate                   datetime
    DECLARE @LastLoginDate                      datetime

    SELECT  @UserId          = NULL

    SELECT  @UserId = u.UserId, @IsLockedOut = m.IsLockedOut, @Password=Password, @PasswordFormat=PasswordFormat,
            @PasswordSalt=PasswordSalt, @FailedPasswordAttemptCount=FailedPasswordAttemptCount,
		    @FailedPasswordAnswerAttemptCount=FailedPasswordAnswerAttemptCount, @IsApproved=IsApproved,
            @LastActivityDate = LastActivityDate, @LastLoginDate = LastLoginDate
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF (@UserId IS NULL)
        RETURN 1

    IF (@IsLockedOut = 1)
        RETURN 99

    SELECT   @Password, @PasswordFormat, @PasswordSalt, @FailedPasswordAttemptCount,
             @FailedPasswordAnswerAttemptCount, @IsApproved, @LastLoginDate, @LastActivityDate

    IF (@UpdateLastLoginActivityDate = 1 AND @IsApproved = 1)
    BEGIN
        UPDATE  dbo.aspnet_Membership
        SET     LastLoginDate = @CurrentTimeUtc
        WHERE   UserId = @UserId

        UPDATE  dbo.aspnet_Users
        SET     LastActivityDate = @CurrentTimeUtc
        WHERE   @UserId = UserId
    END


    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[stp_StoreUserSearch]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_StoreUserSearch] 
(
	@userid int,
	@terms varchar(255),
	@results int,
	@resultsclients int,
	@resultsnotes int = 0,
	@resultscalls int = 0,
	@resultstasks int = 0,
	@resultsemail int = 0,
	@resultspersonnel int = 0
)
as
begin

if exists (select 1 from tblusersearch where userid = @userid and terms = @terms and convert(varchar(10),search,101) = convert(varchar(10),getdate(),101)) begin
	update tblusersearch
	set search = getdate()
	where userid = @userid 
	and terms = @terms 
	and convert(varchar(10),search,101) = convert(varchar(10),getdate(),101) 
end
else begin
	insert tblUserSearch (UserID,Search,Terms,Results,ResultsClients,ResultsNotes,ResultsCalls,ResultsTasks,ResultsEmail,ResultsPersonnel) 
	values (@userid,getdate(),@terms,@results,@resultsclients,@resultsnotes,@resultscalls,@resultstasks,@resultsemail,@resultspersonnel)
end

end
GO
/****** Object:  StoredProcedure [dbo].[stp_Report_MediatorReassignment]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_Report_MediatorReassignment]
(
	@userid int
)

as

select
	c.clientid,
	p.firstname,
	p.lastname,
	p.ssn,
	c.accountnumber
from
	tblclient c inner join
	tblperson p on c.primarypersonid=p.personid
where
	c.assignedmediator=@userid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAccountNumber]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_GetAccountNumber]
as

SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ COMMITTED

begin tran myTran

declare @accountnum bigint
declare @newaccountnum bigint

select @accountnum = cast([Value] as bigint)
from tblProperty
where PropertyID = 29

set @newaccountnum = @accountnum + 1

while ((select count(ClientID) from tblClient where AccountNumber in (@newaccountnum, @accountnum)) > 0)
begin
	set @newaccountnum = @newaccountnum + 1
	set @accountnum = @accountnum + 1
end

update tblProperty
set [Value] = cast(@newaccountnum as varchar(15)),
	LastModified = getdate()
where PropertyID = 29

commit tran myTran

SELECT @accountnum
GO
/****** Object:  StoredProcedure [dbo].[stp_GetDocFoldersForFolder]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetDocFoldersForFolder]
	(
		@parentdocfolderid int
	)

as


select
	tbldocfolder.*,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tbldocfolder left outer join
	tbluser as tblcreatedby on tbldocfolder.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tbldocfolder.lastmodifiedby = tbllastmodifiedby.userid
where
	tbldocfolder.parentdocfolderid = @parentdocfolderid
order by
	tbldocfolder.[name]
GO
/****** Object:  StoredProcedure [dbo].[stp_MatterReport]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <06 - 21 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : MatterView Report
					used IsDeleted

*/
CREATE PROCEDURE [dbo].[stp_MatterReport]

(
	@MatterId int= NULL,
	@AttorneyId int =NULL,
	@MatterStatusId int =NULL,
	@MatterSubStatusId int = NULL,
	@CompanyId int = NULL,
	@ClientId int =NULL
)

AS


select 

m.MatterId,
m.CreditorInstanceid,
m.MatterNumber,
m.MatterDate,
m.MatterMemo,
m.AttorneyId,
a.FirstName,
a.MiddleName,
a.LastName,
--CASE WHEN MiddleName IS NULL THEN a.FirstName+' '+a.LastName
--	 WHEN MiddleName IN('',' ') THEN a.FirstName+ ' '+a.LastName
--	 ELSE a.FirstName +' '+a.MiddleName+' '+a.LastName END as [AttorneyName],
CASE WHEN m.AttorneyId is null then 'None'
	 WHEN m.AttorneyId = 0 then		'TBD'
	 ELSE a.FirstName +' '+IsNull(a.MiddleName+' ','')+a.LastName END as [AttorneyName],
a.Address1,
a.Address2,
a.State,
a.City,
a.Phone1,
a.EmailAddress,
m.MatterStatusId,
msc.MatterStatus,
msc.MatterStatusDescr,
mssc.MatterSubStatusId,
mssc.MatterSubStatus,
co.Companyid,
co.Name [CompanyName],
c.ClientId,
c.AccountNumber as ClientAccountNumber,
c.PrimaryPersonId,
p.FirstName,
p.LastName,
p.FirstName +' '+ p.LastName as[ClientPrimaryApplicantName],
p.StateId [PersonStateId],
s.Name as [PersonState],
ci.CreditorInstanceid,
ci.Amount


from dbo.tblMatter m
join dbo.tblClient c on c.ClientId=m.ClientId
join dbo.tblPerson p on p.personId =c.PrimaryPersonId
join dbo.tblMatterStatus msc on msc.MatterStatusId=m.MatterStatusId
join dbo.tblMatterSubStatus mssc on mssc.MatterSubStatusId = m.MatterSubStatusId
--join dbo.tblAttorney a  on a.AttorneyId = m.AttorneyId
left outer join dbo.tblAttorney a on a.AttorneyId = m.AttorneyId
join dbo.tblCreditorInstance ci on ci.CreditorInstanceId = m.CreditorInstanceid
left join dbo.tblState s on s.StateId =p.StateId
left join dbo.tblState t on t.name = a.State
join dbo.tblCompany co on co.CompanyId =c.Companyid

Where IsNull(m.IsDeleted,0)=0
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetUserByUserId]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetUserByUserId]
    @UserId               uniqueidentifier,
    @CurrentTimeUtc       datetime,
    @UpdateLastActivity   bit = 0
AS
BEGIN
    IF ( @UpdateLastActivity = 1 )
    BEGIN
        UPDATE   dbo.aspnet_Users
        SET      LastActivityDate = @CurrentTimeUtc
        FROM     dbo.aspnet_Users
        WHERE    @UserId = UserId

        IF ( @@ROWCOUNT = 0 ) -- User ID not found
            RETURN -1
    END

    SELECT  m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate, m.LastLoginDate, u.LastActivityDate,
            m.LastPasswordChangedDate, u.UserName, m.IsLockedOut,
            m.LastLockoutDate
    FROM    dbo.aspnet_Users u, dbo.aspnet_Membership m
    WHERE   @UserId = u.UserId AND u.UserId = m.UserId

    IF ( @@ROWCOUNT = 0 ) -- User ID not found
       RETURN -1

    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertC21Batch]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertC21Batch]
@BatchId varchar(50),
@RequestBeginDate Datetime,
@RequestEndDate Datetime
AS
INSERT INTO tblC21Batch (BatchId, Created, RequestBeginDate, RequestEndDate)
VALUES (@BatchId, GetDate(), @RequestBeginDate, @RequestEndDate)
GO
/****** Object:  StoredProcedure [dbo].[stp_Report_MediatorReassignment_Fulfillment]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Report_MediatorReassignment_Fulfillment]
(
	@userid int
)

as

select
	c.clientid,
	c.assignedmediator,
	p.lastname,
	(select top 1 balance from tblregister where clientid = c.clientid order by transactiondate desc, registerid desc) as sdabalance,
	count(a.accountid) as accounts
from
	tblclient c inner join
	tblperson p on c.primarypersonid=p.personid inner join
	tblaccount a on c.clientid=a.clientid
where
	c.assignedmediator=@userid
group by
	c.clientid,
	c.assignedmediator,
	p.lastname
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getCoApps]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_enrollment_getCoApps]
(
	@applicantid int
)
as
	BEGIN
		IF @applicantID <> 0
		BEGIN
			select 
				[full name]
				, AuthorizationPower
				, LeadCoApplicantID
				, ssn
			from 
				tblleadcoapplicant
			where 
				leadapplicantid = @applicantid
		END
	END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetDocsForDocFolder]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetDocsForDocFolder]
	(
		@docfolderid int
	)

as

select
	tbldoc.*,
	tbldocfolder.name as docfoldername,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tbldoc inner join
	tbldocfolder on tbldoc.docfolderid = tbldocfolder.docfolderid left outer join
	tbluser as tblcreatedby on tbldoc.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tbldoc.lastmodifiedby = tbllastmodifiedby.userid
where
	tbldoc.docfolderid = @docfolderid
order by
	tbldoc.[name]
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_leadverification]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_enrollment_leadverification]
(
	@leadApplicantID int
)
as
begin

	select submitted, u.firstname + ' ' + u.lastname [submittedby], left(accessnumber,3)+'-'+substring(accessnumber,4,3)+'-'+right(accessnumber,4) [accessnumber], pvn, confnum, completed
	from tblleadverification v
	left join tbluser u on u.userid = v.submittedby
	where v.leadapplicantid = @leadApplicantID
	order by v.submitted desc

end
GO
/****** Object:  StoredProcedure [dbo].[stp_UnapprovedIncentives]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
stp_UnapprovedIncentives 1387,3,2010,820,0,0,0,null

declare @c int
exec stp_UnapprovedIncentives 1387,3,2010,820,0,0,1,@c output
select @c
*/

CREATE procedure [dbo].[stp_UnapprovedIncentives]
(
	@repid int,
	@month int,
	@year int,
	@userid int,
	@approve bit = 0,
	@summaryonly bit = 0,
	@initcountonly bit = 0,
	@initialcount int output
)
as

declare @team table (repid int, initialcount int, initialpayment money)
declare	@dmonth varchar(30)

set @dmonth = datename(month,cast(@month as varchar(2))+'/1/2000')


-- Initials based on 3PV completion only
select l.repid, lc.leadapplicantid, lc.clientid
into #initials
from vw_leadapplicant_client lc 
join vw_enrollment_Ver_complete v on v.leadapplicantid = lc.leadapplicantid 
	and month(v.completed) = @month 
	and year(v.completed) = @year
join tblleadapplicant l on l.leadapplicantid = lc.leadapplicantid 
	and l.repid = @repid
join vw_CIDFirstDeposits f on f.clientid = lc.clientid -- initial draft check


if (@month = 5 and @year = 2010) begin
	-- **Temp**
	-- Clients that completed 3PV this month, cancelled this month, and were originally setup for ACH (when clients cancel we change their deposit info to check so they don't get drafted)
	-- [policy will change in June and these will not be included]
	insert #initials (repid, leadapplicantid, clientid)
	select repid, leadapplicantid, clientid
	from (
		select distinct l.repid, lc.leadapplicantid, lc.clientid
		from vw_leadapplicant_client lc 
		join vw_enrollment_Ver_complete v on v.leadapplicantid = lc.leadapplicantid 
			and month(v.completed) = @month  
			and year(v.completed) = @year
		join tblleadapplicant l on l.leadapplicantid = lc.leadapplicantid 
			and l.repid = @repid
		join tblclient c on c.clientid = lc.clientid
			and c.currentclientstatusid = 17 -- Cancelled
		join tblclientdepositday d on d.clientid = c.clientid
		join tblaudit a on a.pk = d.clientdepositid
			and a.auditcolumnid = 150 -- DepositMethod
			and a.value = 'ACH'
	) d
	where not exists (select 1 from #initials i where i.clientid = d.clientid)
	
	-- 1-offs
	if @repid = 1392 begin -- avery
		insert #initials (repid, leadapplicantid, clientid)
		values (1392,70182,97101)
		
		insert #initials (repid, leadapplicantid, clientid)
		values (1392,71422,96927)
	end
	else if @repid = 1268 begin
		insert #initials (repid, leadapplicantid, clientid)
		values (1268,72385,97181)
	end
	else if @repid = 1421 begin -- alex
		insert #initials (repid, leadapplicantid, clientid)
		values (1421,67962,96644)
		
		insert #initials (repid, leadapplicantid, clientid)
		values (1421,76866,97344)
	end
	else if @repid = 1387 begin -- rsheffield
		insert #initials (repid, leadapplicantid, clientid)
		values (@repid,68924,96710)
		
		insert #initials (repid, leadapplicantid, clientid)
		values (@repid,70934,97035)
		
		insert #initials (repid, leadapplicantid, clientid)
		values (@repid,74993,97203)
		
		insert #initials (repid, leadapplicantid, clientid)
		values (@repid,70837,96868)
	end
	else if @repid = 1449 begin -- navi
		insert #initials (repid, leadapplicantid, clientid)
		values (@repid,76388,97383)
	end
end


-- get chart
select c.repid, c.clients, i.initialpymt, i.residual
into #reps
from (
	select repid, count(*) [clients]
	from #initials
	group by repid
) c
join tblincentivechart i on c.clients between i.clientsmin and i.clientsmax 
join tblincentivecharts s on s.incentivechartid = i.incentivechartid 
and s.validto is null -- current
and s.supervisor = 0 -- individual


-- insert initial incentives
select repid, clients[initialcount], initialpymt[initialpayment], clients * initialpymt[initialtotal],
	residual[residualpayment], 0[residualcount], $0.00[residualtotal],
	0[teamcount], $0.00[teampayment], $0.00[teamtotal]
into #incentives
from #reps


-- get available residual clients
select i.repid, d.clientid, count(d.clientid) [cnt]
into #rclients
from tblincentivedetail d
join tblincentives i on i.incentiveid = d.incentiveid
and i.repid = @repid
group by i.repid, d.clientid
having count(d.clientid) < 13 -- max residuals allowed +1 for initial


-- residuals are clients that made a deposit this month
select distinct c.repid, c.clientid
into #residuals
from tblregister r 
join #rclients c on c.clientid = r.clientid
where r.entrytypeid = 3 -- Deposit
	and r.bounce is null
	and r.void is null
	and month(r.transactiondate) = @month
	and year(r.transactiondate) = @year


update #incentives
set residualcount = d.residualcount, residualtotal = d.residualtotal
from #incentives i
join (
	select i.repid, count(*) [residualcount], i.residualpayment * count(*) [residualtotal]
	from #incentives i
	join #residuals r on r.repid = i.repid
	group by i.repid, i.residualpayment
) d
on d.repid = i.repid


-- if this rep is a supervisor, get their team totals
if exists (select 1 from tblsupteam where supid = @repid) begin

	-- add team members and their initial counts if they've already been approved
	insert @team
	select t.repid, i.initialcount, i.initialpayment
	from tblsupteam t
	left join tblincentives i on i.repid = t.repid
	and i.incentivemonth = @month
	and i.incentiveyear = @year
	where t.supid = @repid
	
	-- add supervisor to team
	insert @team 
	select @repid, initialcount, initialpayment
	from #incentives

	-- these reps dont have their incentives for this month approved yet
	declare cur cursor for select repid from @team where initialcount is null
	declare @rep int, @initcount int, @initpayment money

	open cur
	fetch next from cur into @rep
	while @@fetch_status = 0 begin
		exec stp_UnapprovedIncentives @rep, @month, @year, -1, 0, 0, 1, @initcount output

		select @initpayment = i.initialpymt
		from tblincentivechart i
		join tblincentivecharts s on s.incentivechartid = i.incentivechartid 
		and s.validto is null -- current
		and s.supervisor = 0 -- individual		
		where @initcount between i.clientsmin and i.clientsmax 

		update @team 
		set initialcount = @initcount, initialpayment = @initpayment
		where repid = @rep
		
		fetch next from cur into @rep
	end
	close cur
	deallocate cur

	update #incentives
	set teamcount = t.teamcount, teampayment = c.initialpymt, teamtotal = t.teamcount * c.initialpymt
	from #incentives i
	join (
		select sum(initialcount) [teamcount]
		from @team
	) t on 1=1
	join tblincentivechart c on t.teamcount between c.clientsmin and c.clientsmax 
	join tblincentivecharts s on s.incentivechartid = c.incentivechartid 
	and s.validto is null -- current
	and s.supervisor = 1
end


if (@approve = 1) begin
	declare @id int

	insert tblincentives (incentivemonth,incentiveyear,repid,initialcount,initialpayment,initialtotal,residualcount,residualpayment,residualtotal,teamcount,teampayment,teamtotal,createdby)
	select @month,@year,repid,initialcount,initialpayment,initialtotal,residualcount,residualpayment,residualtotal,teamcount,teampayment,teamtotal,@userid
	from #incentives
	where repid = @repid
	
	select @id = scope_identity()
	
	insert tblincentivedetail (incentiveid,clientid,initial)
	select @id, clientid, 1
	from #initials
	union all
	select @id, clientid, 0
	from #residuals

	-- log team incentive (if rep belongs to a team)
	insert tblincentivesteam
	select supid, @id
	from tblsupteam t
	where t.repid = @repid
end
else begin
	if @initcountonly = 1 begin
		select @initialcount = initialcount
		from #incentives
	end
	else if @summaryonly = 1 begin
		select @dmonth + ' ' + cast(@year as char(4)) [monthyear], 
			i.initialcount, i.initialpayment, i.initialtotal, 
			i.residualcount, i.residualpayment, i.residualtotal,
			i.teamcount, i.teampayment, i.teamtotal,
			i.initialcount + i.residualcount[totalcount], i.initialtotal + i.residualtotal[totalamt],
			i.initialtotal + i.residualtotal + i.teamtotal [indteamtotal],
			@month [month], @year [year], 0[approved]
		from #incentives i
	end
	else begin -- detail

		-- initials
		select d.clientid, c.accountnumber, v.leadapplicantid, p.firstname + ' ' + p.lastname[client], c.currentclientstatusid
		from #initials d
		join tblclient c on c.clientid = d.clientid
		join tblperson p on p.personid = c.primarypersonid
		join vw_leadapplicant_client v on v.clientid = d.clientid
		order by client

		-- residuals
		select d.clientid, c.accountnumber, v.leadapplicantid, p.firstname + ' ' + p.lastname[client], c.currentclientstatusid
		from #residuals d
		join tblclient c on c.clientid = d.clientid
		join tblperson p on p.personid = c.primarypersonid
		join vw_leadapplicant_client v on v.clientid = d.clientid
		order by client

		-- team
		select u.firstname + ' ' + u.lastname [rep], t.initialcount, 1 [seq]
		from @team t
		join tbluser u on u.userid = t.repid
		order by rep
	end
end


drop table #initials
drop table #reps
drop table #incentives
drop table #rclients
drop table #residuals
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetUserByEmail]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetUserByEmail]
    @ApplicationName  nvarchar(256),
    @Email            nvarchar(256)
AS
BEGIN
    IF( @Email IS NULL )
        SELECT  u.UserName
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                u.UserId = m.UserId AND
                m.LoweredEmail IS NULL
    ELSE
        SELECT  u.UserName
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                u.UserId = m.UserId AND
                LOWER(@Email) = m.LoweredEmail

    IF (@@rowcount = 0)
        RETURN(1)
    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetLastC21BatchRequestDate]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetLastC21BatchRequestDate]
AS
	SELECT Max(RequestEndDate) AS [LastRequestDate] FROM tblC21Batch
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTaskAsignedToList]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <06 - 08 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Decription  : Listing the Lookup table for GetAssignedToList  
					show all groups stp_GetTaskAsignedToList NULL,NULL,NULL
					show groups and its members
					
*/
CREATE Procedure [dbo].[stp_GetTaskAsignedToList]
(

	@RowNumber int=null, 
	@UserGroupId int,
	@UserID int=null,
	@MatterTypeId int =null 
)

AS

BEGIN
CREATE TABLE #AssignedToList
(
ROWNumber int identity(1,1),
usergroupId int,
userid int,
Displayname varchar(100),
sortorder int
)

INSERT #AssignedToList

select 
u.UserGroupId, 
u.UserId, 
'+'+u.FirstName +' ' + u.LastName as [DisplayName],  
1 as sortorder
from tbluser u left outer join tblusergroup ug on u.usergroupid=ug.usergroupid 
left outer join tblMatterGroupUserGroupXRef mug on mug.usergroupid=ug.usergroupid 
left outer join tblmattertype mt on mt.mattergroupid=mug.mattergroupid 
Where mt.mattertypeid=ISNULL(@MatterTypeId,mt.matterTypeId)  and u.userGroupId is not null
and u.Locked=0
and u.Temporary	=0

union
(
select ug.UserGroupId,0 as UserId,[Name] as [DisplayName],0 as sortorder 
from tblusergroup ug left outer join tblMatterGroupUserGroupXRef mug on mug.usergroupid=ug.usergroupid 
left outer join tblmattertype mt on mt.mattergroupid=mug.mattergroupid 
Where mt.mattertypeid=ISNULL(@MatterTypeId,mt.matterTypeid)  and ug.userGroupId is not null

)

order by u.UserGroupId,sortorder,DisplayName asc

if @UserID is null
	if @UserGroupId is NULL
		SELECT * from #AssignedToList where rownumber=ISNULL(@rownumber,rownumber) and userid=0 
		--order by DisplayName asc
	else
		SELECT * from #AssignedToList where rownumber=ISNULL(@rownumber,rownumber)
else		
	if @usergroupId=0
		SELECT * from #AssignedToList where userid=@UserID
	else
		SELECT * from #AssignedToList where userid=@UserID and usergroupId=@usergroupId

DROP TABLE #AssignedToList

END
GO
/****** Object:  StoredProcedure [dbo].[stp_AddLeadSource]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AddLeadSource]
(
	@LeadMarketID int,
	@Source varchar(200),
	@UserID int
)
as
begin

if exists (select 1 from tblLeadSource where LeadMarketID = @LeadMarketID and Source = @Source) begin
	select LeadSourceID from tblLeadSource where LeadMarketID = @LeadMarketID and Source = @Source
end
else begin
	insert tblLeadSource (LeadMarketID,Source,CreatedBy) values (@LeadMarketID,@Source,@UserID) 
	select scope_identity()
end

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNotesForTask]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetNotesForTask]
	(
		@taskid int
	)

as

select
	tbltasknote.tasknoteid,
	tbltasknote.taskid,
	tblnote.*,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tblnote inner join
	tbltasknote on tblnote.noteid = tbltasknote.noteid left outer join
	tbluser as tblcreatedby on tblnote.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblnote.lastmodifiedby = tbllastmodifiedby.userid
where
	tbltasknote.taskid = @taskid
order by
	tblnote.created, tblnote.noteid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetEmailClientsFollowup]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetEmailClientsFollowup]
as
begin
/*
	Daily routine used to send auto-generated emails to clients 1 week after their Welcome email was sent
*/

	select c.clientid, c.agencyid, p.firstname + ' ' + p.lastname [clientname], p.emailaddress, 
		cp.name [company], ca.address1 + ', ' + ca.city + ', ' + ca.state + ' ' + ca.zipcode [companyaddress],
		p1.phonenumber [clientservicesphone], f.phonenumber [clientservicesfax], cr.phonenumber [creditorservicesphone]
	from tblclientemails e
	join tblclient c on c.clientid = e.clientid 
	join tblcompany cp on cp.companyid = c.companyid
	join tblcompanyaddresses ca on ca.companyid = cp.companyid and ca.addresstypeid = 3 -- Client
	join tblcompanyphones p1 on p1.companyid = cp.companyid and p1.phonetype = 46 -- CustomerServicePhone
	join tblcompanyphones f on f.companyid = cp.companyid and f.phonetype = 47 -- CustomerServiceFax
	join tblcompanyphones cr on cr.companyid = cp.companyid and cr.phonetype = 50 -- CreditorServicesPhone
	join tblperson p on p.personid = c.primarypersonid
	where 1=1
	and e.type = 'Welcome'
	and c.currentclientstatusid = 14 -- must still be active active
	and datediff(d,e.datesent,getdate()) > 6 -- Send 1 week after the Welcome email
	and c.clientid not in (select distinct clientid from tblclientemails where [type] = 'Follow-up')

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetExpiredAssignedClients]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetExpiredAssignedClients]
as
begin


	select clientid, accountnumber, leadapplicantid, assignedunderwriter
	from (
		select c.clientid, c.accountnumber, l.leadapplicantid, isnull(c.AssignedUnderwriter,0)[AssignedUnderwriter],
			case 
				when datepart(weekday,s.statuscreated) = 6 then dateadd(d,2,s.statuscreated) -- Fri
				when datepart(weekday,s.statuscreated) = 7 then dateadd(d,1,s.statuscreated) -- Sat
				else s.statuscreated
			end [statuscreated]
		from tblclient c
		join tblimportedclient i on i.importid = c.serviceimportid
		join tblleadapplicant l on l.leadapplicantid = i.externalclientid
		join vw_enrollment_CurrentStatusCreated s on s.leadapplicantid = l.leadapplicantid
		left join vw_enrollment_ver_complete ver on ver.leadapplicantid = l.leadapplicantid
		where c.currentclientstatusid in (7,23,24) -- Recieved LSA, Returned to CID, Return to Compliance
		and l.statusid in (10,19) -- In Process, Return to Compliance
		and ver.completed is null
	) d
	where datediff(hour,statuscreated,getdate()) > 24
	and accountnumber not in ('6089140','6089036') -- temp, these clients are supposed to be Canceling


end
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer]
    @ApplicationName       nvarchar(256),
    @UserName              nvarchar(256),
    @NewPasswordQuestion   nvarchar(256),
    @NewPasswordAnswer     nvarchar(128)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Membership m, dbo.aspnet_Users u, dbo.aspnet_Applications a
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId
    IF (@UserId IS NULL)
    BEGIN
        RETURN(1)
    END

    UPDATE dbo.aspnet_Membership
    SET    PasswordQuestion = @NewPasswordQuestion, PasswordAnswer = @NewPasswordAnswer
    WHERE  UserId=@UserId
    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_updateLeadExportDetail]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_enrollment_updateLeadExportDetail]
@ExportJobId int,		   
@LeadApplicantId int,
@ExportStatus int = null,
@Note varchar(max) = null
AS
BEGIN
	Update tblLeadExportDetail Set
	ExportStatus = isnull(@ExportStatus, ExportStatus),
	Note = isnull(@Note, Note) 
	Where ExportJobId = @ExportJobId
	And LeadApplicantId = @LeadApplicantId
END
GO
/****** Object:  StoredProcedure [dbo].[stp_HomepageChartEnrollmentSummary]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_HomepageChartEnrollmentSummary]
	(
		@refwhere varchar (8000) = '',
		@dategrouping int = 0
	)
 
as

declare @datefield varchar (500)
declare @field varchar(50)
set @field='tblenrollment.created'

if @dategrouping = 0 -- daily grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar, ' + @field + ', 101))'
	end
else if @dategrouping = 1 -- weekly grouping
	begin
		set @datefield = 'dateadd(day, 1 - datepart(dw, ( convert(varchar, ' + @field + ', 101) )), ( convert(varchar, ' + @field + ', 101) ))'
	end
else if @dategrouping = 2 -- monthly grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar(2), month(' + @field + ')) + N''/1/'' + convert(varchar(4), year(' + @field + ')))'
	end
else if @dategrouping = 3 -- yearly grouping
	begin
		set @datefield = 'convert(datetime, N''1/1/'' + convert(varchar(12), year(' + @field + ')))'
	end
 
exec
(
	'select
		' + @datefield + ' as [time],
		sum(case committed when 1 then 1 else 0 end) as countenrolled,
		sum(case qualified when 0 then 1 else 0 end) as countdidnotqualify,
		sum(case when qualified = 1 and committed = 0 then 1 else 0 end) as countwouldnotcommit
	from
		tblenrollment inner join
		tblclient on tblenrollment.clientid=tblclient.clientid
	where
		1=1 '
		+ @refwhere + 
	' group by
		' + @datefield + '
	having
		not ' + @datefield + ' is null
	order by
		' + @datefield
)
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAllPositionsWithUserFlag]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetAllPositionsWithUserFlag]
	(
		@userid int
	)

as 


select
	tblposition.*,
	t.userid
from
	tblposition left outer join
	(
		select
			*
		from
			tbluserposition
		where
			userid = @userid
	)
	as t on tblposition.positionid = t.positionid
order by
	tblposition.name
GO
/****** Object:  StoredProcedure [dbo].[stp_GetDataEntriesForClient]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetDataEntriesForClient]
	(
		@clientid int
	)

as

select
	tbldataentry.*,
	tbldataentrytype.[name] as dataentrytypename,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname
from
	tbldataentry inner join
	tbldataentrytype on tbldataentry.dataentrytypeid = tbldataentrytype.dataentrytypeid left outer join
	tbluser as tblcreatedby on tbldataentry.createdby = tblcreatedby.userid
where
	tbldataentry.clientid = @clientid
order by
	tbldataentry.conducted desc
GO
/****** Object:  StoredProcedure [dbo].[get_CommColorRules]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[get_CommColorRules]

AS

SET NOCOUNT ON

select
	rulecommcolorid,
	entitytype,
	entityid,
	color,
	textcolor,
	(case 
		when entitytype='Relation Type' then rt.name
		when entitytype='User Type' then ut.name
		when entitytype='User Group' then ug.name
		when entitytype='User' then u.firstname + ' ' + u.lastname
	end) as entityname
from
	tblrulecommcolor left outer join
	tbluser u on entityid=u.userid left outer join
	tblusergroup ug on entityid=ug.usergroupid left outer join
	tblusertype ut on entityid=ut.usertypeid left outer join
	tblrelationtype rt on entityid=rt.relationtypeid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTasksForRoadmap]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetTasksForRoadmap]
	(
		@roadmapid int
	)

as

select
	tblroadmaptask.roadmaptaskid,
	tblclienttask.clientid,
	tblperson.firstname + ' ' + tblperson.lastname as clientname,
	tbltasktype.name as tasktypename,
	tbltasktypecategory.tasktypecategoryid,
	tbltasktypecategory.name as tasktypecategoryname,
	tbltaskresolution.name as taskresolutionname,
	tbltask.*,
	tblassignedto.firstname + ' ' + tblassignedto.lastname as assignedtoname,
	tblresolvedby.firstname + ' ' + tblresolvedby.lastname as resolvedbyname,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tbltask inner join
	tblroadmaptask on tbltask.taskid = tblroadmaptask.taskid left outer join
	tblclienttask on tbltask.taskid = tblclienttask.taskid left outer join
	tblclient on tblclienttask.clientid = tblclient.clientid left outer join
	tblperson on tblclient.primarypersonid = tblperson.personid left outer join
	tbltasktype on tbltask.tasktypeid = tbltasktype.tasktypeid left outer join
	tbltasktypecategory on tbltasktype.tasktypecategoryid = tbltasktypecategory.tasktypecategoryid left outer join
	tbltaskresolution on tbltask.taskresolutionid = tbltaskresolution.taskresolutionid left outer join
	tbluser as tblassignedto on tbltask.assignedto = tblassignedto.userid left outer join
	tbluser as tblresolvedby on tbltask.resolvedby = tblresolvedby.userid left outer join
	tbluser as tblcreatedby on tbltask.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tbltask.lastmodifiedby = tbllastmodifiedby.userid
where
	tblroadmaptask.roadmapid = @roadmapid
order by
	tbltask.created, tbltask.taskid
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getDaysTurnAround]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_reports_getDaysTurnAround]
(
	@year int,
	@month int
)
AS
BEGIN

declare @tblTurn table (team varchar(100), negotiator varchar(200),StartDate datetime, EndDate datetime, [TurnAroundDays] int)

insert into @tblTurn
select team,negotiator,date, paid, [TurnAroundDays]=datediff(d,date,paid) 
from tblsettlementtrackerimports
where paid is not null and [date] is not null and expired is not null 
and year([date]) = @year
and month(date) = @month
and paid > '1900-01-01 00:00:00.000'
order by team,negotiator

select team
, [AvgDaysTurnAround]=sum(turnarounddays)/count(*)
from @tblTurn
group by team
END


GRANT EXEC ON stp_settlementimport_reports_getDaysTurnAround TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMattersClientId]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <10- 09 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Decription  : GetMatter by ClientId
*/

CREATE procedure [dbo].[stp_GetMattersClientId]
(
	@ClientId int,
	@returntop varchar (50) = '100 percent',
	@OrderBy  varchar (50) = 'order by MatterDate desc,MatterNumber desc'
)
AS

BEGIN
/*
if @returntop='100 percent' 
begin

select 
mt.MatterTypeCode, m.MatterTypeId, IsNull(ci.Accountid,0) as AccountId, 
IsNull(ci.CreditorInstanceId,0) as CreditorInstanceID,
m.MatterId,
MatterDate,
MatterNumber,
MatterMemo,
c.ClientId,
c.AccountNumber,
CASE WHEN m.CreditorInstanceId is null then 'None'
     WHEN m.CreditorInstanceid=0 then 'TBD'
	 ELSE '***'+ RIGHT(ci.AccountNumber,4)  END as CIAccountNumber,
p.FirstName+' '+ p.LastName as ClientName,
CASE WHEN m.creditorinstanceid is null THEN  'None'
	 WHEN m.creditorinstanceid = 0 THEN		 'TBD'
	 ELSE cred.Name END as [Name],
co.[Name] as Firm,

CASE WHEN m.AttorneyId is null then 'None'
	 WHEN m.AttorneyId = 0 then		'TBD'
	 ELSE at.FirstName+' '+ at.LastName END as Attorney,
msc.MatterStatusCodeId,
--msc.MatterStatusCode, 
ms.MatterStatusId,
ms.MatterStatus as MatterStatusCode, 
m.MatterSubStatusId, 
(select MatterSubStatus from tblmattersubstatus where mattersubstatusid=m.MatterSubStatusId) as MatterSubStatus,
mt.MatterGroupId

from 

dbo.tblMatter m
join dbo.tblClient c on c.ClientId=m.ClientId
join dbo.tblPerson p on c.PrimaryPersonId =p.PersonId
join dbo.tblCompany co on co.CompanyId=c.CompanyId
join dbo.tblMatterStatusCode as msc on msc.MatterStatusCodeId = m.MatterStatusCodeId
left outer join dbo.tblAttorney at on at.AttorneyId = m.AttorneyId
left outer join tblMatterType mt on mt.MatterTypeId = m.mattertypeid
left outer join tblCreditorInstance ci on ci.creditorinstanceid=m.creditorinstanceid
left outer join dbo.tblMatterStatus as ms on ms.MatterStatusId = m.MatterStatusId
left outer join dbo.tblCreditor cred on cred.CreditorId = ci.CreditorId

where c.ClientId = @ClientId and IsNull(m.IsDeleted,0)=0

order by MatterDate desc,MatterNumber desc

end
else
begin*/
if @returntop = '100 percent'
set @returntop =''
else
set @returntop ='top '+@returntop


exec
(
'select  ' + @returntop + '

mt.MatterTypeCode, m.MatterTypeId, IsNull(ci.Accountid,0) as AccountId, 
IsNull(ci.CreditorInstanceId,0) as CreditorInstanceID,
m.MatterId,
MatterDate,
MatterNumber,
MatterMemo,
c.ClientId,
c.AccountNumber,
CASE WHEN m.CreditorInstanceId is null then ''None''
     WHEN m.CreditorInstanceid=0 then ''TBD''
	 ELSE ''***''+ RIGHT(ci.AccountNumber,4)  END as CIAccountNumber,
p.FirstName+'' ''+ p.LastName as ClientName,
CASE WHEN m.creditorinstanceid is null THEN  ''None''
	 WHEN m.creditorinstanceid = 0 THEN		 ''TBD''
	 ELSE cred.Name END as [Name],
co.[Name] as Firm,
CASE WHEN m.AttorneyId is null then ''None''
	 WHEN m.AttorneyId = 0 then		''TBD''
	 ELSE at.FirstName+'' ''+ at.LastName END as Attorney,
msc.MatterStatusCodeId,
--msc.MatterStatusCode, 
ms.MatterStatusId,
ms.MatterStatus as MatterStatusCode, 
m.MatterSubStatusId, 
(select MatterSubStatus from tblmattersubstatus where mattersubstatusid=m.MatterSubStatusId) as MatterSubStatus,
mt.MatterGroupId

from 

dbo.tblMatter m
join dbo.tblClient c on c.ClientId=m.ClientId
join dbo.tblPerson p on c.PrimaryPersonId =p.PersonId
join dbo.tblCompany co on co.CompanyId=c.CompanyId
join dbo.tblMatterStatusCode as msc on msc.MatterStatusCodeId = m.MatterStatusCodeId
left outer join dbo.tblAttorney at on at.AttorneyId = m.AttorneyId
left outer join tblMatterType mt on mt.MatterTypeId = m.mattertypeid
left outer join tblCreditorInstance ci on ci.creditorinstanceid=m.creditorinstanceid
left outer join dbo.tblMatterStatus as ms on ms.MatterStatusId = m.MatterStatusId
left outer join dbo.tblCreditor cred on cred.CreditorId = ci.CreditorId

where c.ClientId = ' + @ClientId + ' and IsNull(m.IsDeleted,0)=0 '
+  @OrderBy )
--order by MatterDate desc,MatterNumber desc ')

end
/*
END*/
GO
/****** Object:  StoredProcedure [dbo].[stp_CreateSuppressionList]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_CreateSuppressionList]
(
	@VendorID int = 201 -- Hydra
)
as
begin

	declare @id int
	set @id = -1

	if exists ( select 1 
				from tblleademails e 
				join tblleadapplicant l on l.leadapplicantid = e.leadapplicantid 
				join tblleadproducts p on p.productid = l.productid and p.vendorid = @VendorID 
				where e.dateunsubscribed is not null 
				and e.suppressionlistid is null
				
				union
				
				select 1 from tblhydrasuppressions where suppressionlistid is null and vendorid = @VendorID) begin

		insert tblsuppressionlist (datesent) values (getdate())
		select @id = scope_identity()

		update tblleademails 
		set suppressionlistid = @id
		from tblleademails e 
		join tblleadapplicant l on l.leadapplicantid = e.leadapplicantid 
		join tblleadproducts p on p.productid = l.productid and p.vendorid = @VendorID 
		where e.dateunsubscribed is not null 
		and e.suppressionlistid is null
		
		update tblhydrasuppressions
		set suppressionlistid = @id
		where suppressionlistid is null
		and vendorid = @VendorID
		
	end

	select distinct email 
	from tblleademails 
	where suppressionlistid = @id
	
	union 
	
	select distinct email
	from tblhydrasuppressions
	where suppressionlistid = @id

end
GO
/****** Object:  StoredProcedure [dbo].[stp_verificationCall_GetClientIntakeAgent]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_verificationCall_GetClientIntakeAgent]
@CLientId int
AS
select a.repid, u.username, isnull(u.FirstName,'') + ' ' + isnull(u.LastName,'') as [FullName]
from tblclient c 
inner join tblimportedclient i on i.importid = c.serviceimportid
inner join tblleadapplicant a on a.leadapplicantid = i.externalclientid and i.sourceid =1
inner join tbluser u on u.userid = a.repid
where c.clientid = @ClientId
GO
/****** Object:  StoredProcedure [dbo].[stp_Merge2PctFee]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 6/29/2007
-- Description:	Merge 2% fee to Retainer
-- =============================================
CREATE PROCEDURE [dbo].[stp_Merge2PctFee] 
	-- Add the parameters for the stored procedure here
	@date1 smalldatetime, 
	@date2 smalldatetime 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	declare @RFee money
declare @WFee money
declare @RPmt money
declare @WPmt money
declare @PmtCount int
declare @AccountNo int
declare @ClientID int
declare @RegisterID int
declare @Name varchar(50)
declare @Amount money
declare @AccountID int
declare @RegAcctID int
declare @EntryTypeID int
declare @AdjRegEntryTypeID int
declare @SplitPmt money
--declare @date1 smalldatetime --**** used for testing
--declare @date2 smalldatetime --**** used for testing

declare @Retainers table
(
ClientID int,
RegisterID int,
TransactionDate smalldatetime,
[Amount] money,
[Description] varchar(50),
Creditor varchar(50),
EntryTypeID int,
AccountID int,
AdjRegAcctID int
)

declare @Payments table
(
ClientID int,
RegisterID int,
TransactionDate smalldatetime,
[Amount] money,
[Description] varchar(50),
Creditor varchar(50),
EntryTypeID int,
AccountID int,
AdjRegAcctID int,
AdjRegEntryTypeID int
)

insert @Retainers

select 
ClientID, 
RegisterID, 
TransactionDate, 
[Amount],
EntryTypeName, 
AdjRegAcctCreditorName,
EntryTypeID,
AccountID,
AdjRegAcctID 
from tblStatementResults 
where entrytypeid = 2 or EntryTypeID = 42 
and transactiondate >= @date1
and transactiondate <= @date2
order by TransactionDate

insert @Payments

select 
ClientID, 
RegisterID, 
TransactionDate, 
[Amount],
EntryTypeName, 
AdjRegAcctCreditorName,
EntryTypeID,
AccountID,
AdjRegAcctID,
AdjRegEntryTypeID 
from tblStatementResults 
where entrytypeid = -1
and (AdjRegEntryTypeID = 42 or AdjRegEntryTypeID = 2) 
and transactiondate >= @date1
and transactiondate <= @date2
order by TransactionDate

declare BigLoop_Cursor cursor for
select 
AccountID, count(*) as 'Records'
from @Retainers
where AccountID is not null
group by accountid
having count(*) > 1
order by AccountID

open BigLoop_Cursor

fetch next from BigLoop_Cursor 
into @AccountID, @Name
while @@fetch_status = 0

begin
	--Payments ***************************
	declare PaymentLoop_cursor cursor for
	select 
	ClientID,
	RegisterID,
	[Amount],
	AccountID,
	AdjRegAcctID,
	EntryTypeID,
	AdjRegEntryTypeID
	from @Payments
	order by AccountID

	open PaymentLoop_Cursor
	fetch next from PaymentLoop_Cursor
	into @ClientID, @RegisterID, @Amount, @AccountID, @RegAcctID, @EntryTypeID, @AdjRegEntryTypeID
	while @@fetch_Status = 0
	begin
		select @WPmt = Amount from @Payments where AdjRegAcctID = @RegAcctID and entrytypeid = -1 and AdjRegEntryTypeID = 42
		--Payments
		IF @WPmt is not null
			begin
				delete from tblStatementResults where adjregacctid = @RegAcctID and adjregentrytypeid = 42
				select @RPmt = Amount from @Payments where AdjRegAcctID = @RegAcctID and AdjRegEntryTypeID = 2
				select @PmtCount = count(Amount) from @Payments where AdjRegAcctID = @RegAcctID and EntrytypeID = -1
				
				if @PmtCount > 0
					begin

						set @SplitPmt = (@WPmt/@PmtCount)

						update tblStatementResults set Amount = Amount + @SplitPmt where adjRegAcctID = @RegAcctID and EntryTypeID = -1

					end

				set @RPmt = null
				set @WPmt = null
			end	
		fetch next from PaymentLoop_Cursor 
		into @ClientID, @RegisterID, @Amount, @AccountID, @RegAcctID, @EntryTypeID, @AdjRegEntryTypeID
	end
	
	close PaymentLoop_Cursor
	deallocate PaymentLoop_Cursor
fetch next from BigLoop_Cursor 
into @AccountID, @Name
end
close BigLoop_Cursor
deallocate BigLoop_Cursor

--Retainers

declare BigLoop2_Cursor cursor for
select 
AccountID, count(*) as 'Records'
from @Retainers
where AccountID is not null
and EntryTypeID = 42
group by accountid
having count(*) > 0
order by AccountID

open BigLoop2_Cursor

fetch next from BigLoop2_Cursor 
into @AccountID, @Name
while @@fetch_status = 0
begin
	--Retainer fee **********************
	declare RetainerLoop_cursor cursor for
	select 
	ClientID,
	RegisterID,
	[Amount],
	AccountID,
	AdjRegAcctID,
	EntryTypeID
	from @Retainers
	where AccountID = @AccountID
	order by AccountID

	open RetainerLoop_Cursor
	fetch next from RetainerLoop_Cursor
	into @ClientID, @RegisterID, @Amount, @AccountID, @RegAcctID, @EntryTypeID

	while @@fetch_Status = 0
		begin
			select @WFee = Amount from @Retainers where AccountID = @AccountID and EntryTypeID = 42

			if @WFee is not null  
				begin
					select @RFee = Amount from @Retainers where AccountID = @AccountID and EntryTypeID = 2
					
					update tblStatementResults set Amount = (@WFee +  @RFee) where AccountID = @AccountID and EntryTypeID = 2
					
					set @RFee = null
					set @WFee = null

					delete from tblStatementResults where AccountID = @AccountID and EntryTypeID = 42
				end

	fetch next from RetainerLoop_Cursor 
	into @ClientID, @RegisterID, @Amount, @AccountID, @RegAcctID, @EntryTypeID
		end
	close RetainerLoop_Cursor
	deallocate RetainerLoop_Cursor

fetch next from BigLoop2_Cursor 
into @AccountID, @Name
end
close BigLoop2_Cursor
deallocate BigLoop2_Cursor
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Profile_DeleteInactiveProfiles]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Profile_DeleteInactiveProfiles]
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @InactiveSinceDate      datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
    BEGIN
        SELECT  0
        RETURN
    END

    DELETE
    FROM    dbo.aspnet_Profile
    WHERE   UserId IN
            (   SELECT  UserId
                FROM    dbo.aspnet_Users u
                WHERE   ApplicationId = @ApplicationId
                        AND (LastActivityDate <= @InactiveSinceDate)
                        AND (
                                (@ProfileAuthOptions = 2)
                             OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                             OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
                            )
            )

    SELECT  @@ROWCOUNT
END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getExportDetails]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_enrollment_getExportDetails]
@ExportJobId int
AS
SELECT 
	   la.LeadApplicantID as [LeadApplicantId],
	   Case when len(rtrim(ltrim(la.FullName))) > 0 then la.FullName else '[No Name]' end [FullName],
	   Case ed.ExportStatus
	   When 0 Then 'Not Exported'
	   When 1 Then 'Exported OK'
	   When 2 Then 'Failed'
	   Else 'Exporting'
	   END AS [Status],
	   ed.Note,
	   isnull(la.EnrollmentPage, 'newenrollment.aspx') as EnrollmentPage	   
FROM tblLeadExportDetail ed
inner join tblLeadApplicant la on ed.LeadApplicantId = la.LeadApplicantId
Where ed.ExportJobID = @ExportJobId
GO
/****** Object:  StoredProcedure [dbo].[stp_ReportGetAgencyCommission_old]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_ReportGetAgencyCommission_old]
	(
		@companyids nvarchar(50),
		@date1 datetime=null,
		@date2 datetime=null,
		@commrecid nvarchar(50),
		@range varchar(50)=''
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

exec ('
SELECT ' + @range + '
	batch.CommBatchID,
	batch.BatchDate,
	sum(batchtransfer.Amount) as Amount,
	(SELECT ShortCoName FROM tblCompany WHERE CompanyID = comp.CompanyID) as Company,
	batchtransfer.CommRecID
FROM
	tblCommBatch batch inner join
	tblCommBatchTransfer batchtransfer on batch.CommBatchID = batchtransfer.CommBatchID inner join
	tblCommRec commrec on batchtransfer.CommRecID = commrec.CommRecID inner join
	(
		SELECT
			cp.CommBatchID,
			cs.CompanyID
		FROM
			tblCommPay as cp
			inner join tblCommStruct as cs on cs.CommStructID = cp.CommStructID
		GROUP BY
			cp.CommBatchID,
			cs.CompanyID
	) as comp on comp.CommBatchID = batch.CommBatchID
WHERE
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) and
	( CAST(CONVERT(varchar(10), batch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) and
	batchtransfer.CommRecID in (' + @CommRecID + ') and
	comp.CompanyID in (' + @companyids + ')
GROUP BY
	batch.CommBatchID,
	batch.BatchDate,
	comp.CompanyID,
	batchtransfer.CommRecID
ORDER BY
	batch.BatchDate DESC
')
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Roles_GetAllRoles]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Roles_GetAllRoles] (
    @ApplicationName           nvarchar(256))
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN
    SELECT RoleName
    FROM   dbo.aspnet_Roles WHERE ApplicationId = @ApplicationId
    ORDER BY RoleName
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetDocFoldersRootForClient]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetDocFoldersRootForClient]
	(
		@clientid int
	)

as


select
	tbldocfolder.*,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tbldocfolder left outer join
	tbluser as tblcreatedby on tbldocfolder.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tbldocfolder.lastmodifiedby = tbllastmodifiedby.userid
where
	[table] = 'tblclient' and
	field = 'clientid' and
	fieldid = @clientid and
	parentdocfolderid is null
order by
	tbldocfolder.[name]
GO
/****** Object:  StoredProcedure [dbo].[aspnet_CheckSchemaVersion]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_CheckSchemaVersion]
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128)
AS
BEGIN
    IF (EXISTS( SELECT  *
                FROM    dbo.aspnet_SchemaVersions
                WHERE   Feature = LOWER( @Feature ) AND
                        CompatibleSchemaVersion = @CompatibleSchemaVersion ))
        RETURN 0

    RETURN 1
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_SetPassword]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_SetPassword]
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @NewPassword      nvarchar(128),
    @PasswordSalt     nvarchar(128),
    @CurrentTimeUtc   datetime,
    @PasswordFormat   int = 0
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF (@UserId IS NULL)
        RETURN(1)

    UPDATE dbo.aspnet_Membership
    SET Password = @NewPassword, PasswordFormat = @PasswordFormat, PasswordSalt = @PasswordSalt,
        LastPasswordChangedDate = @CurrentTimeUtc
    WHERE @UserId = UserId
    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getAllExportDetails]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_enrollment_getAllExportDetails]
AS
SELECT 
	   ed.LeadExportId,
	   ed.ExportJobId,
	   la.LeadApplicantID as [LeadApplicantId],
	   Case when len(rtrim(ltrim(la.FullName))) > 0 then la.FullName else '[No Name]' end [FullName],
	   Case ed.ExportStatus
	   When 0 Then 'Not Exported'
	   When 1 Then 'Exported OK'
	   When 2 Then 'Failed'
	   Else 'Exporting'
	   END AS [Status],
	   ed.Note	   
FROM tblLeadExportDetail ed
inner join tblLeadApplicant la on ed.LeadApplicantId = la.LeadApplicantId
GO
/****** Object:  StoredProcedure [dbo].[stp_HomepageChartEnrollmentWouldNotCommit]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_HomepageChartEnrollmentWouldNotCommit]
 (
  @refwhere varchar (8000) = '',
  @dategrouping int = 0
 )
 
as
 

declare @datefield varchar (500)
declare @field varchar(50)
set @field='tblenrollment.created'

if @dategrouping = 0 -- daily grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar, ' + @field + ', 101))'
	end
else if @dategrouping = 1 -- weekly grouping
	begin
		set @datefield = 'dateadd(day, 1 - datepart(dw, ( convert(varchar, ' + @field + ', 101) )), ( convert(varchar, ' + @field + ', 101) ))'
	end
else if @dategrouping = 2 -- monthly grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar(2), month(' + @field + ')) + N''/1/'' + convert(varchar(4), year(' + @field + ')))'
	end
else if @dategrouping = 3 -- yearly grouping
	begin
		set @datefield = 'convert(datetime, N''1/1/'' + convert(varchar(12), year(' + @field + ')))'
	end
 

exec
('
select
   ' + @datefield + ' as [time],
   count(tblenrollment.enrollmentid) as CountEnrollment
from
	tblenrollment inner join
	tblclient on tblenrollment.clientid=tblclient.clientid
where 
	qualified=1 and committed=0 '
	+ @refwhere + '
group by
   ' + @datefield + '
having
   not ' + @datefield + ' is null
order by 
   ' + @datefield
)
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Roles_DeleteRole]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Roles_DeleteRole]
    @ApplicationName            nvarchar(256),
    @RoleName                   nvarchar(256),
    @DeleteOnlyIfRoleIsEmpty    bit
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    DECLARE @RoleId   uniqueidentifier
    SELECT  @RoleId = NULL
    SELECT  @RoleId = RoleId FROM dbo.aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId

    IF (@RoleId IS NULL)
    BEGIN
        SELECT @ErrorCode = 1
        GOTO Cleanup
    END
    IF (@DeleteOnlyIfRoleIsEmpty <> 0)
    BEGIN
        IF (EXISTS (SELECT RoleId FROM dbo.aspnet_UsersInRoles  WHERE @RoleId = RoleId))
        BEGIN
            SELECT @ErrorCode = 2
            GOTO Cleanup
        END
    END


    DELETE FROM dbo.aspnet_UsersInRoles  WHERE @RoleId = RoleId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    DELETE FROM dbo.aspnet_Roles WHERE @RoleId = RoleId  AND ApplicationId = @ApplicationId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNextUserForClient]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetNextUserForClient]
	(
		@languageid int,
		@positionid int
	)

as


select
	tbluser.userid,
	count(tblclient.clientid) as numclients
from
	tbluser	inner join
	tbluserlanguage on tbluser.userid = tbluserlanguage.userid inner join
	tbluserposition on tbluser.userid = tbluserposition.userid left outer join
	tblclient on tbluser.userid = tblclient.assignedunderwriter
where
	tbluserlanguage.languageid = @languageid and
	tbluserposition.positionid = @positionid
group by
	tbluser.userid
order by
	count(tblclient.clientid)
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UnRegisterSchemaVersion]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_UnRegisterSchemaVersion]
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128)
AS
BEGIN
    DELETE FROM dbo.aspnet_SchemaVersions
        WHERE   Feature = LOWER(@Feature) AND @CompatibleSchemaVersion = CompatibleSchemaVersion
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_ResetPassword]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_ResetPassword]
    @ApplicationName             nvarchar(256),
    @UserName                    nvarchar(256),
    @NewPassword                 nvarchar(128),
    @MaxInvalidPasswordAttempts  int,
    @PasswordAttemptWindow       int,
    @PasswordSalt                nvarchar(128),
    @CurrentTimeUtc              datetime,
    @PasswordFormat              int = 0,
    @PasswordAnswer              nvarchar(128) = NULL
AS
BEGIN
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @UserId                                 uniqueidentifier
    SET     @UserId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    SELECT @IsLockedOut = IsLockedOut,
           @LastLockoutDate = LastLockoutDate,
           @FailedPasswordAttemptCount = FailedPasswordAttemptCount,
           @FailedPasswordAttemptWindowStart = FailedPasswordAttemptWindowStart,
           @FailedPasswordAnswerAttemptCount = FailedPasswordAnswerAttemptCount,
           @FailedPasswordAnswerAttemptWindowStart = FailedPasswordAnswerAttemptWindowStart
    FROM dbo.aspnet_Membership WITH ( UPDLOCK )
    WHERE @UserId = UserId

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    UPDATE dbo.aspnet_Membership
    SET    Password = @NewPassword,
           LastPasswordChangedDate = @CurrentTimeUtc,
           PasswordFormat = @PasswordFormat,
           PasswordSalt = @PasswordSalt
    WHERE  @UserId = UserId AND
           ( ( @PasswordAnswer IS NULL ) OR ( LOWER( PasswordAnswer ) = LOWER( @PasswordAnswer ) ) )

    IF ( @@ROWCOUNT = 0 )
        BEGIN
            IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
            END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount >= @MaxInvalidPasswordAttempts )
                BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

            SET @ErrorCode = 3
        END
    ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount > 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

    IF( NOT ( @PasswordAnswer IS NULL ) )
    BEGIN
        UPDATE dbo.aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_insertLeadExportDetail]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_enrollment_insertLeadExportDetail]
@ExportJobId int,		   
@LeadApplicantId int
AS
BEGIN
	Insert Into tblLeadExportDetail(ExportJobId, LeadApplicantId)
	Values (@ExportJobId, @LeadApplicantId)
	
	SELECT SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Harassment_SearchSubmissions]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_Harassment_SearchSubmissions]
	(
		@searchColumn  varchar(50),
		@searchTerm varchar(500)
	)
AS
BEGIN

	declare @sSQL varchar(max)
	declare @sColType varchar(20)

	SELECT    @sColType = DATA_TYPE 
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE     TABLE_NAME = 'tblHarassmentClient' and column_name = @searchColumn
	ORDER BY   ORDINAL_POSITION ASC

	set @sSQL = 'SELECT distinct ClientSubmissionID,ClientAccountNumber,ClientName,ClientState,DateFormSubmitted,OriginalCreditorName,CurrentCreditorName,Created,CreatedByUser,NoticeOfRepMailDate,NoticeOfCeaseAndDesist,CreditorUnAuthorizedCharges,IndividualCallingName,IndividualCallingIdentity,IndividualCallingPhone,IndividualCallingDateOfCall,IndividualCallingNumTimesCalled,IndividualCallingTimeOfCall,IndividualCallingNumberDialed,ReasonData,docPath,HarassmentStatusID,StatusDescription,HarassmentStatusDate, HarassmentDeclineReasonID,HarassmentDeclineReason,HarassmentType,acctnumber,refnumber,AbuseBeginDate, EstNumberDailyCalls from ('    
	set @sSQL = @sSQl + 'SELECT  hc.ClientSubmissionID, [ClientAccountNumber] = hc.clientaccountnumber, [ClientName]= p.firstname + '' '' + p.lastname '
	set @sSQL = @sSQl + ', [ClientState] = s.abbreviation, DateFormSubmitted, [OriginalCreditorName] = oc.name, [CurrentCreditorName] = cc.name '
	set @sSQL = @sSQl + ', [Created] = hc.created, [CreatedByUser] = cu.firstname + '' '' + cu.lastname, hc.NoticeOfRepMailDate, hc.NoticeOfCeaseAndDesist'
	set @sSQL = @sSQl + ', hc.CreditorUnAuthorizedCharges, hc.IndividualCallingName, hc.IndividualCallingIdentity, hc.IndividualCallingPhone'
	set @sSQL = @sSQl + ', CAST(MONTH(hc.IndividualCallingDateOfCall) AS varchar) + ''/'' + CAST(DAY(hc.IndividualCallingDateOfCall) AS varchar) + ''/'' + CAST(YEAR(hc.IndividualCallingDateOfCall) AS varchar) AS IndividualCallingDateOfCall'
	set @sSQL = @sSQl + ', hc.IndividualCallingNumTimesCalled, RIGHT(hc.IndividualCallingTimeOfCall, 8) AS IndividualCallingTimeOfCall, hc.IndividualCallingNumberDialed'
	set @sSQL = @sSQl + ', [ReasonData] = (select top 1 reasondata from tblharassmentdata where clientsubmissionid = hc.clientsubmissionid and reasonid = 32)'
	set @sSQL = @sSQl + ', [docPath] =  ''\\'' + c.StorageServer + ''\'' + c.StorageRoot + ''\'' + c.AccountNumber + ''\creditordocs\'' + dr.SubFolder + c.AccountNumber + ''_'' + dr.DocTypeID + ''_'' + dr.DocID + ''_'' + dr.DateString + ''.pdf'' '
	set @sSQL = @sSQl + ', hc.HarassmentStatusID, hsr.StatusDescription, hc.HarassmentStatusDate, hc.HarassmentDeclineReasonID '
	set @sSQL = @sSQl + ', [HarassmentType]=(select top 1 reasonheadervalue from dbo.tblHarassmentReasonHeader where reasonheaderid in (select top 1 headerid from tblharassmentdata where clientsubmissionid = hc.clientsubmissionid))'
	set @sSQL = @sSQl + ', [HarassmentDeclineReason] = CASE WHEN hdr.DeclineReasonDescription IS NULL AND hc.HarassmentStatusID = 1 THEN ''Decline reason needed'' WHEN hdr.DeclineReasonDescription IS NOT NULL AND hc.HarassmentStatusID = 1 THEN hdr.DeclineReasonDescription ELSE ''NA'' END '
	set @sSQL = @sSQl + ', [acctnumber] = ci.AccountNumber, [refNumber] = ci.ReferenceNumber,[AbuseBeginDate] = hc.AbuseBeginDate, [EstNumberDailyCalls] = isnull(hc.EstNumberDailyCalls,0) '
	set @sSQL = @sSQl + 'FROM tblHarassmentClient AS hc with(nolock) INNER JOIN tblHarassmentStatusReasons AS hsr with(nolock) ON hsr.HarassmentStatusID = hc.HarassmentStatusID '
	set @sSQL = @sSQl + 'LEFT OUTER JOIN tblHarassmentDeclineReasons AS hdr with(nolock) ON hdr.HarassmentDeclineReasonID = hc.HarassmentDeclineReasonID '
	set @sSQL = @sSQl + 'INNER JOIN tblperson p with(nolock)  on p.personid= hc.personid '
	set @sSQL = @sSQl + 'INNER JOIN tblstate s with(nolock)  on s.stateid = p.stateid '
	set @sSQL = @sSQl + 'inner join tblcreditor oc with(nolock)  on oc.creditorid = hc.originalcreditorid '
	set @sSQL = @sSQl + 'inner join tblcreditor cc with(nolock)  on cc.creditorid = hc.currentcreditorid '
	set @sSQL = @sSQl + 'inner join tbluser cu with(nolock)  on cu.userid = hc.createdby '
	set @sSQL = @sSQl + 'INNER JOIN tblclient c with(nolock)  on c.clientid = hc.clientid '
	set @sSQL = @sSQl + 'INNER JOIN tblDocRelation AS dr with(nolock) ON c.ClientID = dr.ClientID '
	set @sSQL = @sSQl + 'INNER JOIN tblAccount AS a ON hc.CreditorAccountID = a.AccountID '
	set @sSQL = @sSQl + 'INNER JOIN tblCreditorInstance AS ci ON a.CurrentCreditorInstanceID = ci.CreditorInstanceID '
	set @sSQL = @sSQl + 'where dr.relationid = hc.creditoraccountid and dr.DocTypeID = ''D8008'' and year(dr.relateddate) = year(hc.created) and month(dr.relateddate) = month(hc.created) and day(dr.relateddate) = day(hc.created) and datepart(hh,dr.relateddate) = datepart(hh,hc.created) AND (dr.DeletedFlag = 0)	'
	set @sSQL = @sSQl + ') as searchData '
	if @sColType = 'datetime'
		BEGIN
			--set @searchColumn = 'convert(varchar(10),' + @searchColumn + ',101)'
			declare @start SMALLDATETIME
			declare @end SMALLDATETIME
			declare @pos int

			select @pos = charindex('|',@searchTerm,1)
			
			if @pos <> 0
				BEGIN
					select @start = left(@searchTerm,@pos-1)
					select @end = substring(@searchTerm,@pos+1,len(@searchTerm)-@pos)
					set @sSQL = @sSQl + 'where ' + @searchColumn + ' between ' + char(39)  + convert(varchar(10),@start,101) + char(39)  + ' and ' + char(39)  + convert(varchar(10),@end,101) + char(39) + ' '
				END
			ELSE
				BEGIN
					set @sSQL = @sSQl + 'where Year(' + @searchColumn + ') = Year(' + char(39) + convert(varchar(10),@start,101) + char(39) + ') '
					set @sSQL = @sSQl + 'AND Month(' + @searchColumn + ') = Month(' + char(39) + convert(varchar(10),@start,101) + char(39) + ') '
					set @sSQL = @sSQl + 'AND Day(' + @searchColumn + ') = Day(' + char(39) + convert(varchar(10),@start,101) + char(39) + ') '
				END
		END
	else
		BEGIN
			set @searchTerm = '%' + @searchTerm  + '%'
			set @sSQL = @sSQl + 'where ' + @searchColumn + ' like ' + char(39) + @searchTerm + char(39) + ' '
		END		
	
	set @sSQL = @sSQl + ' ORDER BY ' + @searchColumn + ' DESC, ClientSubmissionID '
	set @sSQL = @sSQl + 'OPTION (FAST 100) '
	exec (@ssql)

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Roles_RoleExists]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Roles_RoleExists]
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(0)
    IF (EXISTS (SELECT RoleName FROM dbo.aspnet_Roles WHERE LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId ))
        RETURN(1)
    ELSE
        RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_User_Get]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_Permissions_User_Get]
	(
		@userid int
	)

as

/*
level definition:
	0 - user level
	1 - group level
	2 - user type level
*/

declare @usertypeid int
set @usertypeid=(select usertypeid from tbluser where userid=@userid)

--get all permissions for this user
select
	tblfunction.parentfunctionid,
	tblpermission.*,
	0 as [level] 
from
	tbluserpermission inner join
	tblpermission on tbluserpermission.permissionid=tblpermission.permissionid inner join
	tblfunction on tblpermission.functionid=tblfunction.functionid
where
	tbluserpermission.userid=@userid 

union

--get all permissions for this usertype/group combination
select
	tblfunction.parentfunctionid,
	tblpermission.*,
	1 as [level]
from
	tblgrouppermission inner join
	tblpermission on tblgrouppermission.permissionid=tblpermission.permissionid inner join
	tblfunction on tblpermission.functionid=tblfunction.functionid

where
	tblgrouppermission.usertypeid = @usertypeid and
	tblgrouppermission.usergroupid in --easily convertable to a one-to-many with users/groups
		(select usergroupid from tbluser where tbluser.userid=@userid and usergroupid is not null)

union

--get all permissions for this usertype (null group)
select
	tblfunction.parentfunctionid,
	tblpermission.*,
	2 as [level]
from
	tblgrouppermission inner join
	tblpermission on tblgrouppermission.permissionid=tblpermission.permissionid inner join
	tblfunction on tblpermission.functionid=tblfunction.functionid

where
	tblgrouppermission.usertypeid = @usertypeid and
	tblgrouppermission.usergroupid is null
GO
/****** Object:  StoredProcedure [dbo].[aspnet_RegisterSchemaVersion]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_RegisterSchemaVersion]
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128),
    @IsCurrentVersion          bit,
    @RemoveIncompatibleSchema  bit
AS
BEGIN
    IF( @RemoveIncompatibleSchema = 1 )
    BEGIN
        DELETE FROM dbo.aspnet_SchemaVersions WHERE Feature = LOWER( @Feature )
    END
    ELSE
    BEGIN
        IF( @IsCurrentVersion = 1 )
        BEGIN
            UPDATE dbo.aspnet_SchemaVersions
            SET IsCurrentVersion = 0
            WHERE Feature = LOWER( @Feature )
        END
    END

    INSERT  dbo.aspnet_SchemaVersions( Feature, CompatibleSchemaVersion, IsCurrentVersion )
    VALUES( LOWER( @Feature ), @CompatibleSchemaVersion, @IsCurrentVersion )
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Profile_GetNumberOfInactiveProfiles]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Profile_GetNumberOfInactiveProfiles]
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @InactiveSinceDate      datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
    BEGIN
        SELECT 0
        RETURN
    END

    SELECT  COUNT(*)
    FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p
    WHERE   ApplicationId = @ApplicationId
        AND u.UserId = p.UserId
        AND (LastActivityDate <= @InactiveSinceDate)
        AND (
                (@ProfileAuthOptions = 2)
                OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
            )
END
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateC21BatchTransaction]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_UpdateC21BatchTransaction]
@TransactionId varchar(50),
@FrontImagePath varchar(max) = Null,
@BackImagePath varchar(max) = Null,
@DepositId int = Null,
@Status int = Null,
@State int = Null,
@ItemType int = Null,
@CheckType int = Null,
@CheckNumber varchar(50) = Null,
@AccountNumber varchar(50) = Null,
@Amount money = Null,
@ReceivedDate datetime = Null,
@ProcessedDate datetime = Null,
@ExceptionCode varchar(255) = Null,
@Notes varchar(max) = Null,
@Closed bit = Null,
@LastMapped datetime = Null,
@LastMappedBy int = Null
AS
Update tblC21BatchTransaction Set
FrontImagePath = isnull(@FrontImagePath, FrontImagePath),
BackImagePath = isnull(@BackImagePath, BackImagePath),
DepositId = isnull(@DepositId, DepositId),
[Status] = isnull(@Status, Status),
[State] = isnull(@State, State),
ReceivedDate = isnull(@ReceivedDate, ReceivedDate),
ProcessedDate = isnull(@ProcessedDate, ProcessedDate),
ItemType = isnull(@ItemType, ItemType),
CheckType = isnull(@CheckType, CheckType),
CheckNumber = isnull(@CheckNumber, CheckNumber),
AccountNumber = isnull(@AccountNumber, AccountNumber),
Amount = isnull(@Amount, Amount),
ExceptionCode = isnull(@ExceptionCode, ExceptionCode),
Notes = isnull(@Notes, Notes),
Closed = isnull(@Closed, Closed),
LastMapped = isnull(@LastMapped, LastMapped),
LastMappedBy = isnull(@LastMappedBy, LastMappedBy)
Where TransactionId = @TransactionId
GO
/****** Object:  StoredProcedure [dbo].[stp_HomepageChartEnrollmentEntered]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_HomepageChartEnrollmentEntered]
	(
		@refwhere varchar (8000) = '',
		@dategrouping int = 0
	)
 
as
 

declare @datefield varchar (500)
declare @field varchar(50)
set @field='tblenrollment.created'

if @dategrouping = 0 -- daily grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar, ' + @field + ', 101))'
	end
else if @dategrouping = 1 -- weekly grouping
	begin
		set @datefield = 'dateadd(day, 1 - datepart(dw, ( convert(varchar, ' + @field + ', 101) )), ( convert(varchar, ' + @field + ', 101) ))'
	end
else if @dategrouping = 2 -- monthly grouping
	begin
		set @datefield = 'convert(datetime, convert(varchar(2), month(' + @field + ')) + N''/1/'' + convert(varchar(4), year(' + @field + ')))'
	end
else if @dategrouping = 3 -- yearly grouping
	begin
		set @datefield = 'convert(datetime, N''1/1/'' + convert(varchar(12), year(' + @field + ')))'
	end
 
exec
(
	'select
		' + @datefield + ' as [time],
		count(tblenrollment.enrollmentid) as CountEnrollment
	from
		tblenrollment inner join
		tblclient on tblenrollment.clientid=tblclient.clientid
	where 
		1=1 ' + @refwhere + '
	group by
		' + @datefield + '
	having
		not ' + @datefield + ' is null
	order by 
		' + @datefield
)
GO
/****** Object:  StoredProcedure [dbo].[stp_AddLeadPhoneList]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AddLeadPhoneList]
(
	@ForDate datetime,
	@LeadSourceID int,
	@Phone varchar(10),
	@Budget money,
	@Actual money,
	@UserID int
)
as
begin

/*if exists (select 1 from tblLeadPhoneList where ForDate = @ForDate and LeadSourceID = @LeadSourceID) begin
	update tblLeadPhoneList 
	set Phone = @Phone, Budget = @Budget, Actual = @Actual, LastModified = getdate(), LastModifiedBy = @UserID
	where ForDate = @ForDate and LeadSourceID = @LeadSourceID
end
else begin*/
	insert tblLeadPhoneList (ForDate,LeadSourceID,Phone,Budget,Actual,CreatedBy,LastModifiedBy)
	values (@ForDate,@LeadSourceID,@Phone,@Budget,@Actual,@UserID,@UserID)
--end

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientIntakeInfobak]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <02 - 24 February 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : Retrives the details for Client Intake PDF
*/
CREATE procedure [dbo].[stp_GetClientIntakeInfobak]
@AccoutnID  bigint
As
Begin
select [FirmAccount#] = AccountID,  [Litigation Document]=LitigationDocument,
[Date Client Received Document]=convert(varchar,ClientDocReceivedDate,110), [How Documents Received]=HowDocReceived,
[Is plaintiff a collection company?]=case isplaintiffcompany when 1 then 'Yes' when 0 then 'No' else '' end,
[Do you dispute the amount?]=case isamountdispute when 1 then 'Yes' when 0 then 'No' else '' end,
[Amount]=Amount,
[Do you own any real estate?]=case isrealestateowner when 1 then 'Yes' when 0 then 'No' else '' end,
[is this your primary residence1?]=case isresidenceofpropertyone  when 1 then 'Yes' when 0 then 'No' else '' end,
[How long have you owned it1?]=durationownerdpropertyone,
[Approximate fair market value1]= Convert(varchar,Convert(money,AppMarketvalpropertyone ),1),--AppMarketvalpropertyone,
[What is the payoff1]=Convert(varchar,Convert(money,payoffpropertyone ),1),--payoffpropertyone,
[Any liens on property1]=Liensonpropertyone,
[Mortgage Payment1]=Convert(varchar,Convert(money,Totalequitypropertyone ),1),--Totalequitypropertyone,
[Are you current on house payments1]=Housepaymentspropertyone,
[How many people live there1]=peoplelivepropertyone,
[Is this a rental property1?]=case IsRentalPropertyOne  when 1 then 'Yes' when 0 then 'No' else '' end,
[How much is the rent1?]=Convert(varchar,Convert(money,RentOnPropertyOne ),1),--RentOnPropertyOne,
[is this your primary residence2?]=case isresidenceofpropertytwo  when 1 then 'Yes' when 0 then 'No' else '' end,
[How long have you owned it2?]=durationownerdpropertytwo,
[Approximate fair market value2]=Convert(varchar,Convert(money,AppMarketvalpropertytwo ),1),--AppMarketvalpropertytwo,
[What is the payoff2]=Convert(varchar,Convert(money,payoffpropertytwo ),1),--payoffpropertytwo,
[Any liens on property2]=Liensonpropertytwo,
[Mortgage Payment2]=Convert(varchar,Convert(money,Totalequitypropertytwo ),1),--Totalequitypropertytwo,
[Are you current on house payments2]=Housepaymentspropertytwo,
[How many people live there2]=peoplelivepropertytwo,
[Is this a rental property2?]=case IsRentalPropertyTwo  when 1 then 'Yes' when 0 then 'No' else '' end,
[How much is the rent2?]=Convert(varchar,Convert(money,RentOnPropertyTwo ),1),--RentOnPropertyTwo,
[Are you employed?]=case Iscurrentlyworking when 1 then 'Yes' when 0 then 'No' else '' end,
[Are you self employed?]=case IsSelfEmployed when 1 then 'Yes' when 0 then 'No' else '' end,
[Employer/Company]=employername,
[Length of the current employment]= cast(cast(currentemployerduration /12 as int) as varchar) +' years ' + cast(cast(currentemployerduration %12 as int) as varchar)+' months',
[Take home pay]=Convert(varchar,Convert(money,takehomepay ),1),--takehomepay,
[Per]=per,
[Any other wage garnishments]=otherwage,
[Other sources of income]=otherincomesource,
[Receiving any type of Aid?]=case isreceivingaid when 1 then 'Yes' when 0 then 'No' else '' end,
[Type of Aid?]=typeofaid,

--[Name on any account over $500?]=case Anyaccount when 1 then 'Yes' when 0 then 'No' else '' end,
[Do you have bank accounts?]=case haveBankAccs when 1 then 'Yes' when 0 then 'No' else '' end,
[Name of the bank1]=bankaccone,
[Source of money deposited in account1]=BankAmtsourceaccone,
[Approximate balance in account1]=Convert(varchar,Convert(money,AppBalanceaccone ),1),--AppBalanceaccone,
[Account Type1]=case AccTypeOne when 1 then 'Checking' when 2 then 'Saving' when 3 then ' Others' end,
[Name of the bank2]=bankacctwo,
[Source of money deposited in account2]=BankAmtsourceacctwo,
[Approximate balance in account2]=Convert(varchar,Convert(money,AppBalanceacctwo ),1),--AppBalanceacctwo,
[Account Type2]=case AccTypeTwo when 1 then 'Checking' when 2 then 'Saving' when 3 then ' Others' end,

--[At what bank?]=bankaccthree,
--[Source of money deposited in account]=BankAmtsourceaccthree,
--[Approximate balance in account]=AppBalanceaccthree,
[Do you have other assets?]=case haveOtherAssets when 1 then 'Yes' when 0 then 'No' else '' end,
[Assets]=Assets ,
[Client declined additional legal services?]=case declinedlegalservices when 1 then 'Yes' when 0 then 'No' else '' end,
[Client sent to local counsel?]=case sentlocalcounsel when 1 then 'Yes' when 0 then 'No' else '' end,
[Note]=notes,
[Verified]=case isverified when 1 then 'Yes' when 0 then 'No' else '' end,
[VerifiedDate]=verifieddate,
[VerifiedBy]=(select FirstName +' '+isnull(lastname,'') from tbluser where userid=VerifiedBy),
[LegalServicesClient]=(select FirstName +' '+isnull(lastname,'') from tbluser where userid=LegalServicesClientID),
 case [FeePaidBy] when -1 then 'By Client' 
else (select [name] from tblCompany  where companyid=[FeePaidBy])
end  as [FeePaid],
Phone=[Phone],
Levies1=[Levies1],
Levies2=[Levies2],
IReceived =[IReceived],
WageVal, TypeOfAidPension, TypeOfAidUnemp, TypeOfAidRetire, 
 AmtReceivedPension,AmtReceivedUnemp , AmtReceivedRetire

from tblclientintakeform where accountid=@AccoutnID  
End
GO
/****** Object:  StoredProcedure [dbo].[stp_CheckScan_ClientSearch]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[stp_CheckScan_ClientSearch]
(
	@searchterm varchar(max)
)
as
BEGIN
--	declare @searchterm varchar(max)
--	set @searchterm = '600500' 
	set @searchterm ='%' + @searchterm + '%'

	select 
		PrimaryOrder
		,Relationship
		,AccountNumber
		,clientid
		,Name
		,Gender
		,SSN
		,Address
		,[ContactInfo] = left(ContactInfo,len(ContactInfo)-1)
		, [NumCoApps] = case when PrimaryOrder = 1 then (select count(personid) from tblperson where clientid = cdata.clientid)-1 else 0 end
	from
		(
			SELECT 
				[PrimaryOrder] = case when p.relationship = 'Prime' then 1 else 0 end 
				, [accountnumber] = c.accountnumber
				, c.clientid
				, [Relationship] = isnull(p.relationship,'') 
				, [Name] = p.FirstName + ' ' + p.LastName 
				, [Gender] = isnull(p.gender,'')
				, [SSN] = isnull(p.SSN,'')
				, [Address] = case when p.street2 is null then isnull(p.Street,'') + char(13) else isnull(p.Street,'') + char(13) + isnull(p.Street2,'') + char(13) end 
				+ isnull(case when p.stateid  = 0 then p.City + p.ZipCode else p.City + ', ' + s.Abbreviation + ' ' + p.ZipCode end,'')
				, [ContactInfo] = (select pt.name + ': (' + convert(varchar,isnull(areacode,'')) + ')' +  convert(varchar, case when not number is null then right(number,3) + '-' + left(number,4) else '' end ) + case when extension is null then '' else 'Ext: ' +convert(varchar,extension) end + ','
					from tblPersonPhone pp inner join tblphone p on pp.phoneid = p.phoneid inner join tblPhoneType pt on pt.phonetypeid = p.phonetypeid
					where pp.personid = c.primarypersonid FOR XML PATH(''))
			FROM tblClient AS c 
				INNER JOIN tblPerson AS p ON c.ClientID = p.ClientID 
				LEFT OUTER JOIN tblState AS s ON p.StateID = s.StateID 
			where 
				c.accountnumber like @searchterm 
				or p.ssn like @searchterm
				or p.firstname like @searchterm
				or p.lastname like @searchterm
				or p.street like @searchterm
		) as cData
	order by 
		accountnumber, PrimaryOrder desc
END

GRANT EXEC ON stp_CheckScan_ClientSearch TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[aspnet_AnyDataInTables]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_AnyDataInTables]
    @TablesToCheck int
AS
BEGIN
    -- Check Membership table if (@TablesToCheck & 1) is set
    IF ((@TablesToCheck & 1) <> 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Membership))
        BEGIN
            SELECT N'aspnet_Membership'
            RETURN
        END
    END

    -- Check aspnet_Roles table if (@TablesToCheck & 2) is set
    IF ((@TablesToCheck & 2) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Roles') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 RoleId FROM dbo.aspnet_Roles))
        BEGIN
            SELECT N'aspnet_Roles'
            RETURN
        END
    END

    -- Check aspnet_Profile table if (@TablesToCheck & 4) is set
    IF ((@TablesToCheck & 4) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Profile))
        BEGIN
            SELECT N'aspnet_Profile'
            RETURN
        END
    END

    -- Check aspnet_PersonalizationPerUser table if (@TablesToCheck & 8) is set
    IF ((@TablesToCheck & 8) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_PersonalizationPerUser))
        BEGIN
            SELECT N'aspnet_PersonalizationPerUser'
            RETURN
        END
    END

    -- Check aspnet_PersonalizationPerUser table if (@TablesToCheck & 16) is set
    IF ((@TablesToCheck & 16) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'aspnet_WebEvent_LogEvent') AND (type = 'P'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 * FROM dbo.aspnet_WebEvent_Events))
        BEGIN
            SELECT N'aspnet_WebEvent_Events'
            RETURN
        END
    END

    -- Check aspnet_Users table if (@TablesToCheck & 1,2,4 & 8) are all set
    IF ((@TablesToCheck & 1) <> 0 AND
        (@TablesToCheck & 2) <> 0 AND
        (@TablesToCheck & 4) <> 0 AND
        (@TablesToCheck & 8) <> 0 AND
        (@TablesToCheck & 32) <> 0 AND
        (@TablesToCheck & 128) <> 0 AND
        (@TablesToCheck & 256) <> 0 AND
        (@TablesToCheck & 512) <> 0 AND
        (@TablesToCheck & 1024) <> 0)
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Users))
        BEGIN
            SELECT N'aspnet_Users'
            RETURN
        END
        IF (EXISTS(SELECT TOP 1 ApplicationId FROM dbo.aspnet_Applications))
        BEGIN
            SELECT N'aspnet_Applications'
            RETURN
        END
    END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCheck21TransactionByDepositId]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetCheck21TransactionByDepositId]
@DepositId int
AS
BEGIN
	Select 
TransactionId as [Transaction Id],
Created as [Created],
ReceivedDate as [Received Date],
ProcessedDate as [Processed Date],
AccountNumber as [Account Number],
CheckNumber as [Check Number],
Amount as [Amount],
CASE [Status] 
	When 0 Then 'Good'
	When 1 Then 'Warning'
	When 2 Then 'Error'
	When 3 Then 'Returned'
	Else 'Unknown'
END as [Status],
CASE [State]
	When 0 Then 'Received'
	When 1 Then 'Processed'
	Else 'Unknown'
END as [State],
CASE CheckType
	When 1 Then 'Order'
	When 2 Then 'Bearer'
	Else 'Unknown'
END as [Check Type],
FrontImagePath as [Front Image],
BackImagePath as [Back Image]
From tblC21BatchTransaction
Where DepositId = @DepositId
		 
END
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyGetList]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[stp_AgencyGetList]

AS

SET NOCOUNT ON

SELECT
	SalesAgentHdr_Id,
	Location,
	ContactName,
	CAST((CASE Suspend
		WHEN 'Y' THEN 0
		ELSE 1	
		END)
	 AS bit) AS IsActive
FROM
	SalesAgentHdr
GO
/****** Object:  StoredProcedure [dbo].[stp_CopyLeadPhoneList]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_CopyLeadPhoneList]
(
	@CopyForDate datetime,
	@ForDate datetime,
	@UserID int
)
as
begin

if not exists (select 1 from tblLeadPhoneList where ForDate = @ForDate) begin
	insert tblLeadPhoneList (ForDate,LeadSourceID,Phone,Budget,Actual,CreatedBy,LastModifiedBy)
	select @ForDate,LeadSourceID,Phone,Budget,Actual,@UserID,@UserID
	from tblLeadPhoneList 
	where ForDate = @CopyForDate
end

end
GO
/****** Object:  StoredProcedure [dbo].[stp_documents_getClientCreditorDocumentsInfo]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_documents_getClientCreditorDocumentsInfo]

(
	@clientid int,
	@credAcctID int
)
as
BEGIN

	select 
		DocTypeID
		,DisplayName
		, Received
		, Created
		, Createdby
		, pdfPath
		,rowNum
	from
	(
		SELECT     
			DocOrder = CASE 
				WHEN CHARINDEX('Power of Attorney', dt.DisplayName) > 0 THEN 
					1 
				ELSE 
					CASE WHEN CHARINDEX('Legal Service Agreement', dt.DisplayName) > 0 THEN 2 ELSE 999 END 
			END 
			, dr.DocTypeID
			,dr.relationid
			, ISNULL(dt.DisplayName, 'NA') AS DisplayName
			, ISNULL(ds.ReceivedDate, '01-01-1900') AS Received
			, ISNULL(ds.Created, '01-01-1900') AS Created
			, ISNULL(u.FirstName + ' ' + u.LastName + '</br>' + ug.Name, 'NA') AS CreatedBy
			, '\\' + c.StorageServer + '\' + c.StorageRoot + '\' + c.accountnumber +  '\CreditorDocs\'  + dr.SubFolder + c.accountnumber + '_' + dr.Doctypeid + '_' + dr.DocID + '_' + dr.DateString + '.pdf'[pdfPath]
			, row_number() over(partition by DisplayName order by ISNULL(ds.ReceivedDate, '01-01-1900') ) as rowNum
		FROM  
			tblDocRelation AS dr INNER JOIN
			tblDocumentType AS dt ON dr.DocTypeID = dt.TypeID INNER JOIN
			tblDocScan AS ds ON dr.DocID = ds.DocID LEFT OUTER JOIN
			tblUser AS u ON u.UserID = ds.CreatedBy INNER JOIN
			tblUserGroup AS ug ON ug.UserGroupId = u.UserGroupID inner join
			tblClient c on c.ClientID = dr.ClientID
		WHERE     (dr.ClientID = @clientid) AND (dr.RelationType = 'account') AND (dr.DeletedFlag <> 1) and (dr.relationid = @credAcctID)
	) as docData
	Order by [DocOrder], displayName,created desc

END


GRANT EXEC ON stp_documents_getClientCreditorDocumentsInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_CheckScan_DepositHistorySearch]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_CheckScan_DepositHistorySearch]
	(
		@searchTerm varchar(100)
	)

AS
BEGIN
	set @searchTerm = '%' + @searchTerm + '%'

	select 
		Check21ID
		, p.FirstName + ' ' + p.LastName [Client Name]
		, CheckAmount[Check Amt]
		, verified
		, vu.firstname + ' ' + vu.lastname[Verified By]
		, Processed 
		, ProcessedBy[Processed By]
	from 
		tblICLChecks nc 
		left outer join tblclient c on nc.clientid = c.clientid
		inner join tblperson p on p.personid = c.primarypersonid
		left outer join tbluser vu on vu.userid = nc.verifiedby
	where
		c.accountnumber like @searchTerm
		or p.FirstName + ' ' + p.LastName like @searchTerm
		or vu.firstname + ' ' + vu.lastname like @searchTerm

END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTaskForTask]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetTaskForTask]
	(
		@taskid int
	)

as


select
	tblclienttask.clientid,
	tblperson.firstname + ' ' + tblperson.lastname as clientname,
	tbltasktype.name as tasktypename,
	tbltasktypecategory.tasktypecategoryid,
	tbltasktypecategory.name as tasktypecategoryname,
	tbltaskresolution.name as taskresolutionname,
	tbltask.*,
	tblassignedto.firstname + ' ' + tblassignedto.lastname as assignedtoname,
	tblresolvedby.firstname + ' ' + tblresolvedby.lastname as resolvedbyname,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tbltask left outer join
	tblclienttask on tbltask.taskid = tblclienttask.taskid left outer join
	tblclient on tblclienttask.clientid = tblclient.clientid left outer join
	tblperson on tblclient.primarypersonid = tblperson.personid left outer join
	tbltasktype on tbltask.tasktypeid = tbltasktype.tasktypeid left outer join
	tbltasktypecategory on tbltasktype.tasktypecategoryid = tbltasktypecategory.tasktypecategoryid left outer join
	tbltaskresolution on tbltask.taskresolutionid = tbltaskresolution.taskresolutionid left outer join
	tbluser as tblassignedto on tbltask.assignedto = tblassignedto.userid left outer join
	tbluser as tblresolvedby on tbltask.resolvedby = tblresolvedby.userid left outer join
	tbluser as tblcreatedby on tbltask.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tbltask.lastmodifiedby = tbllastmodifiedby.userid
where
	tbltask.taskid = @taskid
GO
/****** Object:  StoredProcedure [dbo].[stp_settlementimport_reports_getTotalsByFirm]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_settlementimport_reports_getTotalsByFirm]
	(
		@year int,
		@month int 
	)
AS
BEGIN
	declare @tot float
	select @tot = count(*) from tblSettlementTrackerImports where year(getdate()) = year(date) and @month = month(date)

	select 
		[Firm] = LawFirm
		, [Submitted] = Count(*)
		, [SubmittedPct] = count(*)/ISNULL(NULLIF(convert(float,@tot),0),1)
	from 
		tblSettlementTrackerImports
	where 
		@year = year(date)
		and @month = month(date)
	group by LawFirm



END




GRANT EXEC ON stp_settlementimport_reports_getTotalsByFirm TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_leadAnalysis]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_enrollment_leadAnalysis]
(
	@where varchar(max) = '',
	@origRepIds varchar(max) = ''
)
as
begin

exec('
select r.leadapplicantid, datediff(day,l.created,max(r.created)) [days]
into #daystosign
from tblleadstatusroadmap r
join tblleadapplicant l on l.leadapplicantid = r.leadapplicantid
--join (
--	select leadapplicantid, min(created)[started]
--	from tblleadstatusroadmap
--	--where leadstatusid <> 6
--	group by leadapplicantid
--) s 
--on s.leadapplicantid = r.leadapplicantid
where r.leadstatusid = 6 -- signed
group by r.leadapplicantid, l.created


select leadapplicantid, noaccts, totaldebt, origrepid, daystosign
into #leads
from (
	select l.leadapplicantid, 
		--l.fullname, s.name[source], u.firstname+'' ''+u.lastname[rep], t.description[status], c.shortconame[company], l.publisherid,
		case 
			when a.noaccts is null and a.totaldebt = 0 then 0
			when a.noaccts is null and a.totaldebt > 0 then 1
			else a.noaccts end [noaccts], 
		a.totaldebt, 
		isnull(o.origrepid,l.repid) [OrigRepID],
		d.days[daystosign]--,
		--e.name[state], 
		--case when rtrim(ltrim(l.fullname))='''' then 2 else 1 end[seq]
	from tblleadapplicant l
	join tblleadcalculator a on a.leadapplicantid = l.leadapplicantid
	--left join tblleadsources s on s.leadsourceid = l.leadsourceid
	--left join tblleadstatus t on t.statusid = l.statusid
	--left join tbluser u on u.userid = l.repid
	--left join tblcompany c on c.companyid = l.companyid
	--left join tblstate e on e.stateid = l.stateid
	left join #daystosign d on d.leadapplicantid = l.leadapplicantid
	left join vw_enrollment_orig_rep o on o.leadapplicantid = l.leadapplicantid
	where 1=1 ' + @where + '
) x
where 1=1 ' + @origRepIds + '


select count(*)[num], avg(cast(noaccts as money))[noaccts], avg(totaldebt)[totaldebt], avg(cast(daystosign as money))[daystosign],
	sum(case when daystosign > 0 then 1 else 0 end) [nosigned]
from #leads


drop table #daystosign
drop table #leads
')

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAllLanguagesWithUserFlag]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
create procedure [dbo].[stp_GetAllLanguagesWithUserFlag]
	(
		@userid int
	)

as 


select
	tbllanguage.*,
	t.userid
from
	tbllanguage left outer join
	(
		select
			*
		from
			tbluserlanguage
		where
			userid = @userid
	)
	as t on tbllanguage.languageid = t.languageid
order by
	tbllanguage.name
GO
/****** Object:  StoredProcedure [dbo].[stp_UserCompanies]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_UserCompanies]
(
	@UserID int
)
as
begin


if exists (select 1 from tblUser where UserID = @UserID and CompanyID = -99) begin
	select -99, 'ALL', 'ALL'
end
else if exists (select 1 from tblUserCompanyAccess where UserID = @UserID) begin
	select c.CompanyID, c.ShortCoName [Company]
	from tblUserCompanyAccess u
	join tblCompany c on c.CompanyID = u.CompanyID
	where u.UserID = @UserID
	order by c.CompanyID
end
else begin
	select '-1', 'None', 'None'
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_IssueCommBatchOut]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_IssueCommBatchOut]
(
	@commbatchid int,
	@commscenid int,
	@companyid int,
	@parentcommrecid int,
	@trustid int
)
as

set nocount on
set ansi_warnings off

declare @commrecid int
declare @order int
declare @amount money
declare @commbatchtransferid int
declare @transferamount money

declare @vtblBatchOut table
(
	CommRecID int,
	[Order] int,
	Amount money,
	TrustID int
)


INSERT INTO
	@vtblBatchOut
SELECT
	CommRecID,
	[Order],
	Amount,
	TrustID
FROM
	#tblIssueCommBatch
WHERE
	CommScenID = @commscenid
	and CompanyID = @companyid
	and ParentCommRecID = @parentcommrecid
	and TrustID = @trustid
ORDER BY
	[Order]



declare cursor_BatchOut cursor local forward_only read_only for
	SELECT
		CommRecID,
		[Order],
		Amount,
		TrustID
	FROM
		@vtblBatchOut

open cursor_BatchOut

fetch next from cursor_BatchOut into @commrecid, @order, @amount, @trustid

while @@fetch_status = 0
	begin
		INSERT INTO
			tblCommBatchTransfer
			(
				CommBatchID,
				CommRecID,
				ParentCommRecID,
				[Order],
				Amount,
				CompanyID,
				TrustID
			)
		VALUES
			(
				@commbatchid,
				@commrecid,
				@parentcommrecid,
				@order,
				@amount,
				@companyid,
				@trustid
			)

		set @commbatchtransferid = scope_identity()


		-- recursively run this same proc again with this recipient as parent
		exec stp_IssueCommBatchOut @commbatchid, @commscenid, @companyid, @commrecid, @trustid


		-- add the current amount to the current transferamount
		UPDATE
			tblCommBatchTransfer
		SET
			TransferAmount = isnull(TransferAmount, 0) + @amount
		WHERE
			CommBatchTransferID = @commbatchtransferid


		-- retrieve the current transferamount and add it to the parent transferamount
		SELECT
			@transferamount = isnull(TransferAmount, 0)
		FROM
			tblCommBatchTransfer
		WHERE
			CommBatchTransferID = @commbatchtransferid

			
		UPDATE
			tblCommBatchTransfer
		SET
			TransferAmount = isnull(TransferAmount, 0) + @transferamount
		WHERE
			CommBatchID = @commbatchid
			and CommRecID = @parentcommrecid
			and TrustID = @trustid


		fetch next from cursor_BatchOut into @commrecid, @order, @amount, @trustid
	end

close cursor_BatchOut
deallocate cursor_BatchOut
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Users_CreateUser]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Users_CreateUser]
    @ApplicationId    uniqueidentifier,
    @UserName         nvarchar(256),
    @IsUserAnonymous  bit,
    @LastActivityDate DATETIME,
    @UserId           uniqueidentifier OUTPUT
AS
BEGIN
    IF( @UserId IS NULL )
        SELECT @UserId = NEWID()
    ELSE
    BEGIN
        IF( EXISTS( SELECT UserId FROM dbo.aspnet_Users
                    WHERE @UserId = UserId ) )
            RETURN -1
    END

    INSERT dbo.aspnet_Users (ApplicationId, UserId, UserName, LoweredUserName, IsAnonymous, LastActivityDate)
    VALUES (@ApplicationId, @UserId, @UserName, LOWER(@UserName), @IsUserAnonymous, @LastActivityDate)

    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNotMappedC21items]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetNotMappedC21items]
AS
BEGIN
	Select 
TransactionId as [TransactionId],
ReceivedDate as [Received Date],
ProcessedDate as [Processed Date],
AccountNumber as [Account Number],
CheckNumber as [Check Number],
Amount as [Amount],
CASE [Status] 
	When 0 Then 'Good'
	When 1 Then 'Warning'
	When 2 Then 'Error'
	When 3 Then 'Returned'
	Else 'Unknown'
END as [Status],
CASE [State]
	When 0 Then 'Received'
	When 1 Then 'Processed'
	Else 'Unknown'
END as [State],
CASE CheckType
	When 1 Then 'Order'
	When 2 Then 'Bearer'
	Else 'Unknown'
END as [Check Type],
FrontImagePath as [Front Image],
BackImagePath as [Back Image],
Hide
From tblC21BatchTransaction
Where ItemType <> 2
And isnull(DepositId, '') = ''
And Closed = 1
And Hide = 0
Order By ProcessedDate Desc
END
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyGetDetail]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_AgencyGetDetail]
(
	@agentId int
)

AS

SET NOCOUNT ON

SELECT
	Location,
	ContactName,
	Address,
	AptSuite,
	City,
	State,
	Zip,
	HPhone,
	OPhone,
	CPhone,
	APhone,
	Fax,
	Pager,
	Email,
	SSNTIN,
	LoginId,
	CAST((CASE Suspend
		WHEN 'Y' THEN 0
		ELSE 1	
		END)
	 AS bit) AS IsActive,
	CheckNo,
	IsAttorney,
	EnrollPer,
	MaintPer,
	SettPer,
	DMSEnrollPer,
	DMSMaintPer,
	DMSSettPer
FROM
	SalesAgentHdr
WHERE
	SalesAgentHdr_Id=@agentId
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertCallEvent]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertCallEvent]
@CallIdKey varchar(50) = Null,
@PhoneNumber varchar(50) = Null,
@EventName varchar(50),
@UserId int
AS
BEGIN
	Insert Into tblCallLog(CallIdKey, PhoneNumber, EventName, EventDate, EventBy)
	Values (@CallIdKey, @PhoneNumber, @EventName, GetDate(), @UserId)
	
	Select scope_identity()
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMediators]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetMediators]

as

select
	tbluser.*
from
	tbluser inner join
	tbluserposition on tbluser.userid = tbluserposition.userid
where
	tbluserposition.positionid = 4
order by
	tbluser.lastname, tbluser.firstname
GO
/****** Object:  StoredProcedure [dbo].[stp_ActiveClientsByState]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_ActiveClientsByState]
(
	@UserID int,
	@GroupID int
)
as
begin

	select cp.companyid, cp.name [company], s.stateid, s.name [state]
	into #states
	from tblstate s, tblcompany cp

	insert #states select distinct companyid, company, 0, 'Unknown' from #states
	insert #states select distinct companyid, company, -1, '' from #states

	select companyid, stateid, [count]
	into #states1
	from (
		select c.companyid, -1 [stateid], count(*) [count]
		from tblclient c
		join tblusercompanyaccess uca on uca.companyid = c.companyid and uca.userid = @userid
		join tblperson p on p.personid = c.primarypersonid
		join tblclientstatus cs on cs.clientstatusid = c.currentclientstatusid
		join tblclientstatusxref x on x.clientstatusgroupid = @GroupID and x.clientstatusid = cs.clientstatusid
		group by c.companyid

		union all

		select c.companyid, isnull(p.stateid,0), count(*)
		from tblclient c
		join tblusercompanyaccess uca on uca.companyid = c.companyid and uca.userid = @userid
		join tblperson p on p.personid = c.primarypersonid
		join tblclientstatus cs on cs.clientstatusid = c.currentclientstatusid
		join tblclientstatusxref x on x.clientstatusgroupid = @GroupID and x.clientstatusid = cs.clientstatusid
		group by c.companyid, p.stateid
	) d

	select row_number() over(order by s.company, s.state) [rownum], 
		s.companyid, s.company, s.stateid, s.state, isnull(s1.[count],0) [count]
	from #states s
	left join #states1 s1 on s1.companyid = s.companyid
	and s1.stateid = s.stateid

	drop table #states
	drop table #states1

end
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetUserByName]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetUserByName]
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @CurrentTimeUtc       datetime,
    @UpdateLastActivity   bit = 0
AS
BEGIN
    DECLARE @UserId uniqueidentifier

    IF (@UpdateLastActivity = 1)
    BEGIN
        SELECT TOP 1 m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
                m.CreateDate, m.LastLoginDate, @CurrentTimeUtc, m.LastPasswordChangedDate,
                u.UserId, m.IsLockedOut,m.LastLockoutDate
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE    LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                LOWER(@UserName) = u.LoweredUserName AND u.UserId = m.UserId

        IF (@@ROWCOUNT = 0) -- Username not found
            RETURN -1

        UPDATE   dbo.aspnet_Users
        SET      LastActivityDate = @CurrentTimeUtc
        WHERE    @UserId = UserId
    END
    ELSE
    BEGIN
        SELECT TOP 1 m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
                m.CreateDate, m.LastLoginDate, u.LastActivityDate, m.LastPasswordChangedDate,
                u.UserId, m.IsLockedOut,m.LastLockoutDate
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE    LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                LOWER(@UserName) = u.LoweredUserName AND u.UserId = m.UserId

        IF (@@ROWCOUNT = 0) -- Username not found
            RETURN -1
    END

    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetC21PendingTransactions]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetC21PendingTransactions] 
AS
SELECT TransactionId,  FrontImagePath, BackImagePath, DepositId, 
Status, State, ReceivedDate, ProcessedDate, ExceptionCode, Notes
FROM tblC21BatchTransaction
Where Closed = 0
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCommunicationForClientbak]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetCommunicationForClientbak]
	(
		@returntop varchar (50) = '100 percent',
		@clientid int,
		@shortvalue int = 150,
		@criteria varchar (8000) = '1=1',
		@userid int = null
	)

as

--create our results table
create table #tblResults
(type varchar(20),
[date] datetime,
[by] varchar(255),
message varchar(5000),
shortmessage varchar(5000),
fieldid int,
direction bit,
userid int
)

exec
(
'insert into #tblResults 
	select 
		''note'' as type,
		tblnote.lastmodified as [date],
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> '' + ug.name as [by],
		tblnote.[value] as message,
		substring(tblnote.[value], 0, ' + @shortvalue + ') + (case when len(tblnote.[value]) >= ' + @shortvalue + ' then ''...'' else '''' end) as shortmessage, tblnote.noteid as fieldid,
		null as direction,
		tblnote.createdby
	from
		tblnote left outer join
		tbluser as tbllastmodifiedby on tblnote.lastmodifiedby = tbllastmodifiedby.userid
		inner join tblusergroup as ug on ug.usergroupid = tblnote.usergroupid
	where
		(tblnote.clientid = ' + @clientid + ') and (' + @criteria + ')'
)

exec
(
'insert into #tblResults 
	select 
		''phonecall'' as type,
		tblphonecall.lastmodified as [date],
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname + '' </br> '' + ug.name as [by],
		tblphonecall.[subject] as message,
		substring(tblphonecall.[subject], 0, ' + @shortvalue + ') + (case when len(tblphonecall.[subject]) >= ' + @shortvalue + ' then ''...'' else '''' end) as shortmessage, 
		tblphonecall.phonecallid as fieldid,
		tblphonecall.direction,
		tblphonecall.createdby
	from
		tblphonecall left outer join
		tbluser as tbllastmodifiedby on tblphonecall.lastmodifiedby = tbllastmodifiedby.userid
		inner join tblusergroup as ug on ug.usergroupid = tblphonecall.usergroupid
	where
		tblphonecall.clientid=' + @clientid + ' and (' + @criteria + ')'
)

if @returntop='100 percent' begin
	select
		* 
	from 
		#tblResults 
	where 
		userid=isnull(@userid,userid)
	order by 
		date desc, 
		fieldid desc
end else begin
	declare @amt int
	set @amt=convert(int,@returntop)
	set rowcount @amt
	select 
		* 
	from 
		#tblResults 
	where 
		userid=isnull(@userid,userid)
	order by 
		date desc, 
		fieldid desc
end



drop table #tblResults
GO
/****** Object:  StoredProcedure [dbo].[stp_Reporting_SmartDebtor_xfersByExtension]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_Reporting_SmartDebtor_xfersByExtension]

AS
BEGIN
-- =============================================
-- Author:		Christopher Nott
-- Create date: 07/20/2009
-- Description:	Transfers by Extension for SmartDebtor from tblCallLog
-- =============================================
	
SET NOCOUNT ON;

DECLARE @DATESTRING datetime

set @DATESTRING = convert(datetime,convert(varchar,getdate(),110)+' 00:00:00.000')

select [Transfers] = phonenumber  
	,Extensions = count(*) 
	from tblcalllog where eventname = 'transfer' 
	and eventdate >= @DATESTRING
	group by phonenumber 
	order by phonenumber desc
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Switch_UserGroup]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_Switch_UserGroup]
@UserId int,
@UserGroupId int,
@ByUserId int
AS
Update tblUser Set
UserGroupId = @UserGroupId,
LastModified = GetDate(),
LastModifiedBy = @ByUserId
Where UserId = @UserId
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientsForTask]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
create procedure [dbo].[stp_GetClientsForTask]
	(
		@taskid int
	)

as


select
	tblclient.*,
	tblperson.firstname + ' ' + tblperson.lastname as primarypersonname,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tblclient inner join
	tblperson on tblclient.primarypersonid = tblperson.personid inner join
	tblclienttask on tblclient.clientid = tblclienttask.clientid left outer join
	tbluser as tblcreatedby on tblclient.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblclient.lastmodifiedby = tbllastmodifiedby.userid
where
	tblclienttask.taskid = @taskid
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_UpdateUserInfo]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_UpdateUserInfo]
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @IsPasswordCorrect              bit,
    @UpdateLastLoginActivityDate    bit,
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc                 datetime,
    @LastLoginDate                  datetime,
    @LastActivityDate               datetime
AS
BEGIN
    DECLARE @UserId                                 uniqueidentifier
    DECLARE @IsApproved                             bit
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @IsApproved = m.IsApproved,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            @FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m WITH ( UPDLOCK )
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        GOTO Cleanup
    END

    IF( @IsPasswordCorrect = 0 )
    BEGIN
        IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAttemptWindowStart ) )
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = 1
        END
        ELSE
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = @FailedPasswordAttemptCount + 1
        END

        BEGIN
            IF( @FailedPasswordAttemptCount >= @MaxInvalidPasswordAttempts )
            BEGIN
                SET @IsLockedOut = 1
                SET @LastLockoutDate = @CurrentTimeUtc
            END
        END
    END
    ELSE
    BEGIN
        IF( @FailedPasswordAttemptCount > 0 OR @FailedPasswordAnswerAttemptCount > 0 )
        BEGIN
            SET @FailedPasswordAttemptCount = 0
            SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @FailedPasswordAnswerAttemptCount = 0
            SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )
        END
    END

    IF( @UpdateLastLoginActivityDate = 1 )
    BEGIN
        UPDATE  dbo.aspnet_Users
        SET     LastActivityDate = @LastActivityDate
        WHERE   @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END

        UPDATE  dbo.aspnet_Membership
        SET     LastLoginDate = @LastLoginDate
        WHERE   UserId = @UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END


    UPDATE dbo.aspnet_Membership
    SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
        FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
        FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
        FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
        FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
    WHERE @UserId = UserId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertC21BatchTransaction]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertC21BatchTransaction]
@TransactionId varchar(50),
@BatchId varchar(50)
AS
INSERT INTO tblC21BatchTransaction (TransactionId, BatchId, Created)
VALUES (@TransactionId, @BatchId, GetDate())
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_Group_IoU]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_Group_IoU]
	(
		@functionid int,
		@usergroupid int,
		@canview bit,
		@canadd bit,
		@caneditown bit,
		@caneditall bit,
		@candeleteown bit,
		@candeleteall bit
	)

as

exec stp_permissions_group_iou_single @functionid,@usergroupid,1,@canview
exec stp_permissions_group_iou_single @functionid,@usergroupid,2,@canadd
exec stp_permissions_group_iou_single @functionid,@usergroupid,3,@caneditown
exec stp_permissions_group_iou_single @functionid,@usergroupid,4,@caneditall
exec stp_permissions_group_iou_single @functionid,@usergroupid,5,@candeleteown
exec stp_permissions_group_iou_single @functionid,@usergroupid,6,@candeleteall
GO
/****** Object:  StoredProcedure [dbo].[stp_Reporting_SmartDebtor_CallTransferMethodComparison]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_Reporting_SmartDebtor_CallTransferMethodComparison]

AS
BEGIN
-- =============================================
-- Author:		Christopher Nott
-- Create date: 07/20/2009
-- Description:	Compare call transfer reporting methods for SD
-- =============================================
	
SET NOCOUNT ON;

DECLARE @DATESTRING datetime

set @DATESTRING = convert(datetime,convert(varchar,getdate(),110)+' 00:00:00.000')

select 
	[CallLog(7477)] =(select count(*) FROM TBLCALLLOG cl
		WHERE EVENTNAME = 'TRANSFER'  
		AND EVENTDATE >= @DATESTRING
		AND PHONENUMBER = '7477')
	,[CallLog(All)] =(select count(*) FROM TBLCALLLOG cl
		WHERE EVENTNAME = 'TRANSFER'  
		AND EVENTDATE >= @DATESTRING)
	,KPIMethod = (select count(*) from sqllive.i3_cic.dbo.calldetail CD
		where calleventlog like '%campaign enrollment%'
		and connecteddate >= @DATESTRING
		and calldirection = 'inbound' and calltype = 'external')
	,I3Method = (select count(*) from sqllive.i3_cic.dbo.calldetail CD 
		where dnis = '7477' and connecteddate >= @DATESTRING)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_IncentivesOverview]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_IncentivesOverview]
as
begin

	select l.repid, u.firstname + ' ' + u.lastname [rep], max(n.created) [lastincentive], max(c.created) [lastclient], isnull(r.userid,-1) [supid]
	from tblclient c
	join tblimportedclient i on i.importid = c.serviceimportid
	join tblleadapplicant l on l.leadapplicantid = i.externalclientid
	join tbluser u on u.userid = l.repid
	left join tblincentives n on n.repid = l.repid
	left join tblsupreps r on r.userid = n.repid
	group by l.repid, u.firstname, u.lastname, r.userid
	having max(c.created) > dateadd(month,-3,getdate())

end
GO
/****** Object:  StoredProcedure [dbo].[stp_ApprovedIncentiveDetail]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_ApprovedIncentiveDetail]
(
	@repid int,
	@month int,
	@year int
)
as
begin

	-- initials
	select d.clientid, c.accountnumber, ic.externalclientid [leadapplicantid], p.firstname + ' ' + p.lastname [client], c.currentclientstatusid
	from tblincentivedetail d
	join tblincentives i on i.incentiveid = d.incentiveid
	join tblclient c on c.clientid = d.clientid
	join tblperson p on p.personid = c.primarypersonid
	join tblimportedclient ic on ic.importid = c.serviceimportid
	where d.initial = 1
	and i.incentivemonth = @month
	and i.incentiveyear = @year
	and i.repid = @repid
	order by client
	
	-- residuals
	select d.clientid, c.accountnumber, ic.externalclientid [leadapplicantid], p.firstname + ' ' + p.lastname [client], c.currentclientstatusid
	from tblincentivedetail d
	join tblincentives i on i.incentiveid = d.incentiveid
	join tblclient c on c.clientid = d.clientid
	join tblperson p on p.personid = c.primarypersonid
	join tblimportedclient ic on ic.importid = c.serviceimportid
	where d.initial = 0
	and i.incentivemonth = @month
	and i.incentiveyear = @year
	and i.repid = @repid
	order by client

	-- team (where avail)
	if exists (	select 1
				from tblIncentivesTeam t
				join tblincentives i on i.incentiveid = t.repincentiveid
					and i.incentivemonth = @month
					and i.incentiveyear = @year
				where t.supid = @repid) begin
		
		-- supervisor's incentives
		select u.firstname + ' ' + u.lastname [rep], i.initialcount
		from tblincentives i 
		join tbluser u on u.userid = i.repid
		where i.incentivemonth = @month
			and i.incentiveyear = @year
			and i.repid = @repid
		
		union all
		
		-- team member incentives
		select u.firstname + ' ' + u.lastname [rep], i.initialcount
		from tblIncentivesTeam t
		join tblincentives i on i.incentiveid = t.repincentiveid
			and i.incentivemonth = @month
			and i.incentiveyear = @year
		join tbluser u on u.userid = i.repid
		where t.supid = @repid
		
		order by rep
	end
	else begin
		-- return empty table
		select '' [rep], 0 [initialcount]
		where 1=2
	end
end
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetPassword]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetPassword]
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc                 datetime,
    @PasswordAnswer                 nvarchar(128) = NULL
AS
BEGIN
    DECLARE @UserId                                 uniqueidentifier
    DECLARE @PasswordFormat                         int
    DECLARE @Password                               nvarchar(128)
    DECLARE @passAns                                nvarchar(128)
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @Password = m.Password,
            @passAns = m.PasswordAnswer,
            @PasswordFormat = m.PasswordFormat,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            @FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m WITH ( UPDLOCK )
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    IF ( NOT( @PasswordAnswer IS NULL ) )
    BEGIN
        IF( ( @passAns IS NULL ) OR ( LOWER( @passAns ) <> LOWER( @PasswordAnswer ) ) )
        BEGIN
            IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
            END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount >= @MaxInvalidPasswordAttempts )
                BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

            SET @ErrorCode = 3
        END
        ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount > 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

        UPDATE dbo.aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    IF( @ErrorCode = 0 )
        SELECT @Password, @PasswordFormat

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_insertLeadExportJob]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_enrollment_insertLeadExportJob]
@UserId int
AS
BEGIN

	Insert into tblLeadExportJob(ExecutedBy) VALUES (@UserId)
	
	SELECT SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure [dbo].[stp_DeletePhonesForCreditor]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_DeletePhonesForCreditor]
	(
		@creditorid int,
		@criteria varchar (8000) = ''
	)

as


-- discretionary variables
declare @creditorphoneid int
declare @phoneid int


-- setup criteria if anything was passed in
if not @criteria is null and len(@criteria) > 0
	begin
		set @criteria = ' AND ' + @criteria
	end


-- create a temp table for results
create table
	#tblphone
	(
		creditorphoneid int,
		phoneid int
	)


-- fill temp table with results
exec
(
	'insert into
		#tblphone
	select
		tblcreditorphone.creditorphoneid,
		tblphone.phoneid
	from
		tblcreditorphone inner join
		tblphone on tblcreditorphone.phoneid = tblphone.phoneid
	where
		tblcreditorphone.creditorid = ' + @creditorid + @criteria
)


-- drop all creditorphone records that were returned in temp table
delete from
	tblcreditorphone
where
	creditorphoneid in
	(
		select
			creditorphoneid
		from
			#tblphone
	)


-- TODO: drop all phone records if there are no other table entities using them


-- clean up temp table
select * from #tblphone
drop table #tblphone
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertAttorneybak]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_InsertAttorneybak]
(
	@FirstName varchar(50)
,	@LastName varchar(50)
,	@MiddleName varchar(50)
,	@Suffix varchar(50) = null
,	@Address1 varchar(150) = null
,	@Address2 varchar(150) = null
,	@City varchar(50) = null
,	@State varchar(50) = null
,	@Zip varchar(15) = null
,	@Phone1 varchar(15) = null
,	@Phone2 varchar(15) = null
,	@Fax varchar(15) = null
,	@CreatedBy int
)
as
begin
/*
	Purpose:	Adds a new attorney record. Returns AttorneyID.

	History:
	11/30/07	jhernandez		Created.
	12/03/07	jhernandez		Checking for dups before inserting.
	12/07/07	jhernandez		Removed state fields that were moved to pivot tables. Also added
								optional parameters.
*/

if exists (select 1 from tblAttorney where FirstName = @FirstName and LastName = @LastName and isnull(MiddleName,'') = @MiddleName) begin
	-- Attorney name already exists, return their ID
	select AttorneyID from tblAttorney where FirstName = @FirstName and LastName = @LastName
end
else begin
	-- New attorney
	insert tblAttorney (
		FirstName
	,	LastName
	,	MiddleName
	,	Suffix
	,	Address1
	,	Address2
	,	City
	,	State
	,	Zip
	,	Phone1
	,	Phone2
	,	Fax
	,	Created
	,	CreatedBy
	,	LastModified
	,	LastModifiedBy
	)
	values (
		@FirstName
	,	@LastName
	,	@MiddleName
	,	@Suffix
	,	@Address1
	,	@Address2
	,	@City
	,	@State
	,	@Zip
	,	@Phone1
	,	@Phone2
	,	@Fax
	,	getdate()
	,	@CreatedBy
	,	getdate()
	,	@CreatedBy
	)

	select scope_identity()
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneyDetail]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <01 - 22 March 2010>
      Category    : [TimeMatter]
      Type        : {Update}
      Decription  : Retrieves the attorney Details         
				   
*/
CREATE procedure [dbo].[stp_AttorneyDetail]
(
	@AttorneyID int
)
as
begin
/*
	History:
	jhernandez		12/07/07		
*/

select 
	AttorneyID
,	a.FirstName
,	a.LastName
,	isnull(MiddleName,'') [MiddleName]
,	isnull(Suffix,'') [Suffix]
,	isnull(Address1,'') [Address1]
,	isnull(Address2,'') [Address2]
,	isnull(City,'') [City]
,	isnull(State,'') [State]
,	isnull(Zip,'') [Zip]
,	isnull(Phone1,'') [Phone1]
,	isnull(Phone2,'') [Phone2]
,	isnull(Fax,'') [Fax]
,	isnull(a.UserID,-1) [UserID]
,	isnull(u.Username,'') [Username]
,	isnull(a.EmailAddress,'') [EmailAddress]
,	isnull(a.EmailAddress2,'') [EmailAddress2]
,	isnull(a.EmailAddress3,'') [EmailAddress3]
from 
	tblAttorney a
left join
	tblUser u on u.UserID = a.UserID
where 
	AttorneyID = @AttorneyID


select 
	s.Name
,	s.Abbreviation [State]
,	isnull(a.StateBarNum,'') [StateBarNum]
,	case when AttorneyID is not null then 'true' else 'false' end [IsRelated]
from
	tblState s
left join tblAttyStates a
	on a.State = s.Abbreviation
	 and a.AttorneyID = @AttorneyID
order by
	s.Name


select 
	c.CompanyID
,	c.ShortCoName
,	isnull(r.AttyRelation,'') [Relation]
,	case when r.AttorneyID is not null then 'true' else 'false' end [IsRelated]
from 
	tblCompany c
left join tblAttyRelation r
	on r.CompanyID = c.CompanyID
	 and r.AttorneyID = @AttorneyID
order by
	c.ShortCoName


end
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_getClientsActiveWithNoEmail]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_getClientsActiveWithNoEmail]
/*
	(
		@parameter1 int = 5,
		@parameter2 datatype OUTPUT
	)

*/
AS
BEGIN

select c.clientid, c.accountnumber,  p.firstname + ' ' + p.lastname [clientname], c.created
from tblclient c 
join tblcompany cp on cp.companyid = c.companyid
join tblcompanyaddresses ca on ca.companyid = cp.companyid and ca.addresstypeid = 3 -- Client
join tblperson p on p.personid = c.primarypersonid
join vw_ClientCurrentStatusCreated v on v.clientid = c.clientid
where 1=1
and c.currentclientstatusid = 14 -- active
and v.statuscreated > '3/31/2010' -- date we started these emails
and datediff(d,v.statuscreated,getdate()) > 0
and c.clientid not in (select distinct printclientid from tblletters_printed where printdoctypeid = 'W0001' and printclientid = c.clientid)
and p.emailaddress is null




END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_UnlockUser]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_UnlockUser]
    @ApplicationName                         nvarchar(256),
    @UserName                                nvarchar(256)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
        RETURN 1

    UPDATE dbo.aspnet_Membership
    SET IsLockedOut = 0,
        FailedPasswordAttemptCount = 0,
        FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        FailedPasswordAnswerAttemptCount = 0,
        FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        LastLockoutDate = CONVERT( datetime, '17540101', 112 )
    WHERE @UserId = UserId

    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_updateLeadExportJob]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_enrollment_updateLeadExportJob]
@ExportJobId int,		   
@Status int = null,
@Notes varchar(max) = null
AS
BEGIN
	Update tblLeadExportJob Set
	Status = isnull(@Status, Status),
	Notes = isnull(@Notes, Notes) 
	Where ExportJobId = @ExportJobId
END
GO
/****** Object:  StoredProcedure [dbo].[stp_DeletePhonesForPerson]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DeletePhonesForPerson]
	(
		@personid int,
		@criteria varchar (8000) = ''
	)

as


-- discretionary variables
declare @personphoneid int
declare @phoneid int


-- setup criteria if anything was passed in
if not @criteria is null and len(@criteria) > 0
	begin
		set @criteria = ' AND ' + @criteria
	end


-- create a temp table for results
create table
	#tblphone
	(
		personphoneid int,
		phoneid int
	)


-- fill temp table with results
exec
(
	'insert into
		#tblphone
	select
		tblpersonphone.personphoneid,
		tblphone.phoneid
	from
		tblpersonphone inner join
		tblphone on tblpersonphone.phoneid = tblphone.phoneid
	where
		tblpersonphone.personid = ' + @personid + @criteria
)


-- drop all personphone records that were returned in temp table
delete from
	tblpersonphone
where
	personphoneid in
	(
		select
			personphoneid
		from
			#tblphone
	)


-- TODO: drop all phone records if there are no other table entities using them


-- clean up temp table
select * from #tblphone
drop table #tblphone
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertAttorney]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <01 - 22 March 2010>
      Category    : [TimeMatter]
      Type        : {Update}
      Decription  : Inserts the attorney Details         
				   
*/
CREATE procedure [dbo].[stp_InsertAttorney]
(
	@FirstName varchar(50)
,	@LastName varchar(50)
,	@MiddleName varchar(50)
,	@Suffix varchar(50) = null
,	@Address1 varchar(150) = null
,	@Address2 varchar(150) = null
,	@City varchar(50) = null
,	@State varchar(50) = null
,	@Zip varchar(15) = null
,	@Phone1 varchar(15) = null
,	@Phone2 varchar(15) = null
,	@Fax varchar(15) = null
,	@CreatedBy int
,	@EmailAddress nvarchar(50) = null
,	@EmailAddress2 nvarchar(50) = null
,	@EmailAddress3 nvarchar(50) = null
)
as
begin
/*
	Purpose:	Adds a new attorney record. Returns AttorneyID.

	History:
	11/30/07	jhernandez		Created.
	12/03/07	jhernandez		Checking for dups before inserting.
	12/07/07	jhernandez		Removed state fields that were moved to pivot tables. Also added
								optional parameters.
*/

if exists (select 1 from tblAttorney where FirstName = @FirstName and LastName = @LastName and isnull(MiddleName,'') = @MiddleName) begin
	-- Attorney name already exists, return their ID
	select AttorneyID from tblAttorney where FirstName = @FirstName and LastName = @LastName
end
else begin
	-- New attorney
	insert tblAttorney (
		FirstName
	,	LastName
	,	MiddleName
	,	Suffix
	,	Address1
	,	Address2
	,	City
	,	State
	,	Zip
	,	Phone1
	,	Phone2
	,	Fax
	,	Created
	,	CreatedBy
	,	LastModified
	,	LastModifiedBy
	,   EmailAddress
	,   EmailAddress2
	,   EmailAddress3
	)
	values (
		@FirstName
	,	@LastName
	,	@MiddleName
	,	@Suffix
	,	@Address1
	,	@Address2
	,	@City
	,	@State
	,	@Zip
	,	@Phone1
	,	@Phone2
	,	@Fax
	,	getdate()
	,	@CreatedBy
	,	getdate()
	,	@CreatedBy
	,   @EmailAddress
	,   @EmailAddress2
	,   @EmailAddress3
	)

	select scope_identity()
end


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPersonPhonesForPerson]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
create procedure [dbo].[stp_GetPersonPhonesForPerson]
	(
		@personid int
	)

as

select
	tblpersonphone.*,
	tblcreatedby.firstname + ' ' + tblcreatedby.lastname as createdbyname,
	tbllastmodifiedby.firstname + ' ' + tbllastmodifiedby.lastname as lastmodifiedbyname
from
	tblpersonphone left outer join
	tbluser as tblcreatedby on tblpersonphone.createdby = tblcreatedby.userid left outer join
	tbluser as tbllastmodifiedby on tblpersonphone.lastmodifiedby = tbllastmodifiedby.userid
where
	tblpersonphone.personid = @personid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAllCheckSiteClients]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetAllCheckSiteClients]
AS
Select 
	c.ClientId,
	round(c.SDABalance,2) AS [SDABalance],
	(select 
	coalesce(sum(nr.amount), 0)
	from tblNacharegister2 nr
	left join tblNachaFile nf on nf.nachafileid = nr.nachafileid 
	where (nf.datesent is null and (nr.nachafileid > 0 or nr.nachafileid = -1))
	and nr.flow = 'debit'
	and nr.shadowstoreid = c.AccountNumber) +
	(select 
	coalesce(sum(nr.amount), 0)* -1
	from tblNacharegister2 nr
	left join tblNachaFile nf on nf.nachafileid = nr.nachafileid 
	where (nf.datesent is null and (nr.nachafileid > 0 or nr.nachafileid = -1))
	and nr.flow = 'credit'
	and nr.shadowstoreid = c.AccountNumber) [PendingAmount],
	Case When CurrentClientStatusId IN (15, 17, 18) Then 0 Else 1 End As [Active],
	AccountNumber,
	p.FirstName,
	p.LastName,
	(select coalesce(sum(r.amount), 0)* -1
	 from tblregister r
	 where r.entrytypeid = 3
	 and datediff(d, r.created, getdate()) < 3
	 and (r.hold is not null and r.hold > getdate())
	 and r.clear is null
	 and r.void is null
	 and r.bounce is null
	 and r.importid is null
	 and r.checknumber is not null
	 and r.clientid = c.clientid
	 and r.registerid not in (select b.depositid from tblc21batchtransaction b where b.depositid is not null)) as [C21ToSend]
FROM tblClient c
Inner Join tblPerson p on p.ClientId = c.ClientId
Where TrustId = 22
And p.relationShip = 'prime'
And c.AccountNumber is not null -- If manual entry and data entry has not been resolved, clients will not have an account number yet
--Exclude those not send to Checksite
--And c.ClientId in (Select distinct Clientid From tblNachaRegister2 Where isNull(NachaFileId,-1) <> -1)
Order by p.LastName, p.FirstName
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_UpdateUser]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_UpdateUser]
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @Email                nvarchar(256),
    @Comment              ntext,
    @IsApproved           bit,
    @LastLoginDate        datetime,
    @LastActivityDate     datetime,
    @UniqueEmail          int,
    @CurrentTimeUtc       datetime
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId, @ApplicationId = a.ApplicationId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF (@UserId IS NULL)
        RETURN(1)

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  dbo.aspnet_Membership WITH (UPDLOCK, HOLDLOCK)
                    WHERE ApplicationId = @ApplicationId  AND @UserId <> UserId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            RETURN(7)
        END
    END

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
	SET @TranStarted = 0

    UPDATE dbo.aspnet_Users WITH (ROWLOCK)
    SET
         LastActivityDate = @LastActivityDate
    WHERE
       @UserId = UserId

    IF( @@ERROR <> 0 )
        GOTO Cleanup

    UPDATE dbo.aspnet_Membership WITH (ROWLOCK)
    SET
         Email            = @Email,
         LoweredEmail     = LOWER(@Email),
         Comment          = @Comment,
         IsApproved       = @IsApproved,
         LastLoginDate    = @LastLoginDate
    WHERE
       @UserId = UserId

    IF( @@ERROR <> 0 )
        GOTO Cleanup

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN -1
END
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertClientDepositDay]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertClientDepositDay]
@ClientId int,
@Frequency varchar(10),
@DepositDay int,
@Amount money,
@Occurrence int = NULL,
@DepositMethod varchar(50),
@BankAccountId int = NULL,
@UserId int
AS
Begin
	Insert Into tblCLientDepositDay(ClientId, Frequency, DepositDay, DepositAmount, Occurrence, Created, CreatedBy, LastModified, LastModifiedBy, DepositMethod, BankAccountId) 
	Values (@ClientId, @Frequency, @DepositDay, @Amount, @Occurrence, GetDate(), @UserId, GetDate(), @UserId, @DepositMethod, @BankAccountId) 
	
	select scope_identity()
End
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCommunicationForUserbak]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetCommunicationForUserbak]
	(
		@returntop varchar (50) = '100 percent',
		@userid int,
		@shortvalue int = 150
	)

as


exec
(
	'select
		''Note'' as type,
		t.lastmodified as [date],
		tblclient.clientid,
		tblperson.firstname + '' '' + tblperson.lastname as [client],
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as [by],
		t.[value] as message,
		substring(t.[value], 0, ' + @shortvalue + ') + ''...'' as shortmessage,
		tblcreatedby.firstname + '' '' + tblcreatedby.lastname as createdbyname,
		tbllastmodifiedby.firstname + '' '' + tbllastmodifiedby.lastname as lastmodifiedby,
		t.noteid
	from
		(
		select top ' + @returntop + '
			*
		from
			tblnote
		where
			(tblnote.lastmodifiedby = ' + @userid + ')
		)
		as t inner join
		tblclient on t.clientid = tblclient.clientid inner join
		tblperson on tblclient.primarypersonid = tblperson.personid left outer join
		tbluser as tblcreatedby on t.createdby = tblcreatedby.userid left outer join
		tbluser as tbllastmodifiedby on t.lastmodifiedby = tbllastmodifiedby.userid
	order by
		t.noteid desc'
)
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateAttorney]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <01 - 22 March 2010>
      Category    : [TimeMatter]
      Type        : {Update}
      Decription  : Updates the attorney Details         
				   
*/
CREATE procedure [dbo].[stp_UpdateAttorney]
(
	@AttorneyID int
,	@FirstName varchar(50)
,	@LastName varchar(50)
,	@MiddleName varchar(50)
,	@Suffix varchar(50) = null
,	@Address1 varchar(150) = null
,	@Address2 varchar(150) = null
,	@City varchar(50) = null
,	@State varchar(50) = null
,	@Zip varchar(15) = null
,	@Phone1 varchar(15) = null
,	@Phone2 varchar(15) = null
,	@Fax varchar(15) = null
,	@LastModifiedBy int
,	@EmailAddress nvarchar(50) = null
,	@EmailAddress2 nvarchar(50) = null
,	@EmailAddress3 nvarchar(50) = null
)
as
begin
/*
	Purpose:	Updates an attorney record.

	History:
	12/03/07	jhernandez		Created.
	12/07/07	jhernandez		Added optional parameters
*/

update 
	tblAttorney
set
	FirstName = @FirstName
,	LastName = @LastName
,	MiddleName = @MiddleName
,	Suffix	= @Suffix
,	Address1 = @Address1
,	Address2 = @Address2
,	City = @City
,	State = @State
,	Zip = @Zip
,	Phone1 = @Phone1
,	Phone2 = @Phone2
,	Fax = @Fax
,	LastModified = getdate()
,	LastModifiedBy = @LastModifiedBy
,	EmailAddress = @EmailAddress
,	EmailAddress2 = @EmailAddress2
,	EmailAddress3 = @EmailAddress3

where
	AttorneyID = @AttorneyID


end
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneyNotes]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AttorneyNotes]
(
	@clientid int
)
as
begin

select 
	u.firstname + ' ' + u.lastname [createdby], 
	n.note, 
	t.name [usertype],
	g.name [usergroup],
	n.created 
from tblattorneynotes n 
join tbluser u on u.userid = n.createdby 
join tblusergroup g on g.usergroupid = u.usergroupid
join tblusertype t on t.usertypeid = u.usertypeid
where n.clientid = @clientid 
order by n.created desc


end
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetNumberOfUsersOnline]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetNumberOfUsersOnline]
    @ApplicationName            nvarchar(256),
    @MinutesSinceLastInActive   int,
    @CurrentTimeUtc             datetime
AS
BEGIN
    DECLARE @DateActive datetime
    SELECT  @DateActive = DATEADD(minute,  -(@MinutesSinceLastInActive), @CurrentTimeUtc)

    DECLARE @NumOnline int
    SELECT  @NumOnline = COUNT(*)
    FROM    dbo.aspnet_Users u(NOLOCK),
            dbo.aspnet_Applications a(NOLOCK),
            dbo.aspnet_Membership m(NOLOCK)
    WHERE   u.ApplicationId = a.ApplicationId                  AND
            LastActivityDate > @DateActive                     AND
            a.LoweredApplicationName = LOWER(@ApplicationName) AND
            u.UserId = m.UserId
    RETURN(@NumOnline)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateClientDepositDay]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_UpdateClientDepositDay]
@ClientDepositId int,
@ClientId int,
@Frequency varchar(10),
@DepositDay int,
@Amount money,
@Occurrence int = NULL,
@DepositMethod varchar(50),
@BankAccountId int = NULL,
@UserId int
AS
	Update tblCLientDepositDay Set
	ClientId = @ClientId,
	Frequency = @Frequency,
	DepositDay = @DepositDay,
	DepositAmount = @Amount,
	Occurrence = @Occurrence,
	DepositMethod = @DepositMethod,
	BankAccountId = @BankAccountId,
	LastModified = GetDate(),
	LastModifiedBy = @UserId
	Where ClientDepositId = @ClientDepositId
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneyGetClientInfo]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_AttorneyGetClientInfo]
	(
		@attorneyId int,
		@strWhere varchar (8000) = '',
		@orderby varchar (8000) = 'tblPerson.LastName ASC'
	)

as

declare @attorneystateid int
declare @attorneycompanyid int
set @attorneystateid=(select stateid from tblattorney where attorneyid=@attorneyid)
set @attorneycompanyid=(select companyid from tblattorney where attorneyid=@attorneyid)

exec('

SELECT 
	tblClient.ClientID,
	tblClient.AccountNumber,
	tblClient.DepositMethod, 
	tblClient.DepositAmount, 
	tblPerson.FirstName, 
	tblPerson.LastName, 
	tblPerson.SSN,
	tblNote.[Value] AS Comments,
	tblAgencyExtraFields01.LeadNumber, 
	tblAgencyExtraFields01.DateSent, 
	tblAgencyExtraFields01.DateReceived, 
	tblAgencyExtraFields01.SeidemanPullDate, 
	tblAgencyExtraFields01.DebtTotal, 
	tblAgencyExtraFields01.MissingInfo,
	tblCurrentStatus.ClientStatusId as ClientStatusId,
	tblClientStatus.[Name] as ClientStatusName,
	tblClient.ReceivedLSA

FROM 
	tblClient INNER JOIN 
	tblPerson ON tblClient.PrimaryPersonId=tblPerson.PersonId LEFT OUTER JOIN 
	tblAgencyExtraFields01 ON tblClient.ClientId=tblAgencyExtraFields01.ClientId LEFT OUTER JOIN
	(SELECT RoadmapId, ClientId, ClientStatusId FROM tblRoadmap WHERE RoadmapId=
		(SELECT TOP 1 RoadmapId FROM tblRoadmap a where a.ClientId=tblRoadmap.ClientId ORDER BY RoadmapId DESC))  tblCurrentStatus ON tblClient.ClientId=tblCurrentStatus.ClientId LEFT OUTER JOIN
	tblClientStatus ON tblCurrentStatus.ClientStatusId=tblClientStatus.ClientStatusId LEFT OUTER JOIN
	(SELECT RoadmapId, ClientId, Created AS Enrolled FROM tblRoadmap WHERE ClientStatusId=5) tblEnrolled ON tblClient.ClientId=tblEnrolled.ClientId LEFT OUTER JOIN
	tblNote ON tblAgencyExtraFields01.NoteId=tblNote.NoteId

WHERE
	tblclient.companyid=' + @attorneycompanyid + 
	' and tblperson.stateid = ' + @attorneystateid 
	+ ' ' + @strWhere + '
ORDER BY '
	+ @OrderBy
)
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateAttorneybak]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_UpdateAttorneybak]
(
	@AttorneyID int
,	@FirstName varchar(50)
,	@LastName varchar(50)
,	@MiddleName varchar(50)
,	@Suffix varchar(50) = null
,	@Address1 varchar(150) = null
,	@Address2 varchar(150) = null
,	@City varchar(50) = null
,	@State varchar(50) = null
,	@Zip varchar(15) = null
,	@Phone1 varchar(15) = null
,	@Phone2 varchar(15) = null
,	@Fax varchar(15) = null
,	@LastModifiedBy int
)
as
begin
/*
	Purpose:	Updates an attorney record.

	History:
	12/03/07	jhernandez		Created.
	12/07/07	jhernandez		Added optional parameters
*/

update 
	tblAttorney
set
	FirstName = @FirstName
,	LastName = @LastName
,	MiddleName = @MiddleName
,	Suffix	= @Suffix
,	Address1 = @Address1
,	Address2 = @Address2
,	City = @City
,	State = @State
,	Zip = @Zip
,	Phone1 = @Phone1
,	Phone2 = @Phone2
,	Fax = @Fax
,	LastModified = getdate()
,	LastModifiedBy = @LastModifiedBy
where
	AttorneyID = @AttorneyID


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAssignLeads]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 07/06/2009
-- Description:	Lead Assignments
-- =============================================
CREATE PROCEDURE [dbo].[stp_GetAssignLeads] 
	AS
BEGIN
	SET NOCOUNT ON;
SELECT distinct la.LeadApplicantID,
 0 AS Selected, 
la.FullName AS Applicant, 
s.Abbreviation AS State, 
la.HomePhone AS Home, 
la.BusinessPhone AS Business, 
CASE WHEN rm.reason IS NULL OR rm.reason LIKE '%INITALIZE%' THEN ls.Description ELSE ls.description + '/' + rm.Reason END AS Status, 
u.FirstName + ' ' + u.LastName AS Rep, 
DATEDIFF(day, la.Created, GETDATE()) AS Aging 
FROM tblLeadApplicant AS la 
LEFT JOIN tblLeadStatus AS ls ON ls.StatusID = la.StatusID 
LEFT  JOIN tblLeadRoadmap AS rm ON rm.LeadApplicantID = la.LeadApplicantID 
LEFT JOIN tblState AS s ON s.StateID = la.StateID 
LEFT JOIN tblUser AS u ON u.UserID = la.RepID
WHERE (len(la.firstname) > 0 or len(la.lastname) > 0)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_LOR_getAttorneySignatureInfo]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LetterTemplates_LOR_getAttorneySignatureInfo]

	(
		@clientid int
	)
AS
BEGIN
	declare @state varchar(2)
	declare @companyid int

	select @state = s.abbreviation, @companyid = c.companyid
	from tblClient c 
		inner join tblPerson p on c.PrimaryPersonID = p.PersonID
		inner join tblstate s on s.stateid = p.stateid
	where c.clientid = @clientid
	
	declare @attyName varchar(150)
	declare @attySigPath varchar(150)

	SELECT     
	@attyName = a.firstname + case when a.middlename is null or a.middlename = '' then ' ' else ' ' + a.middlename + ' ' end + a.lastname + case when a.suffix is null or a.suffix = '' then ' ' else ' ' + a.suffix + ' ' end
	, @attySigPath = a.sigpath
	FROM tblAttorney AS a INNER JOIN
	tblAttyStates AS [as] ON a.AttorneyID = [as].AttorneyID INNER JOIN
	tblAttyRelation AS ar ON a.AttorneyID = ar.AttorneyID
	where ar.AttyRelation = 'Associated' and [as].state = @state and ar.CompanyID = @companyid and not a.sigpath is null and  not a.sigpath like '%LitigationLocalCounsel%'
	ORDER BY [as].State, ar.CompanyID

	if (@attySigPath is null)
		BEGIN
			select
				@attyName = contact1
				, @attySigPath = sigpath
			FROM tblCompany
			Where CompanyID = @companyid
		END

	select @attyName[AttorneyName],@attySigPath[SigPath]
END


GRANT EXEC ON stp_LetterTemplates_LOR_getAttorneySignatureInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UsersInRoles_AddUsersToRoles]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_UsersInRoles_AddUsersToRoles]
	@ApplicationName  nvarchar(256),
	@UserNames		  nvarchar(4000),
	@RoleNames		  nvarchar(4000),
	@CurrentTimeUtc   datetime
AS
BEGIN
	DECLARE @AppId uniqueidentifier
	SELECT  @AppId = NULL
	SELECT  @AppId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
	IF (@AppId IS NULL)
		RETURN(2)
	DECLARE @TranStarted   bit
	SET @TranStarted = 0

	IF( @@TRANCOUNT = 0 )
	BEGIN
		BEGIN TRANSACTION
		SET @TranStarted = 1
	END

	DECLARE @tbNames	table(Name nvarchar(256) NOT NULL PRIMARY KEY)
	DECLARE @tbRoles	table(RoleId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @tbUsers	table(UserId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @Num		int
	DECLARE @Pos		int
	DECLARE @NextPos	int
	DECLARE @Name		nvarchar(256)

	SET @Num = 0
	SET @Pos = 1
	WHILE(@Pos <= LEN(@RoleNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @RoleNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@RoleNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@RoleNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbRoles
	  SELECT RoleId
	  FROM   dbo.aspnet_Roles ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredRoleName AND ar.ApplicationId = @AppId

	IF (@@ROWCOUNT <> @Num)
	BEGIN
		SELECT TOP 1 Name
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT ar.LoweredRoleName FROM dbo.aspnet_Roles ar,  @tbRoles r WHERE r.RoleId = ar.RoleId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(2)
	END

	DELETE FROM @tbNames WHERE 1=1
	SET @Num = 0
	SET @Pos = 1

	WHILE(@Pos <= LEN(@UserNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @UserNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@UserNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@UserNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbUsers
	  SELECT UserId
	  FROM   dbo.aspnet_Users ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredUserName AND ar.ApplicationId = @AppId

	IF (@@ROWCOUNT <> @Num)
	BEGIN
		DELETE FROM @tbNames
		WHERE LOWER(Name) IN (SELECT LoweredUserName FROM dbo.aspnet_Users au,  @tbUsers u WHERE au.UserId = u.UserId)

		INSERT dbo.aspnet_Users (ApplicationId, UserId, UserName, LoweredUserName, IsAnonymous, LastActivityDate)
		  SELECT @AppId, NEWID(), Name, LOWER(Name), 0, @CurrentTimeUtc
		  FROM   @tbNames

		INSERT INTO @tbUsers
		  SELECT  UserId
		  FROM	dbo.aspnet_Users au, @tbNames t
		  WHERE   LOWER(t.Name) = au.LoweredUserName AND au.ApplicationId = @AppId
	END

	IF (EXISTS (SELECT * FROM dbo.aspnet_UsersInRoles ur, @tbUsers tu, @tbRoles tr WHERE tu.UserId = ur.UserId AND tr.RoleId = ur.RoleId))
	BEGIN
		SELECT TOP 1 UserName, RoleName
		FROM		 dbo.aspnet_UsersInRoles ur, @tbUsers tu, @tbRoles tr, aspnet_Users u, aspnet_Roles r
		WHERE		u.UserId = tu.UserId AND r.RoleId = tr.RoleId AND tu.UserId = ur.UserId AND tr.RoleId = ur.RoleId

		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(3)
	END

	INSERT INTO dbo.aspnet_UsersInRoles (UserId, RoleId)
	SELECT UserId, RoleId
	FROM @tbUsers, @tbRoles

	IF( @TranStarted = 1 )
		COMMIT TRANSACTION
	RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_getLeadNotes]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_LetterTemplates_getLeadNotes]
(
@applicantID int
)
as
BEGIN
	select Created, [value]
	from tblLeadNotes 
	where leadapplicantid = @applicantID
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_User_IoU]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_User_IoU]
	(
		@functionid int,
		@userid int,
		@canview bit,
		@canadd bit,
		@caneditown bit,
		@caneditall bit,
		@candeleteown bit,
		@candeleteall bit
	)

as

exec stp_permissions_user_iou_single @functionid,@userid,1,@canview
exec stp_permissions_user_iou_single @functionid,@userid,2,@canadd
exec stp_permissions_user_iou_single @functionid,@userid,3,@caneditown
exec stp_permissions_user_iou_single @functionid,@userid,4,@caneditall
exec stp_permissions_user_iou_single @functionid,@userid,5,@candeleteown
exec stp_permissions_user_iou_single @functionid,@userid,6,@candeleteall
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertCallMessageLog]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertCallMessageLog]
@Message varchar(4000) = Null,
@UserId int
AS
BEGIN
	Insert Into tblCallMessageLog(Message, MessageDate, UserId)
	Values (@Message, GetDate(), @UserId)
	
	Select scope_identity()
END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getExportJobById]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_enrollment_getExportJobById]
@ExportJobId int
AS
Select le.ExportJobId, le.ExportDate, 
isnull(u.firstName,'') + ' ' + isnull(u.LastName,'') as [ExecutedBy], 
CASE le.Status 
	WHEN 0 THEN 'Exporting'
	WHEN 1 THEN 'Completed'
	WHEN 2 THEN 'Failed'
	ELSE 'Unknown'
END AS [Status],
le.Notes,
(Select Count(LeadExportId) From tblLeadExportDetail Where ExportJobId = le.ExportJobId) as [ApplicantCount],
(Select Count(LeadExportId) From tblLeadExportDetail Where ExportJobId = le.ExportJobId and exportstatus = 1) as [Succeeded],
(Select Count(LeadExportId) From tblLeadExportDetail Where ExportJobId = le.ExportJobId and exportstatus = 2) as [Failed], 
(Select Count(LeadExportId) From tblLeadExportDetail Where ExportJobId = le.ExportJobId and exportstatus not in (1,2)) as [LeftPending]  
From tblLeadExportJob le
left join tbluser u on le.executedBy = u.userId 
Where le.ExportJobId = @ExportJobId
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientIntakeInfo]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetClientIntakeInfo]
@AccoutnID  bigint
As
Begin
select [FirmAccount#] = cif.AccountID,  [Litigation Document]=LitigationDocument,
[Date Client Received Document]=convert(varchar,ClientDocReceivedDate,110), [How Documents Received]=HowDocReceived,
[Is plaintiff a collection company?]=case isplaintiffcompany when 1 then 'Yes' when 0 then 'No' else '' end,
[Do you dispute the amount?]=case isamountdispute when 1 then 'Yes' when 0 then 'No' else '' end,
[Amount]=Amount,
[Do you own any real estate?]=case isrealestateowner when 1 then 'Yes' when 0 then 'No' else '' end,
[is this your primary residence1?]=case isresidenceofpropertyone  when 1 then 'Yes' when 0 then 'No' else '' end,
[How long have you owned it1?]=durationownerdpropertyone,
[Approximate fair market value1]= Convert(varchar,Convert(money,AppMarketvalpropertyone ),1),--AppMarketvalpropertyone,
[What is the payoff1]=Convert(varchar,Convert(money,payoffpropertyone ),1),--payoffpropertyone,
[Any liens on property1]=case Liensonpropertyone when 1 then 'Yes' else 'No' end ,
[Mortgage Payment1]=Convert(varchar,Convert(money,Totalequitypropertyone ),1),--Totalequitypropertyone,
[Are you current on house payments1]=Housepaymentspropertyone,
[How many people live there1]=peoplelivepropertyone,
[Is this a rental property1?]=case IsRentalPropertyOne  when 1 then 'Yes' when 0 then 'No' else '' end,
[How much is the rent1?]=Convert(varchar,Convert(money,RentOnPropertyOne ),1),--RentOnPropertyOne,
[is this your primary residence2?]=case isresidenceofpropertytwo  when 1 then 'Yes' when 0 then 'No' else '' end,
[How long have you owned it2?]=durationownerdpropertytwo,
[Approximate fair market value2]=Convert(varchar,Convert(money,AppMarketvalpropertytwo ),1),--AppMarketvalpropertytwo,
[What is the payoff2]=Convert(varchar,Convert(money,payoffpropertytwo ),1),--payoffpropertytwo,
[Any liens on property2]=case Liensonpropertytwo when 1 then 'Yes' else 'No' end ,
[Mortgage Payment2]=Convert(varchar,Convert(money,Totalequitypropertytwo ),1),--Totalequitypropertytwo,
[Are you current on house payments2]=Housepaymentspropertytwo,
[How many people live there2]=peoplelivepropertytwo,
[Is this a rental property2?]=case IsRentalPropertyTwo  when 1 then 'Yes' when 0 then 'No' else '' end,
[How much is the rent2?]=Convert(varchar,Convert(money,RentOnPropertyTwo ),1),--RentOnPropertyTwo,
[Are you employed?]=case Iscurrentlyworking when 1 then 'Yes' when 0 then 'No' else '' end,
[Are you self employed?]=case IsSelfEmployed when 1 then 'Yes' when 0 then 'No' else '' end,
[Employer/Company]=employername,
[Length of the current employment]= cast(cast(currentemployerduration /12 as int) as varchar) +' years ' + cast(cast(currentemployerduration %12 as int) as varchar)+' months',
[Take home pay]=Convert(varchar,Convert(money,takehomepay ),1),--takehomepay,
[Per]=per,
[Any other wage garnishments]=otherwage,
[Other sources of income]=otherincomesource,
[Receiving any type of Aid?]=case isreceivingaid when 1 then 'Yes' when 0 then 'No' else '' end,
[Type of Aid?]=typeofaid,
[Do you have bank accounts?]=case haveBankAccs when 1 then 'Yes' when 0 then 'No' else '' end,
[Name of the bank1]=bankaccone,
[Source of money deposited in account1]=BankAmtsourceaccone,
[Approximate balance in account1]=Convert(varchar,Convert(money,AppBalanceaccone ),1),--AppBalanceaccone,
[Account Type1]=case AccTypeOne when 1 then 'Checking' when 2 then 'Saving' when 3 then ' Others' end,
[Name of the bank2]=bankacctwo,
[Source of money deposited in account2]=BankAmtsourceacctwo,
[Approximate balance in account2]=Convert(varchar,Convert(money,AppBalanceacctwo ),1),--AppBalanceacctwo,
[Account Type2]=case AccTypeTwo when 1 then 'Checking' when 2 then 'Saving' when 3 then ' Others' end,
[Do you have other assets?]=case haveOtherAssets when 1 then 'Yes' when 0 then 'No' else '' end,
[Assets]=Assets ,
[Client declined additional legal services?]=case declinedlegalservices when 1 then 'Yes' when 0 then 'No' else '' end,
[Client sent to local counsel?]=case sentlocalcounsel when 1 then 'Yes' when 0 then 'No' else '' end,
[Note]=notes,
[Verified]=case isverified when 1 then 'Yes' when 0 then 'No' else '' end,
[VerifiedDate]=verifieddate,
[VerifiedBy]=(select FirstName +' '+isnull(lastname,'') from tbluser where userid=cif.VerifiedBy),
[LegalServicesClient]=(select FirstName +' '+isnull(lastname,'') from tbluser where userid=LegalServicesClientID),
 case [FeePaidBy] when -1 then 'By Client' 
else (select [name] from tblCompany  where companyid=[FeePaidBy])
end  as [FeePaid],
Phone=[Phone],
Levies1=[Levies1],
Levies2=[Levies2],
IReceived =Convert(varchar,Convert(money,[IReceived] ),1),
WageVal, TypeOfAidPension, TypeOfAidUnemp, TypeOfAidRetire, 
AmtReceivedPension =Convert(varchar,Convert(money,AmtReceivedPension ),1),
AmtReceivedUnemp =Convert(varchar,Convert(money,AmtReceivedUnemp ),1), 
AmtReceivedRetire =Convert(varchar,Convert(money,AmtReceivedRetire ),1),
[who is the plantiff?]=whoisplantiff
,[Language] = l.name
from tblclientintakeform cif with(nolock)
inner join tblaccount a with(nolock) on a.accountid = cif.accountid
inner join tblclient c with(nolock) on c.clientid = a.clientid
inner join tblperson p with(nolock) on p.personid = c.primarypersonid
inner join tbllanguage l with(nolock) on l.languageid = p.languageid
where cif.accountid=@AccoutnID  
End
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UsersInRoles_GetRolesForUser]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_UsersInRoles_GetRolesForUser]
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL

    SELECT  @UserId = UserId
    FROM    dbo.aspnet_Users
    WHERE   LoweredUserName = LOWER(@UserName) AND ApplicationId = @ApplicationId

    IF (@UserId IS NULL)
        RETURN(1)

    SELECT r.RoleName
    FROM   dbo.aspnet_Roles r, dbo.aspnet_UsersInRoles ur
    WHERE  r.RoleId = ur.RoleId AND r.ApplicationId = @ApplicationId AND ur.UserId = @UserId
    ORDER BY r.RoleName
    RETURN (0)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getNotes]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_enrollment_getNotes]
(
	@applicantID int
)
as
BEGIN
	IF @applicantID <> 0
		BEGIN
			SELECT LeadApplicantID,LeadNoteID,NoteTypeID, NoteType, Created, Value
			FROM tblLeadNotes AS ln
			WHERE (LeadApplicantID = @applicantID)
			ORDER BY Modified desc
		END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Statistic_ClientGrouped]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Statistic_ClientGrouped]
	(
		@dategrouping int = 2,
		@datapoints int = 9,
		@agencyid int = null,
		@attorneyid int = null
	)
 
as

declare @attorneystateid int
declare @attorneycompanyid int
if not @attorneyid is null begin
	set @attorneystateid=(select stateid from tblattorney where attorneyid=@attorneyid)
	set @attorneycompanyid=(select companyid from tblattorney where attorneyid=@attorneyid)
end


declare @crAgency varchar(255)
set @cragency=''
declare @crattorney varchar(255)
set @crattorney=''



declare @datefield varchar (500)
declare @datefield2 varchar (500)
declare @field varchar(50)
set @field='r.transactiondate'
declare @field2 varchar(50)
set @field2='c.created'
declare @datepart varchar(10)

if @dategrouping = 0 begin-- daily grouping
	set @datefield = 'convert(datetime, convert(varchar, ' + @field + ', 101))'
	set @datefield2 = 'convert(datetime, convert(varchar, ' + @field2 + ', 101))'
	set @datepart = 'day'
end else if @dategrouping = 1 begin-- weekly grouping
	set @datefield = 'dateadd(day, 1 - datepart(dw, ( convert(varchar, ' + @field + ', 101) )), ( convert(varchar, ' + @field + ', 101) ))'
	set @datefield2 = 'dateadd(day, 1 - datepart(dw, ( convert(varchar, ' + @field2 + ', 101) )), ( convert(varchar, ' + @field2 + ', 101) ))'
	set @datepart = 'week'
end else if @dategrouping = 2 begin-- monthly grouping
	set @datefield = 'convert(datetime, convert(varchar(2), month(' + @field + ')) + N''/1/'' + convert(varchar(4), year(' + @field + ')))'
	set @datefield2 = 'convert(datetime, convert(varchar(2), month(' + @field2 + ')) + N''/1/'' + convert(varchar(4), year(' + @field2 + ')))'
	set @datepart = 'month'
end else if @dategrouping = 3 begin-- yearly grouping
	set @datefield = 'convert(datetime, N''1/1/'' + convert(varchar(12), year(' + @field + ')))'
	set @datefield2 = 'convert(datetime, N''1/1/'' + convert(varchar(12), year(' + @field2 + ')))'
	set @datepart = 'year'
end

/*
Commitments
*/

if not @agencyid is null 
	set @cragency=' and nc.agencyid=' + convert(varchar,@agencyid)

if not @attorneyid is null 
	set @crattorney=' and nc.companyid=' + convert(varchar,@attorneycompanyid) + 
					' and p.stateid=' + convert(varchar,@attorneystateid)

exec('

select top '+@datapoints+'
	''Commitments'' as statistic,
	count(timeago) as [count],
	timeago as timeunits
from
(
	select
		datediff
		(
			'+@datepart+',
			'+@datefield2+',
			getdate()
		) as timeago,
		('+@datefield2+') as created
	from
		(
		select
			(select top 1 created from tblroadmap nr where nr.clientid=nc.clientid and clientstatusid=5 order by nr.created asc, nr.roadmapid asc) as created,
			nc.currentclientstatusid,
			nc.clientid
		from
			tblclient nc inner join
			tblperson p on nc.primarypersonid=p.personid
		where
			not nc.created is null
		' + @cragency + @crattorney + '
		) c

) t
where
	timeago >= 0
	and timeago < '+@datapoints+'
group by
	t.timeago,t.created
order by 
	t.created desc
')


/*
Completions
*/
if not @agencyid is null 
	set @cragency=' and nc.agencyid=' + convert(varchar,@agencyid)

if not @attorneyid is null 
	set @crattorney=' and nc.companyid=' + convert(varchar,@attorneycompanyid) + 
					' and p.stateid=' + convert(varchar,@attorneystateid)

exec('
select top '+@datapoints+'
	''Completions'' as statistic,
	count(timeago) as [count],
	timeago as timeunits
from
(
	select
		datediff
		(
			'+@datepart+',
			'+@datefield2+',
			getdate()
		) as timeago,
		('+@datefield2+') as created
	from
		(
		select
			(select top 1 created from tblroadmap nr where nr.clientid=nc.clientid and clientstatusid=18 order by nr.created desc, nr.roadmapid desc) as created,
			nc.currentclientstatusid,
			nc.clientid
		from
			tblclient nc inner join
			tblperson p on nc.primarypersonid=p.personid
		where
			not nc.created is null
			and nc.currentclientstatusid=18
		' + @cragency + @crattorney + '
		) c

) t
where
	timeago >= 0
	and timeago < '+@datapoints+'
group by
	t.timeago,t.created
order by 
	t.created desc
')

/*
New cases
*/
if not @agencyid is null 
	set @cragency=' and c.agencyid=' + convert(varchar,@agencyid)

if not @attorneyid is null 
	set @crattorney=' and c.companyid=' + convert(varchar,@attorneycompanyid) + 
					' and p.stateid=' + convert(varchar,@attorneystateid)

exec('

select top '+@datapoints+'
	''New Cases'' as statistic,
	count(timeago) as [count],
	timeago as timeunits
from
(
	select
		datediff
		(
			'+@datepart+',
			'+@datefield2+',
			getdate()
		) as timeago,
		('+@datefield2+') as created
	from
		tblclient c inner join
		tblperson p on c.primarypersonid=p.personid
	where
		1=1 ' + @cragency + @crattorney + '
) t
where
	timeago >= 0
	and timeago < '+@datapoints+'
group by
	t.timeago,t.created
order by 
	t.created desc
')


/*
Cancellations
*/

if not @agencyid is null 
	set @cragency=' and nc.agencyid=' + convert(varchar,@agencyid)

if not @attorneyid is null 
	set @crattorney=' and nc.companyid=' + convert(varchar,@attorneycompanyid) + 
					' and p.stateid=' + convert(varchar,@attorneystateid)

exec('

select top '+@datapoints+'
	''Cancellations'' as statistic,
	count(timeago) as [count],
	timeago as timeunits
from
(
	select
		datediff
		(
			'+@datepart+',
			'+@datefield2+',
			getdate()
		) as timeago,
		('+@datefield2+') as created
	from
		(
		select
			(select top 1 created from tblroadmap nr where nr.clientid=nc.clientid and clientstatusid=17 order by nr.created desc, nr.roadmapid desc) as created,
			nc.currentclientstatusid,
			nc.clientid
		from
			tblclient nc inner join
			tblperson p on nc.primarypersonid=p.personid
		where
			nc.currentclientstatusid=17
			and not nc.created is null
		' + @cragency + @crattorney + '
		) c
		
) t
where
	timeago >= 0
	and timeago < '+@datapoints+'
group by
	t.timeago,t.created
order by 
	t.created desc
')
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertPhoneStatusLog]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertPhoneStatusLog]
@StatusName varchar(100),
@UserId int
AS
BEGIN
	Insert Into tblPhoneStatusLog(StatusName, Created, UserId)
	Values (@StatusName, GetDate(), @UserId)
	
	Select scope_identity()
END
GO
/****** Object:  StoredProcedure [dbo].[stp_AttorneyDetailbak]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_AttorneyDetailbak]
(
	@AttorneyID int
)
as
begin
/*
	History:
	jhernandez		12/07/07		
*/

select 
	AttorneyID
,	a.FirstName
,	a.LastName
,	isnull(MiddleName,'') [MiddleName]
,	isnull(Suffix,'') [Suffix]
,	isnull(Address1,'') [Address1]
,	isnull(Address2,'') [Address2]
,	isnull(City,'') [City]
,	isnull(State,'') [State]
,	isnull(Zip,'') [Zip]
,	isnull(Phone1,'') [Phone1]
,	isnull(Phone2,'') [Phone2]
,	isnull(Fax,'') [Fax]
,	isnull(a.UserID,-1) [UserID]
,	isnull(u.Username,'') [Username]
from 
	tblAttorney a
left join
	tblUser u on u.UserID = a.UserID
where 
	AttorneyID = @AttorneyID


select 
	s.Name
,	s.Abbreviation [State]
,	isnull(a.StateBarNum,'') [StateBarNum]
,	case when AttorneyID is not null then 'true' else 'false' end [IsRelated]
from
	tblState s
left join tblAttyStates a
	on a.State = s.Abbreviation
	 and a.AttorneyID = @AttorneyID
order by
	s.Name


select 
	c.CompanyID
,	c.ShortCoName
,	isnull(r.AttyRelation,'') [Relation]
,	case when r.AttorneyID is not null then 'true' else 'false' end [IsRelated]
from 
	tblCompany c
left join tblAttyRelation r
	on r.CompanyID = c.CompanyID
	 and r.AttorneyID = @AttorneyID
order by
	c.ShortCoName


end
GO
/****** Object:  StoredProcedure [dbo].[stp_getClientByPhone]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_getClientByPhone]
@PhoneNumber varchar(20)
AS
Select top 1 p.ClientId From 
tblperson p 
inner join tblPersonPhone pp on pp.personid = p.personid
inner join tblphone ph on ph.phoneid = pp.phoneid
where  isnull(ph.areacode, '') + isnull(ph.number,'') = @phonenumber
order by p.personid  desc
GO
/****** Object:  StoredProcedure [dbo].[stp_VerificationCall_GetClientInfo]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_VerificationCall_GetClientInfo]
@VerificationId int
AS
	Select v.ClientId,
	c.AccountNumber,
	isnull(p.FirstName,'') + ' ' + isnull(p.LastName,'') as [FullName],
	v.LanguageId,
	v.callidkey,
	isnull(u.firstname,'') + ' ' + isnull(u.lastname,'') as [VerifiedBy]
	From tblVerificationCall v
	inner join tblClient c on c.clientid = v.clientid
	inner join tblPerson p on p.PersonId = c.PrimaryPersonId  
	inner join tbluser u on u.userid = v.executedby
	Where v.VerificationCallId = @VerificationId
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertLeadCalculator]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_InsertLeadCalculator]
(
	@LeadApplicantID int,
	@TotalDebt money
)
as
begin

	insert tblLeadCalculator (
		LeadApplicantID,TotalDebt,SettlementFeePct,
		InitialDeposit,SubMaintenanceFee,DepositCommittment,DateOfFirstDeposit,ReoccurringDepositDay,
		MaintenanceFeeCap,ServiceFeePerAcct,NoAccts,EstGrowth,
		PBMIntRate,PBMMinAmt,PBMMinPct)
	select @LeadApplicantID, @TotalDebt, cast(cast(sfp.value as money) * 100 as int),
		0,0,0,'1/1/1900',1,
		cast(cap.value as money), cast(per.value as money), 1, cast(inf.value as money) * 100, 
		cast(apr.value as money) * 100, cast(minamt.value as money), cast(minpct.value as money) * 100
	from tblProperty sfp, tblProperty cap, tblProperty per, tblProperty inf, tblProperty apr, tblProperty minamt, tblProperty minpct
	where sfp.name = 'EnrollmentSettlementPercentage'
	and cap.name = 'EnrollmentMaintenanceFeeCap'
	and per.name = 'EnrollmentMaintenanceFee'
	and apr.name = 'EnrollmentPBMAPR'
	and inf.name = 'EnrollmentInflation'
	and minamt.name = 'EnrollmentPBMMinimum'
	and minpct.name = 'EnrollmentPBMPercentage'		

end
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UsersInRoles_IsUserInRole]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_UsersInRoles_IsUserInRole]
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(2)
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    DECLARE @RoleId uniqueidentifier
    SELECT  @RoleId = NULL

    SELECT  @UserId = UserId
    FROM    dbo.aspnet_Users
    WHERE   LoweredUserName = LOWER(@UserName) AND ApplicationId = @ApplicationId

    IF (@UserId IS NULL)
        RETURN(2)

    SELECT  @RoleId = RoleId
    FROM    dbo.aspnet_Roles
    WHERE   LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId

    IF (@RoleId IS NULL)
        RETURN(3)

    IF (EXISTS( SELECT * FROM dbo.aspnet_UsersInRoles WHERE  UserId = @UserId AND RoleId = @RoleId))
        RETURN(1)
    ELSE
        RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_Permissions_UserType_IoU]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_Permissions_UserType_IoU]
	(
		@functionid int,
		@usertypeid int,
		@canview bit,
		@canadd bit,
		@caneditown bit,
		@caneditall bit,
		@candeleteown bit,
		@candeleteall bit
	)

as

exec stp_permissions_usertype_iou_single @functionid,@usertypeid,1,@canview
exec stp_permissions_usertype_iou_single @functionid,@usertypeid,2,@canadd
exec stp_permissions_usertype_iou_single @functionid,@usertypeid,3,@caneditown
exec stp_permissions_usertype_iou_single @functionid,@usertypeid,4,@caneditall
exec stp_permissions_usertype_iou_single @functionid,@usertypeid,5,@candeleteown
exec stp_permissions_usertype_iou_single @functionid,@usertypeid,6,@candeleteall
GO
/****** Object:  StoredProcedure [dbo].[stp_getProductSourceFromDNIS]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_getProductSourceFromDNIS]
@CallIDKey varchar(50)
AS
BEGIN

declare @productcode varchar(50)

select @productcode = null

select top 1 @productcode = dnis from tblcalldnis where callidkey = @CallIdKey

select top 1 p.productid, p.cost, p.defaultsourceid from tblleadproducts p
where p.active = 1
and cast(convert(varchar ,getdate(), 110)  + ' ' + isnull(p.starttime,'12:00 AM') as datetime) < = getdate()  and cast(convert(varchar ,getdate(), 110)  + ' ' + isnull(p.endtime, '11:59:59.999 PM') as datetime) > getdate()   
and p.productcode=@productcode
and p.IsDNIS = 1

END
GO
/****** Object:  StoredProcedure [dbo].[stp_enrollment_getExportJobs]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_enrollment_getExportJobs]
AS
Select le.ExportJobId, le.ExportDate, 
isnull(u.firstName,'') + ' ' + isnull(u.LastName,'') as [ExecutedBy], 
CASE le.Status 
	WHEN 0 THEN 'Exporting'
	WHEN 1 THEN 'Completed'
	WHEN 2 THEN 'Failed'
	ELSE 'Unknown'
END AS [Status],
le.Notes,
(Select Count(LeadExportId) From tblLeadExportDetail Where ExportJobId = le.ExportJobId) as [ApplicantCount],
(Select Count(LeadExportId) From tblLeadExportDetail Where ExportJobId = le.ExportJobId and exportstatus = 1) as [Succeeded],
(Select Count(LeadExportId) From tblLeadExportDetail Where ExportJobId = le.ExportJobId and exportstatus = 2) as [Failed], 
(Select Count(LeadExportId) From tblLeadExportDetail Where ExportJobId = le.ExportJobId and exportstatus not in (1,2)) as [LeftPending]  
From tblLeadExportJob le
left join tbluser u on le.executedBy = u.userId 
Order by le.ExportJobId Desc
GO
/****** Object:  Table [dbo].[tblVerificationCall]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblVerificationCall](
	[VerificationCallId] [int] IDENTITY(1,1) NOT NULL,
	[ClientId] [int] NOT NULL,
	[StartDate] [datetime] NOT NULL DEFAULT (getdate()),
	[EndDate] [datetime] NULL,
	[Completed] [bit] NOT NULL DEFAULT ((0)),
	[ExecutedBy] [int] NOT NULL,
	[RecordedCallPath] [varchar](1000) NULL,
	[DocumentPath] [varchar](1000) NULL,
	[CallIdKey] [varchar](50) NOT NULL,
	[RecCallIdKey] [varchar](50) NULL,
	[LanguageId] [int] NOT NULL DEFAULT ((1)),
	[LastStep] [varchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[VerificationCallId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_GetBankTransfers]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetBankTransfers]
(
	@DateFrom datetime,
	@DateTo datetime,
	@FromCompanyID int,
	@ToCompanyID int
)
as
begin

declare @FromTrust varchar(255)

select @FromTrust = display from tblcommrec where companyid = @FromCompanyID and istrust = 1


select 
	a.dc [transfer_date], isnull(nr.amount,0) [transfer_amt], c.accountnumber, p.firstname, p.lastname
from 
	tblclient c 
join 
	tblaudit a on a.pk = c.clientid
	and a.auditcolumnid = 27
	and a.value = c.companyid
	and (a.dc between @DateFrom and @DateTo)
join 
	tblaudit orig on orig.pk = c.clientid
	and orig.auditcolumnid = 27
	and orig.value = @FromCompanyID	
join 
	tblperson p on p.personid = c.primarypersonid
left join 
	tblnacharegister2 nr on nr.clientid = c.clientid
	and nr.name = @FromTrust
where 
	c.companyid = @ToCompanyID
order by 
	[transfer_date]

end
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyGetReferralData_Month]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_AgencyGetReferralData_Month]
( 
    @agencyId int, 
    @year int,
	@month int
) 
AS 
 
SELECT     
	YEAR(DERIVEDTBL.Created) AS [Year], 
	MONTH(DERIVEDTBL.Created) AS [Month], 
	COUNT(DERIVEDTBL.ClientId) AS ReferralCount, 
	SUM(DERIVEDTBL.Debt) AS DebtTotal, 
	DERIVEDTBL.Committed,
	tblClientStatus.[Name] as ClientStatusName,
	tblClientStatus.ClientStatusId

FROM   
	
	tblClient INNER JOIN 
	(SELECT 
		tblEnrollment.ClientId,
		tblEnrollment.Created,
		tblEnrollment.Committed,
		CASE
			WHEN (tblAccount.OriginalAmount IS NULL) THEN tblEnrollment.TotalUnsecuredDebt
			ELSE OriginalAmount
		END AS Debt

		FROM tblEnrollment LEFT OUTER JOIN tblAccount on tblAccount.ClientId=tblEnrollment.ClientId
	) AS DERIVEDTBL 
	ON tblClient.ClientId=DERIVEDTBL.ClientId INNER JOIN
	tblRoadMap ON tblClient.ClientId=tblRoadmap.ClientId INNER JOIN
	tblClientStatus ON tblRoadmap.ClientStatusId=tblClientStatus.ClientStatusId 

WHERE 
    AgencyId = @agencyId 
	AND DATEPART([year], DERIVEDTBL.Created) = @year 
	AND DATEPART([month], DERIVEDTBL.Created) = @month 
	--last status
	AND tblRoadmap.RoadmapId IN (SELECT TOP 1 RoadmapId FROM tblRoadMap WHERE ClientId=tblClient.ClientId ORDER BY Created DESC)
GROUP BY 
	YEAR(DERIVEDTBL.Created), 
	MONTH(DERIVEDTBL.Created), 
	tblClientStatus.[Name],
	tblClientStatus.ClientStatusId,
	DERIVEDTBL.Committed

ORDER BY 
	YEAR(DERIVEDTBL.Created), 
	MONTH(DERIVEDTBL.Created), 	
	tblClientStatus.ClientStatusId,
	tblClientStatus.[Name],	
	DERIVEDTBL.Committed
GO
/****** Object:  StoredProcedure [dbo].[stp_Reporting_SmartDebtor_AllMessages]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[stp_Reporting_SmartDebtor_AllMessages]
AS
BEGIN
-- =============================================
-- Author:		Christopher Nott
-- Create date: 07/20/2009
-- Description:	FOR DEBUG - ALL SD CALL CONTROLL MESSAGES
-- =============================================
	SET NOCOUNT ON;
	
	DECLARE @DATESTRING datetime

	set @DATESTRING = convert(datetime,convert(varchar,getdate(),110)+' 00:00:00.000')

	select cl.messagedate, cl.message, u.username 
from tblcallmessagelog cl 
inner join tbluser u on cl.userid = u.userid
where cl.messagedate >= @datestring
order by cl.messagedate desc	



END
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_ClientInfoSheet_GetClientInfo]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
stp_LetterTemplates_ClientInfoSheet_GetClientInfo 778;
go
stp_LetterTemplates_ClientInfoSheet_GetBankInfo 778;
go
*/

create procedure [dbo].[stp_LetterTemplates_ClientInfoSheet_GetClientInfo]
(
@clientid int
)
as
BEGIN
			SELECT TOP 2 
					isnull(p.Relationship, 'Other') as Relationship, 
					isnull(p.FirstName + ' ' + p.LastName, 'PLEASE PROVIDE >>>>>>>') as FullName, 
					isnull(p.Street, 'PLEASE PROVIDE >>>>>>>') as Street, 
					isnull(p.Street2, 'PLEASE PROVIDE >>>>>>>') as Street2, 
					isnull(p.City, 'PLEASE PROVIDE >>>>>>>') as City, 
					isnull(s.[Name], 'PLEASE PROVIDE >>>>>>>') as State, 
					isnull(p.ZipCode, 'PLEASE PROVIDE >>>>>>>') as ZipCode, 
					isnull(cast(p.DateOfBirth as nvarchar(50)), 'PLEASE PROVIDE >>>>>>>') as DateOfBirth, 
					isnull(p.SSN, 'PLEASE PROVIDE >>>>>>>') as SSN, 
					isnull((SELECT TOP 1 '(' + ph.AreaCode + ') ' + substring(ph.Number, 1, 3) + '-' + substring(ph.Number, 4, 4) + ' x ' + isnull(ph.Extension, '') 
					FROM tblClient as c inner join tblPerson as p 
					on p.ClientID = c.ClientID inner join tblPersonPhone as pp 
					on pp.PersonID = p.PersonID inner join tblPhone as ph 
					on pp.PhoneID = ph.PhoneID 
					WHERE c.ClientID = @clientid 
					and ph.PhoneTypeID = 27), 'PLEASE PROVIDE >>>>>>>') as HomePhone, 
					isnull((SELECT TOP 1 '(' + ph.AreaCode + ') ' + substring(ph.Number, 1, 3) + '-' + substring(ph.Number, 4, 4) + ' x ' + isnull(ph.Extension, '') 
					FROM tblClient as c inner join tblPerson as p 
					on p.ClientID = c.ClientID inner join tblPersonPhone as pp 
					on pp.PersonID = p.PersonID inner join tblPhone as ph 
					on pp.PhoneID = ph.PhoneID 
					WHERE c.ClientID = @clientid 
					and ph.PhoneTypeID = 29), 'PLEASE PROVIDE >>>>>>>') as HomeFax, 
					isnull((SELECT TOP 1 '(' + ph.AreaCode + ') ' + substring(ph.Number, 1, 3) + '-' + substring(ph.Number, 4, 4) + ' x ' + isnull(ph.Extension, '') 
					FROM tblClient as c inner join tblPerson as p 
					on p.ClientID = c.ClientID inner join tblPersonPhone as pp 
					on pp.PersonID = p.PersonID inner join tblPhone as ph 
					on pp.PhoneID = ph.PhoneID WHERE c.ClientID = @clientid 
					and ph.PhoneTypeID = 21), 'PLEASE PROVIDE >>>>>>>') as BusinessPhone, 
					isnull((SELECT TOP 1 '(' + ph.AreaCode + ') ' + substring(ph.Number, 1, 3) + '-' + substring(ph.Number, 4, 4) + ' x ' + isnull(ph.Extension, '') 
					FROM tblClient as c inner join tblPerson as p 
					on p.ClientID = c.ClientID inner join tblPersonPhone as pp 
					on pp.PersonID = p.PersonID inner join tblPhone as ph 
					on pp.PhoneID = ph.PhoneID 
					WHERE c.ClientID = @clientid and ph.PhoneTypeID = 23), 'PLEASE PROVIDE >>>>>>>') as BusinessFax, 
					isnull((SELECT TOP 1 '(' + ph.AreaCode + ') ' + substring(ph.Number, 1, 3) + '-' + substring(ph.Number, 4, 4) + ' x ' + isnull(ph.Extension, '') 
					FROM tblClient as c inner join tblPerson as p 
					on p.ClientID = c.ClientID inner join tblPersonPhone as pp 
					on pp.PersonID = p.PersonID inner join tblPhone as ph 
					on pp.PhoneID = ph.PhoneID 
					WHERE c.ClientID = @clientid and ph.PhoneTypeID = 31), 'PLEASE PROVIDE >>>>>>>') as CellPhone, 
					isnull(p.EmailAddress, 'PLEASE PROVIDE >>>>>>>') as EmailAddress 
					FROM tblClient as c inner join tblPerson as p 
					on p.ClientID = c.ClientID inner join tblState as s 
					on s.StateID = p.StateID 
					WHERE c.ClientID = @clientid  ORDER BY personid
END
GO
/****** Object:  StoredProcedure [dbo].[stp_QueryCache_PopulateAll]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_QueryCache_PopulateAll]
as

exec stp_QueryCache_PopulateProjectedCommission
GO
/****** Object:  StoredProcedure [dbo].[stp_GetStatusForClient]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetStatusForClient]
	(
		@clientid int,
		@when datetime = null
	)

as

if @when is null
	begin
		set @when = getdate()
	end


select
top 1
	tblclientstatus.[name]
from
	tblroadmap inner join
	tblclientstatus on tblroadmap.clientstatusid = tblclientstatus.clientstatusid
where
	tblroadmap.clientid = @clientid and
	not tblroadmap.created > @when
order by
	tblroadmap.created desc, tblroadmap.roadmapid desc
GO
/****** Object:  StoredProcedure [dbo].[stp_GetAmountPendingToSend]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetAmountPendingToSend]
@ShadowStoreId varchar(20)
AS
select @ShadowStoreId [ShadowStoreId],
(select 
coalesce(sum(nr.amount), 0)
from tblNacharegister2 nr
left join tblNachaFile nf on nf.nachafileid = nr.nachafileid 
where (nf.datesent is null and (nr.nachafileid > 0 or nr.nachafileid = -1))
and nr.flow = 'debit'
and nr.shadowstoreid = @ShadowStoreId) [Debit],
(select 
coalesce(sum(nr.amount), 0)
from tblNacharegister2 nr
left join tblNachaFile nf on nf.nachafileid = nr.nachafileid 
where (nf.datesent is null and (nr.nachafileid > 0 or nr.nachafileid = -1))
and nr.flow = 'credit'
and nr.shadowstoreid = @ShadowStoreId) [Credit]
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportPersonInsert]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ImportPersonInsert]
@ClientId int,
@SSN varchar(50) = null, 
@FirstName varchar(50),
@LastName varchar(50),
@Gender varchar(1) = null,
@DateOfBirth datetime = null,
@LanguageId int,
@EmailAddress varchar(50) = null,
@Street varchar(255) = null,
@Street2 varchar(255) = null,
@City varchar(50) = null,
@StateId int = null,
@ZipCode varchar(50) = null,
@Relationship varchar(50),
@CanAuthorize bit,
@UserId int,
@ThirdParty bit
AS
BEGIN

Insert into tblperson(
ClientID, SSN, FirstName, LastName,
Gender, DateOfBirth, LanguageID, EmailAddress,
Street, Street2, City, StateID, ZipCode, Relationship, CanAuthorize, 
Created, CreatedBy, LastModified, LastModifiedBy, ThirdParty)
Values(@ClientId, @SSN, @FirstName, @LastName,
@Gender, @DateOfBirth, @LanguageId, @EmailAddress,
@Street, @Street2, @City, @StateId, @ZipCode, @Relationship, @CanAuthorize,
GetDate(), @UserId, GetDate(), @UserId, @ThirdParty)


Select SCOPE_IDENTITY()

END
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyGetReferralDataYearsAvailable]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_AgencyGetReferralDataYearsAvailable]
(
	@agencyId int
)

AS

SELECT DISTINCT
	DATEPART([year], tblEnrollment.Created)
FROM
	tblEnrollment INNER JOIN
	tblClient ON tblEnrollment.ClientId=tblClient.ClientId
WHERE
	tblClient.AgencyId = @agencyId
ORDER BY
	DATEPART([year], tblEnrollment.Created) DESC
GO
/****** Object:  StoredProcedure [dbo].[stp_GetRoadmapForClient]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetRoadmapForClient]
	(
		@clientid int,
		@when datetime = null
	)

as

if @when is null
	begin
		set @when = getdate()
	end


select
top 1
	tblroadmap.*,
	tblclientstatus.[name]
from
	tblroadmap inner join
	tblclientstatus on tblroadmap.clientstatusid = tblclientstatus.clientstatusid
where
	tblroadmap.clientid = @clientid and
	not tblroadmap.created > @when
order by
	tblroadmap.created desc, tblroadmap.roadmapid desc
GO
/****** Object:  Table [dbo].[tblBankHoliday]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblBankHoliday](
	[BankHolidayId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Date] [datetime] NOT NULL,
	[Name] [varchar](32) NULL,
 CONSTRAINT [PK_tblBankHoliday] PRIMARY KEY CLUSTERED 
(
	[BankHolidayId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNachaRegisterDups]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetNachaRegisterDups]
(
	@NachaFileId int
)
as
begin
/*
	History:
	jhernandez		07/09/08	Returns any CheckSite clients that are also in colonial's batch.
								Should never return records!
*/

declare @date datetime

select @date = Date 
from tblNachaFile 
where NachaFileId = @NachaFileId

select * 
from tblNachaRegister
where NachaFileId in (select NachaFileId from tblNachaFile where Date > @date and NachaFileId < @NachaFileId)
	and ClientID in (select distinct ClientID from tblNachaRegister2 where NachaFileId = @NachaFileId)


end
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_ClientInfoSheet_GetBankInfo]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_LetterTemplates_ClientInfoSheet_GetBankInfo 1671

CREATE procedure [dbo].[stp_LetterTemplates_ClientInfoSheet_GetBankInfo]
(
@clientid int
)
as
BEGIN
	SELECT Distinct 
	case c.multideposit when 0 then isnull(cast(c.DepositAmount as nvarchar(15)), 'Not On File') else isnull(cast(cdd.DepositAmount as nvarchar(15)), 'Not On File') end as DepositAmount, 
	case c.multideposit when 0 then isnull(cast(c.DepositDay as nvarchar(15)), 'Not On File') else isnull(cast(cdd.DepositDay as nvarchar(15)), 'Not On File') end as DepositDay, 
	case c.multideposit when 0 then isnull(cast(c.DepositMethod as nvarchar(15)), 'Not On File') else isnull(cdd.DepositMethod, 'Check') end as DepositMethod, 
	case c.multideposit when 0 then isnull(cast(c.BankName as nvarchar(75)), 'Not On File') else isnull(rn.CustomerName,'Not On File')  end as BankName, 
	case c.multideposit when 0 then isnull(cast(c.BankAccountNumber as nvarchar(75)), 'Not On File') else isnull(cba.AccountNumber,'Not On File')  end as BankAccountNumber, 
	case c.multideposit when 0 then isnull(cast(c.BankRoutingNumber as nvarchar(75)), 'Not On File') else isnull(cba.RoutingNumber,'Not On File')  end as BankRoutingNumber
	FROM tblClient as c 
	inner join tblPerson as p on p.PersonID = c.PrimaryPersonID 
	inner join tblLanguage as l on l.LanguageID = p.LanguageID 
	left outer join tblClientDepositDay cdd on cdd.clientid = c.clientid 
	left outer JOIN tblClientBankAccount cba ON cdd.BankAccountId = cba.BankAccountId 
	left outer JOIN tblRoutingNumber rn ON cba.RoutingNumber = rn.RoutingNumber
	WHERE c.ClientID = @clientid and deleteddate is null 
	ORDER BY DepositDay DESC
END
GO
/****** Object:  StoredProcedure [dbo].[stp_BankAccountUsed]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_BankAccountUsed]
@BankAccountId int
AS
Select CT = count(b.BankAccountId) from tblClientBankAccount b
inner join 
(select ClientId, RoutingNumber, AccountNumber from tblnacharegister2
Where ClientId is not null and RoutingNumber is not null and AccountNumber is not null
Union All
select ClientId, RoutingNumber, AccountNumber from tblnacharegister
Where ClientId is not null and RoutingNumber is not null and AccountNumber is not null) b1
on b.ClientId = b1.ClientId and b.RoutingNumber = b1.RoutingNumber and b.AccountNumber = b1.AccountNumber
Where b.BankAccountId = @BankAccountId
GO
/****** Object:  StoredProcedure [dbo].[stp_WriteToWCFLog]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_WriteToWCFLog]
(
	@SessionId varchar(50),
	@Process varchar(30),
	@Status varchar(20),
	@Message nvarchar(max),
	@Show bit
)
as 
begin

if exists (select 1 from tblWCFLogs where Process = @Process and convert(varchar(10),Created,101) = convert(varchar(10),getdate(),101) and SessionId <> @SessionID) begin
	if not exists (select 1 from tblWCFLogs where Process = @Process and SessionId = @SessionID) begin
		insert tblWCFLogs (SessionId,Process,Status,Message,Show,Created)
		values (@SessionId,@Process,'','--------------------------new iteration--------------------------',1,getdate())
	end
end

insert tblWCFLogs (SessionId,Process,Status,Message,Show,Created)
values (@SessionId,@Process,@Status,@Message,@Show,getdate())

end
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyGetReferralData_Year]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_AgencyGetReferralData_Year]
( 
     @agencyId int, 
     @year int 
) 
AS 
 
SELECT     
	YEAR(DERIVEDTBL.Created) AS [Year], 
	MONTH(DERIVEDTBL.Created) AS [Month], 
	COUNT(DERIVEDTBL.ClientId) AS ReferralCount, 
	SUM(DERIVEDTBL.Debt) AS DebtTotal, 
	DERIVEDTBL.Committed,
	tblClientStatus.[Name] as ClientStatusName,
	tblClientStatus.ClientStatusId

FROM   
	
	tblClient INNER JOIN 
	(SELECT 
		tblEnrollment.ClientId,
		tblEnrollment.Created,
		tblEnrollment.Committed,
		CASE
			WHEN (tblAccount.OriginalAmount IS NULL) THEN tblEnrollment.TotalUnsecuredDebt
			ELSE OriginalAmount
		END AS Debt

		FROM tblEnrollment LEFT OUTER JOIN tblAccount on tblAccount.ClientId=tblEnrollment.ClientId
	) AS DERIVEDTBL 
	ON tblClient.ClientId=DERIVEDTBL.ClientId INNER JOIN
	tblRoadMap ON tblClient.ClientId=tblRoadmap.ClientId INNER JOIN
	tblClientStatus ON tblRoadmap.ClientStatusId=tblClientStatus.ClientStatusId 

WHERE 
    AgencyId = @agencyId 
	AND DATEPART([year], DERIVEDTBL.Created) = @year 
	--last status
	AND tblRoadmap.RoadmapId IN (SELECT TOP 1 RoadmapId FROM tblRoadMap WHERE ClientId=tblClient.ClientId ORDER BY Created DESC)
GROUP BY 
	YEAR(DERIVEDTBL.Created), 
	MONTH(DERIVEDTBL.Created), 
	tblClientStatus.[Name],
	tblClientStatus.ClientStatusId,
	DERIVEDTBL.Committed

ORDER BY 
	YEAR(DERIVEDTBL.Created), 
	MONTH(DERIVEDTBL.Created), 	
	tblClientStatus.ClientStatusId,
	tblClientStatus.[Name],	
	DERIVEDTBL.Committed
GO
/****** Object:  StoredProcedure [dbo].[stp_GetCommissionPayouts]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetCommissionPayouts]
(
	@Date datetime
,	@EffectiveDate datetime
,	@NachaFileId int = -1
,	@NachaRegisterId int = -1
)
as
begin
/*
	History:
	jhernandez		06/20/08	New method for returning commission payouts for batch processing
	jhernandez		06/25/08	Remove filtering items created today. If CheckSite's system
								is unavailable we'll want to send items out on next 
								attempt.
	jhernandez		07/24/08	Optional parameters @NachaFileId and @NachaRegisterId
								used for re-sending a batch.
	jhernandez		11/18/08	Use company-specific controlled account name
	jhernandez		07/28/09	Include credits into the GCA from converted clients' orig trust account.
								For when payments are voided that processed through Colonial.
*/


-- Get commission payouts
select n.NachaRegisterId, n.NachaFileId, n.Amount, n.Name, n.RoutingNumber,
	n.AccountNumber, n.Type [AccountType], n.IsPersonal, c.ControlledAccountName, 
	'Commission payout' [Notes1], n.Flow
into #batch
from tblNachaRegister2 n
join tblCompany c on c.CompanyID = n.CompanyID
join tblCommRec r on r.CommRecId = n.CommRecId
where n.NachaFileId = @NachaFileId 
 and len(n.RoutingNumber) = 9


insert #batch (NachaRegisterId,NachaFileId,Amount,Name,RoutingNumber,AccountNumber,AccountType,IsPersonal,ControlledAccountName,Notes1,Flow)
select n.NachaRegisterId, n.NachaFileId, n.Amount, n.Name, n.RoutingNumber,
	n.AccountNumber, n.Type [AccountType], n.IsPersonal, c.ControlledAccountName, 
	'GCA Credit' [Notes1], n.Flow
from tblNachaRegister2 n
join tblCompany c on c.CompanyID = n.CompanyID
join tblRegisterPayment rp on rp.RegisterPaymentID = n.RegisterPaymentID
where n.NachaFileId = @NachaFileId 
 and len(n.RoutingNumber) = 9	
 
 
 -- Only create nacha file id if batch has records and is not a re-send
if (exists (select 1 from #batch)) and (@NachaFileId = -1) begin
	insert tblNachaFile ([Date],EffectiveDate) values (@Date,@EffectiveDate)
	select @NachaFileId = scope_identity()

	update #batch set NachaFileId = @NachaFileId
	update tblNachaRegister2 set NachaFileId = @NachaFileId where NachaRegisterId in (select NachaRegisterId from #batch)
end


-- output
select * 
from #batch 
where NachaRegisterId >= @NachaRegisterId
order by NachaRegisterId

-- cleanup
drop table #batch  


end
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_GetClientInfo]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_LetterTemplates_GetClientInfo]
(
	@clientID int,
	@PhoneType int,
	@FaxType int,
	@AddressType int
)
as
BEGIN
			/*
	--usage
		stp_LetterTemplates_GetClientInfo  86344,46,47,3
		stp_LetterTemplates_GetClientInfo  778,46,47,3
	--development
	declare @clientID int
	declare @PhoneType int
	declare @FaxType int
	declare @AddressType int

	set @clientID = 88733
	set @PhoneType = 46
	set @FaxType =47
	set @AddressType = 3
	*/

	--declare multi-deposit vars
	declare @multi bit
	declare @depmeth varchar(10) 
	declare @depday int
	declare @depamt money
	declare @BankAcctType varchar(15)
	declare @BankName varchar(150)
	declare @BankRoutingNum varchar(9)
	declare @BankAcctNum varchar(20)

	--init vars
	set @depmeth = NULL
	set @depday = 0
	set @depamt = 0

	--check if client is multi-deposit
	select @multi = multideposit from tblclient where clientid = @clientid
	IF @multi = 1
		BEGIN
			--get multi-deposit info

			select top 1
				@depmeth = depositmethod
				,@depday = depositday
				,@depamt = depositamount
				,@BankAcctType = cba.banktype
				,@BankName = CustomerName
				,@BankRoutingNum = cba.routingnumber
				,@BankAcctNum = cba.AccountNumber
			from tblclientdepositday cdd with(nolock)
			inner join tblClientBankAccount cba with(nolock) on cba.bankaccountid = cdd.BankAccountId
			inner join tblroutingnumber rn with(nolock) on rn.routingnumber = cba.routingnumber
			where cdd.clientid = @clientid 
			order by cdd.created desc


			--check if we actually got data
			if @depmeth is null
				BEGIN
					--if not fall back on tblclients data
					select 
						@depmeth = isnull(depositmethod,'')
						,@depday = isnull(depositday,0)
						,@depamt = isnull(depositamount,0)
						,@BankAcctType = BankType
						,@BankName = BankName
						,@BankRoutingNum = bankroutingnumber
						,@BankAcctNum = bankAccountNumber
					from tblclient with(nolock)
					where clientid = @clientid
				END
		END
	ELSE
		--non multi-deposit, use tblclient
		select 
			@depmeth = isnull(depositmethod,'')
			,@depday = isnull(depositday,0)
			,@depamt = isnull(depositamount,0)
			,@BankAcctType = BankType
			,@BankName = BankName
			,@BankRoutingNum = bankroutingnumber
			,@BankAcctNum = bankAccountNumber
		from tblclient with(nolock)
		where clientid = @clientid

	SELECT 
		case when p.relationship = 'Prime' then 1 else 0 end as PrimaryOrder
		,c.CompanyID
		, c.AccountNumber
		, @depmeth  as depositmethod
		, isnull(c.depositstartdate,'') as depositstartdate
		, @depday as depositday
		, @depamt as depositamount
		--, isnull(c.depositamount,'0.00') as depositamount
		, isnull(@BankName,'')[ClientBankName]
		, isnull(@BankRoutingNum,'')[ClientBankRoutingNumber]
		, isnull(@BankAcctNum,'')[ClientBankAccountNumber]
		, p.FirstName + ' ' + p.LastName AS ClientName
		, isnull(p.gender,'') as [ClientGender]
		, isnull(p.SSN,'') as [ClientSSN]
		, isnull(p.Street,'') as ClientAddress1
		, isnull(p.Street2,'') as ClientAddress2
		, isnull(case when p.stateid  = 0 then p.City + p.ZipCode else p.City + ', ' + s.Abbreviation + ' ' + p.ZipCode end,'') AS ClientCSZ
		, isnull(p.stateid,'') as stateid
		, isnull(co.Name,'') AS FirmName
		, isnull(co.Contact1,'') as AttyName
		, isnull(co.SigPath,'') as SigPath
		, isnull(co.BillingMessage,'') as BillingMessage
		, isnull((SELECT top 1 PhoneNumber FROM tblCompanyPhones AS cpTel with(nolock) WHERE (PhoneType = @PhoneType) AND (CompanyID = co.CompanyID)),'') AS CustomerServicePhone
		, isnull((SELECT top 1 PhoneNumber FROM tblCompanyPhones AS cpFax with(nolock) WHERE (PhoneType = @FaxType) AND (CompanyID = co.CompanyID)),'') AS CustomerServiceFax
		, isnull((select top 1 case when ca.address2 is null then ca.address1 else ca.Address1 + ', ' + ca.Address2 end AS CustomerServiceAddress from tblCompanyAddresses as ca with(nolock) INNER JOIN tblCompanyAddressTypes as at with(nolock) ON ca.AddressTypeID = at.AddressTypeID where ca.companyid = co.companyid and (at.AddressTypeID = @AddressType)),'') as [CustomerServiceAddress]
		, isnull((select top 1 ca.City + ', ' + ca.State + ' ' + ca.Zipcode AS CustomerServiceCSZ from tblCompanyAddresses as ca with(nolock) INNER JOIN tblCompanyAddressTypes as at with(nolock) ON ca.AddressTypeID = at.AddressTypeID where ca.companyid = co.companyid and (at.AddressTypeID = @AddressType)),'') as [CustomerServiceCSZ]
		, isnull((select top 1 case when ca.address2 is null then ca.address1 else ca.Address1 + ', ' + ca.Address2 end AS CustomerServiceAddress from tblCompanyAddresses as ca with(nolock) INNER JOIN tblCompanyAddressTypes as at with(nolock) ON ca.AddressTypeID = at.AddressTypeID where ca.companyid = co.companyid and (at.AddressTypeID = 2)),'') as [ClientFirmLockBoxAddress]
		, isnull((select top 1 ca.City + ', ' + ca.State + ' ' + ca.Zipcode AS CustomerServiceCSZ from tblCompanyAddresses as ca with(nolock) INNER JOIN tblCompanyAddressTypes as at with(nolock) ON ca.AddressTypeID = at.AddressTypeID where ca.companyid = co.companyid and (at.AddressTypeID = 2)),'') as [ClientFirmLockBoxAddresCSZ]
		, isnull((select top 1 case when ca.address2 is null then ca.address1 else ca.Address1 + ', ' + ca.Address2 end AS CustomerServiceAddress from tblCompanyAddresses as ca with(nolock) INNER JOIN tblCompanyAddressTypes as at  with(nolock) ON ca.AddressTypeID = at.AddressTypeID where ca.companyid = co.companyid and (at.AddressTypeID = 5)),'') as [FirmPaymentAddress]
		, isnull((select top 1 ca.City + ', ' + ca.State + ' ' + ca.Zipcode AS CustomerServiceCSZ from tblCompanyAddresses as ca with(nolock) INNER JOIN tblCompanyAddressTypes as at with(nolock) ON ca.AddressTypeID = at.AddressTypeID where ca.companyid = co.companyid and (at.AddressTypeID = 5)),'') as [FirmPaymentAddressCSZ]
		, isnull((select TOP 1 created as [EnrollmentDate] from tblroadmap  with(nolock) where clientid = c.clientid and clientstatusid = 2 order by created),'') as [EnrollmentDate] 
		, isnull((select phoneNumber from tblcompanyphones with(nolock) where phonetype = 52 and companyid = co.companyid),'')[LitigationPhone]
		, isnull((select phoneNumber from tblcompanyphones with(nolock) where phonetype = 53 and companyid = co.companyid),'')[LitigationFax] 
		, isnull((select case when address2 is null then address1 else address1 + ', ' + address2 end from tblcompanyaddresses  with(nolock) where addresstypeid = 5 and companyid = co.companyid),'')[LitigationAddress] 
		, isnull((select City + ', ' + [State] + ' '  + zipcode from tblcompanyaddresses with(nolock) where addresstypeid = 5 and companyid = co.companyid),'')[LitigationAddressCSZ] 
		, c.agencyid
		, a.name [AgencyName]
		, isnull((SELECT top 1 PhoneNumber FROM tblCompanyPhones AS cpTel  with(nolock)  WHERE (PhoneType = 50) AND (CompanyID = co.CompanyID)),'') AS ClientFirmCreditorServicesPhone
		, c.settlementfeepercentage
		, case @BankAcctType
			when 'C' then 'Checking'
			when 'S' then 'Saving'
			else '' end [ClientBankAccountType]
		, c.sdabalance
		, c.pfobalance
		, isnull(c.remittname,'')[RemittName]
		, la.name[PreferredLanguage]
		, [dateofbirth]=isnull(cast(dateofbirth as varchar),'None') 
		,[age]=isnull(datediff(yy,dateofbirth,getdate()),0)
	FROM tblClient AS c with(nolock)
		INNER JOIN tblCompany AS co with(nolock) ON c.CompanyID = co.CompanyID 
		INNER JOIN tblPerson AS p with(nolock) ON c.ClientID = p.ClientID 
		LEFT OUTER JOIN tblState AS s with(nolock) ON p.StateID = s.StateID 
		inner join tblagency as a with(nolock) on a.agencyid = c.agencyid
		left outer join tbllanguage la with(nolock) on la.languageid = p.languageid
	WHERE
		(c.ClientID = @clientID) and (p.ThirdParty = 0) order by PrimaryOrder desc

END


GRANT EXEC ON stp_LetterTemplates_GetClientInfo TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UsersInRoles_GetUsersInRoles]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_UsersInRoles_GetUsersInRoles]
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
     DECLARE @RoleId uniqueidentifier
     SELECT  @RoleId = NULL

     SELECT  @RoleId = RoleId
     FROM    dbo.aspnet_Roles
     WHERE   LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId

     IF (@RoleId IS NULL)
         RETURN(1)

    SELECT u.UserName
    FROM   dbo.aspnet_Users u, dbo.aspnet_UsersInRoles ur
    WHERE  u.UserId = ur.UserId AND @RoleId = ur.RoleId AND u.ApplicationId = @ApplicationId
    ORDER BY u.UserName
    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles]
	@ApplicationName  nvarchar(256),
	@UserNames		  nvarchar(4000),
	@RoleNames		  nvarchar(4000)
AS
BEGIN
	DECLARE @AppId uniqueidentifier
	SELECT  @AppId = NULL
	SELECT  @AppId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
	IF (@AppId IS NULL)
		RETURN(2)


	DECLARE @TranStarted   bit
	SET @TranStarted = 0

	IF( @@TRANCOUNT = 0 )
	BEGIN
		BEGIN TRANSACTION
		SET @TranStarted = 1
	END

	DECLARE @tbNames  table(Name nvarchar(256) NOT NULL PRIMARY KEY)
	DECLARE @tbRoles  table(RoleId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @tbUsers  table(UserId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @Num	  int
	DECLARE @Pos	  int
	DECLARE @NextPos  int
	DECLARE @Name	  nvarchar(256)
	DECLARE @CountAll int
	DECLARE @CountU	  int
	DECLARE @CountR	  int


	SET @Num = 0
	SET @Pos = 1
	WHILE(@Pos <= LEN(@RoleNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @RoleNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@RoleNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@RoleNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbRoles
	  SELECT RoleId
	  FROM   dbo.aspnet_Roles ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredRoleName AND ar.ApplicationId = @AppId
	SELECT @CountR = @@ROWCOUNT

	IF (@CountR <> @Num)
	BEGIN
		SELECT TOP 1 N'', Name
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT ar.LoweredRoleName FROM dbo.aspnet_Roles ar,  @tbRoles r WHERE r.RoleId = ar.RoleId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(2)
	END


	DELETE FROM @tbNames WHERE 1=1
	SET @Num = 0
	SET @Pos = 1


	WHILE(@Pos <= LEN(@UserNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @UserNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@UserNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@UserNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbUsers
	  SELECT UserId
	  FROM   dbo.aspnet_Users ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredUserName AND ar.ApplicationId = @AppId

	SELECT @CountU = @@ROWCOUNT
	IF (@CountU <> @Num)
	BEGIN
		SELECT TOP 1 Name, N''
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT au.LoweredUserName FROM dbo.aspnet_Users au,  @tbUsers u WHERE u.UserId = au.UserId)

		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(1)
	END

	SELECT  @CountAll = COUNT(*)
	FROM	dbo.aspnet_UsersInRoles ur, @tbUsers u, @tbRoles r
	WHERE   ur.UserId = u.UserId AND ur.RoleId = r.RoleId

	IF (@CountAll <> @CountU * @CountR)
	BEGIN
		SELECT TOP 1 UserName, RoleName
		FROM		 @tbUsers tu, @tbRoles tr, dbo.aspnet_Users u, dbo.aspnet_Roles r
		WHERE		 u.UserId = tu.UserId AND r.RoleId = tr.RoleId AND
					 tu.UserId NOT IN (SELECT ur.UserId FROM dbo.aspnet_UsersInRoles ur WHERE ur.RoleId = tr.RoleId) AND
					 tr.RoleId NOT IN (SELECT ur.RoleId FROM dbo.aspnet_UsersInRoles ur WHERE ur.UserId = tu.UserId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(3)
	END

	DELETE FROM dbo.aspnet_UsersInRoles
	WHERE UserId IN (SELECT UserId FROM @tbUsers)
	  AND RoleId IN (SELECT RoleId FROM @tbRoles)
	IF( @TranStarted = 1 )
		COMMIT TRANSACTION
	RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UsersInRoles_FindUsersInRole]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_UsersInRoles_FindUsersInRole]
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256),
    @UserNameToMatch  nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
     DECLARE @RoleId uniqueidentifier
     SELECT  @RoleId = NULL

     SELECT  @RoleId = RoleId
     FROM    dbo.aspnet_Roles
     WHERE   LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId

     IF (@RoleId IS NULL)
         RETURN(1)

    SELECT u.UserName
    FROM   dbo.aspnet_Users u, dbo.aspnet_UsersInRoles ur
    WHERE  u.UserId = ur.UserId AND @RoleId = ur.RoleId AND u.ApplicationId = @ApplicationId AND LoweredUserName LIKE LOWER(@UserNameToMatch)
    ORDER BY u.UserName
    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_LoadClientStatus]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_LoadClientStatus]
	(
		@clientid int
	)

as


update
	tblclient
set
	currentclientstatusid = 
	(
		select top 1
			clientstatusid
		from
			tblroadmap
		where
			clientid = @clientid
		order by
			created desc, roadmapid desc
	)
where
	clientid = @clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_GetGlobalRoadmap]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetGlobalRoadmap]
	(
		@agencyId int=null,
		@attorneyId int=null
	)

as

declare @attorneystateid int
declare @attorneycompanyid int
if not @attorneyid is null begin
	set @attorneystateid=(select stateid from tblattorney where attorneyid=@attorneyid)
	set @attorneycompanyid=(select companyid from tblattorney where attorneyid=@attorneyid)
end


select 
	count(currentclientstatusid) as total,
	cs.parentclientstatusid,
	cs.clientstatusid,
	cs.name as clientstatusname,
	[order]
into 
	#tmp
from 
	tblclient c inner join
	tblclientstatus cs on c.currentclientstatusid=cs.clientstatusid inner join
	tblperson p on c.primarypersonid=p.personid
where 
	agencyid=isnull(@agencyid,agencyid)
	and (
		@attorneystateid is null or
		p.stateid=@attorneystateid
	)
	and (
		@attorneycompanyid is null or
		c.companyid=@attorneycompanyid
	)
group by
	currentclientstatusid,parentclientstatusid,cs.[name],cs.clientstatusid,cs.[order]

select
	0 as total,
	parentclientstatusid,
	clientstatusid,
	name as clientstatusname,
	[order]
from
	tblclientstatus
where
	not clientstatusid in (select clientstatusid from #tmp)

union

select 
	total,
	parentclientstatusid,
	clientstatusid,
	clientstatusname,
	[order]
from 
	#tmp
order by
	[order],
	clientstatusid

drop table #tmp
GO
/****** Object:  Table [dbo].[tblNachaCabinet]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblNachaCabinet](
	[NachaCabinetID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[NachaRegisterID] [int] NOT NULL,
	[Type] [varchar](50) NOT NULL,
	[TypeID] [int] NOT NULL,
	[TrustID] [int] NULL,
 CONSTRAINT [PK_tblNachaRegisterCabinet] PRIMARY KEY CLUSTERED 
(
	[NachaCabinetID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientOverview]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetClientOverview]
(
	@clientid int
)
as
begin

declare @hardship varchar(20), @date datetime

select @date = max(hardshipdate) 
from tblhardshipdata 
where clientid = @clientid

if @date is null
	set @hardship = 'Not on file'
else
	set @hardship = convert(varchar(10),@date,101)

select p.firstname + ' ' + p.lastname [client], c.accountnumber, p.street + ' ' + isnull(p.street2,'') [street],
	p.city, s.name [state], p.zipcode, p.ssn, cs.name [status], @hardship [hardship]
from tblclient c
join tblperson p on p.personid = c.primarypersonid
join tblclientstatus cs on cs.clientstatusid = c.currentclientstatusid
left join tblstate s on s.stateid = p.stateid
where c.clientid = @clientid 

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetProcessingReportDetails]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetProcessingReportDetails]
@ReportId int,
@ExceptionOnly bit = 0
AS
BEGIN
SET NOCOUNT ON

declare @nacha table (NachaRegisterId int, reportdetailid int)
create table #reportp (ReportDetailId int not null primary key,
					 ReportId int,
					 StateId int,
					 StateDescription varchar(255),
					 StateGroupId int,
					 StateGroupDescription varchar(255),
					 CssClass varchar(255),
					 TransactionId varchar(255),
					 Notes varchar(max),
					 ClientName varchar(255),
					 AccountNumber varchar(50),
					 CheckNumber varchar(50),
					 Created datetime,
					 SentDate datetime,
					 ReceivedDate datetime,
					 ShadowStoreId varchar(255),
					 RegisterId int,
					 RegisterPaymentId int,
					 Amount money,
					 Recipient varchar(255),
					 TransactionType int,
					 Fee varchar(255),
					 GroupSeq int,
					 StateSeq int,
					 FrontImagePath varchar(255))

Insert into  @nacha(NachaRegisterId, ReportDetailId)
Select n.NachaRegisterId, r.ReportDetailId
From tblNachaRegister2 n
inner join tblProcessingReportDetail r on r.TransactionId = convert(varchar, n.nacharegisterid)
Where r.ReportId =  @ReportId

			 
--Insert Nacha Records					 
Insert Into #reportp(ReportDetailId, ReportId, StateId, StateDescription,
					StateGroupId, StateGroupDescription, CssClass, TransactionId,
					Notes, ClientName, AccountNumber, CheckNumber, Created, SentDate, ReceivedDate,
					ShadowStoreId, RegisterId, RegisterPaymentId, Amount,
					Recipient, TransactionType, Fee, GroupSeq, StateSeq)
Select r.ReportDetailId, 
	   r.ReportId,  
	   r.StateId, 
	   s.Description AS [StateDescription],
	   s.StateGroupId,
	   g.Description AS [StateGroupDescription],
	   g.CssClass,
	   r.TransactionId, 
	   r.Notes,
	   n.Name AS [ClientName],
	   n.AccountNumber,
	   '' AS CheckNumber,
	   n.Created,
	   f.DateSent,
	   n.ReceivedDate,
	   n.ShadowStoreId,
	   n.RegisterId,
	   n.RegisterPaymentId,
	   n.Amount, 
	   isnull(cr.Display, '') AS [Recipient],
	   r.TransactionType,
	   isnull(e.DisplayName, '') AS [Fee],
	   g.Seq as [GroupSeq],
	   s.Seq as [StateSeq]
From tblProcessingReportDetail r
inner join tblProcessingReportState s on s.StateId = r.StateId 
inner join tblProcessingReportStateGroup g on g.StateGroupId = s.StateGroupId
inner join @nacha p on p.ReportDetailId = r.ReportDetailId
inner join tblNachaRegister2 n on n.NachaRegisterId = p.NachaRegisterId 
left join tblCommRec cr on n.CommRecId = cr.CommRecId
left join tblRegister t on t.RegisterId = n.RegisterId
left join tblEntryType e on e.EntryTypeId = t.EntryTypeId
left join tblNachafile f on f.NachaFileId = n.NachaFileId
Where r.ReportId = @ReportId And (@ExceptionOnly = 0 or g.StateGroupId = 3)

--Insert Check21 Records					 
Insert Into #reportp(ReportDetailId, ReportId, StateId, StateDescription,
					StateGroupId, StateGroupDescription, CssClass, TransactionId,
					Notes, ClientName, AccountNumber, CheckNumber, Created, ReceivedDate,
					ShadowStoreId, RegisterId, RegisterPaymentId, Amount,
					Recipient, TransactionType, Fee, GroupSeq, StateSeq, FrontImagePath)
Select r.ReportDetailId, 
	   r.ReportId,  
	   r.StateId, 
	   s.Description AS [StateDescription],
	   s.StateGroupId,
	   g.Description AS [StateGroupDescription],
	   g.CssClass,
	   r.TransactionId, 
	   r.Notes,
	   p.FirstName + ' ' + p.LastName AS [ClientName],
	   b.AccountNumber,
	   b.CheckNumber,
	   b.Created,
	   b.ReceivedDate,
	   '',
	   b.DepositId,
	   NULL,
	   b.Amount, 
	   '',
	   r.TransactionType,
	   '',
	   g.Seq as [GroupSeq],
	   s.Seq as [StateSeq],
	   isnull(b.FrontImagePath, '') AS [FrontImagePath]
From tblProcessingReportDetail r
inner join tblProcessingReportState s on s.StateId = r.StateId 
inner join tblProcessingReportStateGroup g on g.StateGroupId = s.StateGroupId
inner join tblC21BatchTransaction b on b.TransactionId = r.TransactionId
left join tblRegister t on t.RegisterId = b.DepositId
left join tblClient c on c.AccountNumber = b.AccountNumber
left join tblPerson p on p.ClientId = c.ClientId
Where r.ReportId = @ReportId
And (p.relationship is null or p.relationship = 'prime')
And (@ExceptionOnly = 0 or g.StateGroupId = 3)

--Exceptions. Insert orphans if any
Insert Into #reportp(ReportDetailId, ReportId, StateId, StateDescription,
					StateGroupId, StateGroupDescription, CssClass, TransactionId,
					Notes, TransactionType, GroupSeq, StateSeq)
Select r.ReportDetailId, 
	   r.ReportId,  
	   r.StateId, 
	   s.Description AS [StateDescription],
	   s.StateGroupId,
	   g.Description AS [StateGroupDescription],
	   g.CssClass,
	   r.TransactionId, 
	   r.Notes,
	   r.TransactionType,
	   g.Seq as [GroupSeq],
	   s.Seq as [StateSeq]
From tblProcessingReportDetail r
inner join tblProcessingReportState s on s.StateId = r.StateId 
inner join tblProcessingReportStateGroup g on g.StateGroupId = s.StateGroupId
Where r.ReportId = @ReportId
And r.ReportDetailId not in (Select ReportDetailId from #reportp)
And (@ExceptionOnly = 0 or g.StateGroupId = 3)

--Return Data
Select * from #reportp
Order By GroupSeq, StateSeq, ReportDetailId

drop table #reportp

SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[stp_QueryGetCommissionBatches]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_QueryGetCommissionBatches]
	(
		@date1 datetime=null,
		@date2 datetime=null,
		
		@where varchar (8000) = '',
		@orderby varchar (8000) = ''
	)

as

if @date1 is null 
	set @date1 = convert(datetime,'1800.01.01')
if @date2 is null 
	set @date2 = convert(datetime,'9999.01.01')

if not @orderby is null and not @orderby=''
	set @orderby= ' order by ' + @orderby 

exec('
SELECT 
	tblCommBatch.BatchDate,
	tblCommRec.Abbreviation as CommRecName,
	parent.Abbreviation as ParentCommRecName,
	(SELECT Count(*) / 2 FROM tblNachaRegister nnr WHERE nnr.Type=''CommBatchTransferID'' AND nnr.TypeId=tblCommBatchTransfer.CommBatchTransferId) AS ACHTries,
	tblCommBatchTransfer.*
FROM
	tblCommBatch INNER JOIN
	tblCommBatchTransfer ON tblCommBatch.CommBatchId=tblCommBatchTransfer.CommBatchId INNER JOIN
	tblCommRec ON tblCommBatchTransfer.CommRecId=tblCommRec.CommRecId LEFT OUTER JOIN
	tblCommRec parent ON tblCommBatchTransfer.ParentCommRecId=parent.CommRecId
WHERE
	( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) >= ''' + @date1 + ''' ) AND
	( CAST(CONVERT(char(10), tblCommBatch.BatchDate, 101) AS datetime) <= ''' + @date2 + ''' ) 
	 ' + @where + 
	 @orderby 
)
GO
/****** Object:  StoredProcedure [dbo].[stp_SaveUserClientAccess]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_SaveUserClientAccess]
(
	@UserID int,
	@CreatedFrom datetime,
	@CreatedTo datetime
)
as
begin

if exists (select 1 from tblUserClientAccess where UserID = @UserID) begin
	update tblUserClientAccess
	set ClientCreatedFrom = @CreatedFrom, ClientCreatedTo = @CreatedTo
	where UserID = @UserID
end
else begin
	insert tblUserClientAccess
	values (@UserID,@CreatedFrom,@CreatedTo)
end

end
GO
/****** Object:  StoredProcedure [dbo].[insert_NachaFile]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[insert_NachaFile]
(
	@date datetime,
	@effectiveDate datetime
)

AS

BEGIN

SET NOCOUNT ON

INSERT INTO tblNachaFile
(
	Date,
	EffectiveDate
)
VALUES
(
	@date,
	@effectiveDate
)

SELECT CAST(SCOPE_IDENTITY() AS int) AS NachaFileId

END
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyGetCommissionDataSummary]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_AgencyGetCommissionDataSummary]
(
	@agencyId int,
	@year int
)

AS

SET NOCOUNT ON

DECLARE @startDate datetime
DECLARE @endDate datetime

SET @startDate = CAST(CAST(@year AS varchar) + '-01-01' AS datetime);
SET @endDate = CAST(CAST(@year AS varchar) + '-12-31' AS datetime);

DECLARE @clientInfo TABLE
(
	ClientId int PRIMARY KEY
)

-- Get all transactions from this month
SELECT
	EntryTypeId,
	MONTH(TransactionDate) as [Month],
	SUM(ABS(Amount)) as AmountSum
FROM
	tblRegister
WHERE
	--only clients for this agency
	ClientId IN (SELECT ClientId FROM tblClient WHERE AgencyId=@agencyId) AND
	TransactionDate >= @startDate AND
	TransactionDate < @endDate
GROUP BY
	EntryTypeId,
	MONTH(TransactionDate)
ORDER BY 
	[Month],
	EntryTypeId
GO
/****** Object:  StoredProcedure [dbo].[stp_LetterTemplates_getLeadCreditors]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_LetterTemplates_getLeadCreditors]
(
@applicantID int
)
as
BEGIN
	select 
		[Name]
		, Accountnumber
		,Balance
	from tblLeadCreditorInstance 
	where leadapplicantid = @applicantID
END
GO
/****** Object:  Table [dbo].[tblRuleACH]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblRuleACH](
	[RuleACHId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[ClientId] [int] NOT NULL,
	[StartDate] [datetime] NOT NULL,
	[EndDate] [datetime] NULL,
	[DepositDay] [int] NOT NULL,
	[DepositAmount] [money] NOT NULL,
	[BankName] [varchar](50) NOT NULL,
	[BankRoutingNumber] [varchar](50) NOT NULL,
	[BankAccountNumber] [varchar](50) NOT NULL,
	[Created] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
	[BankType] [varchar](1) NULL,
 CONSTRAINT [PK_tblRuleACH] PRIMARY KEY CLUSTERED 
(
	[RuleACHId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [_dta_index_tblRuleACH_8_146815585__K2_K3_K4_K10_1_5_6_7_8_9_11_12_13_14] ON [dbo].[tblRuleACH] 
(
	[ClientId] ASC,
	[StartDate] ASC,
	[EndDate] ASC,
	[Created] ASC
)
INCLUDE ( [RuleACHId],
[DepositDay],
[DepositAmount],
[BankName],
[BankRoutingNumber],
[BankAccountNumber],
[CreatedBy],
[LastModified],
[LastModifiedBy],
[BankType]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[stp_NR2_Clear_Test_Data]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 02/08/2010
-- Description:	Clear tblNachaRegister2 data for testing
-- =============================================
CREATE PROCEDURE [dbo].[stp_NR2_Clear_Test_Data] 
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @ProcDate AS DATETIME
	SET @ProcDate = DATEADD(DAY, -1, GETDATE())
	DECLARE @TheDay AS VARCHAR(50)
	DECLARE @NachaFileID AS NVARCHAR(10)
	DECLARE @strSQL AS NVARCHAR(255)
	DECLARE @ManyFiles AS NVARCHAR(50)
	SET @ManyFiles = '.'

	SET @TheDay = CAST(DATEPART(MONTH, @ProcDate) AS VARCHAR(2)) + '/' 
	+ CAST(DATEPART(DAY, @ProcDate) AS VARCHAR(2)) + '/' 
	+ CAST(DATEPART(YEAR, @ProcDate) AS VARCHAR(4))

	DECLARE date_c CURSOR FOR
	SELECT NachaFileID FROM tblNachaFile WHERE DateSent > @TheDay
	OPEN Date_c
	FETCH NEXT FROM Date_c INTO @NachaFileID
	WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @ManyFiles = @ManyFiles + @NachaFileID + ', '
			FETCH NEXT FROM Date_c INTO @NachaFileID
		END
	CLOSE Date_c
	DEALLOCATE Date_c

	SET @ManyFiles = SUBSTRING(@ManyFiles, 2, LEN(@ManyFiles) - 1)

	SET @strSQL = 'UPDATE tblnacharegister2 SET nachafileid = -1 WHERE nachafileid IN ('
	SET @strSQL = @strSQL + @ManyFiles
	SET @strSQL = @strSQL + ' -1'
	SET @strSQL = @strSQL + ')'

	EXEC (@strSQL)
END
GO
/****** Object:  Table [dbo].[tblEntryType]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblEntryType](
	[EntryTypeId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Type] [varchar](50) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[DisplayName] [varchar](50) NULL,
	[Order] [int] NULL,
	[Fee] [bit] NOT NULL CONSTRAINT [DF_tblEntryType_Fee]  DEFAULT ((0)),
	[Created] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[LastModifiedBy] [int] NOT NULL,
	[System] [bit] NOT NULL CONSTRAINT [DF_tblEntryType_System]  DEFAULT ((0)),
	[IsMatterEntry] [bit] NULL,
	[IsFlateRate] [bit] NULL,
	[Rate] [money] NULL,
 CONSTRAINT [PK_tblEntryType] PRIMARY KEY CLUSTERED 
(
	[EntryTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientRelocations]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_ClientRelocations '8/21/09'

CREATE procedure [dbo].[stp_ClientRelocations]
(
	@StartDate datetime = null
)
as
begin
-- Created: 9/1/09	jhernandez	Currently monitors only NC activity


declare @day int

if @StartDate is null begin -- Start from last weekday
--	set @day = datepart(weekday,getdate())
--	if (@day = 1) set @StartDate = dateadd(dd,-2,getdate()) -- Sun
--	else if (@day = 2) set @StartDate = dateadd(dd,-3,getdate()) -- Mon
--	else set @StartDate = dateadd(dd,-1,getdate())
	set @StartDate = dateadd(dd,-7,getdate())
end


-- Get primary applicants that moved
select cp.name [Attorney], c.ClientID, AccountNumber, FirstName + ' ' + LastName [Client], OldState, NewState, convert(char(10),Moved,101) [Date], Moved [Date1]
from (
	select PersonID, 
		max(case when audit_order = 2 then [State] else '' end) [OldState],
		max(case when audit_order = 1 then [State] else '' end) [NewState], 
		max(case when audit_order = 1 then dc else '1/1/1900' end) [Moved]
	from (
		select pk [PersonID], s.name [State], cast(dc as datetime) [dc], row_number() over (partition by pk order by auditid desc) as audit_order
		from tblaudit a
		join tblstate s on s.stateid = a.value
		where auditcolumnid = 108 -- StateID
	) d
	where audit_order in (1,2)
	group by PersonID
) r
join tblPerson p on p.personid = r.personid
join tblClient c on c.primarypersonid = p.personid
join tblCompany cp on cp.companyid = c.companyid
where Moved >= @StartDate
and NewState in ('North Carolina')

union

-- Get new NC clients
select cp.name [Attorney], c.ClientID, AccountNumber, FirstName + ' ' + LastName [Client], '' [OldState], s.Name [NewState], convert(char(10),c.Created,101) [Date], c.Created [Date1]
from tblPerson p
join tblClient c on c.primarypersonid = p.personid
join tblCompany cp on cp.companyid = c.companyid
join tblState s on s.stateid = p.stateid
where c.Created >= @StartDate
and s.stateid in (34) -- NC

order by [Date1] desc


end
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyIncomeDailyComparison_NonInitialDrafts]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[stp_AgencyIncomeDailyComparison_NonInitialDrafts]
(
	@UserID int ,
	@daynum int = NULL
)
as
BEGIN
	declare @CommVSChargeBack table(YearNum int,MonthNum int,DayNum int, CommissionCount int, CommissionAmount money, ChargeBackCount int, ChargeBackAmount money)
	declare @vtblCal table(YearNum int, MonthNum int, DayNum int)
	
	if @daynum is null
		set @daynum = day(getdate());

	-- fill calendar
	with    mycte as
	(
	select cast('1/1/' + cast(year(dateadd(yy,0,getdate())) as varchar) as datetime) DateValue
	union all
	select DateValue + 1
	from    mycte    
	where   DateValue + 1 < cast('12/31/' + cast(year(dateadd(yy,0,getdate())) as varchar) as datetime)
	)
	insert into @vtblCal
	select  datepart(yy, DateValue) [yearnum],datepart(mm, DateValue) [monthNum],datepart(dd, DateValue) [daynum]
	from mycte
	OPTION  (MAXRECURSION 0)


	select distinct dp.registerpaymentid 
	into #tempRegPayIDs
	from tblregisterpaymentdeposit dp 
	left outer join vw_initialdrafts df on df.registerid = dp.depositregisterid
	where df.registerid is null

	--Fill Period
	Insert into  @CommVSChargeBack( CommissionCount, CommissionAmount, DayNum,MonthNum, YearNum)
	select count(cp.commpayid) as Qty, sum(cp.amount) as Amount, day(cbt.batchdate) as [DayNum],month(cbt.batchdate) as [MonthNum],year(cbt.batchdate) as [YearNum]
	from tblcommpay cp
	inner join tblcommbatch cbt on cbt.commbatchid = cp.commbatchid 
	inner join #tempRegPayIDs dpi on dpi.registerpaymentid = cp.registerpaymentid
	inner join tblcommstruct cs on cs.commstructid = cp.commstructid
	inner join tblusercommrecaccess uca on uca.commrecid = cs.commrecid and uca.userid = @UserID
	where day(cbt.batchdate) = @DayNum and year(cbt.batchdate) = year(getdate())
	group by  year(cbt.batchdate), month(cbt.batchdate), day(cbt.batchdate) 

	select  year(cbt.batchdate)[Yearnum], month(cbt.batchdate)[monthnum], day(cbt.batchdate) [daynum],count(cb.commchargebackid) as Qty, sum(cb.amount) as Amount
	into #tblTemp
	from tblcommchargeback cb
	inner join tblcommbatch cbt on cbt.commbatchid = cb.commbatchid 
	inner join #tempRegPayIDs dpi on dpi.registerpaymentid = cb.registerpaymentid
	inner join tblcommstruct cs on cs.commstructid = cb.commstructid
	inner join tblusercommrecaccess uca on uca.commrecid = cs.commrecid and uca.userid = @UserID		
	where day(cbt.batchdate) = @DayNum and year(cbt.batchdate) = year(getdate())
	group by  year(cbt.batchdate), month(cbt.batchdate), day(cbt.batchdate) 

	Update @CommVSChargeBack Set
	ChargeBackCount = t.Qty,
	ChargeBackAmount = t.Amount
	From @CommVSChargeBack c
	join #tblTemp t on t.monthnum = c.monthnum and t.daynum = c.daynum


	Insert into  @CommVSChargeBack( ChargeBackCount, ChargeBackAmount, DayNum,MonthNum, YearNum)
	Select  t.qty, t.amount, t.daynum,t.monthnum,t.yearnum 
	from #tblTemp t
	where t.daynum not in (select daynum from @CommVSChargeBack)


	select 
	left(datename(m,cast(vc.monthnum as varchar) + '/' + cast(vc.daynum as varchar) + '/' + cast(vc.yearnum as varchar)),3) [MonthName]
	,case when datename(dw,cast(vc.monthnum as varchar) + '/' + cast(vc.daynum as varchar) + '/' + cast(vc.yearnum as varchar)) not in ('Saturday','Sunday')  then 
		isnull(CommissionAmount ,0) else Null end [Income]
	,case when datename(dw,cast(vc.monthnum as varchar) + '/' + cast(vc.daynum as varchar) + '/' + cast(vc.yearnum as varchar)) not in ('Saturday','Sunday')  then 
		isnull(ChargeBackAmount ,0) else Null end  [Chargeback]
	,case when datename(dw,cast(vc.monthnum as varchar) + '/' + cast(vc.daynum as varchar) + '/' + cast(vc.yearnum as varchar)) not in ('Saturday','Sunday')  then 
		(isnull(CommissionAmount,0) - isnull(ChargeBackAmount,0)) else Null end [Net Income]
	from @vtblCal as vc 
	left outer join @CommVSChargeBack as vt on vc.yearnum = vt.yearnum and vc.monthnum = vt.monthnum
	where vc.daynum = @daynum
	order by vc.monthnum


	drop table #tblTemp
	drop table #tempRegPayIDs
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MatterReport_Test]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <04 - 15 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Description : MatterView Report
					used IsDeleted

*/
CREATE PROCEDURE [dbo].[stp_MatterReport_Test]

(
	@MatterId int= NULL,
	@AttorneyId int =NULL,
	@MatterStatusCodeId int =NULL,
	@MatterSubStatusCodeId int = NULL,
	@CompanyId int = NULL,
	@ClientId int =NULL
)

AS


select 

m.MatterId,
m.CreditorInstanceid,
m.MatterNumber,
m.MatterDate,
m.MatterMemo,
m.AttorneyId,
a.FirstName,
a.MiddleName,
a.LastName,
CASE WHEN MiddleName IS NULL THEN a.FirstName+' '+a.LastName
	 WHEN MiddleName IN('',' ') THEN a.FirstName+ ' '+a.LastName
	 ELSE a.FirstName +' '+a.MiddleName+' '+a.LastName END as [AttorneyName],
a.Address1,
a.Address2,
a.State,
a.City,
a.Phone1,
a.EmailAddress,
m.MatterStatusCodeId,
msc.MatterStatusCode,
msc.MatterStatusCodeDescr,
mssc.MatterSubStatusCodeId,
mssc.MatterSubStatusCode,
co.Companyid,
co.Name [CompanyName],
c.ClientId,
c.AccountNumber as ClientAccountNumber,
c.PrimaryPersonId,
p.FirstName,
p.LastName,
p.FirstName +' '+ p.LastName as[ClientPrimaryApplicantName],
p.StateId [PersonStateId],
s.Name as [PersonState],
ci.CreditorInstanceid,
ci.Amount


from dbo.tblMatter m
join dbo.tblClient c on c.ClientId=m.ClientId
join dbo.tblPerson p on p.personId =c.PrimaryPersonId
join dbo.tblMatterStatusCode msc on msc.MatterStatusCodeId=m.MatterStatusCodeId
join dbo.tblMatterSubStatusCode mssc on mssc.MatterSubStatusCodeId = msc.MatterSubStatusCodeId
join dbo.tblAttorney a  on a.AttorneyId = m.AttorneyId
join dbo.tblCreditorInstance ci on ci.CreditorInstanceId = m.CreditorInstanceid
left join dbo.tblState s on s.StateId =p.StateId
left join dbo.tblState t on t.name = a.State
join dbo.tblCompany co on co.CompanyId =c.Companyid

Where IsNull(m.IsDeleted,0)=0
GO
/****** Object:  StoredProcedure [dbo].[stp_LexxCMS_client_getAll]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LexxCMS_client_getAll]

	(
		@clientID int
	)
AS
BEGIN

	/*development
	declare @clientID int
	set @clientID = 88733
	*/

select PrimaryOrder,PersonID,Relationship,FirstName,LastName,EmailAddress,Gender,SSN,DateOfBirth,street,street2,city,[state],[stateid],zipcode
from
(
SELECT 
	case when p.relationship = 'Prime' then 1 else 0 end as PrimaryOrder
	,p.personid
	,[DateOfBirth] = convert(varchar(10),p.DateOfBirth,101)
	, isnull(p.relationship,'') as [Relationship]
	, p.FirstName 
	, p.LastName 
	, p.emailAddress
	, isnull(p.gender,'') as [Gender]
	, isnull(p.SSN,'') as [SSN]
	,p.street
	,p.street2
	,p.city
	,[state]=s.abbreviation
	,[stateid]=s.stateid
	,p.zipcode
FROM tblClient AS c 
	INNER JOIN tblPerson AS p ON c.ClientID = p.ClientID 
	LEFT OUTER JOIN tblState AS s ON p.StateID = s.StateID 
WHERE
	(c.ClientID = @clientID) 
) as cData
order by PrimaryOrder desc

END


GRANT EXEC ON stp_LexxCMS_client_getAll TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyIncomeDailyComparison_InitialDrafts]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[stp_AgencyIncomeDailyComparison_InitialDrafts]
(
	@UserID int ,
	@daynum int = NULL
)
as
BEGIN
	declare @CommVSChargeBack table(YearNum int,MonthNum int,DayNum int, CommissionCount int, CommissionAmount money, ChargeBackCount int, ChargeBackAmount money)
	declare @vtblCal table(YearNum int, MonthNum int, DayNum int)
	
	if @daynum is null
		set @daynum = day(getdate());

	-- fill calendar
	with    mycte as
	(
	select cast('1/1/' + cast(year(dateadd(yy,0,getdate())) as varchar) as datetime) DateValue
	union all
	select DateValue + 1
	from    mycte    
	where   DateValue + 1 < cast('12/31/' + cast(year(dateadd(yy,0,getdate())) as varchar) as datetime)
	)
	insert into @vtblCal
	select  datepart(yy, DateValue) [yearnum],datepart(mm, DateValue) [monthNum],datepart(dd, DateValue) [daynum]
	from mycte
	OPTION  (MAXRECURSION 0)


	select distinct dp.registerpaymentid 
	into #tempRegPayIDs
	from tblregisterpaymentdeposit dp 
	join vw_initialdrafts df on df.registerid = dp.depositregisterid

	--Fill Period
	Insert into  @CommVSChargeBack( CommissionCount, CommissionAmount, DayNum,MonthNum, YearNum)
	select count(cp.commpayid) as Qty, sum(cp.amount) as Amount, day(cbt.batchdate) as [DayNum],month(cbt.batchdate) as [MonthNum],year(cbt.batchdate) as [YearNum]
	from tblcommpay cp
	inner join tblcommbatch cbt on cbt.commbatchid = cp.commbatchid 
	inner join #tempRegPayIDs dpi on dpi.registerpaymentid = cp.registerpaymentid
	inner join tblcommstruct cs on cs.commstructid = cp.commstructid
	inner join tblusercommrecaccess uca on uca.commrecid = cs.commrecid and uca.userid = @UserID
	where day(cbt.batchdate) = @DayNum and year(cbt.batchdate) = year(getdate())
	group by  year(cbt.batchdate), month(cbt.batchdate), day(cbt.batchdate) 

	select  year(cbt.batchdate)[Yearnum], month(cbt.batchdate)[monthnum], day(cbt.batchdate) [daynum],count(cb.commchargebackid) as Qty, sum(cb.amount) as Amount
	into #tblTemp
	from tblcommchargeback cb
	inner join tblcommbatch cbt on cbt.commbatchid = cb.commbatchid 
	inner join #tempRegPayIDs dpi on dpi.registerpaymentid = cb.registerpaymentid
	inner join tblcommstruct cs on cs.commstructid = cb.commstructid
	inner join tblusercommrecaccess uca on uca.commrecid = cs.commrecid and uca.userid = @UserID	
	where day(cbt.batchdate) = @DayNum and year(cbt.batchdate) = year(getdate())
	group by  year(cbt.batchdate), month(cbt.batchdate), day(cbt.batchdate) 

	Update @CommVSChargeBack Set
	ChargeBackCount = t.Qty,
	ChargeBackAmount = t.Amount
	From @CommVSChargeBack c
	join #tblTemp t on t.monthnum = c.monthnum and t.daynum = c.daynum


	Insert into  @CommVSChargeBack( ChargeBackCount, ChargeBackAmount, DayNum,MonthNum, YearNum)
	Select  t.qty, t.amount, t.daynum,t.monthnum,t.yearnum 
	from #tblTemp t
	where t.daynum not in (select daynum from @CommVSChargeBack)


	select 
	left(datename(m,cast(vc.monthnum as varchar) + '/' + cast(vc.daynum as varchar) + '/' + cast(vc.yearnum as varchar)),3) [MonthName]
	,case when datename(dw,cast(vc.monthnum as varchar) + '/' + cast(vc.daynum as varchar) + '/' + cast(vc.yearnum as varchar)) not in ('Saturday','Sunday')  then 
		isnull(CommissionAmount ,0) else Null end [Income]
	,case when datename(dw,cast(vc.monthnum as varchar) + '/' + cast(vc.daynum as varchar) + '/' + cast(vc.yearnum as varchar)) not in ('Saturday','Sunday')  then 
		isnull(ChargeBackAmount ,0) else Null end  [Chargeback]
	,case when datename(dw,cast(vc.monthnum as varchar) + '/' + cast(vc.daynum as varchar) + '/' + cast(vc.yearnum as varchar)) not in ('Saturday','Sunday')  then 
		(isnull(CommissionAmount,0) - isnull(ChargeBackAmount,0)) else Null end [Net Income]
	from @vtblCal as vc 
	left outer join @CommVSChargeBack as vt on vc.yearnum = vt.yearnum and vc.monthnum = vt.monthnum
	where vc.daynum = @daynum
	order by vc.monthnum


	drop table #tblTemp
	drop table #tempRegPayIDs
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMatterInstance]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
      Revision    : <06 - 02 March 2010>
      Category    : [TimeMatter]
      Type        : {New}
      Decription : Returns Details of a Matter
*/
CREATE PROCEDURE [dbo].[stp_GetMatterInstance]
(
   @MatterId int,
   @AccountId int=0,
   @MatterTypeId int =1		
)
AS

BEGIN

If @AccountId>0 
Begin

DECLARE @latestCreditorInstanceId int

SET @LatestCreditorInstanceId=(select TOP 1 CreditorInstanceId from tblCreditorInstance where AccountId =@AccountId order by Created desc)

select 

m.MatterId, m.MatterTypeId,
m.ClientId,
m.MatterStatusCodeId,
msc.MatterStatusCode,
CONVERT(VARCHAR(10),m.MatterDate,  101) AS MatterDate,
IsNull(ISNULL(m.CreditorInstanceId,ci.CreditorInstanceId), -1) as CreditorInstanceId,
ci.AccountNumber as AccountNumber,
m.MatterNumber,
m.MatterMemo as Note,
isNull(m.AttorneyId,-1) as AttorneyId,
--ma.AttorneyId,
ISNULL((CASE WHEN MiddleName IS NULL THEN a.FirstName+' '+a.LastName
	 WHEN MiddleName IN('',' ') THEN a.FirstName+ ' '+a.LastName
	 ELSE a.FirstName +' '+a.MiddleName+' '+a.LastName END),' ') as LocalCounsel,
m.CreatedDateTime,
m.CreatedBy,
m.MatterStatusId, ms.MatterStatus,
m.MatterSubStatusId, 
(select Mattersubstatus from tblmattersubstatus where mattersubstatusid=m.MatterSubStatusId)
as mattersubstatus



from dbo.tblMatter m
join dbo.tblMatterStatusCode msc on msc.MatterStatusCodeId=m.MatterStatusCodeId
--join dbo.tblMatterAttorney ma on ma.MatterId=m.MatterId
join dbo.tblAccount ac on ac.ClientId= m.ClientId  and ac.AccountId=@AccountId
join tblCreditorInstance ci on ac.CurrentCreditorInstanceId = ci.CreditorInstanceId
left join dbo.tblAttorney a on a.AttorneyId=m.AttorneyId
left outer join dbo.tblmatterstatus ms on ms.MatterStatusId=m.MatterstatusId

Where m.MatterId=@MatterId

End

Else If @AccountId=0 
Begin

select 

m.MatterId, m.MatterTypeId,
m.ClientId,
m.MatterStatusCodeId,
msc.MatterStatusCode,
CONVERT(VARCHAR(10),m.MatterDate,  101) AS MatterDate,
IsNull(ISNULL(m.CreditorInstanceId,ci.CreditorInstanceId),-1) as CreditorInstanceId,
c.AccountNumber as AccountNumber,
m.MatterNumber,
m.MatterMemo as Note,
isNull(m.AttorneyId,-1) as AttorneyId,
--ma.AttorneyId,
ISNULL((CASE WHEN MiddleName IS NULL THEN a.FirstName+' '+a.LastName
	 WHEN MiddleName IN('',' ') THEN a.FirstName+ ' '+a.LastName
	 ELSE a.FirstName +' '+a.MiddleName+' '+a.LastName END),' ') as LocalCounsel,
m.CreatedDateTime,
m.CreatedBy,
m.MatterStatusId, ms.MatterStatus,
m.MatterSubStatusId, 
(select Mattersubstatus from tblmattersubstatus where mattersubstatusid=m.MatterSubStatusId)
as mattersubstatus


from dbo.tblMatter m
join dbo.tblMatterStatusCode msc on msc.MatterStatusCodeId=m.MatterStatusCodeId
--join dbo.tblMatterAttorney ma on ma.MatterId=m.MatterId
left outer join tblCreditorInstance ci on m.CreditorInstanceId = ci.CreditorInstanceId
left outer join dbo.tblAttorney a on a.AttorneyId=m.AttorneyId
left outer join tblClient c on c.clientid=m.clientid
left outer join dbo.tblmatterstatus ms on ms.MatterStatusId=m.MatterstatusId

Where m.MatterId=@MatterId

End

--select 
--
--m.MatterId,
--m.ClientId,
--m.MatterStatusCodeId,
--msc.MatterStatusCode,
--CONVERT(VARCHAR(10),m.MatterDate,  101) AS MatterDate,
--ci.CreditorInstanceId,
--ci.AccountNumber as AccountNumber,
--m.MatterNumber,
--m.MatterDescription as Note,
--ma.AttorneyId,
--(CASE WHEN MiddleName IS NULL THEN a.FirstName+' '+a.LastName
--	 WHEN MiddleName IN('',' ') THEN a.FirstName+ ' '+a.LastName
--	 ELSE a.FirstName +' '+a.MiddleName+' '+a.LastName END) as LocalCounsel,
--m.CreatedDateTime,
--m.CreatedBy
--
--
--from dbo.tblMatter m
--join dbo.tblMatterStatusCode msc on msc.MatterStatusCodeId=m.MatterStatusCodeId
--join dbo.tblMatterAttorney ma on ma.MatterId=m.MatterId
--join dbo.tblAttorney a on a.AttorneyId=ma.AttorneyId
--join dbo.tblAccount ac on ac.ClientId= m.ClientId and ac.AccountId=@AccountId
--join tblCreditorInstance ci on ac.CurrentCreditorInstanceId = ci.CreditorInstanceId
--
--Where m.MatterId=@MatterId

END
GO
/****** Object:  Table [dbo].[tblLeadVendors]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblLeadVendors](
	[VendorID] [int] IDENTITY(200,1) NOT NULL,
	[VendorCode] [varchar](50) NOT NULL,
	[CategoryID] [int] NOT NULL,
	[DefaultCost] [money] NOT NULL DEFAULT ((0)),
	[LastModified] [datetime] NULL,
	[LastModifiedBy] [int] NULL,
	[SuppressionEmail] [varchar](300) NULL,
PRIMARY KEY CLUSTERED 
(
	[VendorID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tblLeadProducts]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblLeadProducts](
	[ProductID] [int] IDENTITY(1,1) NOT NULL,
	[ProductCode] [varchar](20) NOT NULL,
	[ProductDesc] [varchar](200) NOT NULL,
	[VendorID] [int] NOT NULL,
	[Cost] [money] NOT NULL DEFAULT ((0)),
	[Created] [datetime] NOT NULL DEFAULT (getdate()),
	[CreatedBy] [int] NULL,
	[LastModified] [datetime] NULL,
	[LastModifiedBy] [int] NULL,
	[Active] [bit] NOT NULL DEFAULT ((1)),
	[StartTime] [varchar](20) NULL,
	[EndTime] [varchar](20) NULL,
	[DefaultSourceId] [int] NULL,
	[IsDNIS] [bit] NOT NULL DEFAULT ((0)),
	[NewCost] [money] NULL,
	[EffectiveDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[ProductID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tblLeadApplicant]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblLeadApplicant](
	[LeadApplicantID] [int] IDENTITY(1,1) NOT NULL,
	[FirstName] [nvarchar](100) NOT NULL,
	[MiddleName] [nvarchar](50) NULL,
	[LastName] [nvarchar](100) NOT NULL,
	[FullName] [nvarchar](200) NULL,
	[Address1] [nvarchar](150) NULL,
	[City] [nvarchar](50) NULL,
	[StateID] [int] NULL CONSTRAINT [DF_tblLeadApplicant_StateID]  DEFAULT ((0)),
	[ZipCode] [nvarchar](50) NULL,
	[HomePhone] [nvarchar](20) NULL,
	[BusinessPhone] [nvarchar](50) NULL,
	[CellPhone] [nvarchar](20) NULL,
	[FaxNumber] [nvarchar](20) NULL,
	[Email] [nvarchar](50) NULL,
	[SSN] [nvarchar](12) NULL,
	[DOB] [datetime] NULL CONSTRAINT [DF_tblLeadApplicant_DOB]  DEFAULT ('1/1/1900'),
	[ConcernsID] [int] NOT NULL CONSTRAINT [DF_tblLeadApplicant_ConcernsID]  DEFAULT ((0)),
	[LeadSourceID] [int] NULL CONSTRAINT [DF_tblLeadApplicant_LeadSourceID]  DEFAULT ((0)),
	[CompanyID] [int] NULL CONSTRAINT [DF_tblLeadApplicant_CompanyID]  DEFAULT ((0)),
	[LanguageID] [int] NULL CONSTRAINT [DF_tblLeadApplicant_LanguageID]  DEFAULT ((0)),
	[DeliveryID] [int] NULL CONSTRAINT [DF_tblLeadApplicant_DeliveryID]  DEFAULT ((0)),
	[RepID] [int] NULL CONSTRAINT [DF_tblLeadApplicant_RepID]  DEFAULT ((0)),
	[StatusID] [int] NULL CONSTRAINT [DF_tblLeadApplicant_StatusID]  DEFAULT ((0)),
	[ReasonID] [int] NULL,
	[BankRoutingNumber] [nvarchar](9) NULL,
	[BankAccountNumber] [nvarchar](50) NULL,
	[BankAccountType] [nvarchar](50) NULL,
	[NameOnAccount] [nvarchar](300) NULL,
	[NotesID] [int] NULL,
	[LeadTransferInDate] [datetime] NULL CONSTRAINT [DF_tblLeadApplicant_LeadTransferInDate]  DEFAULT (getdate()),
	[LeadTransferOutDate] [datetime] NULL,
	[Created] [datetime] NULL CONSTRAINT [DF_tblLeadApplicant_Created]  DEFAULT (getdate()),
	[CreatedByID] [int] NULL,
	[LastModified] [datetime] NULL CONSTRAINT [DF_tblLeadApplicant_LastModified]  DEFAULT (getdate()),
	[LastModifiedByID] [int] NULL,
	[DebtAmount] [decimal](18, 2) NULL,
	[BehindID] [int] NULL CONSTRAINT [DF_tblLeadApplicant_BehindID]  DEFAULT ((0)),
	[LeadPhone] [nvarchar](20) NULL,
	[LeadZip] [nvarchar](50) NULL,
	[LeadName] [varchar](50) NULL,
	[LeadAssignedToDate] [datetime] NULL,
	[PaperLeadCode] [varchar](50) NULL,
	[FirstAppointmentDate] [datetime] NULL,
	[TimeZoneId] [int] NULL CONSTRAINT [DF_tblLeadApplicant_TimeZoneID]  DEFAULT ((0)),
	[EnrollmentPage] [varchar](50) NULL CONSTRAINT [DF__tblLeadAp__Enrol__6C114F1F]  DEFAULT ('newenrollment2.aspx'),
	[Processor] [int] NULL,
	[procAssigned] [datetime] NULL,
	[RgrId] [bigint] NULL,
	[Rcid] [varchar](100) NULL,
	[PublisherId] [varchar](50) NULL,
	[Subdomain] [varchar](30) NULL,
	[ProductID] [int] NULL,
	[Referrer] [varchar](300) NULL,
	[RemoteAddr] [varchar](20) NULL,
	[Cost] [money] NULL,
	[CallIdKey] [varchar](50) NULL,
	[AffiliateID] [int] NULL,
	[ReasonOther] [varchar](300) NULL,
	[Refund] [bit] NOT NULL DEFAULT ((0)),
	[RefundDate] [datetime] NULL,
 CONSTRAINT [PK_tblLeadApplicant] PRIMARY KEY CLUSTERED 
(
	[LeadApplicantID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tblLeadAffiliates]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblLeadAffiliates](
	[AffiliateID] [int] IDENTITY(1,1) NOT NULL,
	[AffiliateCode] [varchar](20) NOT NULL,
	[AffiliateDesc] [varchar](200) NOT NULL,
	[ProductID] [int] NOT NULL,
	[Created] [datetime] NOT NULL DEFAULT (getdate()),
	[CreatedBy] [int] NULL,
	[LastModified] [datetime] NULL,
	[LastModifiedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[AffiliateID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tblLeadVerification]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblLeadVerification](
	[LeadVerificationID] [int] IDENTITY(1,1) NOT NULL,
	[LeadApplicantID] [int] NOT NULL,
	[PVN] [varchar](10) NULL,
	[VDate] [char](8) NOT NULL,
	[AccessNumber] [varchar](10) NULL,
	[Result] [varchar](5) NULL,
	[Submitted] [datetime] NOT NULL DEFAULT (getdate()),
	[SubmittedBy] [int] NOT NULL,
	[Completed] [datetime] NULL,
	[ConfNum] [varchar](30) NULL,
	[ConfEntered] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[LeadVerificationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[stp_PotentialPayFees]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_PotentialPayFees]
(
	@DaysToProject int = 10
)
as

set nocount on
set ansi_warnings off

---------------------------------------------------------------------------------------------------
-- LOGIC FOR ALL FEE COLLECTION:
-- (1) Grab all fees to be paid in the system.  Fees to be paid are:
--        (a) Must be negative (less than zero) amount
--        (b) Entry type must be marked as actual fee (fee=1)
--        (c) Cannot be marked as fully paid
--        (d) Cannot be marked as VOID
--        (e) Cannot be marked as BOUNCE
-- (2) Fees must be paid in order shown by client first, then entry
--      type, then transaction date.  This is important to remember
--      when returning the list of fees to be paid in step 1
---------------------------------------------------------------------------------------------------


-- discretionary variables
declare @registerid int
declare @depositday int
declare @day int
declare @fordate datetime
declare @seed int


-- projecting the next 30 days..
set @day = 1 -- start with tomorrow

while @day <= @DaysToProject begin

	set @fordate = cast(convert(varchar(10), dateadd(day,@day,getdate()), 101) as datetime)
	set @depositday = datepart(day, @fordate)


	-- reset temp tables
	truncate table tblpotentialregistertmp
	truncate table tblpotentialregisterpaymenttmp
	truncate table tblpotentialregisterpaymentdeposittmp
	
	-- reseed tables for inserting
	select @seed = max(registerid)+1 from tblregister
	dbcc checkident (tblpotentialregistertmp, reseed, @seed) WITH NO_INFOMSGS

	select @seed = max(registerpaymentid)+1 from tblregisterpayment
	dbcc checkident (tblpotentialregisterpaymenttmp, reseed, @seed) WITH NO_INFOMSGS

	select @seed = max(registerpaymentdepositid)+1 from tblregisterpaymentdeposit
	dbcc checkident (tblpotentialregisterpaymentdeposittmp, reseed, @seed) WITH NO_INFOMSGS


	-- add projected deposits into register temp table, includes ach/adhocs/rules/checks
	exec stp_PotentialCollectDeposits @fordate


	-- add all existing register entries for this set of clients
	set identity_insert tblpotentialregistertmp on

	insert tblpotentialregistertmp (registerid,clientid,transactiondate,amount,isfullypaid,entrytypeid,entrytypeorder,fee,hold,[clear],adjustedregisterid,feemonth,feeyear,achmonth,achyear)
	select registerid,clientid,transactiondate,amount,isfullypaid,e.entrytypeid,e.[order],e.fee,hold,[clear],adjustedregisterid,feemonth,feeyear,achmonth,achyear
	from tblregister r
	join tblentrytype e on e.entrytypeid = r.entrytypeid
	where r.clientid in (select distinct clientid from tblpotentialregistertmp)
	and r.void is null
	and r.bounce is null

	set identity_insert tblpotentialregistertmp off


	-- add projected monthly fees to register temp table
	exec stp_PotentialCollectMonthlyFee @fordate


	-- get existing payments
	set identity_insert tblpotentialregisterpaymenttmp on

	insert tblpotentialregisterpaymenttmp (RegisterPaymentId,PaymentDate,FeeRegisterId,Amount,PFOBalance,SDABalance,[Clear])
	select RegisterPaymentId,PaymentDate,FeeRegisterId,rp.Amount,PFOBalance,SDABalance,rp.[Clear]
	from tblregisterpayment rp
	join tblpotentialregistertmp r on r.registerid = rp.feeregisterid 
	where rp.voided = 0
	and rp.bounced = 0

	set identity_insert tblpotentialregisterpaymenttmp off


	-- get existing deposit usage
	set identity_insert tblpotentialregisterpaymentdeposittmp on 

	insert tblpotentialregisterpaymentdeposittmp (RegisterPaymentDepositID,RegisterPaymentID,DepositRegisterID,Amount)
	select RegisterPaymentDepositID,RegisterPaymentID,DepositRegisterID,rpd.Amount
	from tblregisterpaymentdeposit rpd 
	join tblpotentialregistertmp r on r.registerid = rpd.depositregisterid 
	where rpd.voided = 0
	and rpd.bounced = 0

	set identity_insert tblpotentialregisterpaymentdeposittmp off


	-- creating payments temp table
	select *, -1 [commrecid], -1 [entrytypeid], -1 [companyid]
	into #commpaytmp
	from tblcommpay
	where 1=0


	-- reindex temp tables now that they're populated
	DBCC DBREINDEX('tblpotentialregistertmp',' ',90) WITH NO_INFOMSGS
	DBCC DBREINDEX('tblpotentialregisterpaymenttmp',' ',90) WITH NO_INFOMSGS
	DBCC DBREINDEX('tblpotentialregisterpaymentdeposittmp',' ',90) WITH NO_INFOMSGS


	-- (1) open and loop all oustanding fees		
	declare cursor_a cursor for
		select
			registerid
		from
			tblpotentialregistertmp
		where
			fee = 1
			and amount < 0 
			and isfullypaid = 0 
		order by
			clientid desc, entrytypeorder, transactiondate

	open cursor_a
	fetch next from cursor_a into @registerid
	while @@fetch_status = 0
		begin
			-- (2) run payment proc on each fee
			exec stp_PotentialPayFee @registerid
			fetch next from cursor_a into @registerid
		end
	close cursor_a
	deallocate cursor_a


	--save projections for the day
	insert tblpotentialcommpay (companyid, commrecid, entrytypeid, amount, fordate)
	select companyid, commrecid, entrytypeid, sum(amount), @fordate
	from #commpaytmp 
	group by companyid, commrecid, entrytypeid

	insert tblpotentialdeposits (companyid, agencyid, depositcount, amount, fordate)
	select c.companyid, c.agencyid, count(*), sum(amount), @fordate
	from tblpotentialregistertmp r
	join tblclient c on c.clientid = r.clientid
	where r.entrytypeid = 3
		and r.transactiondate = @fordate
		and (r.hold is null or r.hold < @fordate)
	group by c.companyid, c.agencyid


	drop table #commpaytmp

set @Day = @Day + 1

end -- while
 
set nocount off
set ansi_warnings on
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterReset]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DoRegisterReset]
	(
		@registerid int
	)

as


-----------------------------------------------------------
-- LOGIC FOR RESETTING A REGISTER
-- (1) Determine if it's a debit or a credit
-- (2) If it's a debit, check tblregisterpayment
--     for all payments made against it.  If the
--     sum of those payments equals the original
--     fee amount, then isfullypaid = 1, else 0
-- (3) If it's a credit, check tblregisterpaymentdeposit
--     for all payment deposits made with it.  If the
--     sum of those payment deposits equals the original
--     credit amount, the isfullypaid = 1, else 0
-----------------------------------------------------------


-- (1) determine debit or credit
declare @amount money

select
	@amount = coalesce(amount, 0)
from
	tblregister
where
	registerid = @registerid


if @amount < 0
	begin

		-- (2) Since debit, check register payments
		declare @sumregisterpayments money

		-- don't count any fee payments that are voided or bounced
		select
			@sumregisterpayments = coalesce(sum(amount), 0)
		from
			tblregisterpayment
		where
			feeregisterid = @registerid and
			bounced = 0 and
			voided = 0

		if @sumregisterpayments = abs(@amount)
			begin
				update tblregister set isfullypaid = 1 where registerid = @registerid
			end
		else
			begin
				update tblregister set isfullypaid = 0 where registerid = @registerid
			end

	end
else
	begin

		-- (3) Since credit, check register payment deposits
		declare @sumregisterpaymentdeposits money

		-- don't count any payment deposits that are voided or bounced
		select
			@sumregisterpaymentdeposits = coalesce(sum(amount), 0)
		from
			tblregisterpaymentdeposit
		where
			depositregisterid = @registerid and
			bounced = 0 and
			voided = 0

		if @sumregisterpaymentdeposits = @amount
			begin
				update tblregister set isfullypaid = 1 where registerid = @registerid
			end
		else
			begin
				update tblregister set isfullypaid = 0 where registerid = @registerid
			end

	end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetRegisterAmountUsed]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetRegisterAmountUsed]
	(
		@registerid int
	)

as

select
	abs(tblregister.amount) - coalesce(sum(tblregisterpayment.amount),0) as amount
from
	tblregister left outer join
	(
		select
			*
		from
			tblregisterpayment
		where
			voided = 0 and
			bounced = 0
	)
	as tblregisterpayment on tblregister.registerid = tblregisterpayment.feeregisterid
where
	tblregister.registerid = @registerid
group by
	tblregister.amount
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPaymentDepositsForPayment]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetPaymentDepositsForPayment]
	(
		@registerpaymentid int
	)

as

declare @payments table
(
	RegisterPaymentDepositID int,
	RegisterPaymentID int,
	DepositRegisterID int,
	DepositRegisterEntryTypeID int,
	DepositRegisterEntryTypeName nvarchar(50),
	DepositRegisterTransactionDate datetime,
	DepositRegisterCheckNumber nvarchar(50),
	DepositRegisterAmount money,
	DepositRegisterIsFullyPaid bit,
	Amount money,
	Voided bit,
	Bounced bit,
	ClientID int,
	AccountID int,
	EntryTypeID int
)

insert into
	@payments
select
	tblregisterpaymentdeposit.registerpaymentdepositid,
	tblregisterpaymentdeposit.registerpaymentid,
	tblregisterpaymentdeposit.depositregisterid,
	tblregister.entrytypeid as depositregisterentrytypeid,
	tblentrytype.name as depositregisterentrytypename,
	tblregister.transactiondate as depositregistertransactiondate,
	tblregister.checknumber as depositregisterchecknumber,
	tblregister.amount as depositregisteramount,
	tblregister.isfullypaid as depositregisterisfullypaid,
	tblregisterpaymentdeposit.amount as amount,
	tblregisterpaymentdeposit.voided as voided,
	tblregisterpaymentdeposit.bounced as bounced,
	tblfeeregister.clientid as clientid,
	tblfeeregister.accountid as accountid,
	tblfeeregister.entrytypeid as entrytypeid
from
	tblregisterpaymentdeposit inner join
	tblregister on tblregisterpaymentdeposit.depositregisterid = tblregister.registerid inner join
	tblregisterpayment on tblregisterpayment.registerpaymentid = tblregisterpaymentdeposit.registerpaymentid inner join
	tblregister as tblfeeregister on tblfeeregister.registerid = tblregisterpayment.feeregisterid inner join
	tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid
where
	tblregisterpaymentdeposit.registerpaymentid = @registerpaymentid
order by
	tblregister.transactiondate, tblregister.registerid

declare @clientid int
declare @accountid int
declare @secregisterpayid int

set @clientid = -1
set @accountid = -1
set @secregisterpayid = -1

select top 1
	@clientid = clientid,
	@accountid = accountid
from
	@payments
where
	entrytypeid = 42

if not @clientid = -1
begin
	select top 1
		@secregisterpayid = rp.registerpaymentid
	from
		tblregisterpayment as rp inner join
		tblregister as r on r.registerid = rp.feeregisterid
	where
		r.clientid = @clientid and
		r.accountid = @accountid and
		r.entrytypeid = 2

	if not @secregisterpayid = -1
	begin
		insert into
			@payments
		select
			tblregisterpaymentdeposit.registerpaymentdepositid,
			tblregisterpaymentdeposit.registerpaymentid,
			tblregisterpaymentdeposit.depositregisterid,
			tblregister.entrytypeid as depositregisterentrytypeid,
			tblentrytype.name as depositregisterentrytypename,
			tblregister.transactiondate as depositregistertransactiondate,
			tblregister.checknumber as depositregisterchecknumber,
			tblregister.amount as depositregisteramount,
			tblregister.isfullypaid as depositregisterisfullypaid,
			tblregisterpaymentdeposit.amount as amount,
			tblregisterpaymentdeposit.voided as voided,
			tblregisterpaymentdeposit.bounced as bounced,
			tblfeeregister.clientid as clientid,
			tblfeeregister.accountid as accountid,
			tblfeeregister.entrytypeid as entrytypeid
		from
			tblregisterpaymentdeposit inner join
			tblregister on tblregisterpaymentdeposit.depositregisterid = tblregister.registerid inner join
			tblregisterpayment on tblregisterpayment.registerpaymentid = tblregisterpaymentdeposit.registerpaymentid inner join
			tblregister as tblfeeregister on tblfeeregister.registerid = tblregisterpayment.feeregisterid inner join
			tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid
		where
			tblregisterpaymentdeposit.registerpaymentid = @secregisterpayid
	end
end

select
	*
from
	@payments
GO
/****** Object:  StoredProcedure [dbo].[stp_PayChargebackPaymentRec]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayChargebackPaymentRec]
(
	@registerpaymentid int,
	@commscenid int,
	@parentcommrecid int,
	@companyid int
)
as

-----------------------------------------------------------------------------------------------------
-- LOGIC FOR ISSUING CHARGEBACK AGAINST COMMISSION PAYMENT:
-- (1) In order (RLTD), loop through recipient recursively
-- (2) For each recipient, write out the chargeback values to tblcommchargeback, including:
--     (a) RegisterPaymentID - which will give us the client, fee, and payment info
--     (b) CommStructID - which will give us the recipient,  parent recipient, scenario, and percent
--     (c) Amount
-- (3) Sum and return the total percent used
-----------------------------------------------------------------------------------------------------


-- discretionary variables
declare @commstructid int
declare @commrecid int
declare @amount money
declare @paymentamount money
declare @amountchargedback money
declare @entrytypeid int
declare @percent money


-- (1) prepare loop for recipients against current parent and scenario
declare cursor_PayCommissionRec cursor local for
	select
		commstructid,
		commrecid
	from
		tblcommstruct
	where
		companyid = @companyid and
		commscenid = @commscenid and 
		parentcommrecid = @parentcommrecid
	order by
		[order]		

open cursor_PayCommissionRec

fetch next from cursor_PayCommissionRec into @commstructid, @commrecid
while @@fetch_status = 0

	begin

		set @amount = null
		set @paymentamount = null
		set @amountchargedback = null
		set @entrytypeid = null
		set @percent = null

		-- find original payment amount and entrytypeid
		select
			@paymentamount = tblregisterpayment.amount,
			@entrytypeid = tblregister.entrytypeid
		from
			tblregisterpayment inner join
			tblregister on tblregisterpayment.feeregisterid = tblregister.registerid
		where
			tblregisterpayment.registerpaymentid = @registerpaymentid

		-- find percent owed for this entrytype and commstruct
		select
			@percent = [percent]
		from
			tblcommfee
		where
			entrytypeid = @entrytypeid and
			commstructid = @commstructid

		-- assuming we found a fee payment amount, fee entrytype and percent for the commstruct...
		if not @paymentamount is null and not @entrytypeid is null and not @percent is null
			begin

				-- calculate the amount for this candidate
				set @amount = round(@paymentamount * @percent, 2)

				-- find amount already charged back already
				select
					@amountchargedback = sum(amount)
				from
					tblcommchargeback
				where
					registerpaymentid = @registerpaymentid

				-- amount must be less then amountleft which is equal to (paymentamount - amountchargedback)
				if (@paymentamount - @amountchargedback) < @amount
					begin
						set @amount = @paymentamount - @amountchargedback
					end

				-- assuming there is some positive amount to charge back....
				if @amount > 0
					begin

						-- (2) write out chargeback
						insert into tblcommchargeback
						(
							chargebackdate,
							registerpaymentid,
							commstructid,
							[percent],
							amount
						)
						values
						(
							getdate(),
							@registerpaymentid,
							@commstructid,
							@percent,
							@amount
						)

					end

			end

		-- recursively run this same proc again with this recipient as parent
		exec stp_PayChargebackPaymentRec @registerpaymentid, @commscenid, @commrecid, @companyid

		fetch next from cursor_PayCommissionRec into @commstructid, @commrecid

	end

close cursor_PayCommissionRec
deallocate cursor_PayCommissionRec
GO
/****** Object:  StoredProcedure [dbo].[stp_PayCommissionRec]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayCommissionRec]
(
	@registerpaymentid int,
	@commscenid int,
	@parentcommrecid int = null,
	@companyid int
)
as


------------------------------------------------------------------
-- LOGIC FOR COMMISSION PAYMENT:
-- (1) In order (RLTD), loop through recipient recursively
-- (2) For each recipient, write out the commission values
--		to tblregisterpaymentcommission including the following:
--     (a) RegisterPaymentID - which will give us the
--         client, fee, and payment info
--     (b) CommStructID - which will give us the recipient, 
--         parent recipient, scenario, and percent
--     (c) Amount
-- (3) Sum and return the total percent used
------------------------------------------------------------------


-- discretionary variables
declare @commstructid int
declare @commrecid int
declare @amount money
declare @paymentamount money
declare @amountpaid money
declare @entrytypeid int
declare @percent money


-- (1) prepare loop for recipients against current parent and scenario
declare cursor_PayCommissionRec cursor local for
	select
		commstructid,
		commrecid
	from
		tblcommstruct
	where
		companyid = @companyid and
		(
			(commscenid = @commscenid and parentcommrecid = @parentcommrecid) or
			(commscenid = @commscenid and parentcommrecid is null and @parentcommrecid is null)
		)
	order by
		[order]

open cursor_PayCommissionRec

fetch next from cursor_PayCommissionRec into @commstructid, @commrecid
while @@fetch_status = 0

	begin

		set @amount = null
		set @paymentamount = null
		set @amountpaid = null
		set @entrytypeid = null
		set @percent = null

		-- find original payment amount and entrytypeid
		select
			@paymentamount = tblregisterpayment.amount,
			@entrytypeid = tblregister.entrytypeid
		from
			tblregisterpayment inner join
			tblregister on tblregisterpayment.feeregisterid = tblregister.registerid
		where
			tblregisterpayment.registerpaymentid = @registerpaymentid

		-- find percent owed for this entrytype and commstruct
		select
			@percent = [percent]
		from
			tblcommfee
		where
			entrytypeid = @entrytypeid and
			commstructid = @commstructid

		-- assuming we found a fee payment amount, fee entrytype and percent for the commstruct...
		if not @paymentamount is null and not @entrytypeid is null and not @percent is null
			begin

				-- calculate the amount for this candidate
				set @amount = round(@paymentamount * @percent, 2)

				-- find amount already paid out in commission already
				select
					@amountpaid = sum(amount)
				from
					tblcommpay
				where
					registerpaymentid = @registerpaymentid

				-- amount must be less then amountleft which is equal to (paymentamount - amountpaid)
				if (@paymentamount - @amountpaid) < @amount
					begin
						set @amount = @paymentamount - @amountpaid
					end

				-- assuming there is some positive amount to pay....
				if @amount > 0
					begin

						-- (2) write out payment
						insert into tblcommpay
						(
							registerpaymentid,
							commstructid,
							[percent],
							amount
						)
						values
						(
							@registerpaymentid,
							@commstructid,
							@percent,
							@amount
						)

					end

			end

		-- recursively run this same proc again with this recipient as parent
		exec stp_PayCommissionRec @registerpaymentid, @commscenid, @commrecid, @companyid

		fetch next from cursor_PayCommissionRec into @commstructid, @commrecid

	end

close cursor_PayCommissionRec
deallocate cursor_PayCommissionRec
GO
/****** Object:  StoredProcedure [dbo].[stp_PayChargebackPayment]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayChargebackPayment]
	(
		@registerpaymentid int
	)

as


-------------------------------------------------------------------------------------------------------
-- LOGIC FOR CHARGING BACK COMMISSION FOR THIS PAYMENT:
-- (1) Find client for this payment
-- (2) Find commission scenario for client.  If commission scenario is not found, use
--     the default commission scenario
-- (3) In order (RLTD), loop through recipient recursively and fire off chargebacks to be issued
-- (4) After looping and handing out chargebacks, check to make sure that there isn't a small
--     overage left to be collected
--     (a) find and fill the entrytypeid of this payment
--     (b) find and fill total percent for this commscen and fee type
--     (c) If the total percent used is 100, then all overages should be small (penny or two)
--         and should be charged back against the last recipient.
--     (d) If the total percent used is not equal to 100, then any overage is planned and
--         should be charged back against the default commission structure
-------------------------------------------------------------------------------------------------------


-- discretionary variables
declare @clientid int
declare @clientenrolled datetime
declare @companyid int
declare @agencyid int
declare @commscenid int

declare @percenttotal money
declare @amounttotal money
declare @amountchargedback money
declare @amountleft money
declare @lastcommchargebackid int
declare @parentcommrecid int
declare @defaultcommscenid int
declare @defaultcommstructid int
declare @entrytypeid int
declare @percentleft money
declare @retention int


-- (1) get client
select
	@clientid = clientid
from
	tblregisterpayment inner join
	tblregister on tblregisterpayment.feeregisterid = tblregister.registerid
where
	tblregisterpayment.registerpaymentid = @registerpaymentid


-- get created date for client
select
	@clientenrolled = created,
	@agencyid = agencyid,
	@companyid = companyid
from
	tblclient
where
	clientid = @clientid


-- assuming a client was found...
if not @clientid is null
	begin

		-- assuming an agency was found for this client...
		if not @agencyid is null
			begin
			
				select @retention = datediff(m,@clientenrolled,getdate())

				if (day(@clientenrolled) > day(getdate())) begin
					set @retention = @retention - 1
				end					

				-- (2) get commission scenario
				select
					@commscenid = commscenid
				from
					tblcommscen
				where
					agencyid = @agencyid and
					startdate <= @clientenrolled and
					(
						enddate is null or
						enddate >= cast(convert(char(10), @clientenrolled, 101) as datetime)
					) and
					@retention between retentionfrom and retentionto

				-- get default commission scenario if there is no commscen found for this client
				if @commscenid is null
					begin
						select
							@commscenid = commscenid
						from
							tblcommscen
						where
							[default] = 1
							
						-- Log
						insert tblDefaultScenarioLog (ClientID,ClientEnrolled,AgencyID,RegisterPaymentID) values (@clientid,@clientenrolled,@agencyid,@registerpaymentid)
					end

				-- assuming a commission scenario (or default commscen) was found for this client....
				if not @commscenid is null
					begin
						set @parentcommrecid = null
						
						select @parentcommrecid = r.commrecid
						from tblclient c 
						inner join tblcommrec r on r.companyid = c.companyid
						where c.clientid = @clientid and r.istrust = 1 and not c.companyid is null

						-- (3) recursively loop recipients in the structure for this
						--     commission scenario and issue chargebacks
						exec stp_PayChargebackPaymentRec @registerpaymentid, @commscenid, @parentcommrecid, @companyid

					end -- comm scen exists
			end -- agency exists
	end -- client exists


-- (4) Check for unused overages
select
	@amounttotal = coalesce(amount, 0)
from
	tblregisterpayment
where
	registerpaymentid = @registerpaymentid

select
	@amountchargedback = coalesce(sum(amount), 0)
from
	tblcommchargeback
where
	registerpaymentid = @registerpaymentid


set @amountleft = @amounttotal - @amountchargedback
set @percentleft = @amountleft / @amounttotal


if @amountleft > 0
	begin

		-- (4.a) find and fill the entrytypeid of this payment
		select
			@entrytypeid = tblregister.entrytypeid
		from
			tblregisterpayment inner join
			tblregister on tblregisterpayment.feeregisterid = tblregister.registerid
		where
			tblregisterpayment.registerpaymentid = @registerpaymentid


		-- (4.b) find and fill total percent for this commscen and fee type
		select
			@percenttotal = isnull(sum(tblcommfee.[percent]), 0)
		from
			tblcommfee inner join
			tblcommstruct on tblcommfee.commstructid = tblcommstruct.commstructid
		where
			tblcommfee.entrytypeid = @entrytypeid and
			tblcommstruct.commscenid = @commscenid and
			tblcommstruct.companyid = @companyid


		-- (4.c) determine if total percent is 100% - meaning all should have been charged back to recipients
		if @percenttotal = 1
			begin

				-- if any positive amount is left, charge it back to the last recipient for this chargeback
				select top 1
					@lastcommchargebackid = commchargebackid
				from
					tblcommchargeback
				where
					registerpaymentid = @registerpaymentid
				order by
					commchargebackid desc

				update
					tblcommchargeback
				set
					amount = amount + @amountleft
				where
					commchargebackid = @lastcommchargebackid

			end
		else -- (4.d)
			begin

				-- find and fill the default comm scenario
				select
					@defaultcommscenid = commscenid
				from
					tblcommscen
				where
					[default] = 1

				if not @defaultcommscenid is null and not @entrytypeid is null
					begin

						-- linking from the default commscen, grab the first commstruct that has the same fee type of this payment
						select
							@defaultcommstructid = tblcommstruct.commstructid
						from
							tblcommfee inner join
							tblcommstruct on tblcommfee.commstructid = tblcommstruct.commstructid inner join
							tblcommscen on tblcommstruct.commscenid = tblcommscen.commscenid
						where
							tblcommscen.commscenid = @defaultcommscenid and
							tblcommfee.entrytypeid = @entrytypeid and
							tblcommstruct.companyid = @companyid

						if not @defaultcommstructid is null
							begin

								-- issue chargeback
								insert into tblcommchargeback
								(
									chargebackdate,
									registerpaymentid,
									commstructid,
									[percent],
									amount
								)
								values
								(
									getdate(),
									@registerpaymentid,
									@defaultcommstructid,
									@percentleft,
									@amountleft
								)
							end

				end -- @defaultcommstructid is null
			end -- not @percenttotal = 100
	end -- amountleft > 0
	
insert tblPayChargebackPaymentLog (RegisterPaymentID,AmountLeft) values (@registerpaymentid,@amountleft)
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterPaymentClear]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DoRegisterPaymentClear]
	(
		@registerPaymentid int,
		@by int = 28,
		@when datetime = null
	)

as
begin

if @when is null
	begin
		set @when = getdate()
	end

----------------------------------------------------
-- LOGIC FOR CLEARING A REGISTER
-- (1) Mark register as clear by updating fields
--     (a) Set clear = @when value passed in
--     (b) Set clearby = @by value passed in
----------------------------------------------------


-- (1) clear register
update
	tblregisterpayment
set
	clear = @when,
	clearby = @by,
	modified = getdate(),
	modifiedBy = @by
where
	registerpaymentid = @registerpaymentid


end
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertShadowFee]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_InsertShadowFee]
(
	@registerpaymentid int
)

AS

declare @clientid int
declare @accountnumber nvarchar(15)
declare @companyid int
declare @registerid int
declare @amount money
declare @trustid int
declare @name varchar(50)


SELECT
	@clientid = c.ClientID,
	@accountnumber = c.AccountNumber,
	@companyid = c.CompanyID,
	@registerid = r.RegisterID,
	@amount = rp.Amount,
	@trustid = c.TrustID,
	@name = cp.ControlledAccountName
FROM
	tblRegisterPayment as rp
	inner join tblRegister as r on r.RegisterID = rp.FeeRegisterID
	inner join tblClient as c on c.ClientID = r.ClientID
	inner join tblCompany cp on cp.CompanyID = c.CompanyID
WHERE
	rp.RegisterPaymentID = @registerpaymentid



INSERT INTO tblNachaRegister2
(
	Amount,
	CompanyID,
	ShadowStoreId,
	RegisterId,
	RegisterPaymentID,
	ClientID,
	TrustID,
	IsPersonal,
	[Name],
	Flow
)
VALUES
(
	@amount,
	@companyid,
	@accountnumber,
	@registerid,
	@registerpaymentid,
	@clientid,
	@trustid,
	0,
	@name,
	'debit' -- debit shadow store and credit GCA
)
GO
/****** Object:  StoredProcedure [dbo].[_stp_PayCommissionRec_TEST]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[_stp_PayCommissionRec_TEST]
(
	@registerpaymentid int,
	@commscenid int,
	@parentcommrecid int,
	@companyid int
)
as

declare @commstructid int
declare @commrecid int
declare @amount money
declare @paymentamount money
declare @amountpaid money
declare @entrytypeid int
declare @percent money


-- (1) prepare loop for recipients against current parent and scenario
declare cursor_PayCommissionRec cursor local for
	select
		commstructid,
		commrecid
	from
		tblcommstruct
	where
		companyid = @companyid and
		commscenid = @commscenid and 
		parentcommrecid = @parentcommrecid
	order by
		[order]

open cursor_PayCommissionRec

fetch next from cursor_PayCommissionRec into @commstructid, @commrecid
while @@fetch_status = 0

	begin

		set @amount = null
		set @paymentamount = null
		set @amountpaid = null
		set @entrytypeid = null
		set @percent = null

		-- find original payment amount and entrytypeid
		select
			@paymentamount = tblregisterpayment.amount,
			@entrytypeid = tblregister.entrytypeid
		from
			tblregisterpayment inner join
			tblregister on tblregisterpayment.feeregisterid = tblregister.registerid
		where
			tblregisterpayment.registerpaymentid = @registerpaymentid

		-- find percent owed for this entrytype and commstruct
		select
			@percent = [percent]
		from
			tblcommfee
		where
			entrytypeid = @entrytypeid and
			commstructid = @commstructid

		-- assuming we found a fee payment amount, fee entrytype and percent for the commstruct...
		if not @paymentamount is null and not @entrytypeid is null and not @percent is null
			begin

				-- calculate the amount for this candidate
				set @amount = round(@paymentamount * @percent, 2)

				-- find amount already paid out in commission already
				select
					@amountpaid = sum(amount)
				from
					#tmpcommpay
				where
					registerpaymentid = @registerpaymentid

				-- amount must be less then amountleft which is equal to (paymentamount - amountpaid)
				if (@paymentamount - @amountpaid) < @amount
					begin
						set @amount = @paymentamount - @amountpaid
					end

				-- assuming there is some positive amount to pay....
				if @amount > 0
					begin
						-- (2) write out payment
						insert into #tmpcommpay
						(
							registerpaymentid,
							commstructid,
							[percent],
							amount
						)
						values
						(
							@registerpaymentid,
							@commstructid,
							@percent,
							@amount
						)
					end
			end
print cast(@amount as varchar(10))
print cast(@commrecid as varchar(10))
		-- recursively run this same proc again with this recipient as parent
		exec _stp_PayCommissionRec_TEST @registerpaymentid, @commscenid, @commrecid, @companyid

		fetch next from cursor_PayCommissionRec into @commstructid, @commrecid

	end

close cursor_PayCommissionRec
deallocate cursor_PayCommissionRec
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterRebalanceClient]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DoRegisterRebalanceClient]
	(
		@clientid int
	)

as


-------------------------------------------------------------------------------
-- LOGIC FOR REBALANCING A CLIENT
-- (1) Loop through each transaction for a client
--     (a) Order first by TransactionDate
--     (b) Order second by RegisterID
-- (2) On each transaction add the current register amount to the balance of
--     the previous register and make that the new balance
--     (a) If OriginalAmount exists, use that instead of Amount
-- (3) Update SDABalance and PFOBalance
--     (a) If OriginalAmount exists, use that instead of Amount
------------------------------------------------------------------------------


-- discretionary variables
declare @date datetime
declare @type varchar (10)
declare @id int
declare @amount money
declare @bounceorvoid bit
declare @fee bit
declare @adjustment bit

declare @lastbalance money
declare @sdabalance money
declare @pfobalance money

declare @transactions table
	(
		date datetime not null,
		[type] varchar (10) not null,
		id int not null,
		amount money not null,
		bounceorvoid bit not null,
		fee bit null,
		adjustment bit null
	)


-- bring all register records for this client into the transactions table
insert into
	@transactions
select
	transactiondate,
	'register',
	registerid,
	case when originalamount is null then amount else originalamount end,
	case when bounce is null and void is null then 0 else 1 end,
	tblentrytype.fee,
	case when adjustedregisterid is null then 0 else 1 end
from
	tblregister inner join
	tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid
where
	clientid = @clientid


-- bring all payment records for this client into the transactions table
insert into
	@transactions
select
	rp.paymentdate,
	'payment',
	rp.registerpaymentid,
	rp.amount,
	case when rp.bounced = 0 and rp.voided = 0 then 0 else 1 end,
	null,
	null
from
	tblregisterpayment rp inner join
	tblregister r on rp.feeregisterid = r.registerid
where
	r.clientid = @clientid


-- initialize balances
set @lastbalance = 0
set @sdabalance = 0
set @pfobalance = 0

--select * from @transactions order by date, [type] desc, id

-- loop all clients transactions - order by date, then register-before-payments, then id
declare cursor_DoRegisterRebalanceClient cursor for
	select * from @transactions order by date, [type] desc, id

open cursor_DoRegisterRebalanceClient

fetch next from cursor_DoRegisterRebalanceClient into @date, @type, @id, @amount, @bounceorvoid, @fee, @adjustment
while @@fetch_status = 0

	begin

		if @type = 'register'
			begin

				-- only increment if not bounced or void
				if @bounceorvoid = 0
					begin
						set @lastbalance = @lastbalance + @amount

						if @fee = 1 or @adjustment = 1 -- increase pfo balance
							begin
								set @pfobalance = @pfobalance + (@amount * -1)
							end
						else
							begin
								set @sdabalance = @sdabalance + @amount
							end
					end

				-- only save to register table
				update
					tblregister
				set
					balance = @lastbalance,
					sdabalance = @sdabalance,
					pfobalance = @pfobalance
				where
					registerid = @id

			end
		else -- payment
			begin

				-- only increment if not bounced or void
				if @bounceorvoid = 0
					begin
						-- move amount from sda to pfo
						set @sdabalance = @sdabalance - @amount
						set @pfobalance = @pfobalance - @amount
					end

				-- only save to payment table
				update
					tblregisterpayment
				set
					sdabalance = @sdabalance,
					pfobalance = @pfobalance
				where
					registerpaymentid = @id

			end


		fetch next from cursor_DoRegisterRebalanceClient into @date, @type, @id, @amount, @bounceorvoid, @fee, @adjustment

	end

close cursor_DoRegisterRebalanceClient
deallocate cursor_DoRegisterRebalanceClient


-- update the client's master balance fields
update
	tblclient
set
	sdabalance = @sdabalance,
	pfobalance = @pfobalance
where
	clientid = @clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_QueryCache_PopulateProjectedCommission]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_QueryCache_PopulateProjectedCommission]
as

set nocount on

declare @verbose bit
set @verbose = 0;

declare @classname varchar(100)
set @classname='default_aspx' 
declare @queryname varchar(100)
set @queryname='Projected Commissions'

declare @monthdatenow datetime  --first of this month
declare @monthdate datetime --Current month to be calculated against.  Day is always the first.
declare @monthstart datetime --Beginning point of @monthdate (first second of month)
declare @monthend datetime  --End point of @monthdate (second before the next month)

set @monthdatenow=
	convert(datetime, 
		convert(varchar, datepart(year,getdate())) + '.' 
		+ convert(varchar, datepart(month,getdate())) + '.01'
	)

set @monthdate=dateadd(month,-6,getdate())
set @monthdate=
	convert(datetime, 
		convert(varchar, datepart(year,@monthdate)) + '.' 
		+ convert(varchar, datepart(month,@monthdate)) + '.01'
	)

declare @i int
set @i = 1
while @i <= 13 begin

	set @monthstart=
		convert(datetime, 
			convert(varchar, datepart(year,@monthdate)) + '.' 
			+ convert(varchar, datepart(month,@monthdate)) + '.01'
		)
	set @monthend=dateadd(ss, -1, dateadd(month,1,@monthstart))

	create table #tmpRules
	(
		ClientID int,
		DepositDay int,
		DepositAmount money
	)

	insert into #tmpRules
	(
		clientid,
		depositday,
		depositamount
	)	
	select 
		r.clientid,
		r.depositday,
		r.depositamount
	from 
		tblruleach r
	where 
		r.ruleachid in
		(
			select 
				max(nr.ruleachid) as ruleachid
			from
				tblruleach nr 
				inner join tblclient nc on nr.clientid=nc.clientid
			where
				dbo.fitdate(
					datepart(year,@monthdate),
					datepart(month,@monthdate),
					nc.depositday
				) >= nr.startdate
				and dbo.fitdate(
					datepart(year,@monthdate),
					datepart(month,@monthdate),
					nc.depositday
				) < isnull(dateadd(day,1,nr.enddate), @monthend)
			group by
				nc.clientid
		)

	--Create Potentials table
	create table #tmpPotential
	(
		clientid int primary key,
		firstname varchar(50),
		lastname varchar(50),
		mca money,
		da money,
		ea money,
		depositmethod varchar(50),
		ach bit,
		exceptionreason varchar(1000)
	) 

	create index idx_tmppotential_mca on #tmppotential(mca)
	create index idx_tmppotential_da on #tmppotential(da)
	create index idx_tmppotential_ea on #tmppotential(ea)
	create index idx_tmppotential_ach on #tmppotential(ach)

	--Create predicted commission table
	create table #tmpPDC
	(
		clientid int,
		commrecid int,
		feepaymentamount money,
		[percent] float,
		commissionearned money,
		entrytypeid int,
		ismca bit
	)

	create index idx_tmppdc_clientid on #tmppdc(clientid)
	create index idx_tmppdc_commrecid on #tmppdc(commrecid)
	create index idx_tmppdc_entrytypeid on #tmppdc(entrytypeid)
	create index idx_tmppdc_ismca on #tmppdc(ismca)

	declare @clientcount float
	declare @clientcur float


	--Variables for cursor 'c'
	declare @clientid int
	declare @agencyid int
	declare @depositstartdate datetime
	declare @mca money
	declare @depositday int
	declare @depositmethod varchar(50)
	declare @created datetime
	declare @firstname varchar(50)
	declare @lastname varchar(50)
	declare @routingnumber varchar(50)
	declare @accountnumber varchar(50)

	--Variables for cursor 'c2'
	declare @feeamount money
	declare @entrytypeid int
	declare @registerid int

	--Manipulation variables
	declare @ea money
	declare @ruleamount money
	declare @ruleday int
	declare @da money
	declare @hypdepamt money --hypothetical deposit amount
	declare @continue bit
	declare @lefttopay money
	declare @paymentamount money
	declare @commscenid int
	declare @ismca bit
	declare @commrecid int
	declare @exceptionreason varchar(1000)	
	declare @customid varchar(50)
	declare @col int	

	--only run this process if the projected commission will be used for this month
	if (
		@monthdate >= @monthdatenow 
		or not exists(
			select querycacheid from tblquerycache where 
				classname=@classname 
				and queryname=@queryname
				and convert(varchar,customid) like '%' + convert(varchar,@monthdate,6)
				and row=1 and col=4
		)
		or not exists(
			select querycacheid from tblquerycache where 
				classname=@classname 
				and queryname=@queryname
				and convert(varchar,customid) like '%' + convert(varchar,@monthdate,6)
				and row=1 and col=1
		)
	) begin

		print  '(' + convert(varchar,getdate(),9) + ') ' +
			'Predicting Commission for month ' + convert(varchar,@monthdate,6) 
			

		set @clientcount=
		(
			select 
				count(clientid)
			from  
				tblclient
			where
				isnull(depositamount,0) > 0 
				and not depositstartdate is null
				and not currentclientstatusid in (15,17,18)
		)

		

		set @clientcur=0
		--Loop through all potentials
		declare c cursor for 
			select 
				c.clientid, 
				p.firstname,
				p.lastname,
				c.agencyid,
				c.depositstartdate, 
				c.depositamount,
				c.depositday,
				isnull(c.depositmethod, 'Check'),
				c.created,
				c.bankroutingnumber,
				c.bankaccountnumber
			from  
				tblclient c inner join
				tblperson p on c.primarypersonid=p.personid
			where
				isnull(c.depositamount,0) > 0 
				and not c.depositstartdate is null
				and not currentclientstatusid in (15,17,18)

		open c
		fetch next from c into @clientid,@firstname,@lastname,@agencyid,@depositstartdate,@mca,@depositday,@depositmethod,@created,@routingnumber,@accountnumber
		while @@fetch_status=0 begin
			set @exceptionreason=null

			-- 0 deposit day is equivalent to null
			if @depositday<=0 
				set @depositday=null

			--status update
			set @clientcur=@clientcur+1

			if @verbose = 1 and (convert(int,@clientcur) % convert(int,@clientcount/100)) = 0 begin
				
				print '(' + convert(varchar,getdate(),9) + ') ' + 
					convert(varchar,convert(int,@clientcur/@clientcount*100,3)) + '% of ' + convert(varchar,@clientcount) + ' Clients' 
			
			end

			--find the commscenid for this client
			set @commscenid=
				(select 
					commscenid 
				from 
					tblcommscen 
				where 
					agencyid=@agencyid 
					and @created between startdate and isnull(enddate,@created))

			if @commscenid is null begin
				set @commscenid=(select commscenid from tblcommscen where [default]=1)
			end

			
			set @ruleamount = 
			(
				select
					r.depositamount
				from
					#tmprules r
				where
					clientid=@clientid
			)
			
			if not @ruleamount is null begin 
				set @da=@ruleamount				
				set @ea=@mca-@ruleamount
				if @ruleamount > 0 begin
					set @exceptionreason = 'Client has an active positive-amount rule.'
				end else begin
					set @exceptionreason='Client has an active zero-amount rule.'
				end
			end else if @depositday is null begin
				set @da=0
				set @ea=@mca
				set @exceptionreason='Client has no deposit day.'
			end else if @depositmethod='ach' and (@routingnumber is null or @routingnumber='' or @accountnumber is null or @accountnumber='') begin
				set @da=0
				set @ea=@mca
				set @exceptionreason='Client has missing banking information.'
			--If listed DepositStartDate is on or before current month's deposit day
			--don't need to check for null day on fitdate here because we know it is not null
			end else if isnull(@depositstartdate,@monthstart) <= dbo.fitdate(datepart(year,@monthdate),datepart(month,@monthdate),@depositday) begin
				set @da=@mca
				set @ea=0
			end else begin --DepositStartDate after current month's deposit day
				set @exceptionreason='DepositStartDate is after current month''s deposit day.'
				set @da=0
				set @ea=@mca
			end
			
			--Save record in Potentials table
			insert into #tmppotential
			(
				clientid,
				firstname,
				lastname,
				mca,
				da,
				ea,
				depositmethod,
				ach,
				exceptionreason
			)
			values
			(
				@clientid,
				@firstname,
				@lastname,
				@mca,
				@da,
				@ea,
				@depositmethod,
				(case when @depositmethod='ach' then 1 else 0 end),
				@exceptionreason
			)

			--Calculate commission against MCA amount
			set @hypdepamt = @mca
			set @continue=1
			set @ismca = (case when @da=@mca then null else 1 end)
			while @continue=1 begin
				--Loop through all un-fully-paid fees for this client
				--	Order by the entrytype order
				declare c2 cursor for 
					select 
						r.registerid,
						r.amount,
						et.entrytypeid
					from 
						tblregister r inner join
						tblentrytype et on r.entrytypeid=et.entrytypeid
					where 
						et.fee=1
						and r.clientid=@clientid
						and not r.isfullypaid=1
						--and (select abs(isnull(sum(amount),0)) from tblregisterpayment where feeregisterid=@registerid and bounced=0 and voided=0)>0
					order by 
						et.[order]
				open c2
				fetch next from c2 into @registerid,@feeamount,@entrytypeid
				while @@fetch_status=0 and @hypdepamt > 0 begin
					--Find the unpaid amount of this fee
					set @lefttopay = abs(@feeamount)-
						(select abs(isnull(sum(amount),0)) from tblregisterpayment where feeregisterid=@registerid and bounced=0 and voided=0)

					/*
					Payment amount is the amount of the fee, if
					what's left of the deposit covers it.  Otherwise,
					it's what's left of the deposit.
					*/
					if @hypdepamt >= @lefttopay begin
						set @paymentamount = @lefttopay
					end else begin
						set @paymentamount = @hypdepamt
					end --if

					--Decrement the deposit amount by the payment amount
					set @hypdepamt = @hypdepamt - @paymentamount
					
					--Record commission amounts for this payment
					insert into #tmppdc
					(
						clientid,
						commrecid,
						feepaymentamount,
						[percent],
						commissionearned,
						entrytypeid,
						ismca
					)
					select
						@clientid,
						cr.commrecid,
						@paymentamount,
						cf.[percent],
						(cf.[percent]*@paymentamount),
						@entrytypeid,
						@ismca
					from
						tblcommrec cr inner join 
						tblcommstruct cs on cr.commrecid=cs.commrecid inner join
						tblcommfee cf on cs.commstructid=cf.commstructid
					where
						cf.entrytypeid=@entrytypeid
						and cs.commscenid=@commscenid

					--Loop to the next un-fully-paid fee
					fetch next from c2 into @registerid,@feeamount,@entrytypeid
				end --while
				close c2
				deallocate c2

				if isnull(@ismca, 0)=0 begin --Finished.  Either done with DA, or don't need to do DA
					set @continue=0
				end else begin --finished calculating MCA.  Need to calculate DA
					set @continue=1
					set @hypdepamt = @da
					set @ismca=0
				end --if
			end --while


			--Loop to next potential client
			fetch next from c into @clientid,@firstname,@lastname,@agencyid,@depositstartdate,@mca,@depositday,@depositmethod,@created,@routingnumber,@accountnumber
		end --while
		close c
		deallocate c
	end --if

	if (
		@monthdate > @monthdatenow 
		or not exists(
			select querycacheid from tblquerycache where 
				classname=@classname 
				and queryname=@queryname
				and convert(varchar,customid) like '%' + convert(varchar,@monthdate,6)
				and row=1 and col=1
		)
	) begin
		print  '(' + convert(varchar,getdate(),9) + ') ' + 
			'Saving Potential, Exception and Planned for month ' + convert(varchar,@monthdate,6) 

		declare c3 cursor for select commrecid from tblcommrec
		open c3
		set @commrecid = null
		while @@fetch_status=0 or @commrecid is null begin
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Potential/Planned for CommRecID ' + convert(varchar,isnull(@commrecid, ''))
			end

			set @customid=''
			if not @commrecid is null
				set @customid=convert(varchar,@commrecid) + '|'
			set @customid = @customid + convert(varchar,@monthdate,6)

			--Delete the old values from the cache table
			delete from tblquerycache where classname=@classname and queryname=@queryname and customid=@customid and col in (1,2,3)
			
			
			/*(1)  Potential*/
			--ach sum
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Potential - ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,1,1,@customid, isnull(sum(commissionearned),0)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=1 and (pdc.ismca=1 or pdc.ismca is null)

			--ach count
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Potential - ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,2,1,@customid, count(distinct p.clientid)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=1 and (pdc.ismca=1 or pdc.ismca is null)

			--non-ach sum
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Potential - Non-ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,3,1,@customid,isnull(sum(commissionearned),0)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=0 and (pdc.ismca=1 or pdc.ismca is null)

			--non-ach count
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Potential - Non-ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,4,1,@customid, count(distinct p.clientid)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=0 and (pdc.ismca=1 or pdc.ismca is null)


			/*(2)  Exceptions*/	
			--ach sum
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Exceptions - ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,1,2,@customid, isnull(sum(commissionearned),0)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=1 and not p.exceptionreason is null

			--ach count
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Exceptions - ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,2,2,@customid, count(distinct p.clientid)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=1 and not p.exceptionreason is null

			--non-ach sum
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Exceptions - Non-ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,3,2,@customid,isnull(sum(commissionearned),0)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=0 and not p.exceptionreason is null

			--non-ach count
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Exceptions - Non-ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,4,2,@customid, count(distinct p.clientid)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=0 and not p.exceptionreason is null


			/*(3)  Planned*/
			--ach sum
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Planned - ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,1,3,@customid, isnull(sum(commissionearned),0)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=1 and (pdc.ismca=0 or pdc.ismca is null)

			--ach count
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Planned - ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,2,3,@customid, count(distinct p.clientid)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=1 and (pdc.ismca=0 or pdc.ismca is null)

			--non-ach sum
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Planned - Non-ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,3,3,@customid, isnull(sum(commissionearned),0)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=0 and (pdc.ismca=0 or pdc.ismca is null)

			--non-ach count
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Planned - Non-ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,4,3,@customid, count(distinct p.clientid)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=0 and (pdc.ismca=0 or pdc.ismca is null)

			fetch next from c3 into @commrecid	
		end --while

		close c3
		deallocate c3


		--Save actual values for drilldown
		delete from tblprojectedclient where [month]=month(@monthdate) and [year]=year(@monthdate)
		delete from tblprojectedcommission where [month]=month(@monthdate) and [year]=year(@monthdate)

		if @verbose=1 begin
			print  '(' + convert(varchar,getdate(),9) + ') ' + 
				'Projected Client Insert'
		end
		insert into tblprojectedclient(clientid,firstname,lastname,mca,da,ea,depositmethod,ach,[month],[year],exceptionreason)
		select clientid,firstname,lastname,mca,da,ea,depositmethod,ach,month(@monthdate),year(@monthdate),exceptionreason from #tmppotential

		if @verbose=1 begin
			print  '(' + convert(varchar,getdate(),9) + ') ' + 
				'Projected Commission Insert'
		end
		insert into tblprojectedcommission(clientid,commrecid,feepaymentamount,[percent],commissionearned,entrytypeid,ismca,[month],[year])
		select clientid,commrecid,feepaymentamount,[percent],commissionearned,entrytypeid,ismca,month(@monthdate),year(@monthdate) from #tmppdc

	end --if

	--Calculate Actuals for this month
	
	if (
		--locks in on the first of the next month
		getdate() < dateadd(day,1,@monthend) 
		--@monthdate >= @monthdatenow 
		or not exists(
			select querycacheid from tblquerycache where 
				classname=@classname 
				and queryname=@queryname
				and convert(varchar,customid) like '%' + convert(varchar,@monthdate,6)
				and row=1 and col=4
		)
	) begin

		print  '(' + convert(varchar,getdate(),9) + ') ' + 
			'Saving Actual-Exceptions, Actual-Missed and Actual-Pending for month ' + convert(varchar,@monthdate,6)
		
		declare c5 cursor for select commrecid from tblcommrec
		open c5
		set @commrecid = null
		while @@fetch_status=0 or @commrecid is null begin
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Exceptions/Missed/Pending for CommRecID ' + convert(varchar,isnull(@commrecid, ''))
			end

			set @customid=''
			if not @commrecid is null
				set @customid=convert(varchar,@commrecid) + '|'
			set @customid = @customid + convert(varchar,@monthdate,6)

			--Delete the old values from the cache table
			delete from tblquerycache where classname=@classname and queryname=@queryname and customid=@customid and col in (4,5,8)

			/*(4)  Actual-Exceptions*/
			--ach sum
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Exceptions - ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,1,4,@customid, isnull(sum(commissionearned),0)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=1 
				and not pdc.ismca is null and not p.exceptionreason is null

			--ach count
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Exceptions - ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,2,4,@customid, count(distinct p.clientid)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=1 
				and not p.exceptionreason is null
			--non-ach sum
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Exceptions - Non-ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,3,4,@customid, isnull(sum(commissionearned),0)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=0 
				and not pdc.ismca is null and not p.exceptionreason is null

			--non-ach count
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Exceptions - Non-ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,4,4,@customid, count(distinct p.clientid)
				from #tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
				where (@commrecid is null or @commrecid=commrecid) and p.ach=0 
				and not p.exceptionreason is null


			--(5)  Actual-Missed
			--ach sum
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Missed - ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,1,5,@customid, isnull(sum(commissionearned),0)
				from 
					#tmppotential p left outer join 
					#tmppdc pdc on pdc.clientid=p.clientid inner join
					(
						select 
							c.clientid,
							isnull(r.depositday,c.depositday) as depositday,
							isnull(r.depositamount,c.depositamount) as depositamount
						from
							tblclient c 
							left outer join #tmprules r on c.clientid=r.clientid
					) c on p.clientid=c.clientid
				where 
					(@commrecid is null or @commrecid=commrecid)
					and p.ach=1
					and p.da > 0
					and not c.depositday is null and c.depositday > 0
					and getdate() > dbo.fitdate(year(@monthstart),month(@monthstart),isnull(c.depositday,1))
					and (pdc.ismca=0 or pdc.ismca is null)
					and not exists(
						select registerid from tblregister r 
						where r.clientid=c.clientid 
						and r.entrytypeid=3 
						and transactiondate >= @monthstart 
						and transactiondate <= @monthend 
					)

			--ach count
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Missed - ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,2,5,@customid, count(distinct p.clientid)
				from 
					#tmppotential p left outer join 
					#tmppdc pdc on pdc.clientid=p.clientid inner join
					(
						select 
							c.clientid,
							isnull(r.depositday,c.depositday) as depositday,
							isnull(r.depositamount,c.depositamount) as depositamount
						from
							tblclient c 
							left outer join #tmprules r on c.clientid=r.clientid
					) c on p.clientid=c.clientid
				where 
					(@commrecid is null or @commrecid=commrecid)
					and p.ach=1
					and p.da > 0
					and not c.depositday is null and c.depositday > 0
					and getdate() > dbo.fitdate(year(@monthstart),month(@monthstart),isnull(c.depositday,1))
					and (pdc.ismca=0 or pdc.ismca is null)
					and not exists(
						select registerid from tblregister r 
						where r.clientid=c.clientid 
						and r.entrytypeid=3 
						and transactiondate >= @monthstart 
						and transactiondate <= @monthend  
					)

			--non-ach sum
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Missed - Non-ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,3,5,@customid, isnull(sum(commissionearned),0)
				from 
					#tmppotential p left outer join 
					#tmppdc pdc on pdc.clientid=p.clientid inner join
					(
						select 
							c.clientid,
							isnull(r.depositday,c.depositday) as depositday,
							isnull(r.depositamount,c.depositamount) as depositamount
						from
							tblclient c 
							left outer join #tmprules r on c.clientid=r.clientid
					) c on p.clientid=c.clientid
				where 
					(@commrecid is null or @commrecid=commrecid)
					and p.ach=0
					and p.da > 0
					and not c.depositday is null and c.depositday > 0
					and getdate() > dbo.fitdate(year(@monthstart),month(@monthstart),isnull(c.depositday,1))
					and (pdc.ismca=0 or pdc.ismca is null)
					and not exists(
						select registerid from tblregister r 
						where r.clientid=c.clientid 
						and r.entrytypeid=3 
						and transactiondate >= @monthstart 
						and transactiondate <= @monthend  
					)

			--non-ach count
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Missed - Non-ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,4,5,@customid, count(distinct p.clientid)
				from 
					#tmppotential p left outer join 
					#tmppdc pdc on pdc.clientid=p.clientid inner join
					(
						select 
							c.clientid,
							isnull(r.depositday,c.depositday) as depositday,
							isnull(r.depositamount,c.depositamount) as depositamount
						from
							tblclient c 
							left outer join #tmprules r on c.clientid=r.clientid
					) c on p.clientid=c.clientid
				where 
					(@commrecid is null or @commrecid=commrecid)
					and p.ach=0
					and p.da > 0
					and not c.depositday is null and c.depositday > 0
					and getdate() > dbo.fitdate(year(@monthstart),month(@monthstart),isnull(c.depositday,1))
					and (pdc.ismca=0 or pdc.ismca is null)
					and not exists(
						select registerid from tblregister r 
						where r.clientid=c.clientid 
						and r.entrytypeid=3 
						and transactiondate >= @monthstart 
						and transactiondate <= @monthend  
					)

			--(8)  Actual-Pending
			--ach sum
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Pending - ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,1,8,@customid, isnull(sum(commissionearned),0)
				from 
					#tmppotential p left outer join 
					#tmppdc pdc on pdc.clientid=p.clientid inner join
					(
						select 
							c.clientid,
							isnull(r.depositday,c.depositday) as depositday,
							isnull(r.depositamount,c.depositamount) as depositamount
						from
							tblclient c 
							left outer join #tmprules r on c.clientid=r.clientid
					) c on p.clientid=c.clientid
				where 
					(@commrecid is null or @commrecid=commrecid)
					and p.ach=1
					and p.da > 0
					and not c.depositday is null and c.depositday > 0
					and getdate() < dbo.fitdate(year(@monthstart),month(@monthstart),isnull(c.depositday,1))
					and (pdc.ismca=0 or pdc.ismca is null)
					and not exists(
						select registerid from tblregister r 
						where r.clientid=c.clientid 
						and r.entrytypeid=3 
						and transactiondate >= @monthstart 
						and transactiondate <= @monthend  
					)

			--ach count
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Pending - ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,2,8,@customid, count(distinct p.clientid)
				from 
					#tmppotential p left outer join 
					#tmppdc pdc on pdc.clientid=p.clientid inner join
					(
						select 
							c.clientid,
							isnull(r.depositday,c.depositday) as depositday,
							isnull(r.depositamount,c.depositamount) as depositamount
						from
							tblclient c 
							left outer join #tmprules r on c.clientid=r.clientid
					) c on p.clientid=c.clientid
				where 
					(@commrecid is null or @commrecid=commrecid)
					and p.ach=1
					and p.da > 0
					and not c.depositday is null and c.depositday > 0
					and getdate() < dbo.fitdate(year(@monthstart),month(@monthstart),isnull(c.depositday,1))
					and (pdc.ismca=0 or pdc.ismca is null)
					and not exists(
						select registerid from tblregister r 
						where r.clientid=c.clientid 
						and r.entrytypeid=3 
						and transactiondate >= @monthstart 
						and transactiondate <= @monthend  
					)

			--non-ach sum
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Pending - Non-ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,3,8,@customid, isnull(sum(commissionearned),0)
				from 
					#tmppotential p left outer join 
					#tmppdc pdc on pdc.clientid=p.clientid inner join
					(
						select 
							c.clientid,
							isnull(r.depositday,c.depositday) as depositday,
							isnull(r.depositamount,c.depositamount) as depositamount
						from
							tblclient c 
							left outer join #tmprules r on c.clientid=r.clientid
					) c on p.clientid=c.clientid
				where 
					(@commrecid is null or @commrecid=commrecid)
					and p.ach=0
					and p.da > 0
					and not c.depositday is null and c.depositday > 0
					and getdate() < dbo.fitdate(year(@monthstart),month(@monthstart),isnull(c.depositday,1))
					and (pdc.ismca=0 or pdc.ismca is null)
					and not exists(
						select registerid from tblregister r 
						where r.clientid=c.clientid 
						and r.entrytypeid=3 
						and transactiondate >= @monthstart 
						and transactiondate <= @monthend  
					)

			--non-ach count
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Pending - Non-ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select @classname,@queryname,4,8,@customid, count(distinct p.clientid)
				from 
					#tmppotential p left outer join 
					#tmppdc pdc on pdc.clientid=p.clientid inner join
					(
						select 
							c.clientid,
							isnull(r.depositday,c.depositday) as depositday,
							isnull(r.depositamount,c.depositamount) as depositamount
						from
							tblclient c 
							left outer join #tmprules r on c.clientid=r.clientid
					) c on p.clientid=c.clientid
				where 
					(@commrecid is null or @commrecid=commrecid)
					and p.ach=0
					and p.da > 0
					and not c.depositday is null and c.depositday > 0
					and getdate() < dbo.fitdate(year(@monthstart),month(@monthstart),isnull(c.depositday,1))
					and (pdc.ismca=0 or pdc.ismca is null)
					and not exists(
						select registerid from tblregister r 
						where r.clientid=c.clientid 
						and r.entrytypeid=3 
						and transactiondate >= @monthstart 
						and transactiondate <= @monthend  
					)

			--Delete old values from the tblHomepageClientCache table
			delete from tblhomepageclientcache 
			where [month]=month(@monthstart)
			and [year]=year(@monthstart)
			and isnull(commrecid,-1)=isnull(@commrecid,-1)
			
			--Exceptions
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Execeptions - HomepageClientCache insert'
			end
			insert into tblhomepageclientcache([month],[year],commrecid,col,ach,typeid,customvalue,customvalue2,customvalue3)
			select 
				month(@monthstart),year(@monthstart),@commrecid,4,p.ach,p.clientid,p.exceptionreason,sum(pdc.commissionearned),p.da
			from
				#tmppotential p left outer join #tmppdc pdc on pdc.clientid=p.clientid 
			where 
				(@commrecid is null or @commrecid=commrecid)
				and not p.exceptionreason is null
			group by
				p.clientid,
				p.ach,
				p.exceptionreason,
				p.da
			
			--Missed
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Missed - HomepageClientCache insert'
			end
			insert into tblhomepageclientcache([month],[year],commrecid,col,ach,typeid,customvalue,customvalue2,customvalue3)
			select 
				month(@monthstart),year(@monthstart),@commrecid,5,p.ach,p.clientid,'Deposit Missed', sum(pdc.commissionearned),p.da
			from 
				#tmppotential p left outer join 
				#tmppdc pdc on pdc.clientid=p.clientid inner join
				(
					select 
						c.clientid,
						isnull(r.depositday,c.depositday) as depositday,
						isnull(r.depositamount,c.depositamount) as depositamount
					from
						tblclient c 
						left outer join #tmprules r on c.clientid=r.clientid
				) c on p.clientid=c.clientid
			where 
				(@commrecid is null or @commrecid=commrecid)
				and p.da > 0
				and not c.depositday is null and c.depositday > 0
				and getdate() > dbo.fitdate(year(@monthstart),month(@monthstart),isnull(c.depositday,1))
				and (pdc.ismca=0 or pdc.ismca is null)
				and not exists(
					select registerid from tblregister r 
						where r.clientid=c.clientid 
						and r.entrytypeid=3 
						and transactiondate >= @monthstart 
						and transactiondate <= @monthend  
				)
			group by
				p.clientid,
				p.ach,
				p.exceptionreason,
				p.da


			--Pending
			if @verbose=1 begin
				print  '(' + convert(varchar,getdate(),9) + ') ' + 
					'Pending - HomepageClientCache insert'
			end
			insert into tblhomepageclientcache([month],[year],commrecid,col,ach,typeid,customvalue,customvalue2,customvalue3)
			select 
				month(@monthstart),year(@monthstart),@commrecid,8,p.ach,p.clientid,'Deposit Pending', sum(pdc.commissionearned),p.da
			from 
				#tmppotential p left outer join 
				#tmppdc pdc on pdc.clientid=p.clientid inner join
				(
					select 
						c.clientid,
						isnull(r.depositday,c.depositday) as depositday,
						isnull(r.depositamount,c.depositamount) as depositamount
					from
						tblclient c 
						left outer join #tmprules r on c.clientid=r.clientid
				) c on p.clientid=c.clientid
			where 
				(@commrecid is null or @commrecid=commrecid)
				and p.da > 0
				and not c.depositday is null and c.depositday > 0
				and getdate() < dbo.fitdate(year(@monthstart),month(@monthstart),isnull(c.depositday,1))
				and (pdc.ismca=0 or pdc.ismca is null)
				and not exists(
					select registerid from tblregister r 
					where r.clientid=c.clientid 
					and r.entrytypeid=3 
					and transactiondate between @monthstart and @monthend
				)
			group by
				p.clientid,
				p.ach,
				p.exceptionreason,
				p.da

			fetch next from c5 into @commrecid	
		end --while

		close c5
		deallocate c5
	end --if

	--Drop these tables - process is finished
	drop table #tmpPDC
	drop table #tmpPotential

	print '(' + convert(varchar,getdate(),9) + ') ' 
		+ 'Void/Bounce and Actual for month ' + convert(varchar,@monthdate,6)
	
	--wipe out everything for this month
	delete from tblprojectedcommissionactual where
		[month]=month(@monthstart)
		and [year]=year(@monthstart)

	if @verbose = 1 begin
		print '(' + convert(varchar,getdate(),9) + ') ' 
			+ 'Actual - ProjectedCommissionActual insert'
	end

	insert into tblprojectedcommissionactual
	(
		clientid,
		commrecid,
		feepaymentamount,
		[percent],
		commissionearned,
		entrytypeid,
		col,
		[month],
		[year]
	)
	select 
		c.clientid,
		cst.commrecid,
		rp.amount,
		cf.[percent],
		(rp.amount * cf.[percent]),
		rfee.entrytypeid,
		7,
		month(@monthstart),
		year(@monthstart)
	from
		tblregisterpayment rp inner join
		tblregisterpaymentdeposit dp on rp.registerpaymentid=dp.registerpaymentid inner join
		tblregister rdep on dp.depositregisterid=rdep.registerid inner join
		tblregister rfee on rp.feeregisterid=rfee.registerid inner join
		tblclient c on rfee.clientid=c.clientid inner join
		tblagency a on c.agencyid=a.agencyid inner join
		tblentrytype et on rfee.entrytypeid=et.entrytypeid inner join
		tblcommscen cs on 
			a.agencyid=cs.agencyid 
			and cs.startdate <= @monthstart 
			and isnull(cs.enddate,@monthend) >= @monthend inner join
		tblcommstruct cst on cst.commscenid=cs.commscenid inner join
		tblcommfee cf on 
			cst.commstructid=cf.commstructid 
			and et.entrytypeid=cf.entrytypeid inner join
		tblperson p on c.primarypersonid=p.personid
	where
		(rp.voided=0 and rp.bounced=0)
		and rdep.transactiondate between @monthstart and @monthend

	if @verbose = 1 begin
		print '(' + convert(varchar,getdate(),9) + ') ' 
			+ 'Void/Bounce - ProjectedCommissionActual insert'
	end
	insert into tblprojectedcommissionactual
	(
		clientid,
		commrecid,
		feepaymentamount,
		[percent],
		commissionearned,
		entrytypeid,
		col,
		[month],
		[year]
	)
	select 
		c.clientid,
		cst.commrecid,
		rp.amount,
		cf.[percent],
		(rp.amount * cf.[percent]),
		rfee.entrytypeid,
		6,
		month(@monthstart),
		year(@monthstart)
	from
		tblregisterpayment rp inner join
		tblregisterpaymentdeposit dp on rp.registerpaymentid=dp.registerpaymentid inner join
		tblregister rdep on dp.depositregisterid=rdep.registerid inner join
		tblregister rfee on rp.feeregisterid=rfee.registerid inner join
		tblclient c on rfee.clientid=c.clientid inner join
		tblagency a on c.agencyid=a.agencyid inner join
		tblentrytype et on rfee.entrytypeid=et.entrytypeid inner join
		tblcommscen cs on 
			a.agencyid=cs.agencyid 
			and cs.startdate <= @monthstart 
			and isnull(cs.enddate,@monthend) >= @monthend inner join
		tblcommstruct cst on cst.commscenid=cs.commscenid inner join
		tblcommfee cf on 
			cst.commstructid=cf.commstructid 
			and et.entrytypeid=cf.entrytypeid inner join
		tblperson p on c.primarypersonid=p.personid
	where	
		(rp.voided=1 or rp.bounced=1)
		and rdep.transactiondate between @monthstart and @monthend

	declare c4 cursor for select commrecid from tblcommrec
	open c4
	set @commrecid = null
	while @@fetch_status=0 or @commrecid is null begin
		if @verbose = 1 begin
			print '(' + convert(varchar,getdate(),9) + ') ' 
				+ 'QueryCache loop: V/B, Actual for CommRecID ' + convert(varchar,isnull(@commrecid, ''))
		end
		set @customid=''
		if not @commrecid is null
			set @customid=convert(varchar,@commrecid) + '|'
		set @customid = @customid + convert(varchar,@monthdate,6)

		--Delete the old values from the cache table
		delete from tblquerycache where classname=@classname and queryname=@queryname and customid=@customid and col in (6,7)

		set @col=6
		while @col<=7 begin
			if @verbose = 1 begin
				print '(' + convert(varchar,getdate(),9) + ') ' 
					+ 'Column: ' + convert(varchar,isnull(@col, ''))
			end
			--ach sum
			if @verbose = 1 begin
				print '(' + convert(varchar,getdate(),9) + ') ' 
					+ 'ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select 
					@classname,@queryname,1,@col,@customid, isnull(sum(commissionearned),0)
				from
					tblprojectedcommissionactual ca inner join
					tblclient c on ca.clientid=c.clientid
				where (@commrecid is null or @commrecid=commrecid) and isnull(c.depositmethod,'check')='ach'
					and ca.col=@col and [month]=month(@monthstart) and [year]=year(@monthstart)

			--ach count
			if @verbose = 1 begin
				print '(' + convert(varchar,getdate(),9) + ') ' 
					+ 'ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select 
					@classname,@queryname,2,@col,@customid, count(distinct ca.clientid)
				from
					tblprojectedcommissionactual ca inner join
					tblclient c on ca.clientid=c.clientid
				where (@commrecid is null or @commrecid=commrecid) and isnull(c.depositmethod,'check')='ach'
					and ca.col=@col and [month]=month(@monthstart) and [year]=year(@monthstart)

			--non-ach sum
			if @verbose = 1 begin
				print '(' + convert(varchar,getdate(),9) + ') ' 
					+ 'Non-ACH Sum'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select 
					@classname,@queryname,3,@col,@customid, isnull(sum(commissionearned),0)
				from
					tblprojectedcommissionactual ca inner join
					tblclient c on ca.clientid=c.clientid
				where (@commrecid is null or @commrecid=commrecid) and not isnull(c.depositmethod,'check')='ach'
					and ca.col=@col and [month]=month(@monthstart) and [year]=year(@monthstart)

			--non-ach count
			if @verbose = 1 begin
				print '(' + convert(varchar,getdate(),9) + ') ' 
					+ 'Non-ACH Count'
			end
			insert into tblquerycache(classname,queryname,row,col,customid,[value])	
				select 
					@classname,@queryname,4,@col,@customid, count(distinct ca.clientid)
				from
					tblprojectedcommissionactual ca inner join
					tblclient c on ca.clientid=c.clientid
				where (@commrecid is null or @commrecid=commrecid) and not isnull(c.depositmethod,'check')='ach'
					and ca.col=@col and [month]=month(@monthstart) and [year]=year(@monthstart)


			set @col = @col+1
		end

		fetch next from c4 into @commrecid	
	end

	close c4
	deallocate c4

	drop table #tmpRules

	print '(' + convert(varchar,getdate(),9) + ') ' 
		+ 'Process finished for month ' + convert(varchar,@monthdate,6)

	--Advance to the next month
	set @monthdate=dateadd(month,1,@monthdate)
	set @i=@i+1
end --while
set nocount off
GO
/****** Object:  StoredProcedure [dbo].[stp_CollectMonthlyFee]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure  [dbo].[stp_CollectMonthlyFee] 
	(
		@fordate datetime = null
	)

as
begin
if @fordate is null begin
	set @fordate = getdate()
end

declare @feeday int
declare @feemonth int
declare @feeyear int
declare @feemonthname varchar(50)
set @feeday = datepart(day,@fordate)
set @feemonth = datepart(month,@fordate)
set @feeyear = datepart(year,@fordate)
set @feemonthname=datename(mm, @fordate)
declare @lastdayinmonth int
declare @islastdayinmonth bit
set @lastdayinmonth = datepart(day, dateadd(day, -1, dateadd(month, datediff(month, 0, @fordate)+1, 0)))
set @islastdayinmonth = case when @feeday=@lastdayinmonth then 1 else 0 end


declare @clientid int
declare @monthlyfee money
declare @subsequentmaintfee money
declare	@submaintfeestart datetime
declare @maintenancefeecap money

select 
	clientid,
	monthlyfee,
	case  
		when monthlyfeeday=0 then 1
		else isnull(monthlyfeeday, 1)
	end as monthlyfeeday,--If monthlyfeeday is 0 or null, treat as 1
	subsequentmaintfee,
	submaintfeestart,
	maintenancefeecap
into 
	#tmpClients
from 
	tblclient 
where
	currentclientstatusid not in (15,17,18) and 
	(
		@fordate >= monthlyfeestartdate or
		monthlyfeestartdate is null
	)
	and not clientid in 
		(select clientid from tblregister where feemonth=@feemonth and feeyear=@feeyear)
		--and fee has not already been assessed for this month
	and not monthlyfee is null
	and not monthlyfee = 0

select * from #tmpclients

declare @count int
set @count=(
	select 
		count(clientid)
	from 
		#tmpClients 
	where
		monthlyfeeday=@feeday
		or (@islastdayinmonth=1 and monthlyfeeday >= @feeday)
)

select @feeday
select @islastdayinmonth

declare c cursor for 
	select 
		clientid,
		monthlyfee,
		subsequentmaintfee,
		submaintfeestart,
		maintenancefeecap
	from 
		#tmpClients 
	where
		monthlyfeeday=@feeday
		or (@islastdayinmonth=1 and monthlyfeeday >= @feeday)
	--If today is last day of month, take everyone with feedays for >= today

open c
fetch next from c into @clientid,@monthlyfee,@subsequentmaintfee,@submaintfeestart,@maintenancefeecap

while @@fetch_status = 0
begin

	if @maintenancefeecap is not null and @maintenancefeecap <> 0
	begin
	
		select @monthlyfee = count(a.accountid) * @monthlyfee from tblaccount a
		where a.clientid = @clientid
		and a.accountstatusid <> 55
		and not (a.accountstatusid = 54 and exists(select r.registerid from tblregister r where r.entrytypeid = 4 and r.accountid = a.accountid and r.void is null and r.isfullypaid = 1))
		
		if @monthlyfee > @maintenancefeecap 
			select @monthlyfee = @maintenancefeecap
			
	end
	else if @subsequentmaintfee is not null and @subsequentmaintfee <> 0 and @submaintfeestart is not null and @fordate >= @submaintfeestart 
		select @monthlyfee = @subsequentmaintfee
	

	INSERT INTO tblRegister
	(
		ClientId,
		TransactionDate,
		Amount,
		EntryTypeId, 
		Description,
		FeeMonth,
		FeeYear
	)
	values
	(
		@clientid,
		@fordate,
		-@monthlyfee,
		1, 
		'Maintenance Fee for ' + @feemonthname + ' ' + convert(varchar, @feeyear),
		@feemonth,
		@feeyear
	)


	-- rebalance register for client
	-- don't do entire cleanup for client - that will do payments and auto-assign negogiation
	--exec stp_DoRegisterRebalanceClient @clientid


	fetch next from c into @clientid,@monthlyfee,@subsequentmaintfee,@submaintfeestart,@maintenancefeecap
end

close c
deallocate c



print convert(varchar,@count) + ' total maintenance fees were assessed'

drop table #tmpClients
end
GO
/****** Object:  StoredProcedure [dbo].[stp_LoadClientSearch]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_LoadClientSearch]
	(
		@clientid int
	)

as


-- discretionary variables
declare @clienttype varchar (255)
declare @clientname varchar (255)
declare @clientaddress varchar (8000)
declare @clientaccountnumber varchar (255)
declare @clientssn varchar (255)
declare @clientcontacttype varchar (8000)
declare @clientcontactnumber varchar (8000)

declare @personid int
declare @personfirstname varchar (50)
declare @personfirstnameplural varchar (50)
declare @personlastname varchar (50)
declare @personssn varchar (50)
declare @personstreet varchar (50)
declare @personstreet2 varchar (50)
declare @personcity varchar (50)
declare @personstateabbreviation varchar (50)
declare @personzipcode varchar (50)
declare @personrelationship varchar (50)
declare @personaddress varchar (255)
declare @personemailaddress varchar (50)

declare @phoneid int
declare @phonetypeid int
declare @phonetypename varchar (255)
declare @phoneareacode varchar (255)
declare @phonenumber varchar (255)


-- remove any previous existance of this client from the search table
delete from tblclientsearch where clientid = @clientid


-- get persons for client
declare b_cursor cursor for
	select
		tblperson.personid,
		tblperson.firstname,
		tblperson.lastname,
		tblperson.ssn,
		tblperson.street,
		tblperson.street2,
		tblperson.city,
		tblstate.abbreviation as stateabbreviation,
		tblperson.zipcode,
		tblperson.relationship,
		tblperson.emailaddress
	from
		tblperson inner join
		tblclient on tblperson.clientid = tblclient.clientid left outer join
		tblstate on tblperson.stateid = tblstate.stateid
	where
		tblclient.clientid = @clientid
	order by
		(
			case
				when tblperson.relationship = 'prime' then
					1
				else
					0
			end
		) desc,
		tblperson.lastmodified desc

open b_cursor

fetch next from b_cursor into @personid, @personfirstname, @personlastname, @personssn, @personstreet, @personstreet2, @personcity, @personstateabbreviation, @personzipcode, @personrelationship, @personemailaddress
while @@fetch_status = 0

	begin

		-- add type
		if @clienttype is null or len(@clienttype) = 0
			begin
				set @clienttype = @personrelationship
			end
		else
			begin
				set @clienttype = @clienttype + char(13) + char(10) + @personrelationship
			end

		-- create plural first name
		if right(@personfirstname, 1) = 's'
			begin
				set @personfirstnameplural = @personfirstname + ''''
			end
		else
			begin
				set  @personfirstnameplural = @personfirstname + '''s'
			end

		-- add name
		if @clientname is null or len(@clientname) = 0
			begin
				set @clientname = @personfirstname + ' ' + @personlastname
			end
		else
			begin
				set @clientname = @clientname + char(13) + char(10) + @personfirstname + ' ' + @personlastname
			end

		-- add ssn
		if @clientssn is null or len(@clientssn) = 0
			begin
				set @clientssn = @personssn
			end
		else
			begin
				set @clientssn = @clientssn + char(13) + char(10) + @personssn
			end

		-- execute address display stored procs and return address
		exec stp_GetAddressFullForAddress @personstreet, @personstreet2, @personcity, @personstateabbreviation, @personzipcode, @address=@personaddress output


		-- replace newline chars with '|'
		set @personaddress = replace(@personaddress, char(13) + char(10), '|')


		-- add person's address to global addresses if not already there
		if @clientaddress is null or len(@clientaddress) = 0 -- nothing in global address yet
			begin
				set @clientaddress = @personaddress
			end
		else
			begin

				if charindex(@personaddress, @clientaddress) = 0 -- person address does not match any part of global address
					begin
						set @clientaddress = @clientaddress + char(13) + char(10) + @personaddress
					end
			end


		-- person's email to contact type and number
		if not @personemailaddress is null and len(@personemailaddress) > 0
			begin

				-- add contact type
				if @clientcontacttype is null or len(@clientcontacttype) = 0
					begin
						set @clientcontacttype = @personfirstnameplural + ' Email Address'
					end
				else
					begin
						set @clientcontacttype = @clientcontacttype + char(13) + char(10) + @personfirstnameplural + ' Email Address'
					end

				-- add contact number
				if @clientcontactnumber is null or len(@clientcontactnumber) = 0
					begin
						set @clientcontactnumber = @personemailaddress
					end
				else
					begin
						set @clientcontactnumber = @clientcontactnumber + char(13) + char(10) + @personemailaddress
					end

			end


		-- get phones for person
		declare c_cursor cursor for
			select
				tblphone.phoneid,
				tblphone.phonetypeid,
				tblphonetype.[name] as phonetypename,
				tblphone.areacode,
				tblphone.number
			from
				tblphone inner join
				tblpersonphone on tblphone.phoneid = tblpersonphone.phoneid inner join
				tblphonetype on tblphone.phonetypeid = tblphonetype.phonetypeid
			where
				tblpersonphone.personid = @personid

		open c_cursor

		fetch next from c_cursor into @phoneid, @phonetypeid, @phonetypename, @phoneareacode, @phonenumber
		while @@fetch_status = 0

			begin

				-- add contact type
				if @clientcontacttype is null or len(@clientcontacttype) = 0
					begin
						set @clientcontacttype = @personfirstnameplural + ' ' + @phonetypename
					end
				else
					begin
						set @clientcontacttype = @clientcontacttype + char(13) + char(10) + @personfirstnameplural + ' ' + @phonetypename
					end

				-- add contact number
				if @clientcontactnumber is null or len(@clientcontactnumber) = 0
					begin
						set @clientcontactnumber = @phoneareacode + @phonenumber
					end
				else
					begin
						set @clientcontactnumber = @clientcontactnumber + char(13) + char(10) + @phoneareacode + @phonenumber
					end

				fetch next from c_cursor into @phoneid, @phonetypeid, @phonetypename, @phoneareacode, @phonenumber

			end

		close c_cursor
		deallocate c_cursor


		fetch next from b_cursor into @personid, @personfirstname, @personlastname, @personssn, @personstreet, @personstreet2, @personcity, @personstateabbreviation, @personzipcode, @personrelationship, @personemailaddress

	end

close b_cursor
deallocate b_cursor


-- collect the account number for this client
select @clientaccountnumber = accountnumber from tblclient where clientid = @clientid


-- insert the prepared values into the tblClientSearch table
if not @clienttype is null or not @clientname is null or not @clientaccountnumber is null or not @clientssn is null or not @clientaddress is null or not @clientcontacttype is null or not @clientcontactnumber is null
	begin

		insert into
			tblclientsearch
			(
				clientid,
				type,
				[name],
				accountnumber,
				ssn,
				address,
				contacttype,
				contactnumber
			)
		values
			(
				@clientid,
				@clienttype,
				@clientname,
				@clientaccountnumber,
				@clientssn,
				@clientaddress,
				@clientcontacttype,
				@clientcontactnumber
			)

	end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetRegisterAmountLeft]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetRegisterAmountLeft]
	(
		@registerid int
	)

as


---------------------------------------------------------------------
-- LOGIC FOR GETTING AMOUNT OF REGISTER LEFT TO BE USED FOR PAYMENTS
-- (1) Amount is the difference between the original entire 
--     credit and what has been allocated against payments already
-- (2) Don't return any register that is not available according
--     to the availablility rules
--      (a) Do not use credit marked VOID
--      (b) Do not use credit marked BOUNCE
--      (c) Credits must be greater then 0
--      (d) Credits cannot be on hold
----------------------------------------------------------------------


select
	coalesce(tblregister.amount, 0) - coalesce(sum(tblregisterpaymentdeposit.amount), 0) as amount
from
	tblregister left outer join
	(
		select
			*
		from
			tblregisterpaymentdeposit
		where
			voided = 0 and
			bounced = 0
	)
	as tblregisterpaymentdeposit ON tblregister.registerid = tblregisterpaymentdeposit.depositregisterid
where
	tblregister.amount > 0 and
	tblregister.isfullypaid = 0 and
	tblregister.void is null and
	tblregister.bounce is null and
	tblregister.registerid = @registerid and
	(
		hold is null or hold <= getdate() or clear <= getdate()
	)
group by
	tblregister.amount
GO
/****** Object:  View [dbo].[vw_LeadApplicant_Client]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vw_LeadApplicant_Client] AS
select a.leadapplicantid, c.clientid
from tblclient c 
inner join tblimportedclient i on i.importid = c.serviceimportid
inner join tblleadapplicant a on a.leadapplicantid = i.externalclientid and i.sourceid =1
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationPerUser_SetPageSettings]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationPerUser_SetPageSettings] (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @PageSettings     IMAGE,
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Paths_CreatePath @ApplicationId, @Path, @PathId OUTPUT
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CurrentTimeUtc, @UserId OUTPUT
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    IF (EXISTS(SELECT PathId FROM dbo.aspnet_PersonalizationPerUser WHERE UserId = @UserId AND PathId = @PathId))
        UPDATE dbo.aspnet_PersonalizationPerUser SET PageSettings = @PageSettings, LastUpdatedDate = @CurrentTimeUtc WHERE UserId = @UserId AND PathId = @PathId
    ELSE
        INSERT INTO dbo.aspnet_PersonalizationPerUser(UserId, PathId, PageSettings, LastUpdatedDate) VALUES (@UserId, @PathId, @PageSettings, @CurrentTimeUtc)
    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAllUsers_SetPageSettings]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAllUsers_SetPageSettings] (
    @ApplicationName  NVARCHAR(256),
    @Path             NVARCHAR(256),
    @PageSettings     IMAGE,
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Paths_CreatePath @ApplicationId, @Path, @PathId OUTPUT
    END

    IF (EXISTS(SELECT PathId FROM dbo.aspnet_PersonalizationAllUsers WHERE PathId = @PathId))
        UPDATE dbo.aspnet_PersonalizationAllUsers SET PageSettings = @PageSettings, LastUpdatedDate = @CurrentTimeUtc WHERE PathId = @PathId
    ELSE
        INSERT INTO dbo.aspnet_PersonalizationAllUsers(PathId, PageSettings, LastUpdatedDate) VALUES (@PathId, @PageSettings, @CurrentTimeUtc)
    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNextDeposit]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetNextDeposit]
(
	@ClientID int
)
as
begin

declare @tblNextDeposits table (DepositType varchar(10), DepositDate datetime, DepositAmount money)
declare @bMulti bit


-- get multi deposit bit value
select @bMulti = MultiDeposit from tblclient where clientid = @clientid

IF @bMulti > 0
	BEGIN
		/*
		1 = Multi deposit client
		*/
		-- get this month's scheduled ach if it hasn't passed
		insert @tblNextDeposits
		select 'ach', dbo.udf_GetDepositDate(depositday,0), depositamount
		from tblClientDepositDay
		where depositday is not null
		and depositday > day(getdate())
		and clientid = @clientid

		-- get next month's scheduled ach
		insert @tblNextDeposits
		select 'ach', dbo.udf_GetDepositDate(depositday,1), depositamount
		from tblClientDepositDay
		where depositday is not null
		and clientid = @clientid

		-- get rules for this month
		insert @tblNextDeposits
		select 'rule', dbo.udf_GetDepositDate(depositday,0), depositamount
		from tblDepositRuleAch
		where startdate <= getdate()
		and enddate > dbo.udf_GetDepositDate(depositday,0)
		and ClientDepositId in(select clientdepositid from tblClientDepositDay	where clientid = @clientid) 

		-- get rules for next month
		insert @tblNextDeposits
		select 'rule', dbo.udf_GetDepositDate(depositday,1), depositamount
		from tblDepositRuleAch
		where startdate <= cast(month(getdate()) as varchar(2)) + '/1/' + cast(year(getdate()) as varchar(4))
		and enddate > dbo.udf_GetDepositDate(depositday,1)
		and ClientDepositId in(select clientdepositid from tblClientDepositDay	where clientid = @clientid)

	END
ELSE
	BEGIN
		/*
		0 = Non-multi deposit client
		*/

		-- get active adhocs
		insert @tblNextdeposits
		select 'adhoc', DepositDate, DepositAmount
		from tblAdHocACH 
		where DepositDate > GETDATE() 
		and clientid = @clientid

		-- get this month's scheduled ach if it hasn't passed
		insert @tblNextDeposits
		select 'ach', dbo.udf_GetDepositDate(depositday,0), depositamount
		from tblclient
		where depositday is not null
		and depositday > day(getdate())
		and clientid = @clientid

		-- get next month's scheduled ach
		insert @tblNextDeposits
		select 'ach', dbo.udf_GetDepositDate(depositday,1), depositamount
		from tblclient
		where depositday is not null
		and clientid = @clientid

		-- get rules for this month
		insert @tblNextDeposits
		select 'rule', dbo.udf_GetDepositDate(depositday,0), depositamount
		from tblruleach
		where startdate <= getdate()
		and enddate > dbo.udf_GetDepositDate(depositday,0)
		and clientid = @clientid

		-- get rules for next month
		insert @tblNextDeposits
		select 'rule', dbo.udf_GetDepositDate(depositday,1), depositamount
		from tblruleach
		where startdate <= cast(month(getdate()) as varchar(2)) + '/1/' + cast(year(getdate()) as varchar(4))
		and enddate > dbo.udf_GetDepositDate(depositday,1)
		and clientid = @clientid

	END;

-- rules replace scheduled ach deposits in a given month
delete 
from @tblNextDeposits
where deposittype = 'ach' 
and month(depositdate) in (select month(depositdate) from @tblNextDeposits where deposittype = 'rule')
and year(depositdate) in (select year(depositdate) from @tblNextDeposits where deposittype = 'rule')

-- return the next deposit info
select top 1 DepositType, DepositDate [NextDepositDate], DepositAmount [NextDepositAmount]
from @tblNextDeposits
where depositdate > getdate()
order by depositdate

end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNextScheduledDeposit]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetNextScheduledDeposit]
(
	@ClientID int
)
as
begin
 

declare 
	@FirstOfMonth varchar(10), 
	@RuleDepositDate datetime, 
	@RuleDepositAmount money,
	@NextAdhocDepositDate datetime,
	@NextAdhocDepositAmount money,
	@NextScheduledDepositDate datetime,
	@NextScheduledDepositAmount money


set @FirstOfMonth = CAST(MONTH(GETDATE()) AS varchar(2)) + '/01/' + CAST(YEAR(GETDATE()) AS varchar(4))


-- get first active rule this month if any
select top 1
	@RuleDepositDate = DATEADD(day, DepositDay - 1, @FirstOfMonth), -- carries over into next month if current month does not contain deposit day
	@RuleDepositAmount = DepositAmount
from 
	tblRuleAch 
where 
	(StartDate <= GETDATE()) AND (EndDate > GETDATE()) AND (EndDate > DATEADD(day, DepositDay - 1, @FirstOfMonth))
	and clientid = @ClientID
order by 
	DepositDay


-- does the client have a rule this month?
if @RuleDepositDate is not null begin
	
	-- did the rule already pass?
	if @RuleDepositDate < getdate() begin
		-- get lesser of next month's scheduled deposit or any adhocs

		select top 1
			@NextAdhocDepositDate = DepositDate, 
			@NextAdhocDepositAmount = DepositAmount
		from        
			tblAdHocACH
		where
			DepositDate > GETDATE() and ClientID = @ClientID
		order by
			DepositDate


		select
			@NextScheduledDepositDate = dbo.udf_GetNextScheduledDepositDate(DepositDay,0),
			@NextScheduledDepositAmount = DepositAmount
		from
			tblClient
		where
			ClientID = @ClientID


		if isnull(@NextAdhocDepositDate,'1/1/2050') < @NextScheduledDepositDate
			select @NextAdhocDepositDate [NextDepositDate], @NextAdhocDepositAmount [NextDepositAmount]
		else
			select @NextScheduledDepositDate [NextDepositDate], @NextScheduledDepositAmount [NextDepositAmount]

	end
	else
		select @RuleDepositDate [NextDepositDate], @RuleDepositAmount [NextDepositAmount]

end
else begin
	-- no rules, get lesser of next scheduled deposit or any adhocs

	select top 1
		@NextAdhocDepositDate = DepositDate, 
		@NextAdhocDepositAmount = DepositAmount
	from        
		tblAdHocACH
	where
		DepositDate > GETDATE() and ClientID = @ClientID
	order by
		DepositDate


	select
		@NextScheduledDepositDate = dbo.udf_GetNextScheduledDepositDate(DepositDay,1),
		@NextScheduledDepositAmount = DepositAmount
	from
		tblClient
	where
		ClientID = @ClientID


	if isnull(@NextAdhocDepositDate,'1/1/2050') < @NextScheduledDepositDate
		select @NextAdhocDepositDate [NextDepositDate], @NextAdhocDepositAmount [NextDepositAmount]
	else
		select isnull(@NextScheduledDepositDate,'1/1/1900') [NextDepositDate], isnull(@NextScheduledDepositAmount,0) [NextDepositAmount]

end

 
end
GO
/****** Object:  Trigger [trAdHocAch]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Trigger [dbo].[trAdHocAch] ON [dbo].[tblAdHocACH]
AFTER INSERT, UPDATE
NOT FOR REPLICATION
AS 
BEGIN
DECLARE @AdHocAchId int
DECLARE @NewBankAccountID int
DECLARE @OldBankAccountID int
DECLARE @OldRoutingNumber varchar(50)
DECLARE @NewRoutingNumber varchar(50)
DECLARE @OldAccountNumber varchar(50)
DECLARE @NewAccountNumber varchar(50)
DECLARE @OldDepositDate datetime
DECLARE @NewDepositDate datetime
DECLARE @OldDepositAmount money
DECLARE @NewDepositAmount money
DECLARE @Chgby int
DECLARE @tableId int
DECLARE @RoutingColId int
DECLARE @AccountColId int
DECLARE @DepositAmountColId int
DECLARE @DepositDateColId int
DECLARE @BankAccountColId int

select 
	   @AdHocAchId = AdHocAchId,
	   @NewBankAccountId = BankAccountId, 
	   @NewRoutingNumber = BankRoutingNumber, 
       @NewAccountNumber = BankAccountNumber, 
	   @NewDepositDate = DepositDate,
	   @NewDepositAmount = DepositAmount, 
       @chgBy = LastModifiedBy 
from inserted

select  @OldBankAccountId = BankAccountId,
		@OldRoutingNumber = BankRoutingNumber, 
		@OldAccountNumber = BankAccountNumber,
		@OldDepositDate = DepositDate,
		@OldDepositAmount = DepositAmount
from deleted

select top 1 @tableid =AuditTableId from tblAuditTable Where [Name] = 'tblAdHocACH'

if not(@OldRoutingNumber = @NewRoutingNumber) or (@OldRoutingNumber is null and @NewRoutingNumber is not null) or (@OldRoutingNumber is not null and @NewRoutingNumber is null)
begin
	select top 1 @RoutingColId = AuditColumnId from tblAuditColumn Where [Name] = 'BankRoutingNumber' and audittableid = @tableid 

	insert into tblaudit(AuditColumnId, PK, Value, DC, UC, Deleted)
	values(@RoutingColId, @AdHocAchId, @NewRoutingNumber, GetDate(), @chgBy, 0)
end

if not(@OldAccountNumber = @NewAccountNumber) or (@OldAccountNumber is null and @NewAccountNumber is not null) or (@OldAccountNumber is not null and @NewAccountNumber is null)
begin
	select top 1 @AccountColId = AuditColumnId from tblAuditColumn Where [Name] = 'BankAccountNumber' and audittableid = @tableid 

	insert into tblaudit(AuditColumnId, PK, Value, DC, UC, Deleted)
	values(@AccountColId, @AdHocAchId, @NewAccountNumber, GetDate(), @chgBy, 0)
end


if not(@OldDepositAmount = @NewDepositAmount) or (@OldDepositAmount is null and @NewDepositAmount is not null) or (@OldDepositAmount is not null and @NewDepositAmount is null)
begin
	select top 1 @DepositAmountColId = AuditColumnId from tblAuditColumn Where [Name] = 'DepositAmount' and audittableid = @tableid 

	insert into tblaudit(AuditColumnId, PK, Value, DC, UC, Deleted)
	values(@DepositAmountColId, @AdHocAchId, @NewDepositAmount, GetDate(), @chgBy, 0)
end

if not(@OldDepositDate = @NewDepositDate) or (@OldDepositDate is null and @NewDepositDate is not null) or (@OldDepositDate is not null and @NewDepositDate is null)
begin
	select top 1 @DepositDateColId = AuditColumnId from tblAuditColumn Where [Name] = 'DepositDate' and audittableid = @tableid 

	insert into tblaudit(AuditColumnId, PK, Value, DC, UC, Deleted)
	values(@DepositDateColId, @AdHocAchId, @NewDepositDate, GetDate(), @chgBy, 0)
end

if not(@OldBankAccountId = @NewBankAccountId) or (@OldBankAccountId is null and @NewBankAccountId is not null) or (@OldBankAccountId is not null and @NewBankAccountId is null)
begin
	select top 1 @BankAccountColId = AuditColumnId from tblAuditColumn Where [Name] = 'BankAccountId' and audittableid = @tableid 

	insert into tblaudit(AuditColumnId, PK, Value, DC, UC, Deleted)
	values(@BankAccountColId, @AdHocAchId, @NewBankAccountId, GetDate(), @chgBy, 0)
end


END
GO
/****** Object:  StoredProcedure [dbo].[stp_ReplicateBankAccountUpdate]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ReplicateBankAccountUpdate]
@BankAccountId as Integer,
@UserId as Integer 
AS
Begin
	Declare @routing varchar(50)
	Declare @account varchar(50)
	Declare @bank varchar(50)
	Declare @banktype varchar(1)
	
	Select @routing = b.RoutingNumber, @account = b.AccountNumber, @banktype = b.BankType, @bank = isnull(r.CustomerName, '')  from tblClientBankAccount b
	left join tblRoutingNumber r on b.RoutingNumber = r.RoutingNumber
	Where b.BankAccountId = @BankAccountId
	
	Update tblAdhocAch Set
	BankRoutingNumber = @routing,
	BankAccountNumber = @account,
	BankType = @bankType,
	BankName = @bank,
	LastModified = GetDate(),
	LastModifiedBy = @UserId
	Where  registerid is null
	and  bankaccountid = @BankAccountId
End
GO
/****** Object:  StoredProcedure [dbo].[stp_ImportCreateAdHocAch]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_ImportCreateAdHocAch]
@ClientID int, 
@RegisterID int = null,
@DepositDate datetime, 
@DepositAmount money, 
@BankName varchar(50), 
@BankRoutingNumber varchar(50), 
@BankAccountNumber varchar(50), 
@BankType varchar(1) = null, 
@UserId int,
@InitialDraftYN bit = 0
AS
BEGIN
Insert into tblAdHocACH(
ClientID, RegisterID, DepositDate, DepositAmount, 
BankName, BankRoutingNumber, BankAccountNumber, BankType, 
Created, CreatedBy, LastModified, LastModifiedBy, 
InitialDraftYN)
Values(@ClientID, @RegisterID, @DepositDate, @DepositAmount, 
@BankName, @BankRoutingNumber, @BankAccountNumber, @BankType, 
GetDate(), @UserId, GetDate(), @UserId, 
@InitialDraftYN)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNachaRegister2DepositDups]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_GetNachaRegister2DepositDups]
(
	@nachafileid int
)
as
begin
-- returns batch items that may be duplicate drafts
-- most common cause: dup client records


select n.*
from tblnacharegister2 n
join (
	-- grouping by client's first initial to omit husband/wife scenarios where they're drafting from the same account
	-- on the same day (not common)
	select left(name,1) [init], accountnumber, routingnumber
	from tblnacharegister2
	where nachafileid = @nachafileid
	group by left(name,1), accountnumber, routingnumber
	having count(*) > 1
) d
on left(n.name,1) = d.init
and n.accountnumber = d.accountnumber
and n.routingnumber = d.routingnumber
where n.nachafileid = @nachafileid
order by n.accountnumber


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNachaTransaction]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetNachaTransaction]
(
	@NachaRegisterId int
)
AS
select 
n.NachaRegisterId 
,n.[Name] 
,n.AccountNumber  
,n.RoutingNumber 
,n.Type 
,n.Amount 
,n.IsPersonal 
,n.CommRecId 
,n.CompanyId 
,n.ClientId
,n.ShadowStoreId 
,n.TrustId
,n.RegisterId 
,n.RegisterPaymentId 
,n.[Status] 
,n.[State] 
,n.ReceivedDate 
,n.ProcessedDate
,n.ExceptionCode 
,n.Notes 
,n.ExceptionResolved 
,n.Flow
from 
	tblNachaRegister2 n
Where 
	n.NachaRegisterId = @NachaRegisterId
GO
/****** Object:  StoredProcedure [dbo].[stp_GetNachaPendingTransactions]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetNachaPendingTransactions]
@DepositsOnly bit = Null
AS
BEGIN
	Select Distinct NachaRegisterId as [NachaRegisterId]
	From  tblNachaRegister2
	Where isnull([State],0) <> 1 and isnull([Status], 0) = 0
	and isnull(NachaFileId,-1) > 0
	and (isnull(@DepositsOnly, 0) = 0 or IsPersonal = @DepositsOnly or [Name] = 'Disbursement Account')
	
	Order by NachaRegisterId
END
GO
/****** Object:  StoredProcedure [dbo].[stp_update_NachaRegisterItem2]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_update_NachaRegisterItem2]
(
	@nachaRegisterId int,
	@nachaFileId int
)

AS

BEGIN

SET NOCOUNT ON

UPDATE tblNachaRegister2
	SET
		NachaFileId=@nachaFileId
WHERE
	NachaRegisterId=@nachaRegisterId
END
GO
/****** Object:  StoredProcedure [dbo].[stp_UpdateNachaRegister2]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_UpdateNachaRegister2]
@NachaRegisterId int  
,@NachaFileId int = NULL
,@Name varchar(50) = NULL
,@AccountNumber varchar(50) = NULL 
,@RoutingNumber varchar(50) = NULL
,@Type varchar(1) = NULL
,@Amount money = NULL
,@IsPersonal bit = NULL
,@CommRecId int = NULL
,@CompanyID int = NULL
,@ClientID int = NULL
,@ShadowStoreId varchar(20) = NULL
,@TrustId varchar(20) = NULL
,@RegisterID int = NULL
,@RegisterPaymentID int = NULL
,@Status int = NULL
,@State int = NULL
,@ReceivedDate DateTime = NULL
,@ProcessedDate DateTime = NULL
,@ExceptionCode varchar(255) = NULL
,@Notes varchar(max) = NULL
,@ExceptionResolved bit = NULL
AS
UPDATE tblNachaRegister2 SET
NachaFileId = isnull(@NachaFileId, NachaFileId)
,[Name] = isnull(@Name, [Name])
,AccountNumber = isnull(@AccountNumber, AccountNumber) 
,RoutingNumber = isnull(@RoutingNumber, RoutingNumber)
,[Type] = isnull(@Type, [Type])
,Amount = isnull(@Amount, Amount)
,IsPersonal = isnull(@IsPersonal, IsPersonal)
,CommRecId = isnull(@CommRecId, CommRecId)
,CompanyId = isnull(@CompanyId, CompanyId)
,ClientId = isnull(@ClientId, ClientId)
,ShadowStoreId = isnull(@ShadowStoreId, ShadowStoreId)
,TrustID = isnull(@TrustId, TrustId)
,RegisterID = isnull(@RegisterId, RegisterId)
,RegisterPaymentID = isnull(@RegisterPaymentId, RegisterPaymentId)
,[Status] = isnull(@Status, [Status])
,[State] = isnull(@State, [State])
,ReceivedDate = isnull(@ReceivedDate, ReceivedDate)
,ProcessedDate = isnull(@ProcessedDate, ProcessedDate)
,ExceptionCode = isnull(@ExceptionCode, ExceptionCode)
,Notes = isnull(@Notes, Notes)
,ExceptionResolved = isnull(@ExceptionResolved, ExceptionResolved)
WHERE NachaRegisterId = @NachaRegisterId
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertShadowCommission]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_InsertShadowCommission]
(
	@commrecid int,
	@display nvarchar(50),
	@bankaccountnumber nvarchar(50),
	@bankroutingnumber nvarchar(50),
	@accounttype nvarchar(1),
	@transferamount money,
	@ispersonal bit,
	@companyid int,
	@trustid int
)

AS


INSERT INTO tblNachaRegister2
(
	NachaFileId,
	[Name],
	AccountNumber,
	RoutingNumber,
	[Type],
	Amount,
	IsPersonal,
	CommRecId,
	CompanyID,
	Created,
	ShadowStoreId,
	RegisterId,
	RegisterPaymentID,
	TrustID,
	Flow
)
VALUES
(
	-1,
	@display,
	@bankaccountnumber,
	@bankroutingnumber,
	isnull(@accounttype, 'C'),
	round(@transferamount, 2), -- should always be a positive amount
	@ispersonal,
	@commrecid,
	@companyid,
	getdate(),
	null,
	null,
	null,
	@trustid,
	'debit' -- debit GCA and credit recipient
)

RETURN scope_identity()
GO
/****** Object:  Trigger [trg_tblNachaRegister2_WooleryRecordInsert]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trg_tblNachaRegister2_WooleryRecordInsert] ON [dbo].[tblNachaRegister2]
   AFTER INSERT
AS 
-- =============================================
-- Author:		Gary Singh
-- Create date: June-2010
-- Description:	This trigger tansfers the data for Woolery clients
-- =============================================

BEGIN

SET NOCOUNT ON;

/*
IF EXISTS (
		select a.* from INSERTED a
		inner join DMS_GSINGH..tblClient b 
		on a.clientid=b.clientid
		Where b.RemittName='Woolery'
			)
BEGIN
*/

	IF TRIGGER_NESTLEVEL() > 1
		RETURN


INSERT INTO DMS_GSINGH.[dbo].[tblNachaRegister2]
           ([NachaFileId]
           ,[Name]
           ,[AccountNumber]
           ,[RoutingNumber]
           ,[Type]
           ,[Amount]
           ,[IsPersonal]
           ,[CommRecId]
           ,[CompanyID]
           ,[ShadowStoreId]
           ,[ClientID]
           ,[TrustId]
           ,[RegisterID]
           ,[RegisterPaymentID]
           ,[Created]
           ,[Status]
           ,[State]
           ,[ReceivedDate]
           ,[ProcessedDate]
           ,[ExceptionCode]
           ,[Notes]
           ,[ExceptionResolved]
           ,[Flow]
           ,[ReferenceNachaRegisterID])
SELECT [NachaFileId]
      ,[Name]
      ,[AccountNumber]
      ,[RoutingNumber]
      ,[Type]
      ,[Amount]
      ,[IsPersonal]
      ,[CommRecId]
      ,[CompanyID]
      ,[ShadowStoreId]
      ,[ClientID]
      ,[TrustId]
      ,[RegisterID]
      ,[RegisterPaymentID]
      ,[Created]
      ,[Status]
      ,[State]
      ,[ReceivedDate]
      ,[ProcessedDate]
      ,[ExceptionCode]
      ,[Notes]
      ,[ExceptionResolved]
      ,[Flow]
      ,[NachaRegisterId]
  FROM INSERTED


	-- Update ReferenceClientId from other table
	declare @NachaRegisterID_Source int
	declare @NachaRegisterID_Target int

	SELECT @NachaRegisterID_Target = SCOPE_IDENTITY()
	SELECT @NachaRegisterID_Source = [NachaRegisterID] From Inserted

	UPDATE WOOLERY..tblNachaRegister2 
	SET [ReferenceNachaRegisterID] = @NachaRegisterID_Target
	WHERE RegisterID = @NachaRegisterID_Source


	--END
END
GO
/****** Object:  StoredProcedure [dbo].[get_OutstandingNachaRegisterItems]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[get_OutstandingNachaRegisterItems]
(
	@CommRecID0 int,
	@CommRecID1 int,
	@CommRecID2 int,
	@CommRecID3 int
)

AS

BEGIN

SELECT
	nr.NachaRegisterId,
	nr.Name,
	nr.AccountNumber,
	nr.RoutingNumber,
	nr.Amount,
	nr.CommRecId,
	nr.IsPersonal,
	nr.[type] as AccountType
FROM
	tblNachaRegister nr
WHERE
	nr.NachaFileId IS NULL
	and CommRecId in (@CommrecID0, @CommrecID1, @CommrecID2, @CommrecID3)
	ORDER BY nr.NachaRegisterID
END
GO
/****** Object:  StoredProcedure [dbo].[get_NachaRegisterItems]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[get_NachaRegisterItems]
(
	@nachaFileId int,
	@CommRecID0 int,
	@CommRecID1 int,
	@CommRecID2 int,
	@CommRecID3 int
)

AS

BEGIN

SET NOCOUNT ON

SELECT
	nr.NachaRegisterId,
	nr.Name,
	nr.AccountNumber,
	nr.RoutingNumber,
	nr.Amount,
	nr.CommRecId,
	nr.IsPersonal,
	nr.[type] as AccountType
FROM
	tblNachaRegister nr
WHERE
	nr.NachaFileId = @nachaFileId
	and CommRecId in (@CommRecID0, @CommRecID1, @CommRecID2, @CommRecID3)
	ORDER BY nr.NachaRegisterId
END
GO
/****** Object:  StoredProcedure [dbo].[get_NachaRegisterItems_New]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[get_NachaRegisterItems_New]
(
	@nachaFileId int,
	@CommRecID0 int,
	@CommRecID1 int,
	@CommRecID2 int,
	@CommRecID3 int,
	@CompanyID int
)

AS

BEGIN

SET NOCOUNT ON

DECLARE @TrustAcct int

SET @TrustAcct = (SELECT CommRecID FROM tblCommrec WHERE CompanyID = @CompanyID AND IsTrust = 1)

IF @TrustAcct is null
	BEGIN
		SET @TrustAcct = 0
	END

DECLARE @NACHARegister TABLE
(
NachaRegisterID int,
[Name] varchar(50),
AccountNumber varchar(50),
RoutingNumber varchar(9),
Amount money,
CommRecID int,
IsPersonal bit,
AccountType varchar(1),
CompanyID int,
NR int
)

INSERT INTO @NACHARegister

SELECT
	nr.NachaRegisterId,
	nr.Name,
	nr.AccountNumber,
	nr.RoutingNumber,
	nr.Amount,
	nr.CommRecId,
	nr.IsPersonal,
	nr.[type] as AccountType,
	nr.CompanyID int,
	'1'
FROM
	tblNachaRegister nr
WHERE
	nr.NachaFileId = @nachaFileId
	and CommRecId in (@CommRecID0, @CommRecID1, @CommRecID2, @CommRecID3)

INSERT INTO @NACHARegister

SELECT
	nr.NachaRegisterId,
	nr.Name,
	case when nr.AccountNumber is null then (select AccountNumber from tblCommrec where display like '%Clearing%' and companyid = @companyid) ELSE nr.accountnumber END [AccountNumber],
	case when nr.RoutingNumber is null then (select RoutingNumber from tblCommrec where display like '%Clearing%' and companyid = @companyid) ELSE nr.routingnumber END [RoutingNumber],
	nr.Amount,
	nr.CommRecId,
	nr.IsPersonal,
	nr.[type] as AccountType,
	nr.CompanyID,
	'2'
FROM
	tblNachaRegister nr
WHERE
	nr.NachaFileId = @nachaFileId
	and CommRecId in (@CommRecID0, @CommRecID1, @CommRecID2, @CommRecID3)

SELECT * FROM @NACHARegister

END
GO
/****** Object:  StoredProcedure [dbo].[get_OutstandingNachaRegisterItems_BofA]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[get_OutstandingNachaRegisterItems_BofA]
(
	@CommRecID0 int = 0,
	@CommRecID1 int = 0,
	@CommRecID2 int = 0,
	@CommRecID3 int = 0,
	@CompanyID int = 0
)

AS

BEGIN

--DECLARE	@CommRecID0 int
--DECLARE	@CommRecID1 int
--DECLARE	@CommRecID2 int
--DECLARE	@CommRecID3 int
--DECLARE	@CompanyID int
--SET	@CommRecID0 = 30
--SET	@CommRecID1 = 31
--SET	@CommRecID2 = 32
--SET	@CommRecID3 = 0
--SET	@CompanyID = 3

DECLARE @TrustAcct int

SET @TrustAcct = (SELECT CommRecID FROM tblCommrec WHERE CompanyID = @CompanyID AND IsTrust = 1)

IF @TrustAcct is null
	BEGIN
		SET @TrustAcct = 0
	END

DECLARE @OutStandingRegisterItems TABLE
(
NachaRegisterID int,
[Name] varchar(50),
AccountNumber varchar(50),
RoutingNumber varchar(9),
Amount money,
CommRecID int,
IsPersonal bit,
AccountType varchar(1),
CompanyID int,
NR int
)

INSERT INTO @OutStandingRegisterItems

SELECT
	nr.NachaRegisterId,
	nr.Name,
	nr.AccountNumber,
	nr.RoutingNumber,
	nr.Amount,
	nr.CommRecId,
	nr.IsPersonal,
	nr.[type] as AccountType,
	nr.CompanyID,
	'1' [NR]
FROM
	tblNachaRegister nr
WHERE
	nr.NachaFileId IS NULL
	AND CommRecId IN (@CommrecID0, @CommrecID1, @CommrecID2, @CommrecID3)
	AND CommRecID <> @TrustAcct 

INSERT INTO @OutStandingRegisterItems

SELECT
	nr.NachaRegisterId,
	nr.Name,
	case when nr.AccountNumber is null then (select AccountNumber from tblCommrec where display like '%Clearing%' and companyid = @companyid) ELSE nr.accountnumber END [AccountNumber],
	case when nr.RoutingNumber is null then (select RoutingNumber from tblCommrec where display like '%Clearing%' and companyid = @companyid) ELSE nr.routingnumber END [RoutingNumber],
	nr.Amount,
	nr.CommRecId,
	nr.IsPersonal,
	nr.[type] as AccountType,
	nr.CompanyID,
	'2' [NR]
FROM
	tblNachaRegister2 nr
WHERE
	nr.NachaFileId = -1
	AND CompanyID = @CompanyID

SELECT * FROM @OutStandingRegisterItems

END
GO
/****** Object:  StoredProcedure [dbo].[update_NachaRegisterItem]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[update_NachaRegisterItem]
(
	@nachaRegisterId int,
	@nachaFileId int,
	@idTidbit varchar(32)
)

AS

BEGIN

SET NOCOUNT ON

UPDATE tblNachaRegister
	SET
		NachaFileId=@nachaFileId,
		IdTidbit=@idTidbit
WHERE
	NachaRegisterId=@nachaRegisterId
END
GO
/****** Object:  StoredProcedure [dbo].[_stp_AuditTransactions]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[_stp_AuditTransactions]
(
	@dupdb as nvarchar(25),
	@date1 as datetime,
	@date2 as datetime = null,
	@shownotfound as bit = 0,
	@showduplicate as bit = 1
)

AS

if @date2 is null
begin
	set @date2 = @date1
end

declare @acctno as nvarchar(10)
declare @clientid as int
declare @name as nvarchar(50)
declare @amount as money

declare @numdup as int
declare @status26 as nvarchar(25)
declare @status27 as nvarchar(25)
declare @status28 as nvarchar(25)
declare @addentry as bit

declare @cleared as int
declare @paid as int
declare @desc as nvarchar(500)

declare @fileids as nvarchar(500)
declare @tempfileid as int

---------------------------------------------------------------------
declare @tempsql as nvarchar(500)
---------------------------------------------------------------------

create table #return
(
	ret nvarchar(50) null
)

create table #tmpResults
(
	AccountNumber nvarchar(10),
	ClientID int,
	ClientName nvarchar(50),
	Cleared int,
	Paid int,
	Amount money,
	Description nvarchar(250)
)

set @fileids = ''

declare cursor_fileids cursor for
	select
		NachaFileID
	from
		tblNachaFile
	where
		cast(convert(nvarchar(10), Date, 101) as datetime) >= cast(convert(nvarchar(10), @date1, 101) as datetime)
		and cast(convert(nvarchar(10), Date, 101) as datetime) <= cast(convert(nvarchar(10), @date2, 101) as datetime)

open cursor_fileids

fetch next from cursor_fileids into @tempfileid
while @@fetch_status = 0
begin
	set @fileids = @fileids + cast(@tempfileid as nvarchar(10)) + ','

	fetch next from cursor_fileids into @tempfileid
end

close cursor_fileids
deallocate cursor_fileids

set @fileids = substring(@fileids, 0, len(@fileids))

if @fileids = '' or not len(@fileids) > 0
begin
	print 'The dates specified were invalid, using todays date...'

	select top 1
		@tempfileid = cast(NachaFileID as nvarchar(10))
	from
		tblNachaFile
	where
		datediff(d, Date, getdate()) = 0

	set @fileids = cast(@tempfileid as nvarchar(10)) + ',' + cast((@tempfileid + 1) as nvarchar(10))
end

exec('
declare cursor_audittrans cursor for
	select distinct
		[Name],
		Amount,
		(select top 1 ClientID from tblPerson where (firstname + '' '' + lastname) = [Name]) as ClientID,
		(select top 1 AccountNumber from tblClient where ClientID = (select top 1 ClientID from tblPerson where (firstname + '' '' + lastname) = [Name])) as AccountNumber
	from
		tblNachaRegister
	where
		IsPersonal = 1 and
		NachaFileid in (' + @fileids + ')
	order by [Name]
')

open cursor_audittrans

fetch next from cursor_audittrans into @name, @amount, @clientid, @acctno
while @@fetch_status = 0
begin
	set @cleared = 0
	set @paid = 0
	set @desc = ''
	set @status26 = ''
	set @status27 = ''
	set @status28 = ''

	set @addentry = 0

	set @tempsql = '
		select
			count(*)
		from
			' + @dupdb + '
		where
			AccountNumber = ' + @acctno

	print @tempsql

	insert into #return
		exec(@tempsql)

	set @numdup = cast((select top 1 isnull(ret, '0') from #return) as int)
	truncate table #return

	if @shownotfound > 0
	begin
		if @numdup = 0
		begin
			set @desc = @desc + 'Client information not found in ' + @dupdb + '! '
			set @addentry = 1
		end
	end

	if @numdup > 0
	begin
		insert into #return
			exec('
			select
				[26th]
			from
				' + @dupdb + '
			where
				AccountNumber = ' + @acctno
			)

		set @status26 = (select top 1 isnull(ret, '') from #return)
		truncate table #return

		insert into #return
			exec('
			select
				[27th]
			from
				' + @dupdb + '
			where
				AccountNumber = ' + @acctno
			)

		set @status27 = (select top 1 isnull(ret, '') from #return)
		truncate table #return

		insert into #return
			exec('
			select
				[28th]
			from
				' + @dupdb + '
			where
				AccountNumber = ' + @acctno
			)

		set @status28 = (select top 1 isnull(ret, '') from #return)
		truncate table #return

		if lower(@status26) like '%clear%'
		begin
			set @cleared = @cleared + 1
		end

		if lower(@status27) like '%clear%'
		begin
			set @cleared = @cleared + 1
		end

		if lower(@status28) like '%clear%'
		begin
			set @cleared = @cleared + 1
		end

		select
			@paid = count(*)
		from
			tblNachaRegister
		where
			[Name] = @name

		if @paid >= @cleared
		begin
			set @addentry = 1
		end
	end

	if @showduplicate > 0
	begin
		if @numdup > 1
		begin
			set @desc = @desc + cast(@numdup as nvarchar(3)) + ' entries found in ' + @dupdb + '! '
			set @addentry = 1
		end
	end

	if @addentry > 0
	begin
		insert into
			#tmpResults
		values
			(
				@acctno,
				@clientid,
				@name,
				@cleared,
				@paid,
				@amount,
				@desc
			)
	end

	fetch next from cursor_audittrans into @name, @amount, @clientid, @acctno
end

close cursor_audittrans
deallocate cursor_audittrans

select
	*
from
	#tmpResults

drop table #tmpResults
drop table #return
GO
/****** Object:  Trigger [trg_tblRegister_WooleryRecordInsert]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trg_tblRegister_WooleryRecordInsert] ON [dbo].[tblRegister]
   AFTER INSERT
AS 
-- =============================================
-- Author:		Gary Singh
-- Create date: June-2010
-- Description:	This trigger tansfers the data for Woolery clients to Woolery database
-- =============================================

BEGIN

SET NOCOUNT ON;

/*
IF EXISTS (
		select a.* from INSERTED a
		inner join dms_gsingh..tblClient b 
		on a.clientid=b.clientid
		Where b.RemittName='Woolery'
			)
*/

-- only transfer Monthly Maintenance Fee (EntryTypeID=1)
--		and not for Deposits where EntryTypeID=3
/*

IF EXISTS (
		select a.* from INSERTED a
		Where a.[EntryTypeId] = 1
		)

BEGIN
*/



INSERT INTO DMS_GSINGH.[dbo].[tblRegister]
           ([ClientId]
           ,[AccountID]
           ,[TransactionDate]
           ,[CheckNumber]
           ,[Description]
           ,[Amount]
           ,[Balance]
           ,[EntryTypeId]
           ,[IsFullyPaid]
           ,[Bounce]
           ,[BounceBy]
           ,[Void]
           ,[VoidBy]
           ,[Hold]
           ,[HoldBy]
           ,[Clear]
           ,[ClearBy]
           ,[ImportID]
           ,[MediatorID]
           ,[OldTable]
           ,[OldID]
           ,[ACHMonth]
           ,[ACHYear]
           ,[FeeMonth]
           ,[FeeYear]
           ,[Created]
           ,[CreatedBy]
           ,[AdjustedRegisterID]
           ,[OriginalAmount]
           ,[PFOBalance]
           ,[SDABalance]
           ,[RegisterSetID]
           ,[InitialDraftYN]
           ,[CompanyID]
           ,[BouncedReason]
           ,[ClientDepositID]
           ,[NotC21]
           ,[ReferenceRegisterID])
	SELECT 
      [ClientId]
      ,[AccountID]
      ,[TransactionDate]
      ,[CheckNumber]
      ,[Description]
      ,[Amount]
      ,[Balance]
      ,[EntryTypeId]
      ,[IsFullyPaid]
      ,[Bounce]
      ,[BounceBy]
      ,[Void]
      ,[VoidBy]
      ,[Hold]
      ,[HoldBy]
      ,[Clear]
      ,[ClearBy]
      ,[ImportID]
      ,[MediatorID]
      ,[OldTable]
      ,[OldID]
      ,[ACHMonth]
      ,[ACHYear]
      ,[FeeMonth]
      ,[FeeYear]
      ,[Created]
      ,[CreatedBy]
      ,[AdjustedRegisterID]
      ,[OriginalAmount]
      ,[PFOBalance]
      ,[SDABalance]
      ,[RegisterSetID]
      ,[InitialDraftYN]
      ,[CompanyID]
      ,[BouncedReason]
      ,[ClientDepositID]
      ,[NotC21]
      ,[RegisterId]
	  FROM Inserted


	-- Update ReferenceClientId from other table
	declare @RegisterID_Source int
	declare @RegisterID_Target int

	SELECT @RegisterID_Target = SCOPE_IDENTITY()
	SELECT @RegisterID_Source = RegisterID From Inserted

	UPDATE WOOLERY..tblRegister 
	SET ReferenceRegisterID =@RegisterID_Target
	WHERE RegisterID = @RegisterID_Source


	--END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_getRuledDeposits]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_getRuledDeposits]
@RuleAchId int
AS
select u.ruleachid, r.ACHMonth, r.ACHYear, r.transactiondate as LastDateUsed from tblruleach u
inner join tblregister r on r.clientid = u.clientid
where  cast(convert(varchar,r.transactiondate,111) as datetime) between u.startdate and isnull(u.enddate,getdate())
and r.entrytypeid = 3
--and r.amount = u.depositamount
and r.ACHMonth is not null
and r.ACHYear is not null  
and u.ruleachid = @RuleAchId
order by  r.ACHYear desc, r.ACHMonth desc
GO
/****** Object:  StoredProcedure [dbo].[stp_GetClientRtrFees]    Script Date: 09/10/2010 18:33:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 08/28/2009
-- Description:	Gets all retainer fee charge totals for a client
-- =============================================
CREATE PROCEDURE [dbo].[stp_GetClientRtrFees] 

	@ClientID int 
AS
BEGIN
	SET NOCOUNT ON;
DECLARE @RtrFees Table
(
AccountID INT,
FeeAmount MONEY
)

INSERT INTO @RtrFees

SELECT AccountID, 
sum(Amount) [RetainerFee] 
FROM tblRegister 
WHERE EntryTypeID IN (2, 42) 
AND ClientID = @ClientID
AND Void IS NULL 
AND Bounce IS NULL
GROUP BY AccountID

--INSERT INTO @RtrFees
--
--SELECT r.AccountID,
--SUM(r1.Amount) [RetainerFee]
--FROM tblRegister r
--JOIN tblRegister r1 ON r1.AdjustedRegisterID = r.RegisterID
--WHERE r1.EntryTypeID = -2
--AND r.ClientID = @ClientID
--AND r.Void IS NULL
--AND r.Bounce IS NULL 
--GROUP BY r.AccountID

SELECT AccountID, SUM(FeeAmount)
FROM @RtrFees
GROUP BY AccountID
END
GO
/****** Object:  StoredProcedure [dbo].[stp_negotiations_getRegisterBalance]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_negotiations_getRegisterBalance]
(
@clientid int
)
as
BEGIN

	--declare @clientid int
	--set @clientid = 1671

	declare @tblreg table(amount money, eid int,bounce datetime,void datetime,hold datetime,[clear] datetime)

	insert into @tblreg 
	select amount,entrytypeid,bounce,void,hold,[clear]
	from tblregister with(nolock)
	where clientid = @clientid order by transactiondate desc

	delete from @tblreg where eid = 3 and hold > getdate() and [clear] is null
	delete from @tblreg where bounce is not null
	delete from @tblreg where void is not null
	delete from @tblreg where eid = -2


	select 
	isnull(sum(case when eid IN(3,-2) then amount else 0 end),0)[TotDeps] 
	,isnull(sum(case when not eid IN(3,-2) then amount else 0 end),0)[TotWith] 
	,isnull(case when sum(case when eid IN(3,-2) then amount else 0 end)+sum(case when not eid IN(3,-2) then amount else 0 end) < 0 then 0 else sum(case when eid IN(3,-2) then amount else 0 end)+sum(case when not eid IN(3,-2) then amount else 0 end)end,0)[SDABal] 
	,isnull(case when sum(case when eid IN(3,-2) then amount else 0 end)+sum(case when not eid IN(3,-2) then amount else 0 end) > 0 then 0 else sum(case when eid IN(3,-2) then amount else 0 end)+sum(case when not eid IN(3,-2) then amount else 0 end)end,0)[PFOBal] 
	from @tblreg
END
GO
/****** Object:  StoredProcedure [dbo].[stp_LexxCMS_deposits_getAll]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LexxCMS_deposits_getAll]
(@clientID int)
as
BEGIN
	SELECT
		*
	FROM
		tblRegister 
	WHERE
		tblRegister.EntryTypeId=3 AND
		tblRegister.ClientId=62076 and
		tblregister.AdjustedRegisterID is null
	ORDER BY
		tblRegister.TransactionDate ASC
END


GRANT EXEC ON stp_LexxCMS_deposits_getAll TO PUBLIC
GO
/****** Object:  StoredProcedure [dbo].[stp_LexxCMS_deposits_getLast]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LexxCMS_deposits_getLast]
	(
		@clientid int 
	)
AS
BEGIN
	SELECT top 1 *
	FROM tblRegister 
	WHERE tblRegister.EntryTypeId=3 AND
		tblRegister.ClientId=@clientid and
		tblregister.AdjustedRegisterID is null
	ORDER BY
		tblRegister.TransactionDate desc
END

GRANT EXEC ON stp_LexxCMS_deposits_getLast TO PUBLIC
GO
/****** Object:  Trigger [trg_tblRegister_WooleryRecordUpdate]    Script Date: 09/10/2010 18:33:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trg_tblRegister_WooleryRecordUpdate] ON [dbo].[tblRegister]
   AFTER UPDATE
AS 
-- =============================================
-- Author:		Gary Singh
-- Create date: June-2010
-- Description:	This trigger tansfers the data for Woolery clients 
-- =============================================

BEGIN

SET NOCOUNT ON;


-- only transfer Monthly Maintenance Fee (EntryTypeID=1)
--		and not for Deposits where EntryTypeID=3
	declare @ReferenceRegisterId int
	SELECT @ReferenceRegisterId = ReferenceRegisterId
	FROM INSERTED

IF EXISTS (
		select a.* from INSERTED a
		Where a.IsFullyPaid = 1
		)
BEGIN

	UPDATE DMS_GSINGH.[dbo].[tblRegister]
	SET	IsFullyPaid = 1
	WHERE RegisterId = @ReferenceRegisterId
END

IF EXISTS (
		select a.* from INSERTED a
		Where a.Bounce is Not Null
		or a.Void is Not Null
		)
BEGIN

	UPDATE DMS_GSINGH.[dbo].[tblRegister]
	SET	Bounce = I.Bounce
		,BounceBy = I.BounceBy
		,Void = I.Void
		,VoidBy = I.VoidBy
	FROM DMS_GSINGH.[dbo].[tblRegister] A
	INNER JOIN INSERTED I 
	ON A.RegisterId = @ReferenceRegisterId


END


END
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyGetCommissionData]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_AgencyGetCommissionData]
(
	@agencyId int,
	@startDate datetime
)

AS

DECLARE @clientInfo TABLE
(
	ClientId int PRIMARY KEY,
	FullName varchar(102),
	Account varchar(15)
)

-- Get all the clients for this agent
-- TODO: limit down to only ones that have transactions
INSERT INTO
	@clientInfo
SELECT
	tblClient.ClientId,
	(LastName + ', ' + FirstName) AS FullName,
	AccountNumber
FROM
	tblClient INNER JOIN
	tblPerson ON tblClient.PrimaryPersonId=tblPerson.PersonId
WHERE
	AgencyId=@agencyId
ORDER BY
	FullName

SELECT
	ClientId,
	FullName,
	Account
FROM
	@clientInfo

DECLARE @endDate datetime
SET @endDate = DATEADD(MONTH, 1, @startDate)

DECLARE @transactionSummary TABLE
(
	RegisterId int,
	ClientId int,
	Amount float,
	Balance float,
	EntryTypeId int
)

-- Get all transactions from this month
INSERT INTO
	@transactionSummary
SELECT
	RegisterId,
	ClientId,
	Amount,
	Balance,
	EntryTypeId
FROM
	tblRegister
WHERE
	ClientId IN (SELECT ClientId FROM @clientInfo) AND
	TransactionDate >= @startDate AND
	TransactionDate < @endDate


SELECT
	ClientId,
	Amount,
	EntryTypeId
FROM
	@transactionSummary


-- Enrollment transaction detail
SELECT
	ClientId,
	( SELECT TOP 1 Balance FROM tblRegister WHERE ClientId=tbla.ClientID AND EntryTypeId=2 ORDER BY TransactionDate DESC
	) AS EndingBalance,
	( SELECT Amount FROM tblRegister WHERE ClientId=tbla.ClientID AND EntryTypeID=2
	) AS TotalFees,
	(SELECT Created FROM tblRoadmap WHERE 
		tblRoadmap.ClientId=tbla.ClientId
		AND tblRoadmap.ClientStatusId=5
	) AS EnrollDate
FROM
	@clientInfo as tbla
WHERE
	ClientId IN (SELECT ClientID FROM @transactionSummary WHERE EntryTypeId IN (2, 7))
ORDER BY
	FullName

-- Settlement transaction summary
SELECT
	ts.ClientId,
	(SELECT Balance FROM tblRegister WHERE 
		tblRegister.ClientId=ts.ClientId AND
		TransactionDate <  @endDate AND
		EntryTypeId=2
	) AS BeginBalance

FROM
	@transactionSummary ts INNER JOIN @clientInfo ci ON ci.ClientId=ts.ClientId
WHERE
	EntryTypeId IN (4)
ORDER BY
	FullName

-- Settlement transaction detail
SELECT
	tblAccount.ClientId, 
	tblAccount.CurrentCreditorInstanceId,
	(SELECT tblCreditor.[Name] FROM tblCreditorInstance INNER JOIN tblCreditor ON tblCreditorInstance.CreditorId=tblCreditor.CreditorId WHERE tblCreditorInstance.CreditorInstanceId=tblAccount.CurrentCreditorInstanceId) AS CreditorName,
	tblAccount.CurrentAmount,
	tblMediation.SettlementAmount as AmtOffered,
	SettlementFee AS SettFees
FROM
	tblAccount INNER JOIN tblMediation ON tblAccount.AccountId=tblMediation.AccountId
	
WHERE
	tblAccount.ClientId IN (SELECT ClientId FROM @transactionSummary WHERE EntryTypeId IN (4))
	AND Settled IS NOT NULL 
	AND	Settled >= @startDate 
	AND	Settled < @endDate
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertC21Deposit]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_InsertC21Deposit]
@ClientId int,
@TransactionDate datetime,
@CheckNumber varchar(50),
@Description varchar(255),
@Amount money,
@Hold datetime =null,
@HoldBy int = null,
@ImportId int = null,
@CreatedBy int
AS
BEGIN
	Insert into tblregister(ClientId, TransactionDate, CheckNumber, Description, Amount, Balance, EntryTypeId, IsFullyPaid, Hold, HoldBy, ImportId, Created, CreatedBy)
	Values(@ClientId, @TransactionDate, @CheckNumber, @Description, @Amount, 0, 3, 0, @Hold, @HoldBy, @ImportId, GetDate(), @CreatedBy )
	
	Select  scope_identity()
END
GO
/****** Object:  StoredProcedure [dbo].[stp_LexxCMS_alert_GetAllForClient]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_LexxCMS_alert_GetAllForClient]
	(
		@Clientid int
	)
AS
BEGIN
	declare @tblAlert table(AlertID int,AlertLocation int,AlertType int, AlertDescription varchar(max))

	declare @tblSett table(settID int, statusID int)
	insert into @tblSett 
	select settlementid,max(settlementstatusid)
	from tblnegotiationroadmap with (nolock)
	where settlementid in (select settlementid from tblsettlements where clientid = @Clientid and status='a' and active = 1)
	group by settlementid
	having max(settlementstatusid) in (3,6,8,10)
	option (fast 100)

	insert into @tblAlert
	select 
		s.settlementid
		,[AlertLocation]=0
		,[AlertType]=case when statusid = 3 then 0
		when statusid = 6 then 1 
		when statusid = 8 then 1
		else 0 end	
		,[AlertDescription]=case when statusid = 3 then 'We have a settlement offer on your ' 
		when statusid = 6 then 'We are verifying the settlement for your ' 
		when statusid = 8 then 'Settlement pending your approval for '
		else 'Your settlement is complete for '
		end	+ cc.name + ' #' + cast(right(cci.accountnumber,4) as varchar) + '.' 
	from tblsettlements s 
	inner join @tblsett st on st.settID  = s.settlementid
	inner join tblaccount a with(nolock) on a.accountid = s.creditoraccountid
	inner join tblcreditorinstance cci with(nolock) on cci.creditorinstanceid = a.currentcreditorinstanceid
	inner join tblcreditor cc with(nolock) on cc.creditorid = cci.creditorid
	inner join tblcreditorinstance oci with(nolock) on oci.creditorinstanceid = a.originalcreditorinstanceid
	inner join tblcreditor oc with(nolock) on oc.creditorid = oci.creditorid
	order by s.settlementid

	insert into @tblAlert
	select top 1 [AlertID]=registerid,[AlertLocation]=1,[AlertType]= 2 ,[AlertDescr]= 'Your Last Deposit on '  + convert(varchar(10),transactiondate,101)  + ' for $' + cast(amount as varchar) + ' was Returned.'
	from tblregister where clientid =@Clientid and entrytypeid = 3 and bounce is not null order by transactiondate desc

	select * from @tblAlert
END
GO
/****** Object:  StoredProcedure [dbo].[stp_GetTransactionByType_Deposits]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_GetTransactionByType_Deposits]
	(
		@clientId int
	)

as

SELECT
	*
FROM
	tblRegister 
WHERE
	tblRegister.EntryTypeId=3 AND
	tblRegister.ClientId=@clientId and
	tblregister.AdjustedRegisterID is null
ORDER BY
	tblRegister.TransactionDate ASC
GO
/****** Object:  StoredProcedure [dbo].[stp_InitialDrafts]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_InitialDrafts '8/1/08','8/31/08 23:59:59'

CREATE procedure [dbo].[stp_InitialDrafts]
(
	@month int
,	@year int = 2008
)
as

declare @tmp table (clientid int, registerid int)
declare @reg table (clientid int, registerid int)


-- Clients created during date range
select *
into #clients
from tblclient
where agencyid in (838,840,842,843)
and month(created) = @month and year(created) = @year

-- Drafted this month
insert @tmp
select r.clientid, r.registerid
from tblAdhocach a
join #clients c on c.clientid = a.clientid
join tblregister r on r.clientid = c.clientid
	and month(r.transactiondate) = @month and year(r.transactiondate) = @year
	and r.entrytypeid = 3
	and r.initialdraftyn = 1
where a.initialdraftyn = 1

delete from #clients where clientid in (select clientid from @tmp)

-- Draft next month
delete from #clients where clientid in (
	select r.clientid
	from tblAdhocach a
	join #clients c on c.clientid = a.clientid
	join tblregister r on r.clientid = c.clientid
		and month(r.transactiondate) > @month
		and r.entrytypeid = 3
		and r.initialdraftyn = 1
	where a.initialdraftyn = 1
)

-- Canceled clients with no deposits
delete from #clients where clientid in (
	select clientid
	from #clients 
	where currentclientstatusid in (15,17,18)
)

-- Checks
insert @reg
select r.clientid, min(r.registerid) [registerid]
from tblregister r 
join #clients c on c.clientid = r.clientid
	and c.depositmethod = 'Check'
where r.entrytypeid = 3
group by r.clientid

insert @tmp 
select r.clientid, r.registerid
from tblregister r
join @reg c on c.registerid = r.registerid
where month(r.transactiondate) = @month and year(r.transactiondate) = @year

delete from #clients where clientid in (select clientid from @tmp)

-- Checks next month
delete from #clients where clientid in (
	select r.clientid
	from tblregister r
	join @reg c on c.registerid = r.registerid
	where month(r.transactiondate) > @month
)

delete from @reg where 1=1

-- Used deposit start date
insert @reg
select r.clientid, min(r.registerid) [registerid]
from tblregister r 
join #clients c on c.clientid = r.clientid
where r.entrytypeid = 3
group by r.clientid

insert @tmp 
select r.clientid, r.registerid
from tblregister r
join @reg c on c.registerid = r.registerid
where month(r.transactiondate) = @month and year(r.transactiondate) = @year


select * from @tmp

drop table #clients
GO
/****** Object:  StoredProcedure [dbo].[stp_InitialDraftAnalysis]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_InitialDraftAnalysis]
(
	@month int
,	@year int = 2008
)
as

declare @tmp table (clientid int, amount money)
declare @reg table (clientid int, registerid int)
declare @table table (descr varchar(100), clients int, amount money)
declare @reasons table (clientid int, bouncedreason int, amount money)


-- Clients created during date range
select *
into #clients
from tblclient
where agencyid in (838,840,842,843)
and month(created) = @month and year(created) = @year

--select count(*) [NewClients]
--, sum(case when (initialdraftdate between @from and @to) and initialdraftamount is not null then initialdraftamount else depositamount end) [FirstDraftTotal]
--from #clients


-- Drafted this month, good
insert @tmp
select r.clientid, r.amount
from tblAdhocach a
join #clients c on c.clientid = a.clientid
join tblregister r on r.clientid = c.clientid
	and month(r.transactiondate) = @month and year(r.transactiondate) = @year
	and r.entrytypeid = 3
	and r.initialdraftyn = 1
	--and r.amount = c.initialdraftamount
	and r.bounce is null
where a.initialdraftyn = 1
	--and a.depositdate = c.initialdraftdate
	--and a.depositamount = c.initialdraftamount

insert @table select 'DraftThisMonthGood', count(*), sum(amount) from @tmp
delete from #clients where clientid in (select clientid from @tmp)
delete from @tmp where 1=1


-- Drafted this month, bounced
insert @tmp
select r.clientid, r.amount
from tblAdhocach a
join #clients c on c.clientid = a.clientid
join tblregister r on r.clientid = c.clientid
	and month(r.transactiondate) = @month and year(r.transactiondate) = @year
	and r.entrytypeid = 3
	and r.initialdraftyn = 1
	--and r.amount = c.initialdraftamount
	and r.bounce is not null
where a.initialdraftyn = 1
	--and a.depositdate = c.initialdraftdate
	--and a.depositamount = c.initialdraftamount

-- Drafted this month, bounced reasons
insert @reasons
select r.clientid, r.bouncedreason, r.amount
from tblAdhocach a
join #clients c on c.clientid = a.clientid
join tblregister r on r.clientid = c.clientid
	and month(r.transactiondate) = @month and year(r.transactiondate) = @year
	and r.entrytypeid = 3
	and r.initialdraftyn = 1
	--and r.amount = c.initialdraftamount
	and r.bounce is not null
where a.initialdraftyn = 1
	--and a.depositdate = c.initialdraftdate
	--and a.depositamount = c.initialdraftamount

insert @table select 'DraftThisMonthBounced', count(*), sum(amount) from @tmp
delete from #clients where clientid in (select clientid from @tmp)
delete from @tmp where 1=1

-- Draft next month
insert @tmp
select r.clientid, r.amount
from tblAdhocach a
join #clients c on c.clientid = a.clientid
join tblregister r on r.clientid = c.clientid
	and month(r.transactiondate) > @month
	and r.entrytypeid = 3
	and r.initialdraftyn = 1
	--and r.amount = c.initialdraftamount
where a.initialdraftyn = 1
	--and a.depositdate = c.initialdraftdate
	--and a.depositamount = c.initialdraftamount

insert @table select 'DraftNextMonth', count(*), sum(amount) from @tmp
delete from #clients where clientid in (select clientid from @tmp)
delete from @tmp where 1=1


-- Canceled clients with no deposits
insert @tmp
select clientid, case when initialdraftamount is not null then initialdraftamount else depositamount end [amount]
from #clients where currentclientstatusid in (15,17,18)

insert @table select 'CancledNoDeposits', count(*), sum(amount) from @tmp
delete from #clients where clientid in (select clientid from @tmp)
delete from @tmp where 1=1


-- Checks
insert @reg
select r.clientid, min(r.registerid) [registerid]
from tblregister r 
join #clients c on c.clientid = r.clientid
	and c.depositmethod = 'Check'
where r.entrytypeid = 3
group by r.clientid

insert @table select 'ChecksThisMonthGood', count(*), sum(r.amount)
from tblregister r
join @reg c on c.registerid = r.registerid
where month(r.transactiondate) = @month and year(r.transactiondate) = @year
	and r.bounce is null

insert @table select 'ChecksThisMonthBounced', count(*), sum(r.amount)
from tblregister r
join @reg c on c.registerid = r.registerid
where month(r.transactiondate) = @month and year(r.transactiondate) = @year
	and r.bounce is not null

insert @reasons select r.clientid, r.bouncedreason, r.amount
from tblregister r
join @reg c on c.registerid = r.registerid
where month(r.transactiondate) = @month and year(r.transactiondate) = @year
	and r.bounce is not null

insert @table select 'ChecksNextMonth', count(*), sum(r.amount)
from tblregister r
join @reg c on c.registerid = r.registerid
where month(r.transactiondate) > @month

delete from #clients where clientid in (select clientid from @reg)
delete from @reg where 1=1


-- Used deposit start date
insert @reg
select r.clientid, min(r.registerid) [registerid]
from tblregister r 
join #clients c on c.clientid = r.clientid
where r.entrytypeid = 3
group by r.clientid

insert @table select 'UsedDepositStartDateThisMonthGood', count(*), sum(r.amount)
from tblregister r
join @reg c on c.registerid = r.registerid
where month(r.transactiondate) = @month and year(r.transactiondate) = @year
	and r.bounce is null

insert @table select 'UsedDepositStartDateThisMonthBounced', count(*), sum(r.amount)
from tblregister r
join @reg c on c.registerid = r.registerid
where month(r.transactiondate) = @month and year(r.transactiondate) = @year
	and r.bounce is not null

insert @reasons select r.clientid, r.bouncedreason, r.amount
from tblregister r
join @reg c on c.registerid = r.registerid
where month(r.transactiondate) = @month and year(r.transactiondate) = @year
	and r.bounce is not null

insert @table select 'UsedDepositStartDateNextMonth', count(*), sum(r.amount)
from tblregister r
join @reg c on c.registerid = r.registerid
where month(r.transactiondate) > @month

delete from #clients where clientid in (select clientid from @reg)
delete from @reg where 1=1


-- No deposits yet
insert @table select 'NoDepositsYet', count(*), sum(case when initialdraftamount is not null then initialdraftamount else depositamount end)
from #clients 

select * from @table

-- bounced reasons
select b.bounceddescription, count(r.clientid) [clients], sum(r.amount) [amount]
from @reasons r
join tblbouncedreasons b on b.bouncedid = r.bouncedreason
group by b.bounceddescription
order by b.bounceddescription

-- no deposit breakdowns
select 'NoChecksSubmitted', count(*) from #clients where depositmethod = 'Check'
union all
select 'FutureInitialDraft', count(*) from #clients where depositmethod <> 'Check' and month(initialdraftdate) > @month
union all
select 'FutureDepositStartDate', count(*) from #clients where depositmethod <> 'Check' and initialdraftamount is null and month(depositstartdate) > @month
union all
select 'NoDepositInfo', count(*) from #clients where depositamount is null and initialdraftamount is null


select sum(clients), sum(amount) from @table

--select * from #clients
drop table #clients
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterUpdateFeeAmount]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DoRegisterUpdateFeeAmount]
	(
		@registerid int
	)

as

---------------------------------------------------------------------------
-- (1) if originalamount is null, never updated for adjustment before
--     (a) copy over current amount to original amount
-- (2) change current mount to include all adjustments amounts
---------------------------------------------------------------------------

declare @totaladjustedamounts money

select
	@totaladjustedamounts = isnull(sum(amount), 0)
from
	tblregister
where
	adjustedregisterid = @registerid
	and void is null


if @totaladjustedamounts <> 0
	begin

		-- if originalamount has never been set, move the amount over
		update
			tblregister
		set
			originalamount = amount
		where
			registerid = @registerid and
			originalamount is null

		-- set amount equal to originalamount plus adjustments
		update
			tblregister
		set
			amount = originalamount + @totaladjustedamounts
		where
			registerid = @registerid

	end
else
	begin
		update
			tblregister
		set
			amount = originalamount
		where
			registerid = @registerid
	end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetStatsRegisterForClient]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetStatsRegisterForClient]
	(
		@clientid int
	)

as

-- discretionary variables
declare @numdebits int
declare @sumdebits money
declare @numcredits int
declare @sumcredits money

select
	@numdebits = count(registerid),
	@sumdebits = sum(abs(amount))
from
	tblregister
where
	clientid = @clientid and
	amount < 0

select
	@numcredits = count(registerid),
	@sumcredits = sum(abs(amount))
from
	tblregister
where
	clientid = @clientid and
	amount > 0

select @numdebits as numdebits, @sumdebits as sumdebits, @numcredits as numcredits, @sumcredits as sumcredits
GO
/****** Object:  StoredProcedure [dbo].[stp_GetPaymentsUsedForRegister]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_GetPaymentsUsedForRegister]
	(
		@registerid int
	)

as

-- find all paymentsregisters that were used for this register (which was a fee)
declare @payments table
(
	RegisterPaymentID int,
	PaymentDate datetime,
	FeeRegisterID int,
	FeeRegisterEntryTypeID int,
	FeeRegisterEntryTypeName nvarchar(50),
	FeeRegisterTransactionDate datetime,
	FeeRegisterCheckNumber nvarchar(50),
	FeeRegisterAmount money,
	FeeRegisterIsFullyPaid bit,
	Amount money,
	Voided bit,
	Bounced bit,
	RegisterPaymentDepositID int,
	DepositRegisterID int,
	DepositRegisterEntryTypeID int,
	DepositRegisterEntryTypeName nvarchar(50),
	DepositRegisterTransactionDate datetime,
	DepositRegisterCheckNumber nvarchar(50),
	DepositRegisterAmount money,
	DepositRegisterIsFullyPaid bit,
	RegisterPaymentDepositAmount money,
	RegisterPaymentDepositVoided bit,
	RegisterPaymentDepositBounced bit,
	FeeRegisterAccountID int,
	FeeRegisterClientID int
)

insert into
	@payments
select
	tblregisterpayment.registerpaymentid,
	tblregisterpayment.paymentdate,
	tblregisterpayment.feeregisterid,
	tblfeeregister.entrytypeid as feeregisterentrytypeid,
	tblfeeentrytype.name as feeregisterentrytypename,
	tblfeeregister.transactiondate as feeregistertransactiondate,
	tblfeeregister.checknumber as feeregisterchecknumber,
	tblfeeregister.amount as feeregisteramount,
	tblfeeregister.isfullypaid as feeregisterisfullypaid,
	tblregisterpayment.amount,
	tblregisterpayment.voided,
	tblregisterpayment.bounced,
	tblregisterpaymentdeposit.registerpaymentdepositid,
	tblregisterpaymentdeposit.depositregisterid,
	tbldepositregister.entrytypeid as depositregisterentrytypeid,
	tbldepositentrytype.name as depositregisterentrytypename,
	tbldepositregister.transactiondate as depositregistertransactiondate,
	tbldepositregister.checknumber as depositregisterchecknumber,
	tbldepositregister.amount as depositregisteramount,
	tbldepositregister.isfullypaid as depositregisterisfullypaid,
	tblregisterpaymentdeposit.amount as registerpaymentdepositamount,
	tblregisterpaymentdeposit.voided as registerpaymentdepositvoided,
	tblregisterpaymentdeposit.bounced as registerpaymentdepositbounced,
	tblfeeregister.accountid as feeregisteraccountid,
	tblfeeregister.clientid as feeregisterclientid
from
	tblregisterpayment inner join
	tblregister tblfeeregister on tblregisterpayment.feeregisterid = tblfeeregister.registerid inner join
	tblentrytype tblfeeentrytype on tblfeeregister.entrytypeid = tblfeeentrytype.entrytypeid inner join
	tblregisterpaymentdeposit on tblregisterpaymentdeposit.registerpaymentid = tblregisterpayment.registerpaymentid inner join
	tblregister tbldepositregister on tblregisterpaymentdeposit.depositregisterid = tbldepositregister.registerid inner join
	tblentrytype tbldepositentrytype on tbldepositregister.entrytypeid = tbldepositentrytype.entrytypeid
where
	tblregisterpayment.feeregisterid = @registerid
order by
	tblregisterpayment.paymentdate, tblregisterpayment.registerpaymentid


declare @clientid int
declare @accountid int
declare @entrytypeid int
declare @secregisterid int

set @clientid = -1
set @accountid = -1
set @entrytypeid = -1
set @secregisterid = -1

select top 1
	@clientid = feeregisterclientid,
	@accountid = feeregisteraccountid,
	@entrytypeid = feeregisterentrytypeid
from
	@payments
where
	feeregisterentrytypeid in (2, 42)

if not @clientid = -1
begin
	select top 1
		@secregisterid = registerid
	from
		tblregister
	where
		clientid = @clientid and
		accountid = @accountid and
		entrytypeid = (case @entrytypeid when 42 then 2 when 2 then 42 end)

	if not @secregisterid = -1
	begin
		insert into
			@payments
		select
			tblregisterpayment.registerpaymentid,
			tblregisterpayment.paymentdate,
			tblregisterpayment.feeregisterid,
			tblfeeregister.entrytypeid as feeregisterentrytypeid,
			tblfeeentrytype.name as feeregisterentrytypename,
			tblfeeregister.transactiondate as feeregistertransactiondate,
			tblfeeregister.checknumber as feeregisterchecknumber,
			tblfeeregister.amount as feeregisteramount,
			tblfeeregister.isfullypaid as feeregisterisfullypaid,
			tblregisterpayment.amount,
			tblregisterpayment.voided,
			tblregisterpayment.bounced,
			tblregisterpaymentdeposit.registerpaymentdepositid,
			tblregisterpaymentdeposit.depositregisterid,
			tbldepositregister.entrytypeid as depositregisterentrytypeid,
			tbldepositentrytype.name as depositregisterentrytypename,
			tbldepositregister.transactiondate as depositregistertransactiondate,
			tbldepositregister.checknumber as depositregisterchecknumber,
			tbldepositregister.amount as depositregisteramount,
			tbldepositregister.isfullypaid as depositregisterisfullypaid,
			tblregisterpaymentdeposit.amount as registerpaymentdepositamount,
			tblregisterpaymentdeposit.voided as registerpaymentdepositvoided,
			tblregisterpaymentdeposit.bounced as registerpaymentdepositbounced,
			tblfeeregister.accountid as feeregisteraccountid,
			tblfeeregister.clientid as feeregisterclientid
		from
			tblregisterpayment inner join
			tblregister tblfeeregister on tblregisterpayment.feeregisterid = tblfeeregister.registerid inner join
			tblentrytype tblfeeentrytype on tblfeeregister.entrytypeid = tblfeeentrytype.entrytypeid inner join
			tblregisterpaymentdeposit on tblregisterpaymentdeposit.registerpaymentid = tblregisterpayment.registerpaymentid inner join
			tblregister tbldepositregister on tblregisterpaymentdeposit.depositregisterid = tbldepositregister.registerid inner join
			tblentrytype tbldepositentrytype on tbldepositregister.entrytypeid = tbldepositentrytype.entrytypeid
		where
			tblregisterpayment.feeregisterid = @secregisterid
	end
end

select
	*
from
	@payments
GO
/****** Object:  StoredProcedure [dbo].[stp_InitialDraftsByMonth]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
exec stp_InitialDrafts 7 -- clients created in month
exec stp_InitialDraftsByMonth 7 -- should have more
*/

CREATE procedure [dbo].[stp_InitialDraftsByMonth]
(
	@month int
,	@year int = 2008
)
as

declare @firstdeposits table (registerid int)


-- Get first deposits
insert @firstdeposits
select min(r.registerid)
from tblregister r
join tblclient c on c.clientid = r.clientid
	and c.agencyid in (838,840,842,843)
where r.entrytypeid = 3
group by r.clientid


-- Return first deposits that where in the given month/year
select r.registerid
from tblregister r
join @firstdeposits f on f.registerid = r.registerid
where month(r.transactiondate) = @month and year(r.transactiondate) = @year
GO
/****** Object:  StoredProcedure [dbo].[stp_AgencyGetCommissionDataMonthsAvailable]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_AgencyGetCommissionDataMonthsAvailable]
(
	@agencyId int
)

AS

SET NOCOUNT ON

DECLARE @clientIds TABLE
(
	ClientId int
)

INSERT INTO
	@clientIds
SELECT
	ClientId
FROM
	tblClient
WHERE
	AgencyId=@agencyId

SELECT
	CAST(YearValue + '-' + MonthValue + '-01 00:00:00' AS datetime) AS DateValue
FROM
(
	SELECT DISTINCT
		CAST(YEAR(TransactionDate) AS varchar) AS YearValue,
		CAST(MONTH(TransactionDate) AS varchar) AS MonthValue
	FROM
		tblRegister
	WHERE
		ClientId IN (SELECT ClientId FROM @clientIds) 
		AND NOT TransactionDate IS NULL
) DERIVEDTBL
WHERE --there's a paid fee
	(SELECT COUNT(*) FROM tblRegister WHERE 
		ClientId IN (SELECT ClientId FROM @clientIds) 
		AND tblRegister.IsFullyPaid=1
		AND TransactionDate >= CAST(YearValue + '-' + MonthValue + '-10 00:00:00' AS datetime) 
		AND TransactionDate < DATEADD(MONTH, 1, CAST(YearValue + '-' + MonthValue + '-10 00:00:00' AS datetime))
	) > 0
ORDER BY
	DateValue DESC
GO
/****** Object:  StoredProcedure [dbo].[stp_DeleteClientxxx]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
create PROCEDURE [dbo].[stp_DeleteClientxxx]
(
	@clientId int
)

AS

SET NOCOUNT ON

--delete core info
delete from tblenrollment where clientid = @clientid
delete from tblphone where phoneid in (select personphoneid from tblpersonphone where personid in (select personid from tblperson where clientid = @clientid))
delete from tblpersonphone where personid in (select personid from tblperson where clientid = @clientid)
delete from tblphonecall where personid in (select personid from tblperson where clientid = @clientid)
delete from tblperson where clientid = @clientid
delete from tblagencyextrafields01 where clientid = @clientid
delete from tblclient where clientid=@clientid

--delete task stuff
select tbltask.taskid as taskid into #tmp from tbltask inner join tblclienttask on tbltask.taskid=tblclienttask.taskid where tblclienttask.clientid=@clientid
delete from tbltask where taskid in (select taskid from tblroadmaptask where taskid in (select taskid from #tmp))
delete from tblroadmaptask where taskid in (select taskid from #tmp)
delete from tblclienttask where taskid in(select taskid from #tmp)
delete from tblnote where noteid in (select noteid from tbltasknote where taskid in (select taskid from #tmp))
delete from tbltasknote where taskid in (select taskid from #tmp)
delete from tbltask where taskid in (select taskid from #tmp)
delete from tbltaskpropagationexception where clientid=@clientid
delete from tbltaskpropagationsaved where taskid in (select taskid from #tmp)
delete from tbltaskvalue where taskid in (select taskid from #tmp)
drop table #tmp

select tblregister.registerid into #tmp2 from tblregister where clientid=@clientid

--delete register stuff
delete from tblregister where clientid = @clientid
delete from tblregisterpayment where feeregisterid in (select registerid from #tmp2)
delete from tblregisterpaymentdeposit where depositregisterid in (select registerid from #tmp2)


--delete commission stuff
delete from tblCommChargeback WHERE CommPayID IN (select CommPayId from tblCommPay WHERE RegisterPaymentId IN (select registerid from #tmp2))
delete from tblCommPay WHERE RegisterPaymentId IN (select registerid from #tmp2)

drop table #tmp2

--delete account stuff
delete from tblcreditorinstance where accountid in (select accountid from tblaccount where clientid=@clientid)
delete from tblmediation where accountid in (select accountid from tblaccount where clientid=@clientid)
delete from tblaccount where clientid=@clientid


--misc
delete from tblclientanchangelog where clientid=@clientid
delete from tblnote where noteid in (select noteid from tblroadmapnote where roadmapid in (select roadmapid from tblroadmap where clientid=@clientid))
delete from tblroadmapnote where roadmapid in (select roadmapid from tblroadmap where clientid=@clientid)
delete from tblroadmap where clientid=@clientid
delete from tblnote where clientid=@clientid


delete from tblclientsearch where clientid=@clientid
delete from tblchecktoprint where clientid=@clientid

--clean up data entry stuff
delete from tbldoc where docid in (select docid from tbldataentrydoc where dataentryid in (select dataentryid from tbldataentry where clientid=@clientid))
delete from tbldataentrydoc where dataentryid in (select dataentryid from tbldataentry where clientid=@clientid)
delete from tbldataentryvalue where dataentryid in (select dataentryid from tbldataentry where clientid=@clientid)
delete from tbldataentry where clientid=@clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterDelete]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
 Author: Bereket S. Data>
 Description: Remove a given Criteria Filter
*/

CREATE PROCEDURE [dbo].[stp_NegotiationFilterDelete]
@FilterId int = null,
@UserId int = null
AS
SET NOCOUNT ON
DECLARE @FilterCount int

SELECT @FilterCount = Count(FilterId) FROM tblNegotiationFilters WHERE FilterId = @FilterId

if @FilterCount > 0
 BEGIN
	if not @FilterId is null
	 BEGIN

	   exec stp_NegotiationInitializeAssignment @FilterId, 'Deleted', @UserId
	   exec stp_NegotiationFilterAuditLog @FilterId, @UserId, 'Deleted'
	   DELETE tblNegotiationFilters  WHERE FilterId = @FilterId 	   
	   UPDATE tblNegotiationFilterXref SET Deleted = '1', Modified=getDate(), ModifiedBy=@UserID WHERE FilterId = @FilterId
	 END
	else
	 BEGIN   
	   DELETE tblNegotiationFilters  
	   DELETE tblNegotiationFilterDetail 
	   DELETE tblNegotiationFilterXref 
	 END
  END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterInsert]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
 Author: Bereket S. Data>
 Description: Adds New Negotiation Criteria Filters
*/

CREATE PROCEDURE [dbo].[stp_NegotiationFilterInsert]
@FilterId int = null,
@FilterDescription varchar(600),
@FilterClause varchar(Max),
@FilterType varchar(10),
@FilterText varchar(Max),
@ParentFilterId int = null,
@UserId int = null
AS

DECLARE @AggregateClause varchar(max)
DECLARE @ScopIdentity int
DECLARE @tblAggregateFilter TABLE (AggregateFilterClause varchar(max))


if @ParentFilterId = 0
  BEGIN
	SET @ParentFilterId = null    
  END


BEGIN
 INSERT INTO tblNegotiationFilters
 (
	Description,
	FilterClause,
	FilterType,
	FilterText,
    ParentFilterId,    
	CreatedBy,
	Created
 )
 VALUES
 (
	@FilterDescription,
	@FilterClause,
	@FilterType,
	@FilterText,
    @ParentFilterId,    
	@UserId,
	getDate() 
 )


SELECT @ScopIdentity = SCOPE_IDENTITY() FROM tblNegotiationFilters

exec stp_NegotiationFilterAggregateUpdate @ScopIdentity
exec stp_NegotiationFilterAuditLog @ScopIdentity, @UserId, 'Added'
exec stp_NegotiationInitializeAssignment @ScopIdentity, 'Added', @UserId

SELECT @ScopIdentity

END
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterUpdate]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Description: Update Negotiation Criteria Filters
*/

CREATE PROCEDURE [dbo].[stp_NegotiationFilterUpdate]
@FilterId int,
@FilterType varchar(10)= null,
@FilterDescription varchar(600)=null,
@FilterText varchar(max)=null,
@FilterClause varchar(max)=null,
@ParentFilterId int = null,
@UserId int = null

AS

UPDATE tblNegotiationFilters
SET
  Description = isnull(@FilterDescription,Description),
  filterClause = isnull(@filterClause,filterClause),  
  ModifiedBy = isnull(@UserId,ModifiedBy),
  FilterType = isnull(@FilterType,FilterType),
  FilterText = isnull(@FilterText,FilterText),
  modified = getDate() 
  WHERE FilterId = @FilterId

exec stp_NegotiationFilterAggregateUpdate @FilterId
exec stp_NegotiationFilterAuditLog @FilterId, @UserId, 'Updated'
exec stp_NegotiationInitializeAssignment @FilterId, 'Updated', @UserId


SELECT @FilterId
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_CreateUser]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_CreateUser]
    @ApplicationName                        nvarchar(256),
    @UserName                               nvarchar(256),
    @Password                               nvarchar(128),
    @PasswordSalt                           nvarchar(128),
    @Email                                  nvarchar(256),
    @PasswordQuestion                       nvarchar(256),
    @PasswordAnswer                         nvarchar(128),
    @IsApproved                             bit,
    @CurrentTimeUtc                         datetime,
    @CreateDate                             datetime = NULL,
    @UniqueEmail                            int      = 0,
    @PasswordFormat                         int      = 0,
    @UserId                                 uniqueidentifier OUTPUT
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @NewUserId uniqueidentifier
    SELECT @NewUserId = NULL

    DECLARE @IsLockedOut bit
    SET @IsLockedOut = 0

    DECLARE @LastLockoutDate  datetime
    SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAttemptCount int
    SET @FailedPasswordAttemptCount = 0

    DECLARE @FailedPasswordAttemptWindowStart  datetime
    SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAnswerAttemptCount int
    SET @FailedPasswordAnswerAttemptCount = 0

    DECLARE @FailedPasswordAnswerAttemptWindowStart  datetime
    SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @NewUserCreated bit
    DECLARE @ReturnValue   int
    SET @ReturnValue = 0

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    SET @CreateDate = @CurrentTimeUtc

    SELECT  @NewUserId = UserId FROM dbo.aspnet_Users WHERE LOWER(@UserName) = LoweredUserName AND @ApplicationId = ApplicationId
    IF ( @NewUserId IS NULL )
    BEGIN
        SET @NewUserId = @UserId
        EXEC @ReturnValue = dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CreateDate, @NewUserId OUTPUT
        SET @NewUserCreated = 1
    END
    ELSE
    BEGIN
        SET @NewUserCreated = 0
        IF( @NewUserId <> @UserId AND @UserId IS NOT NULL )
        BEGIN
            SET @ErrorCode = 6
            GOTO Cleanup
        END
    END

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @ReturnValue = -1 )
    BEGIN
        SET @ErrorCode = 10
        GOTO Cleanup
    END

    IF ( EXISTS ( SELECT UserId
                  FROM   dbo.aspnet_Membership
                  WHERE  @NewUserId = UserId ) )
    BEGIN
        SET @ErrorCode = 6
        GOTO Cleanup
    END

    SET @UserId = @NewUserId

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  dbo.aspnet_Membership m WITH ( UPDLOCK, HOLDLOCK )
                    WHERE ApplicationId = @ApplicationId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            SET @ErrorCode = 7
            GOTO Cleanup
        END
    END

    IF (@NewUserCreated = 0)
    BEGIN
        UPDATE dbo.aspnet_Users
        SET    LastActivityDate = @CreateDate
        WHERE  @UserId = UserId
        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    INSERT INTO dbo.aspnet_Membership
                ( ApplicationId,
                  UserId,
                  Password,
                  PasswordSalt,
                  Email,
                  LoweredEmail,
                  PasswordQuestion,
                  PasswordAnswer,
                  PasswordFormat,
                  IsApproved,
                  IsLockedOut,
                  CreateDate,
                  LastLoginDate,
                  LastPasswordChangedDate,
                  LastLockoutDate,
                  FailedPasswordAttemptCount,
                  FailedPasswordAttemptWindowStart,
                  FailedPasswordAnswerAttemptCount,
                  FailedPasswordAnswerAttemptWindowStart )
         VALUES ( @ApplicationId,
                  @UserId,
                  @Password,
                  @PasswordSalt,
                  @Email,
                  LOWER(@Email),
                  @PasswordQuestion,
                  @PasswordAnswer,
                  @PasswordFormat,
                  @IsApproved,
                  @IsLockedOut,
                  @CreateDate,
                  @CreateDate,
                  @CreateDate,
                  @LastLockoutDate,
                  @FailedPasswordAttemptCount,
                  @FailedPasswordAttemptWindowStart,
                  @FailedPasswordAnswerAttemptCount,
                  @FailedPasswordAnswerAttemptWindowStart )

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Profile_SetProperties]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Profile_SetProperties]
    @ApplicationName        nvarchar(256),
    @PropertyNames          ntext,
    @PropertyValuesString   ntext,
    @PropertyValuesBinary   image,
    @UserName               nvarchar(256),
    @IsUserAnonymous        bit,
    @CurrentTimeUtc         datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
       BEGIN TRANSACTION
       SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    DECLARE @UserId uniqueidentifier
    DECLARE @LastActivityDate datetime
    SELECT  @UserId = NULL
    SELECT  @LastActivityDate = @CurrentTimeUtc

    SELECT @UserId = UserId
    FROM   dbo.aspnet_Users
    WHERE  ApplicationId = @ApplicationId AND LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
        EXEC dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, @IsUserAnonymous, @LastActivityDate, @UserId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    UPDATE dbo.aspnet_Users
    SET    LastActivityDate=@CurrentTimeUtc
    WHERE  UserId = @UserId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS( SELECT *
               FROM   dbo.aspnet_Profile
               WHERE  UserId = @UserId))
        UPDATE dbo.aspnet_Profile
        SET    PropertyNames=@PropertyNames, PropertyValuesString = @PropertyValuesString,
               PropertyValuesBinary = @PropertyValuesBinary, LastUpdatedDate=@CurrentTimeUtc
        WHERE  UserId = @UserId
    ELSE
        INSERT INTO dbo.aspnet_Profile(UserId, PropertyNames, PropertyValuesString, PropertyValuesBinary, LastUpdatedDate)
             VALUES (@UserId, @PropertyNames, @PropertyValuesString, @PropertyValuesBinary, @CurrentTimeUtc)

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
    	SET @TranStarted = 0
    	COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Roles_CreateRole]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Roles_CreateRole]
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS(SELECT RoleId FROM dbo.aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId))
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    INSERT INTO dbo.aspnet_Roles
                (ApplicationId, RoleName, LoweredRoleName)
         VALUES (@ApplicationId, @RoleName, LOWER(@RoleName))

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[stp_InsertCommishValues]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 05/06/2008
-- Updated date: 05/15/2008
-- Description:	Insert values into tables for commission payouts
-- =============================================
CREATE PROCEDURE [dbo].[stp_InsertCommishValues] 
	@Percent INT = 0,
	@EntryTypeID INT = 0,
	@AgencyName VARCHAR(100) = NULL,
	@FromAgencyName VARCHAR(100) = NULL,
	@ToAgencyName VARCHAR(100) = NULL,
	@CompanyID INT
AS
BEGIN
	SET NOCOUNT ON;

----This is for testing only comment out for production----*
--	declare @EntryTypeID INT							 --*
--	set @EntryTypeID = 2
--	declare @AgencyName varchar(100)					 --*
--	set @AgencyName = 'Epic'               
--	declare @CompanyID int								 --*
--	set @CompanyID = 2									 	
--*******************************************************--*

	DECLARE @AgencyID INT
	DECLARE @Delimeter CHAR(1)
	DECLARE @DefaultScenario INT
	DECLARE @EntryType INT
	DECLARE @CommStruct INT
	DECLARE @DefaultStructures VARCHAR(MAX)
	DECLARE @DefaultFees VARCHAR(MAX)
	DECLARE @IsEntryTypeValid BIT
	DECLARE @IsCommRecValid BIT
	DECLARE @IsPayerValid BIT
	DECLARE @AllCommScens VARCHAR(MAX)
	DECLARE @AllCommStructs VARCHAR(MAX)
	DECLARE @AllEntryTypes VARCHAR(MAX)
	DECLARE @AllMissingFees VARCHAR(MAX)
	DECLARE @AllCommRecs VARCHAR(MAX)
	DECLARE @tblCommScens TABLE(CommScen VARCHAR(4))
	DECLARE @tblCommStructs TABLE(CommStruct VARCHAR(4))
	DECLARE @tblCommRecs TABLE(CommRec VARCHAR(4))
	DECLARE @tblDefaultStructures TABLE(CommStruct VARCHAR(4))
	DECLARE @tblDefaultFees TABLE(CommStruct VARCHAR(4), EntryType VARCHAR(4))
	DECLARE @tblEntryTypes TABLE(EntryTypeCommFee VARCHAR(4))
	DECLARE @tblMissingFees TABLE(MissingFee VARCHAR(4))
	DECLARE @tblCommsPaidTo TABLE
	(
		CommStruct INT, 
		PaidBy INT, 
		[From] VARCHAR(75), 
		PaidTo INT, 
		[To] VARCHAR(75),
		FeeType VARCHAR(100),
		EntryType INT,
		[Percent] Money,
		[PayOrder] INT
	)
	SET @Delimeter = ','
	
--Find the Agency ID
	SELECT @AgencyID = AgencyID
	FROM tblAgency 
	WHERE [name] like '%' + @AgencyName + '%'

--Does the Agency exist
	IF @AgencyID IS NULL
		BEGIN
			PRINT 'Agency does not exist.'
		END

--Find the Commission Scenario ID
	SELECT @AllCommScens = COALESCE(@AllCommScens + ',','') + CAST(CommScenID AS VARCHAR(4))
	FROM tblCommScen 
	WHERE AgencyID = @AgencyID

	INSERT INTO @tblCommScens(CommScen) SELECT DISTINCT(Item) FROM fnParseListToTable(@AllCommScens, @Delimeter)

--Find all CommStructIDs related to this CommScenID that currently exist.
	SELECT @AllCommStructs = COALESCE(@AllCommStructs + ',','') + CAST(CommStructID AS VARCHAR(4))
	FROM tblCommStruct
	WHERE CommScenID in (SELECT CAST(CommScen AS INT) FROM @tblCommScens) AND CompanyID = @CompanyID

	INSERT INTO @tblCommStructs(CommStruct) SELECT Item FROM fnParseListToTable(@AllCommStructs, @Delimeter)

--Find all Existing Fee EntryTypeIDs related to these CommStructIDs
	SELECT @AllEntryTypes = COALESCE(@AllEntryTypes +',','') + CAST(EntryTypeID AS VARCHAR(4))
	FROM tblCommFee
	WHERE CommStructID in (SELECT CAST(CommStruct AS INT) FROM @tblCommStructs)

	INSERT INTO @tblEntryTypes(EntryTypeCommFee) SELECT Item FROM fnParseListToTable(@AllEntryTypes, @Delimeter)
	
--Create a list of missing EntryTypes
	SELECT @AllMissingFees = COALESCE(@AllMissingFees +',','') + CAST(EntryTypeID AS VARCHAR(4)) 
	FROM tblEntryType et 
	WHERE et.Fee = 1 AND EntryTypeId NOT IN (SELECT EntryTypeCommFee FROM @tblEntryTypes)

	INSERT INTO @tblMissingFees(MissingFee) SELECT Item FROM fnParseListToTable(@AllMissingFees, @Delimeter)
	SELECT @IsEntryTypeValid = MissingFee FROM @tblMissingFees WHERE MissingFee = @EntryTypeID

--Create a list of CommRecs associated with this CommScen
	SELECT @AllCommRecs = COALESCE(@AllCommRecs +',','') + CAST(CommRecID AS VARCHAR(4)) 
	FROM tblCommStruct ct
	WHERE ct.CommStructID in (SELECT CommStruct FROM @tblCommStructs)

	INSERT INTO @tblCommRecs(CommRec) SELECT DISTINCT(Item) FROM fnParseListToTable(@AllCommRecs, @Delimeter)
	SET @AllCommRecs = NULL

--Create the parent commrecs with no corresponding commrecid in this table
	SELECT @AllCommRecs = COALESCE(@AllCommRecs +',','') + CAST(ParentCommRecID AS VARCHAR(4)) 
	FROM tblCommStruct ct
	WHERE ct.CommStructID IN (SELECT CommStruct FROM @tblCommStructs)

	INSERT INTO @tblCommRecs(CommRec) 
	SELECT ParentCommRecID 
	FROM tblCommStruct	
	WHERE ParentCommRecID NOT IN (SELECT CommRec FROM @tblCommRecs)
	AND CommStructID IN (SELECT CommStruct FROM @tblCommStructs)

--Create the current Fee Scenarios
	--Find all CommStructs, Pay order, CommRecs and Percents From and To the Commission Recipients
		INSERT INTO @tblCommsPaidTo(CommStruct, PaidBy, [From], PaidTo, [To], FeeType, EntryType, [Percent], PayOrder) 
		SELECT ct.Commstructid, ct.ParentCommRecID, cr1.Display, ct.CommRecID, cr2.Display, et.DisplayName, et.EntryTypeId, cf.[Percent], ct.[order] 
		FROM tblcommStruct ct
		INNER JOIN tblcommRec cr1 ON ct.ParentCommRecID = cr1.CommRecID
		INNER JOIN tblCommRec cr2 ON ct.commrecid = cr2.commrecid
		INNER JOIN tblCommFee cf ON cf.CommStructID = ct.CommStructID
		INNER JOIN tblEntryType et ON et.EntryTypeId = cf.EntryTypeID
		WHERE ct.CommStructID IN (SELECT commstruct FROM @tblcommstructs)
		ORDER BY cr1.IsTrust DESC, et.EntryTypeId, ct.[Order] DESC

--Get Default information
	--Scenario
	SET @DefaultScenario = 10
	
	--Structures
	SELECT @DefaultStructures = COALESCE(@DefaultStructures +',','') + CAST(CommStructID AS VARCHAR(4)) 
	FROM tblCommStruct ct
	WHERE ct.CommScenID = @DefaultScenario

	INSERT INTO @tblDefaultStructures(CommStruct) SELECT DISTINCT(Item) FROM fnParseListToTable(@DefaultStructures, @Delimeter)

	--CommFee Entrie Types
	SELECT @DefaultFees = COALESCE(@DefaultFees +',','') + CAST(EntryTypeID AS VARCHAR(4)) 
	FROM tblCommFee cf
	WHERE cf.CommStructID in (SELECT DISTINCT(CommStruct) FROM @tblDefaultStructures)

	INSERT INTO @tblDefaultFees(EntryType) SELECT DISTINCT(Item) FROM fnParseListToTable(@DefaultFees, @Delimeter)

	--Loop through the fees and scenarios to make sure they are all in the table if any are missing insert them
	--DECLARE c_DefaultStructures CURSOR LOCAL FAST_FORWARD FOR
	--SELECT CommStruct FROM @tblDefaultStructures
	--OPEN c_DefaultStructures
	--FETCH NEXT FROM c_DefaultStructures INTO @CommStruct
	--WHILE @@FETCH_STATUS = 0
	--BEGIN
			DECLARE c_DefaultFees CURSOR LOCAL FAST_FORWARD FOR
			SELECT EntryType FROM @tblDefaultFees
			OPEN c_DefaultFees
				FETCH NEXT FROM c_DefaultFees INTO @EntryType
				WHILE @@FETCH_STATUS = 0
				BEGIN
					--Does this Entry type exist for these CommStructs
					SELECT @IsEntryTypeValid = EntryTypeID 
					FROM tblCommFee 
					WHERE EntryTypeID = @EntryType AND (CommStructID = 117 OR CommStructID = 118)
					--If nothing came back we need to put the entry type in the database
					IF @IsEntryTypeValid IS NULL
						BEGIN
							IF @EntryType < 20
								BEGIN
									EXEC stp_InsertDefaultFees @EntryType, 118
								END
							IF @EntryType > 19
								BEGIN
									EXEC stp_InsertDefaultFees @EntryType, 117
								END
						END
					SET @IsEntryTypeValid = NULL
				FETCH NEXT FROM c_DefaultFees INTO @EntryType
				END
			CLOSE c_DefaultFees
			DEALLOCATE c_DefaultFees
	--FETCH NEXT FROM c_DefaultStructures INTO @CommStruct
	--END
	--CLOSE c_DefaultStructures
	--DEALLOCATE c_DefaultStructures

--Change scenario 180 to reflect a ParentCommRec from 22 to 20
	UPDATE tblCommStruct SET ParentCommRecID = 20 WHERE CommStructID = 180

--Who are the commission recipients for this scenario
	SELECT @IsCommRecValid = PaidTo FROM @tblCommsPaidTo WHERE [To] NOT IN (SELECT CommRec FROM @tblCommRecs) 

	IF @IsCommRecValid IS NOT NULL
		BEGIN
			Print 'Commission recipient is already part of the scenario.'
		END

	--Make sure this fee type is valid and not already in the scenario
	SELECT @IsEntryTypeValid = EntryTypeCommFee FROM @tblEntryTypes WHERE EntryTypeCommFee = @EntryTypeID
	IF @IsEntryTypeValid IS NOT NULL
		BEGIN
			Print 'Entry type is already part of the scenario.'
		END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_PayCommissionTEST]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- stp_PayCommissionTEST 73603
-- stp_PayCommissionTEST 72884
--select cs.commscenid, cs.parentcommrecid, cs.commrecid, f.*
--from tblcommfee f
--join tblcommstruct cs on cs.commstructid = f.commstructid
--	and cs.companyid = 3
--	and cs.commscenid = 26
--	and f.entrytypeid = 2

CREATE procedure [dbo].[stp_PayCommissionTEST]
(
	@clientid int
)
as

declare @clientenrolled datetime
declare @agencyid int
declare @commscenid int

declare @percenttotal money
declare @amounttotal money
declare @amountpaid money
declare @amountleft money
declare @lastcommpayid int

declare @defaultcommscenid int
declare @defaultcommstructid int
declare @entrytypeid int
declare @percentleft money
declare @parentcommrecid int
declare @CompanyID int


-- get created date for client
select
	@clientenrolled = created,
	@CompanyID = CompanyID,
	@agencyid = agencyid
from
	tblclient
where
	clientid = @clientid


-- assuming a client was found...
if not @clientid is null
	begin

		-- assuming an agency was found for this client...
		if not @agencyid is null
			begin

				-- (2) get commission scenario
				select
					@commscenid = commscenid
				from
					tblcommscen
				where
					agencyid = @agencyid and
					startdate <= @clientenrolled and
					(
						enddate is null or
						enddate >= cast(convert(char(10), @clientenrolled, 101) as datetime)
					)

				-- get default commission scenario if there is no commscen found for this client
				if @commscenid is null
					begin
						select
							@commscenid = commscenid
						from
							tblcommscen
						where
							[default] = 1
							
						-- Log
						print 'using default scenario!'
					end

				print 'commscenid: ' + cast(@commscenid as varchar(10))

				-- assuming a commission scenario (or default commscen) was found for this client....
				if not @commscenid is null
					begin
						set @parentcommrecid = null
						
						select @parentcommrecid = r.commrecid
						from tblclient c 
						inner join tblcommrec r on r.companyid = c.companyid
						where c.clientid = @clientid and r.istrust = 1 and not c.companyid is null

						print 'parentcommrecid: ' + cast(@parentcommrecid  as varchar(10))

						-- (3) recursively loop recipients in the structure for this
						--     commission scenario and write out payments
						exec stp_PayCommissionRecTEST @commscenid, @parentcommrecid, @CompanyID

					end -- comm scen exists
			end -- agency exists
	end -- client exists
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationPerUser_ResetPageSettings]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationPerUser_ResetPageSettings] (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        RETURN
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    DELETE FROM dbo.aspnet_PersonalizationPerUser WHERE PathId = @PathId AND UserId = @UserId
    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationPerUser_GetPageSettings]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationPerUser_GetPageSettings] (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        RETURN
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    SELECT p.PageSettings FROM dbo.aspnet_PersonalizationPerUser p WHERE p.PathId = @PathId AND p.UserId = @UserId
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAdministration_GetCountOfState]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAdministration_GetCountOfState] (
    @Count int OUT,
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @Path NVARCHAR(256) = NULL,
    @UserName NVARCHAR(256) = NULL,
    @InactiveSinceDate DATETIME = NULL)
AS
BEGIN

    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
        IF (@AllUsersScope = 1)
            SELECT @Count = COUNT(*)
            FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
            WHERE Paths.ApplicationId = @ApplicationId
                  AND AllUsers.PathId = Paths.PathId
                  AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
        ELSE
            SELECT @Count = COUNT(*)
            FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
            WHERE Paths.ApplicationId = @ApplicationId
                  AND PerUser.UserId = Users.UserId
                  AND PerUser.PathId = Paths.PathId
                  AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
                  AND (@UserName IS NULL OR Users.LoweredUserName LIKE LOWER(@UserName))
                  AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAdministration_ResetUserState]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAdministration_ResetUserState] (
    @Count                  int                 OUT,
    @ApplicationName        NVARCHAR(256),
    @InactiveSinceDate      DATETIME            = NULL,
    @UserName               NVARCHAR(256)       = NULL,
    @Path                   NVARCHAR(256)       = NULL)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationPerUser
        WHERE Id IN (SELECT PerUser.Id
                     FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
                     WHERE Paths.ApplicationId = @ApplicationId
                           AND PerUser.UserId = Users.UserId
                           AND PerUser.PathId = Paths.PathId
                           AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
                           AND (@UserName IS NULL OR Users.LoweredUserName = LOWER(@UserName))
                           AND (@Path IS NULL OR Paths.LoweredPath = LOWER(@Path)))

        SELECT @Count = @@ROWCOUNT
    END
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings] (
    @ApplicationName  NVARCHAR(256),
    @Path              NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    DELETE FROM dbo.aspnet_PersonalizationAllUsers WHERE PathId = @PathId
    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAdministration_FindState]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAdministration_FindState] (
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @PageIndex              INT,
    @PageSize               INT,
    @Path NVARCHAR(256) = NULL,
    @UserName NVARCHAR(256) = NULL,
    @InactiveSinceDate DATETIME = NULL)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        RETURN

    -- Set the page bounds
    DECLARE @PageLowerBound INT
    DECLARE @PageUpperBound INT
    DECLARE @TotalRecords   INT
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table to store the selected results
    CREATE TABLE #PageIndex (
        IndexId int IDENTITY (0, 1) NOT NULL,
        ItemId UNIQUEIDENTIFIER
    )

    IF (@AllUsersScope = 1)
    BEGIN
        -- Insert into our temp table
        INSERT INTO #PageIndex (ItemId)
        SELECT Paths.PathId
        FROM dbo.aspnet_Paths Paths,
             ((SELECT Paths.PathId
               FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
               WHERE Paths.ApplicationId = @ApplicationId
                      AND AllUsers.PathId = Paths.PathId
                      AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              ) AS SharedDataPerPath
              FULL OUTER JOIN
              (SELECT DISTINCT Paths.PathId
               FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Paths Paths
               WHERE Paths.ApplicationId = @ApplicationId
                      AND PerUser.PathId = Paths.PathId
                      AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              ) AS UserDataPerPath
              ON SharedDataPerPath.PathId = UserDataPerPath.PathId
             )
        WHERE Paths.PathId = SharedDataPerPath.PathId OR Paths.PathId = UserDataPerPath.PathId
        ORDER BY Paths.Path ASC

        SELECT @TotalRecords = @@ROWCOUNT

        SELECT Paths.Path,
               SharedDataPerPath.LastUpdatedDate,
               SharedDataPerPath.SharedDataLength,
               UserDataPerPath.UserDataLength,
               UserDataPerPath.UserCount
        FROM dbo.aspnet_Paths Paths,
             ((SELECT PageIndex.ItemId AS PathId,
                      AllUsers.LastUpdatedDate AS LastUpdatedDate,
                      DATALENGTH(AllUsers.PageSettings) AS SharedDataLength
               FROM dbo.aspnet_PersonalizationAllUsers AllUsers, #PageIndex PageIndex
               WHERE AllUsers.PathId = PageIndex.ItemId
                     AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
              ) AS SharedDataPerPath
              FULL OUTER JOIN
              (SELECT PageIndex.ItemId AS PathId,
                      SUM(DATALENGTH(PerUser.PageSettings)) AS UserDataLength,
                      COUNT(*) AS UserCount
               FROM aspnet_PersonalizationPerUser PerUser, #PageIndex PageIndex
               WHERE PerUser.PathId = PageIndex.ItemId
                     AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
               GROUP BY PageIndex.ItemId
              ) AS UserDataPerPath
              ON SharedDataPerPath.PathId = UserDataPerPath.PathId
             )
        WHERE Paths.PathId = SharedDataPerPath.PathId OR Paths.PathId = UserDataPerPath.PathId
        ORDER BY Paths.Path ASC
    END
    ELSE
    BEGIN
        -- Insert into our temp table
        INSERT INTO #PageIndex (ItemId)
        SELECT PerUser.Id
        FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
        WHERE Paths.ApplicationId = @ApplicationId
              AND PerUser.UserId = Users.UserId
              AND PerUser.PathId = Paths.PathId
              AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              AND (@UserName IS NULL OR Users.LoweredUserName LIKE LOWER(@UserName))
              AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
        ORDER BY Paths.Path ASC, Users.UserName ASC

        SELECT @TotalRecords = @@ROWCOUNT

        SELECT Paths.Path, PerUser.LastUpdatedDate, DATALENGTH(PerUser.PageSettings), Users.UserName, Users.LastActivityDate
        FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths, #PageIndex PageIndex
        WHERE PerUser.Id = PageIndex.ItemId
              AND PerUser.UserId = Users.UserId
              AND PerUser.PathId = Paths.PathId
              AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
        ORDER BY Paths.Path ASC, Users.UserName ASC
    END

    RETURN @TotalRecords
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAdministration_ResetSharedState]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAdministration_ResetSharedState] (
    @Count int OUT,
    @ApplicationName NVARCHAR(256),
    @Path NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationAllUsers
        WHERE PathId IN
            (SELECT AllUsers.PathId
             FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
             WHERE Paths.ApplicationId = @ApplicationId
                   AND AllUsers.PathId = Paths.PathId
                   AND Paths.LoweredPath = LOWER(@Path))

        SELECT @Count = @@ROWCOUNT
    END
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAdministration_DeleteAllState]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAdministration_DeleteAllState] (
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @Count int OUT)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        IF (@AllUsersScope = 1)
            DELETE FROM aspnet_PersonalizationAllUsers
            WHERE PathId IN
               (SELECT Paths.PathId
                FROM dbo.aspnet_Paths Paths
                WHERE Paths.ApplicationId = @ApplicationId)
        ELSE
            DELETE FROM aspnet_PersonalizationPerUser
            WHERE PathId IN
               (SELECT Paths.PathId
                FROM dbo.aspnet_Paths Paths
                WHERE Paths.ApplicationId = @ApplicationId)

        SELECT @Count = @@ROWCOUNT
    END
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAllUsers_GetPageSettings]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAllUsers_GetPageSettings] (
    @ApplicationName  NVARCHAR(256),
    @Path              NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT p.PageSettings FROM dbo.aspnet_PersonalizationAllUsers p WHERE p.PathId = @PathId
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SingleStatementBuilder]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- CREATE date: 03/16/2007
-- Modified date: 08/14/2007 11/17/2008 handle multiple attorneys
-- Modified date: 09/30/2008 Changed Creditor balance from original balance to current balance. J Hope
-- Modified date: 02/26/2009 Skipping 30 and 31st payments for February, fixed. J Hope
-- Modified date: 06/22/2009 Changed Creditor balance from tblCreditorInstance to use tblAccount (Change already in proc see above).
-- Modified date: 08/07/2009 Added check in client selection to verify that Verification had been completed prior to printing statement.
-- Modified date: 09/16/2009 Added the ability to create a set of temp tables for a single account statement creation.
--Modified date: 10/27/2009 Ignore depositdays

-- Description:	Stored Proc to generate tables FOR client statements
-- =============================================
CREATE PROCEDURE [dbo].[stp_SingleStatementBuilder] 
	@date1 SMALLDATETIME = NULL, 
	@days INT = 15,
	@CompanyID INT = -1,
	@AccountNumber INT = -1
AS
	BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	-- IF running AS a script use this, otherwise 
	-- use @date1 AS the parameter that needs to be passed.
--	DECLARE @date1 SMALLDATETIME
--	DECLARE @days INT
--	DECLARE @CompanyID INT
--	DECLARE @AccountNumber INT
--	
--	SET @date1 = '11/15/2008'
--	SET @days = 15
--	SET @CompanyID = -1
--	SET @AccountNumber = -1

     -- These are variables FOR the process
	DECLARE @date2 SMALLDATETIME
	DECLARE @day1 INT
	DECLARE @day2 INT
	DECLARE @EOM INT
	DECLARE @RealDays INT
	DECLARE @AcctNo NVARCHAR(255)
	DECLARE @Name NVARCHAR(255)
	DECLARE @OrigAcctNo NVARCHAR(255)
	DECLARE @Status NVARCHAR(255)
	DECLARE @Balance MONEY
	DECLARE @Amount MONEY
	DECLARE @FROM SMALLDATETIME
	DECLARE @To SMALLDATETIME
	DECLARE @SDABalance MONEY
	DECLARE @PFOBalance MONEY
	DECLARE @cid INT
	DECLARE @cslocation2 NVARCHAR(255)
	DECLARE @PmtDate1 SMALLDATETIME
	DECLARE @PmtDate2 SMALLDATETIME
	DECLARE @DepositDate NVARCHAR(50)
	DECLARE @DateDiff INT

		IF @date1 IS NULL
		BEGIN
			SET @date1 = GETDATE()
			SET @DateDiff = DATEPART(DAY, @date1)
			IF DATEPART(DAY, @date1) <= 15
				BEGIN
					SET @date1 = DATEADD(DAY, -(@DateDiff - 1), @date1)
				END
			IF DATEPART(DAY, @date1) >= 16
				BEGIN
					SET @DateDiff = @DateDiff - 15
					SET @date1 = DATEADD(DAY, - @DateDiff, @date1)
				END
		END

-- Statements FOR procedure follow
	SET @day1 = DATEPART(DAY,@date1)
	SET @day2 = DATEPART(DAY,@date2)

	-- Determine the To AND FROM dates
	SET @EOM = DAY(DATEADD(DAY,-1,DATEADD(MONTH,1,DATEADD(DAY,1-DAY(@date1),@date1))))
	IF DATEPART(DAY, @date1) >= 15
		BEGIN
			SET @RealDays = @EOM - DATEPART(DAY, @date1)
		END
	ELSE
		BEGIN
			SET @RealDays = @days - 1
		END

	SET @date2 = DATEADD(DAY, @realdays, @date1)
	
	-- Determine the To AND FROM dates
	-- Start with Feb
IF DATEPART(DAY, @date1) >= 15
		BEGIN
			SET @RealDays = @EOM - DATEPART(DAY, @date1)
		END
	ELSE
		BEGIN
			SET @RealDays = @days - 1
		END

	SET @date2 = DATEADD(DAY, @realdays, @date1)
	
	-- Calculate date 2 FROM the count of days
	IF DATEPART(DAY, @date1) = 1
		BEGIN
		SET @day1 = 16
		SET @day2 = 31 --@eom
		END
	ELSE
		BEGIN
		SET @day1 = 1
		SET @day2 = 15
		END
		
	IF @day1 = 1 AND @eom = 31
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, 2 + (@eom - @realdays), @date1)
			SET @PmtDate2 = DATEADD(DAY, @EOM, @date1)
		END
	IF @day1 = 16 AND @eom = 31
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, 15, @date1)
			SET @PmtDate2 = DATEADD(DAY, 15, @PmtDate1)
		END

	IF @day1 = 1 AND @eom = 30
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, 1 + (@eom - @realdays), @date1)
			SET @PmtDate2 = DATEADD(DAY, @EOM, @date1)
		END
	IF @day1 = 16 AND @eom = 30
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, 15, @date1)
			SET @PmtDate2 = DATEADD(DAY, 14, @PmtDate1)
		END

	IF @day1 = 1 AND @eom = 28
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, (@eom - @realdays)-1, @date1)
			SET @PmtDate2 = DATEADD(DAY, @EOM, @date1)
		END
	IF @day1 = 16 AND @eom = 28
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, 15, @date1)
			SET @PmtDate2 = DATEADD(DAY, 12, @PmtDate1)
		END

	IF @day1 = 1 AND @eom = 29
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, (@eom - @realdays), @date1)
			SET @PmtDate2 = DATEADD(DAY, @EOM, @date1)
		END
	IF @day1 = 16 AND @eom = 29
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, 15, @date1)
			SET @PmtDate2 = DATEADD(DAY, 13, @PmtDate1)
		END

IF DATEPART(MONTH, @date1) = 2
	BEGIN
		IF DATENAME(DAY, @date2) = 28
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date2)
				SET @FROM = DATEADD(DAY, - @realdays + 1, @FROM)
				SET @To = DATEADD(DAY,0, @date1)
			END
		ELSE
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date1)
				SET @To = DATEADD(DAY,-1,@date1)
			END
	END

IF DATEPART(MONTH, @date1) = 2
	BEGIN
		IF DATENAME(DAY, @date2) = 29
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date2)
				SET @FROM = DATEADD(DAY, - @realdays + 1, @FROM)
				SET @To = DATEADD(DAY,0, @date1)
			END
		ELSE
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date1)
				SET @To = DATEADD(DAY,-1,@date1)
			END
	END

IF DATEPART(MONTH, @date1) IN (1,3,5,7,8,10,12)
	BEGIN
		IF DATENAME(DAY, @date2) = 31
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date1)
				SET @FROM = DATEADD(DAY, 1, @FROM)
				SET @To = DATEADD(DAY,0, @date1)
			END
		ELSE
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date1)
				SET @To = DATEADD(DAY,-1,@date1)
			END
	END

IF DATEPART(MONTH, @date1) IN (4,6,9,11)
	BEGIN
		IF DATENAME(DAY, @date2) = 30
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date1)
				SET @FROM = DATEADD(DAY, 1, @FROM)
				SET @To = @date1
			END
		ELSE
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date1)
				SET @To = DATEADD(DAY,-1,@date1)
			END
	END
	
--Lets clean up the tblSingleStatementResults before running

truncate TABLE tblSingleStatementResults

IF EXISTS 
	(SELECT * FROM INFORMATION_SCHEMA.tables WHERE table_name = 'tblSingleStatementPersonal')
	BEGIN
		DROP TABLE tblSingleStatementPersonal
	END

-- OK get the clients to process based ON companyid, accountno or all

-- First is there a company id to process FOR? IF so the account number should be -1

IF @CompanyID > -1 AND @AccountNumber <= -1
	BEGIN
		SELECT  c.clientid,
			c.accountnumber,
			c.companyid AS [BaseCompany],
			p.firstname + ' ' + p.lastname AS [Name],
			p.street + ' ' + ISNULL(p.street2,'') AS [Street],
			p.city AS [City],
			s.abbreviation AS [ST],
			LEFT(p.zipcode,5) AS [Zip],
			CONVERT(VARCHAR, @FROM, 101) + ' To ' + CONVERT(VARCHAR, @To, 101) AS [period],
			case DATEPART(DAY, @date1) WHEN 15 THEN DATENAME(MONTH,DATEADD(MONTH, 1, @date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,DATEPART(YEAR, @date1)) ELSE DATENAME(MONTH,DATEADD(MONTH, 0, @date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,DATEPART(YEAR, @date1)) END AS  [DepDate],
			c.depositamount AS [DepAmt],
		-ISNULL((
				SELECT 
					SUM(amount) 
				FROM 
					tblRegister INNER JOIN
					tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
				WHERE 
					tblRegister.Clientid=c.ClientId AND
					tblEntryType.Fee=1)
			,0)
			-
			ISNULL((
				SELECT 
					SUM(tblregisterpayment.amount) 
				FROM 
					tblRegisterPayment INNER JOIN
					tblRegister ON tblRegisterPayment.FeeRegisterId=tblRegister.RegisterId		
				WHERE 
					tblRegister.Clientid=c.ClientId)
			,0) AS PFOBalance,
			CASE c.depositmethod WHEN 'ACH' THEN 'Y' ELSE 'N' END [ACH],
			CASE c.NoChecks WHEN 1 THEN 'Y' ELSE 'N' END [NoChecks],
			CASE c.CompanyID WHEN 1 THEN co.Name WHEN 2 THEN co.NAME ELSE p.firstname + ' ' + p.lastname + ', Acct.# ' + c.AccountNumber END [Payee],
			ca.address1 AS [cslocation1],
			(ca.city + ', ' + ca.state + ' ' + ca.zipcode) AS [cslocation2],
			cp.PhoneNumber  AS [desc1],
			co.BillingMessage AS [desc2],
			' ' AS [desc3]

INTO tblSingleStatementPersonal

		 FROM tblClient c INNER JOIN
			tblPerson p ON c.primarypersonid = p.personid LEFT JOIN
			tblState s ON p.stateid = s.stateid INNER JOIN
			tblCompany co ON co.companyid = c.companyid INNER JOIN 
			tblCompanyAddresses ca ON c.companyid = ca.companyid INNER JOIN
			tblcompanyphones cp ON c.companyid = cp.companyid
		WHERE
			c.VWUWResolved IS NOT NULL 
			AND not c.accountnumber IS NULL
			AND not c.accountnumber = ''
			AND ca.addresstypeid = 3
			AND cp.phonetype = 46
			AND co.CompanyID = @CompanyID
	END

-- IF neither the account number
IF @CompanyID <= -1 AND @AccountNumber <= -1
	BEGIN
		SELECT  c.clientid,
			c.accountnumber,
			c.companyid AS [BaseCompany],
			p.firstname + ' ' + p.lastname AS [Name],
			p.street + ' ' + ISNULL(p.street2,'') AS [Street],
			p.city AS [City],
			s.abbreviation AS [ST],
			LEFT(p.zipcode,5) AS [Zip],
			CONVERT(VARCHAR, @FROM, 101) + ' To ' + CONVERT(VARCHAR, @To, 101) AS [period],
			case DATEPART(DAY, @date1) WHEN 15 THEN DATENAME(MONTH,DATEADD(MONTH, 1, @date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,DATEPART(YEAR, @date1)) ELSE DATENAME(MONTH,DATEADD(MONTH, 0, @date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,DATEPART(YEAR, @date1)) END AS  [DepDate],
			c.depositamount AS [DepAmt],
		-ISNULL((
				SELECT 
					SUM(amount) 
				FROM 
					tblRegister INNER JOIN
					tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
				WHERE 
					tblRegister.Clientid=c.ClientId AND
					tblEntryType.Fee=1)
			,0)
			-
			ISNULL((
				SELECT 
					SUM(tblregisterpayment.amount) 
				FROM 
					tblRegisterPayment INNER JOIN
					tblRegister ON tblRegisterPayment.FeeRegisterId=tblRegister.RegisterId		
				WHERE 
					tblRegister.Clientid=c.ClientId)
			,0) AS PFOBalance,
			CASE c.depositmethod WHEN 'ACH' THEN 'Y' ELSE 'N' END [ACH],
			CASE c.NoChecks WHEN 1 THEN 'Y' ELSE 'N' END [NoChecks],
			CASE c.CompanyID WHEN 1 THEN co.Name WHEN 2 THEN co.NAME ELSE p.firstname + ' ' + p.lastname + ', Acct.# ' + c.AccountNumber END [Payee],
			ca.address1 AS [cslocation1],
			(ca.city + ', ' + ca.state + ' ' + ca.zipcode) AS [cslocation2],
			cp.PhoneNumber  AS [desc1],
			co.BillingMessage AS [desc2],
			' ' AS [desc3]

INTO tblSingleStatementPersonal

		 FROM tblClient c INNER JOIN
			tblPerson p ON c.primarypersonid = p.personid LEFT JOIN
			tblState s ON p.stateid = s.stateid INNER JOIN
			tblCompany co ON co.companyid = c.companyid INNER JOIN 
			tblCompanyAddresses ca ON c.companyid = ca.companyid INNER JOIN
			tblcompanyphones cp ON c.companyid = cp.companyid
		WHERE
			c.VWUWResolved IS NOT NULL 
			AND not c.accountnumber IS NULL
			AND not c.accountnumber = ''
			AND ca.addresstypeid = 3
			AND cp.phonetype = 46
	END

IF @AccountNumber > -1 AND @CompanyID <= -1
	BEGIN
		SELECT  c.clientid,
			c.accountnumber,
			c.companyid AS [BaseCompany],
			p.firstname + ' ' + p.lastname AS [Name],
			p.street + ' ' + ISNULL(p.street2,'') AS [Street],
			p.city AS [City],
			s.abbreviation AS [ST],
			LEFT(p.zipcode,5) AS [Zip],
			CONVERT(VARCHAR, @FROM, 101) + ' To ' + CONVERT(VARCHAR, @To, 101) AS [period],
			case DATEPART(DAY, @date1) WHEN 15 THEN DATENAME(MONTH,DATEADD(MONTH, 1, @date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,DATEPART(YEAR, @date1)) ELSE DATENAME(MONTH,DATEADD(MONTH, 0, @date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,DATEPART(YEAR, @date1)) END AS  [DepDate],
			c.depositamount AS [DepAmt],
		-ISNULL((
				SELECT 
					SUM(amount) 
				FROM 
					tblRegister INNER JOIN
					tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
				WHERE 
					tblRegister.Clientid=c.ClientId AND
					tblEntryType.Fee=1)
			,0)
			-
			ISNULL((
				SELECT 
					SUM(tblregisterpayment.amount) 
				FROM 
					tblRegisterPayment INNER JOIN
					tblRegister ON tblRegisterPayment.FeeRegisterId=tblRegister.RegisterId		
				WHERE 
					tblRegister.Clientid=c.ClientId)
			,0) AS PFOBalance,
			CASE c.depositmethod WHEN 'ACH' THEN 'Y' ELSE 'N' END [ACH],
			CASE c.NoChecks WHEN 1 THEN 'Y' ELSE 'N' END [NoChecks],
			CASE c.CompanyID WHEN 1 THEN co.Name WHEN 2 THEN co.NAME ELSE p.firstname + ' ' + p.lastname + ', Acct.# ' + c.AccountNumber END [Payee],
			ca.address1 AS [cslocation1],
			(ca.city + ', ' + ca.state + ' ' + ca.zipcode) AS [cslocation2],
			cp.PhoneNumber  AS [desc1],
			co.BillingMessage AS [desc2],
			' ' AS [desc3]

INTO tblSingleStatementPersonal

		 FROM tblClient c INNER JOIN
			tblPerson p ON c.primarypersonid = p.personid LEFT JOIN
			tblState s ON p.stateid = s.stateid INNER JOIN
			tblCompany co ON co.companyid = c.companyid INNER JOIN 
			tblCompanyAddresses ca ON c.companyid = ca.companyid INNER JOIN
			tblcompanyphones cp ON c.companyid = cp.companyid
		WHERE
			c.VWUWResolved IS NOT NULL 
			AND not c.accountnumber IS NULL
			AND not c.accountnumber = ''
			AND ca.addresstypeid = 3
			AND cp.phonetype = 46
			AND c.AccountNumber = @AccountNumber
	END

--TABLE Creditor
--Modified 06/22/2009 J Hope to use data from tblAccount for balances not tblSingleCreditorInstance
IF EXISTS 
	(SELECT * FROM INFORMATION_SCHEMA.tables WHERE table_name = 'tblSingleStatementCreditor')
	BEGIN
		DROP TABLE tblSingleStatementCreditor
	END
	
	CREATE TABLE tblSingleStatementCreditor
		(
			Acct_No NVARCHAR(255),
			Cred_Name NVARCHAR(255),
			Orig_Acct_No NVARCHAR(255),
			Status NVARCHAR(255),
			Balance MONEY
		)

DECLARE cursor_Creditor CURSOR FOR

SELECT 
	c.accountnumber [ClntAcctNo],
	cr.name [Cred. Name],
	ciOrig.accountnumber [Acct #],
	ISNULL(s.code, '') [Status],
	a.CurrentAmount [Balance]
FROM 
	tblAccount a
	INNER JOIN tblClient c ON a.clientid = c.clientid
	INNER JOIN tblCreditorInstance ciOrig ON ciOrig.CreditorInstanceID=
		(SELECT 
			TOP 1 CreditorInstanceId 
		FROM 
			tblCreditorInstance 
		WHERE 
			AccountID=a.AccountID 
		ORDER BY 
			Acquired ASC)
	INNER JOIN tblCreditor cr ON ciOrig.creditorid = cr.creditorid
	LEFT OUTER JOIN tblAccountStatus s ON a.accountStatusID = s.accountstatusid
WHERE
	c.clientid IN (SELECT clientid FROM tblSingleStatementPersonal)

OPEN cursor_Creditor

FETCH NEXT FROM cursor_Creditor INTO @AcctNo, @Name, @OrigAcctNo, @Status, @Balance

	WHILE @@FETCH_STATUS = 0
	BEGIN
		INSERT INTO tblSingleStatementCreditor
		(
			Acct_No,
			Cred_Name,
			Orig_Acct_No,
			Status,
			Balance
		)
		VALUES
		(
			@AcctNo,
			@Name,
			@OrigAcctNo,
			@Status,
			@Balance
		)
		FETCH NEXT FROM cursor_Creditor INTO @AcctNo, @Name, @OrigAcctNo, @Status, @Balance
	END

--CLOSE up this CURSOR
CLOSE cursor_Creditor
DEALLOCATE cursor_Creditor

--Results TABLE FOR the statements

DECLARE cursor_statementRes CURSOR FOR
SELECT ClientID
FROM tblSingleStatementPersonal

OPEN cursor_statementRes

FETCH NEXT FROM cursor_statementRes INTO @cid
WHILE @@FETCH_STATUS = 0
BEGIN
	--print @cid
	EXEC stp_GetSingleStatementForClient @cid, @From, @To
	FETCH NEXT FROM cursor_statementRes INTO @cid
END
CLOSE cursor_statementRes
DEALLOCATE cursor_statementRes
END
GO
/****** Object:  StoredProcedure [dbo].[stp_CommVsChargebacks]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--stp_CommVsChargebacks 5,'7/1/08','7/31/08',2

CREATE procedure [dbo].[stp_CommVsChargebacks]
(
	@recid int
,	@startdate datetime
,	@enddate datetime
,	@companyid int
)
as


if @recid = 24 or @recid = 29 begin

declare @CommRec varchar(50)
select @CommRec = Display from tblCommRec where CommRecID = @recid
declare @parentrecid int, @ClientCreatedDateFrom datetime, @ClientCreatedDateTo datetime
declare @tbl table (name varchar(100), company varchar(100),Commissions money,Chargebacks money,PaidOut money)
declare @tbl2 table (amount money)
declare @tbl3 table (amount money)


if @recid = 29 begin
	set @ClientCreatedDateFrom = '8/1/2008'
	set @ClientCreatedDateTo = '1/1/2010'
end
else begin -- 24
	set @ClientCreatedDateFrom = '5/7/2007'
	set @ClientCreatedDateTo = '1/1/2010'
end

select @parentrecid = isnull(ParentCommRecID,CommRecID) from tblCommRec where CommRecID = @recid


insert 
	@tbl (name,company,Commissions)
SELECT
	@CommRec,
	Company,
	sum(Amount) [Commissions]
FROM
	(
		SELECT
            c.Created [ClientCreated],
			cb.CommBatchID as [BatchID],
			comp.[Name] as Company,
			cp.Amount,
			cs.CommRecID
		FROM
			tblCommPay as cp LEFT OUTER JOIN
			tblRegisterPayment as rp on rp.RegisterPaymentID = cp.RegisterPaymentID LEFT OUTER JOIN
			tblRegister as r on r.RegisterID = rp.FeeRegisterID LEFT OUTER JOIN
			tblClient as c on c.ClientID = r.ClientID LEFT OUTER JOIN
			tblEntryType as et on et.EntryTypeID = r.EntryTypeID LEFT OUTER JOIN
			tblAgency as a on a.AgencyID = c.AgencyID LEFT OUTER JOIN
			tblCompany as comp on comp.CompanyID = c.CompanyID LEFT OUTER JOIN
			tblCommBatch as cb on cb.CommBatchID = cp.CommBatchID LEFT JOIN
			tblCommStruct as cs on cs.CommStructID = cp.CommStructID LEFT JOIN
			tblPerson p on c.primarypersonid = p.personid 
		where 
			comp.Companyid = @companyid

	) as commTable
WHERE
	CommRecID = @parentrecid -- Used to filter commission structures
	and (ClientCreated between @ClientCreatedDateFrom and @ClientCreatedDateTo) -- Based on user specific rules
	and BatchID in 
	(
		select
			b.CommBatchID
		from 
			tblCommBatch b
			join tblCommBatchTransfer t on t.CommBatchID = b.CommBatchID and t.CommRecID = @recid -- Get batches that belong to this CommRec
		where 
			BatchDate between @startdate and @enddate -- User selected date range
	)
GROUP BY
	Company

insert 
	@tbl2 (amount)
SELECT
	abs(sum(Amount))
FROM
	(
		SELECT     
            c.Created [ClientCreated],
			cp.CommBatchID as [BatchID],
			comp.Name as Company,
			-cp.Amount as Amount,
			cs.CommRecID
		FROM         
			tblCommChargeback as cp LEFT OUTER JOIN
			tblRegisterPayment as rp on rp.RegisterPaymentId = cp.RegisterPaymentID LEFT OUTER JOIN
			tblRegister as r on r.RegisterId = rp.FeeRegisterId LEFT OUTER JOIN
			tblClient as c on c.ClientID = r.ClientId LEFT OUTER JOIN
			tblEntryType as et on et.EntryTypeId = r.EntryTypeId LEFT OUTER JOIN
			tblAgency as a on a.AgencyID = c.AgencyID LEFT OUTER JOIN
			tblCompany as comp on comp.CompanyID = c.CompanyID LEFT OUTER JOIN
			tblCommStruct as cs on cs.CommStructID = cp.CommStructID INNER JOIN
			tblCommBatch as cb on cb.CommBatchID = cp.CommBatchID LEFT OUTER JOIN
			tblPerson as p on c.PrimaryPersonID = p.PersonID 
		where 
			comp.Companyid = @companyid

	) as commTable
WHERE
	CommRecID = @parentrecid -- Used to filter commission structures
	and (ClientCreated between @ClientCreatedDateFrom and @ClientCreatedDateTo) -- Based on user specific rules
	and BatchID in 
	(
		select
			b.CommBatchID
		from 
			tblCommBatch b
			join tblCommBatchTransfer t on t.CommBatchID = b.CommBatchID and t.CommRecID = @recid -- Get batches that belong to this CommRec
		where 
			BatchDate between @startdate and @enddate -- User selected date range
	)
GROUP BY
	Company


update @tbl set Chargebacks = amount
from @tbl2


insert @tbl3 (amount)
select sum(nr.amount)
from tblnacharegister nr
join tblcompany c on c.companyid = nr.companyid
	and c.companyid = @companyid
join tblnachafile f on f.nachafileid = nr.nachafileid
	and f.date between @startdate and @enddate
where nr.name = @CommRec
	and nr.nachafileid <> 985

update @tbl set PaidOut = amount
from @tbl3


select name,company,commissions,chargebacks,(commissions-chargebacks) [diff],paidout from @tbl

end
else begin

	exec stp_CommissionsPaidOut @recid,@startdate,@enddate,@companyid

end
GO
/****** Object:  StoredProcedure [dbo].[stp_CopyTableDataMany]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_CopyTableDataMany]
(
	@database1 varchar(50),	
	@database2 varchar(50),
	@strtables varchar(8000)
)

AS

declare @tables table(c varchar(50))
insert into @tables select * from dbo.SplitStr(@strtables,',')

declare @table varchar(50)
declare c2 cursor for select c from @tables
open c2
fetch next from c2 into @table
while @@fetch_status=0 begin
	exec stp_CopyTableData @database1, @table, @database2, @table
	fetch next from c2 into @table
end

close c2
deallocate c2
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationStemFilterUpdate]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
   Author: Bereket S. Data
   Description: Special handling for criteria with stem filter types. 
                This procedure update the aggregateclause for stem filters that belong to a given Entity.

*/

CREATE PROCEDURE [dbo].[stp_NegotiationStemFilterUpdate]
@FilterId int = null
AS
SET NOCOUNT ON

DECLARE @AggregateClause varchar(max)
DECLARE @tblAggregateFilter TABLE (AggregateFilterClause varchar(max))
DECLARE @FilterClause varchar(max)
DECLARE @StemFilterClause varchar(max)
DECLARE @FilterType varchar(30)
DECLARE @TempEntityId int
DECLARE @LocalFilterId int
DECLARE @PrevFilterId int
DECLARE @IdValue int 
DECLARE @tblStemFilter Table(FilterId int, ParentFilterId int, FilterClause varchar(max), isRead int)

SELECT @FilterType = FilterType, @TempEntityId = EntityId FROM tblNegotiationFilters WHERE FilterId = @FilterId
if (@FilterType = 'stem')
 BEGIN  
  INSERT INTO @tblAggregateFilter
	exec stp_NegotiationSiblingBaseFilterSelect @TempEntityId

  SELECT @AggregateClause = AggregateFilterClause from @tblAggregateFilter 

  INSERT INTO @tblStemFilter
     SELECT FilterId, ParentFilterId,FilterClause, '0' FROM tblNegotiationFilters WHERE FilterType = 'stem' and EntityId = @TempEntityId

  SELECT TOP 1 @LocalFilterId=FilterId, @FilterClause=FilterClause FROM @tblStemFilter WHERE isRead = 0
  WHILE not @LocalFilterId is null 
		BEGIN
             SET @PrevFilterId = @LocalFilterId
             exec @IdValue=stp_NegotiationStemClauseSelect @LocalFilterId
             If (@IdValue > 0)
                BEGIN
				    SELECT @StemFilterClause = FilterClause FROM tblNegotiationFilters WHERE FilterId = @IdValue
			        UPDATE tblNegotiationFilters SET AggregateClause = '(' + (CASE WHEN len(rtrim(ltrim(@FilterClause))) > 0 THEN @FilterClause ELSE '1=1' END) + ') AND (' + (CASE WHEN len(rtrim(ltrim(@StemFilterClause))) > 0 THEN @StemFilterClause ELSE '1=1' END) + ') AND (' +  (CASE WHEN len(rtrim(ltrim(@AggregateClause))) > 0 THEN @AggregateClause ELSE '1=1' END) + ')' WHERE EntityId = @TempEntityId AND FilterId = @LocalFilterId
			    END
              else
                BEGIN
				    UPDATE tblNegotiationFilters SET AggregateClause = '(' + (CASE WHEN len(rtrim(ltrim(@FilterClause))) > 0 THEN @FilterClause ELSE '1=1' END) + ') AND (' +  (CASE WHEN len(rtrim(ltrim(@AggregateClause))) > 0 THEN @AggregateClause ELSE '1=1' END) + ')' WHERE EntityId = @TempEntityId AND FilterId = @LocalFilterId
                END

             SET @IdValue = 0
             SET @StemFilterClause = null

             UPDATE @tblStemFilter SET isRead = '1' WHERE FilterId = @LocalFilterId
			 SELECT TOP 1 @LocalFilterId=FilterId, @FilterClause=FilterClause FROM @tblStemFilter WHERE isRead = 0
             if (@PrevFilterId = @LocalFilterId)
             BEGIN
                SET @LocalFilterId = Null
             END
		END
 END
GO
/****** Object:  StoredProcedure [dbo].[stp_PotentialPayCommission]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_PotentialPayCommission]
(
	@registerpaymentid int,
	@clientid int
)
as


-------------------------------------------------------------------------------------------------------
-- LOGIC FOR COMMISSION PAYMENT:
-- (1) Find client for this payment
-- (2) Find commission scenario for client.  If commission scenario is not found, use
--     the default commission scenario
-- (3) In order (RLTD), loop through recipient recursively and fire off commissions to be paid
-- (4) After looping and handing out commissions, check to make sure that there isn't a small
--     overage left to be assigned
--     (a) find and fill the entrytypeid of this payment
--     (b) find and fill total percent for this commscen and fee type
--     (c) If the total percent used is 100, then all overages should be small (penny or two)
--         and should be assigned to the last recipient.
--     (d) If the total percent used is not equal to 100, then any overage is planned and
--         should go to the default commission structure
-------------------------------------------------------------------------------------------------------


-- discretionary variables
declare @clientenrolled datetime
declare @agencyid int
declare @commscenid int
declare @percenttotal money
declare @amounttotal money
declare @amountpaid money
declare @amountleft money
declare @defaultcommscenid int
declare @defaultcommstructid int
declare @percentleft money
declare @parentcommrecid int
declare @CompanyID int
declare @entrytypeid int


-- get created date for client
select
	@clientenrolled = created,
	@CompanyID = CompanyID,
	@agencyid = agencyid
from
	tblclient
where
	clientid = @clientid


-- (2) get commission scenario
select
	@commscenid = commscenid
from
	tblcommscen
where
	agencyid = @agencyid and
	startdate <= @clientenrolled and
	(
		enddate is null or
		enddate >= cast(convert(char(10), @clientenrolled, 101) as datetime)
	)

-- get default commission scenario if there is no commscen found for this client
if @commscenid is null
	begin
		select
			@commscenid = commscenid
		from
			tblcommscen
		where
			[default] = 1
	end

-- assuming a commission scenario (or default commscen) was found for this client....
if not @commscenid is null
	begin
		set @parentcommrecid = null
		
		select @parentcommrecid = r.commrecid
		from tblclient c 
		join tblcommrec r on r.companyid = c.companyid
		where c.clientid = @clientid and r.istrust = 1 and not c.companyid is null

		-- (3) recursively loop recipients in the structure for this
		--     commission scenario and write out payments
		exec stp_PotentialPayCommissionRec @registerpaymentid, @commscenid, @parentcommrecid, @CompanyID

	end 



-- (4) Check for unused overages -- don't really need to factor this in
select
	@amounttotal = coalesce(amount, 0)
from
	tblpotentialregisterpaymenttmp
where
	registerpaymentid = @registerpaymentid

select
	@amountpaid = coalesce(sum(amount), 0)
from
	#commpaytmp
where
	registerpaymentid = @registerpaymentid

/*if (@amounttotal > 0)
begin
	set @amountleft = @amounttotal - @amountpaid
	set @percentleft = @amountleft / @amounttotal

	if @amountleft > .01 
		begin
			-- due to incomplete scenarios, even the default scenario is incomplete
			select @entrytypeid = r.entrytypeid from tblpotentialregistertmp r join tblpotentialregisterpaymenttmp rp on rp.feeregisterid = r.registerid and rp.registerpaymentid = @registerpaymentid
			
			print 'amount left ' + cast(@amountleft as varchar(10)) + ' commscenid ' + cast(@commscenid as varchar(5)) + ' entrytypeid ' + cast(@entrytypeid as varchar(5)) + ' company ' + cast(@companyid as varchar(5))
		end

end*/
GO
/****** Object:  StoredProcedure [dbo].[stp_CommissionsByFeeType]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_CommissionsByFeeType]
(
	@recid int
,	@startdate datetime
,	@enddate datetime
,	@companyid int
)
as

if @recid = 24 or @recid = 29 begin

declare @CommRec varchar(50)
select @CommRec = Display from tblCommRec where CommRecID = @recid
declare @parentrecid int, @ClientCreatedDateFrom datetime, @ClientCreatedDateTo datetime


if @recid = 29 begin
	set @ClientCreatedDateFrom = '8/1/2008'
	set @ClientCreatedDateTo = '1/1/2010'
end
else begin -- 24
	set @ClientCreatedDateFrom = '5/7/2007'
	set @ClientCreatedDateTo = '1/1/2010'
end

select @parentrecid = isnull(ParentCommRecID,CommRecID) from tblCommRec where CommRecID = @recid


SELECT
	@CommRec [CommRec],
	Company,
	FeeTypeID,
	FeeType,
	sum(Amount) [Amount]
FROM
	(
		SELECT
			et.EntryTypeID [FeeTypeID],
			et.displayname [FeeType],
            c.Created [ClientCreated],
			cb.CommBatchID as [BatchID],
			comp.[Name] as Company,
			cp.Amount,
			cs.CommRecID
		FROM
			tblCommPay as cp LEFT OUTER JOIN
			tblRegisterPayment as rp on rp.RegisterPaymentID = cp.RegisterPaymentID LEFT OUTER JOIN
			tblRegister as r on r.RegisterID = rp.FeeRegisterID LEFT OUTER JOIN
			tblClient as c on c.ClientID = r.ClientID LEFT OUTER JOIN
			tblEntryType as et on et.EntryTypeID = r.EntryTypeID LEFT OUTER JOIN
			tblAgency as a on a.AgencyID = c.AgencyID LEFT OUTER JOIN
			tblCompany as comp on comp.CompanyID = c.CompanyID LEFT OUTER JOIN
			tblCommBatch as cb on cb.CommBatchID = cp.CommBatchID LEFT JOIN
			tblCommStruct as cs on cs.CommStructID = cp.CommStructID LEFT JOIN
			tblPerson p on c.primarypersonid = p.personid 
		where 
			comp.Companyid = @companyid

	) as commTable
WHERE
	CommRecID = @parentrecid -- Used to filter commission structures
	and (ClientCreated between @ClientCreatedDateFrom and @ClientCreatedDateTo) -- Based on user specific rules
	and BatchID in 
	(
		select
			b.CommBatchID
		from 
			tblCommBatch b
			join tblCommBatchTransfer t on t.CommBatchID = b.CommBatchID and t.CommRecID = @recid -- Get batches that belong to this CommRec
		where 
			BatchDate between @startdate and @enddate -- User selected date range
	)
GROUP BY
	feetypeid,feetype,Company



end
else begin

	exec stp_CommissionsPaidOutByFeeType @recid,@startdate,@enddate,@companyid

end
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientStatementBuilder]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- CREATE date: 03/16/2007
-- Modified date: 08/14/2007 11/17/2008 handle multiple attorneys
-- Description:	Stored Proc to generate tables FOR client statements
-- =============================================
CREATE PROCEDURE [dbo].[stp_ClientStatementBuilder] 
	@date1 SMALLDATETIME = NULL, 
	@days INT = 15,
	@CompanyID INT = -1,
	@AccountNumber INT = -1
AS
	BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	-- IF running AS a script use this, otherwise 
	-- use @date1 AS the parameter that needs to be passed.
--	DECLARE @date1 SMALLDATETIME
--	DECLARE @days INT
--	DECLARE @CompanyID INT
--	DECLARE @AccountNumber INT
--	
--	SET @date1 = '05/01/2010'
--	SET @days = 15
--	SET @CompanyID = -1
--	SET @AccountNumber = -1

    -- These are variables FOR the process
	DECLARE @date2 SMALLDATETIME
	DECLARE @day1 INT
	DECLARE @day2 INT
	DECLARE @EOM INT
	DECLARE @RealDays INT
	DECLARE @AcctNo NVARCHAR(255)
	DECLARE @Name NVARCHAR(255)
	DECLARE @OrigAcctNo NVARCHAR(255)
	DECLARE @Status NVARCHAR(255)
	DECLARE @Balance MONEY
	DECLARE @Amount MONEY
	DECLARE @FROM SMALLDATETIME
	DECLARE @To SMALLDATETIME
	DECLARE @SDABalance MONEY
	DECLARE @PFOBalance MONEY
	DECLARE @cid INT
	DECLARE @cslocation2 NVARCHAR(255)
	DECLARE @PmtDate1 SMALLDATETIME
	DECLARE @PmtDate2 SMALLDATETIME
	DECLARE @DepositDate NVARCHAR(50)
	DECLARE @DateDiff INT

		IF @date1 IS NULL
		BEGIN
			SET @date1 = GETDATE()
			SET @DateDiff = DATEPART(DAY, @date1)
			IF DATEPART(DAY, @date1) <= 15
				BEGIN
					SET @date1 = DATEADD(DAY, -(@DateDiff - 1), @date1)
				END
			IF DATEPART(DAY, @date1) >= 16
				BEGIN
					SET @DateDiff = @DateDiff - 15
					SET @date1 = DATEADD(DAY, - @DateDiff, @date1)
				END
		END

-- Statements FOR procedure follow
	SET @day1 = DATEPART(DAY,@date1)
	SET @day2 = DATEPART(DAY,@date2)

	-- Determine the To AND FROM dates
	SET @EOM = DAY(DATEADD(DAY,-1,DATEADD(MONTH,1,DATEADD(DAY,1-DAY(@date1),@date1))))
	IF DATEPART(DAY, @date1) >= 15
		BEGIN
			SET @RealDays = @EOM - DATEPART(DAY, @date1)
		END
	ELSE
		BEGIN
			SET @RealDays = @days - 1
		END

	SET @date2 = DATEADD(DAY, @realdays, @date1)
	
	-- Determine the To AND FROM dates
	-- Start with Feb
IF DATEPART(DAY, @date1) >= 15
		BEGIN
			SET @RealDays = @EOM - DATEPART(DAY, @date1)
		END
	ELSE
		BEGIN
			SET @RealDays = @days - 1
		END

	SET @date2 = DATEADD(DAY, @realdays, @date1)
	
	-- Calculate date 2 FROM the count of days
	IF DATEPART(DAY, @date1) = 1
		BEGIN
		SET @day1 = 16
		SET @day2 = @eom
		END
	ELSE
		BEGIN
		SET @day1 = 1
		SET @day2 = 15
		END
		
	IF @day1 = 1 AND @eom = 31
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, 2 + (@eom - @realdays), @date1)
			SET @PmtDate2 = DATEADD(DAY, @EOM, @date1)
		END
	IF @day1 = 16 AND @eom = 31
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, 15, @date1)
			SET @PmtDate2 = DATEADD(DAY, 15, @PmtDate1)
		END

	IF @day1 = 1 AND @eom = 30
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, 1 + (@eom - @realdays), @date1)
			SET @PmtDate2 = DATEADD(DAY, @EOM, @date1)
		END
	IF @day1 = 16 AND @eom = 30
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, 15, @date1)
			SET @PmtDate2 = DATEADD(DAY, 14, @PmtDate1)
		END

	IF @day1 = 1 AND @eom = 28
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, (@eom - @realdays)-1, @date1)
			SET @PmtDate2 = DATEADD(DAY, @EOM, @date1)
		END
	IF @day1 = 16 AND @eom = 28
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, 15, @date1)
			SET @PmtDate2 = DATEADD(DAY, 12, @PmtDate1)
		END

	IF @day1 = 1 AND @eom = 29
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, (@eom - @realdays), @date1)
			SET @PmtDate2 = DATEADD(DAY, @EOM, @date1)
		END
	IF @day1 = 16 AND @eom = 29
		BEGIN
			SET @PmtDate1 = DATEADD(DAY, 15, @date1)
			SET @PmtDate2 = DATEADD(DAY, 13, @PmtDate1)
		END

IF DATEPART(MONTH, @date1) = 2
	BEGIN
		IF DATENAME(DAY, @date2) = 28
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date2)
				SET @FROM = DATEADD(DAY, - @realdays + 1, @FROM)
				SET @To = DATEADD(DAY,0, @date1)
			END
		ELSE
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date1)
				SET @To = DATEADD(DAY,-1,@date1)
			END
	END

IF DATEPART(MONTH, @date1) = 2
	BEGIN
		IF DATENAME(DAY, @date2) = 29
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date2)
				SET @FROM = DATEADD(DAY, - @realdays + 1, @FROM)
				SET @To = DATEADD(DAY,0, @date1)
			END
		ELSE
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date1)
				SET @To = DATEADD(DAY,-1,@date1)
			END
	END

IF DATEPART(MONTH, @date1) IN (1,3,5,7,8,10,12)
	BEGIN
		IF DATENAME(DAY, @date2) = 31
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date1)
				SET @FROM = DATEADD(DAY, 1, @FROM)
				SET @To = DATEADD(DAY,0, @date1)
			END
		ELSE
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date1)
				SET @To = DATEADD(DAY,-1,@date1)
			END
	END

IF DATEPART(MONTH, @date1) IN (4,6,9,11)
	BEGIN
		IF DATENAME(DAY, @date2) = 30
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date1)
				SET @FROM = DATEADD(DAY, 1, @FROM)
				SET @To = @date1
			END
		ELSE
			BEGIN
				SET @FROM = DATEADD(MONTH, -1, @date1)
				SET @To = DATEADD(DAY,-1,@date1)
			END
	END
	
--Lets clean up the tblStatementResults before running

truncate TABLE tblStatementResults

IF EXISTS 
	(SELECT * FROM INFORMATION_SCHEMA.tables WHERE table_name = 'tblStatementPersonal')
	BEGIN
		DROP TABLE tblStatementPersonal
	END

-- OK get the clients to process based ON companyid, accountno or all

-- First is there a company id to process FOR? IF so the account number should be -1

IF @CompanyID > -1 AND @AccountNumber <= -1
	BEGIN
		SELECT  c.clientid,
			c.accountnumber,
			c.companyid AS [BaseCompany],
			p.firstname + ' ' + p.lastname AS [Name],
			p.street + ' ' + ISNULL(p.street2,'') AS [Street],
			p.city AS [City],
			s.abbreviation AS [ST],
			LEFT(p.zipcode,5) AS [Zip],
			CONVERT(VARCHAR, @FROM, 101) + ' To ' + CONVERT(VARCHAR, @To, 101) AS [period],
			case DATEPART(DAY, @date1) WHEN 15 THEN DATENAME(MONTH,DATEADD(MONTH, 1, @date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,DATEPART(YEAR, @date1)) ELSE DATENAME(MONTH,DATEADD(MONTH, 0, @date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,DATEPART(YEAR, @date1)) END AS  [DepDate],
			c.depositamount AS [DepAmt],
		-ISNULL((
				SELECT 
					SUM(amount) 
				FROM 
					tblRegister INNER JOIN
					tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
				WHERE 
					tblRegister.Clientid=c.ClientId AND
					tblEntryType.Fee=1)
			,0)
			-
			ISNULL((
				SELECT 
					SUM(tblregisterpayment.amount) 
				FROM 
					tblRegisterPayment INNER JOIN
					tblRegister ON tblRegisterPayment.FeeRegisterId=tblRegister.RegisterId		
				WHERE 
					tblRegister.Clientid=c.ClientId)
			,0) AS PFOBalance,
			CASE c.depositmethod WHEN 'ACH' THEN 'Y' ELSE 'N' END [ACH],
			CASE c.NoChecks WHEN 1 THEN 'Y' ELSE 'N' END [NoChecks],
			CASE c.CompanyID WHEN 1 THEN co.Name WHEN 2 THEN co.NAME ELSE p.firstname + ' ' + p.lastname + ', Acct.# ' + c.AccountNumber END [Payee],
			ca.address1 AS [cslocation1],
			(ca.city + ', ' + ca.state + ' ' + ca.zipcode) AS [cslocation2],
			cp.PhoneNumber  AS [desc1],
			co.BillingMessage AS [desc2],
			' ' AS [desc3]

INTO tblStatementPersonal

		 FROM tblClient c INNER JOIN
			tblPerson p ON c.primarypersonid = p.personid LEFT JOIN
			tblState s ON p.stateid = s.stateid INNER JOIN
			tblCompany co ON co.companyid = c.companyid INNER JOIN 
			tblCompanyAddresses ca ON c.companyid = ca.companyid INNER JOIN
			tblcompanyphones cp ON c.companyid = cp.companyid
		WHERE
			not c.currentclientstatusid IN (15, 17, 18) 
			AND not c.accountnumber IS NULL
			AND not c.accountnumber = ''
			AND c.depositday >= @day1
			AND c.depositday <= @day2
			AND ca.addresstypeid = 3
			AND cp.phonetype = 46
			AND co.CompanyID = @CompanyID
	END

-- IF neither the account number
IF @CompanyID <= -1 AND @AccountNumber <= -1
	BEGIN
		SELECT  c.clientid,
			c.accountnumber,
			c.companyid AS [BaseCompany],
			p.firstname + ' ' + p.lastname AS [Name],
			p.street + ' ' + ISNULL(p.street2,'') AS [Street],
			p.city AS [City],
			s.abbreviation AS [ST],
			LEFT(p.zipcode,5) AS [Zip],
			CONVERT(VARCHAR, @FROM, 101) + ' To ' + CONVERT(VARCHAR, @To, 101) AS [period],
			case DATEPART(DAY, @date1) WHEN 15 THEN DATENAME(MONTH,DATEADD(MONTH, 1, @date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,DATEPART(YEAR, @date1)) ELSE DATENAME(MONTH,DATEADD(MONTH, 0, @date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,DATEPART(YEAR, @date1)) END AS  [DepDate],
			c.depositamount AS [DepAmt],
		-ISNULL((
				SELECT 
					SUM(amount) 
				FROM 
					tblRegister INNER JOIN
					tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
				WHERE 
					tblRegister.Clientid=c.ClientId AND
					tblEntryType.Fee=1)
			,0)
			-
			ISNULL((
				SELECT 
					SUM(tblregisterpayment.amount) 
				FROM 
					tblRegisterPayment INNER JOIN
					tblRegister ON tblRegisterPayment.FeeRegisterId=tblRegister.RegisterId		
				WHERE 
					tblRegister.Clientid=c.ClientId)
			,0) AS PFOBalance,
			CASE c.depositmethod WHEN 'ACH' THEN 'Y' ELSE 'N' END [ACH],
			CASE c.NoChecks WHEN 1 THEN 'Y' ELSE 'N' END [NoChecks],
			CASE c.CompanyID WHEN 1 THEN co.Name WHEN 2 THEN co.NAME ELSE p.firstname + ' ' + p.lastname + ', Acct.# ' + c.AccountNumber END [Payee],
			ca.address1 AS [cslocation1],
			(ca.city + ', ' + ca.state + ' ' + ca.zipcode) AS [cslocation2],
			cp.PhoneNumber  AS [desc1],
			co.BillingMessage AS [desc2],
			' ' AS [desc3]

INTO tblStatementPersonal

		 FROM tblClient c INNER JOIN
			tblPerson p ON c.primarypersonid = p.personid LEFT JOIN
			tblState s ON p.stateid = s.stateid INNER JOIN
			tblCompany co ON co.companyid = c.companyid INNER JOIN 
			tblCompanyAddresses ca ON c.companyid = ca.companyid INNER JOIN
			tblcompanyphones cp ON c.companyid = cp.companyid
		WHERE
			not c.currentclientstatusid IN (15, 17, 18) 
			AND not c.accountnumber IS NULL
			AND not c.accountnumber = ''
			AND c.depositday >= @day1
			AND c.depositday <= @day2
			AND ca.addresstypeid = 3
			AND cp.phonetype = 46
	END

IF @AccountNumber > -1 AND @CompanyID <= -1
	BEGIN
		SELECT  c.clientid,
			c.accountnumber,
			c.companyid AS [BaseCompany],
			p.firstname + ' ' + p.lastname AS [Name],
			p.street + ' ' + ISNULL(p.street2,'') AS [Street],
			p.city AS [City],
			s.abbreviation AS [ST],
			LEFT(p.zipcode,5) AS [Zip],
			CONVERT(VARCHAR, @FROM, 101) + ' To ' + CONVERT(VARCHAR, @To, 101) AS [period],
			case DATEPART(DAY, @date1) WHEN 15 THEN DATENAME(MONTH,DATEADD(MONTH, 1, @date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,DATEPART(YEAR, @date1)) ELSE DATENAME(MONTH,DATEADD(MONTH, 0, @date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,DATEPART(YEAR, @date1)) END AS  [DepDate],
			c.depositamount AS [DepAmt],
		-ISNULL((
				SELECT 
					SUM(amount) 
				FROM 
					tblRegister INNER JOIN
					tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
				WHERE 
					tblRegister.Clientid=c.ClientId AND
					tblEntryType.Fee=1)
			,0)
			-
			ISNULL((
				SELECT 
					SUM(tblregisterpayment.amount) 
				FROM 
					tblRegisterPayment INNER JOIN
					tblRegister ON tblRegisterPayment.FeeRegisterId=tblRegister.RegisterId		
				WHERE 
					tblRegister.Clientid=c.ClientId)
			,0) AS PFOBalance,
			CASE c.depositmethod WHEN 'ACH' THEN 'Y' ELSE 'N' END [ACH],
			CASE c.NoChecks WHEN 1 THEN 'Y' ELSE 'N' END [NoChecks],
			CASE c.CompanyID WHEN 1 THEN co.Name WHEN 2 THEN co.NAME ELSE p.firstname + ' ' + p.lastname + ', Acct.# ' + c.AccountNumber END [Payee],
			ca.address1 AS [cslocation1],
			(ca.city + ', ' + ca.state + ' ' + ca.zipcode) AS [cslocation2],
			cp.PhoneNumber  AS [desc1],
			co.BillingMessage AS [desc2],
			' ' AS [desc3]

INTO tblStatementPersonal

		 FROM tblClient c INNER JOIN
			tblPerson p ON c.primarypersonid = p.personid LEFT JOIN
			tblState s ON p.stateid = s.stateid INNER JOIN
			tblCompany co ON co.companyid = c.companyid INNER JOIN 
			tblCompanyAddresses ca ON c.companyid = ca.companyid INNER JOIN
			tblcompanyphones cp ON c.companyid = cp.companyid
		WHERE
			not c.currentclientstatusid IN (15, 17, 18) 
			AND not c.accountnumber IS NULL
			AND not c.accountnumber = ''
			AND c.depositday >= @day1
			AND c.depositday <= @day2
			AND ca.addresstypeid = 3
			AND cp.phonetype = 46
			AND c.AccountNumber = @AccountNumber
	END

--TABLE Creditor
--ISNULL(s.code, '''') [Status], All status flags
IF EXISTS 
	(SELECT * FROM INFORMATION_SCHEMA.tables WHERE table_name = 'tblStatementCreditor')
	BEGIN
		DROP TABLE tblStatementCreditor
	END
	
	CREATE TABLE tblStatementCreditor
		(
			Acct_No NVARCHAR(255),
			Cred_Name NVARCHAR(255),
			Orig_Acct_No NVARCHAR(255),
			Status NVARCHAR(255),
			Balance MONEY
		)

DECLARE cursor_Creditor CURSOR FOR

SELECT 
	c.accountnumber [ClntAcctNo],
	cr.name [Cred. Name],
	ciOrig.accountnumber [Acct #],
	CASE WHEN s.Code IN ('AR', 'SA', 'COD') THEN s.Description ELSE '' END [Status],
	ciOrig.amount [Balance]
FROM 
	tblAccount a
	INNER JOIN tblClient c ON a.clientid = c.clientid
	INNER JOIN tblCreditorInstance ciOrig ON ciOrig.CreditorInstanceID=
		(SELECT 
			TOP 1 CreditorInstanceId 
		FROM 
			tblCreditorInstance 
		WHERE 
			AccountID=a.AccountID 
		ORDER BY 
			Acquired ASC)
	INNER JOIN tblCreditor cr ON ciOrig.creditorid = cr.creditorid
	LEFT OUTER JOIN tblAccountStatus s ON a.accountStatusID = s.accountstatusid
WHERE
	c.clientid IN (SELECT clientid FROM tblStatementPersonal)

OPEN cursor_Creditor

FETCH NEXT FROM cursor_Creditor INTO @AcctNo, @Name, @OrigAcctNo, @Status, @Balance

	WHILE @@FETCH_STATUS = 0
	BEGIN
		INSERT INTO tblStatementCreditor
		(
			Acct_No,
			Cred_Name,
			Orig_Acct_No,
			Status,
			Balance
		)
		VALUES
		(
			@AcctNo,
			@Name,
			@OrigAcctNo,
			@Status,
			@Balance
		)
		FETCH NEXT FROM cursor_Creditor INTO @AcctNo, @Name, @OrigAcctNo, @Status, @Balance
	END

--CLOSE up this CURSOR
CLOSE cursor_Creditor
DEALLOCATE cursor_Creditor

--Results TABLE FOR the statements

DECLARE cursor_statementRes CURSOR FOR
SELECT ClientID
FROM tblStatementPersonal

OPEN cursor_statementRes

FETCH NEXT FROM cursor_statementRes INTO @cid
WHILE @@FETCH_STATUS = 0
BEGIN
	--print @cid
	EXEC stp_GetStatementForClient @cid
	FETCH NEXT FROM cursor_statementRes INTO @cid
END
CLOSE cursor_statementRes
DEALLOCATE cursor_statementRes
END
GO
/****** Object:  StoredProcedure [dbo].[stp_NewCStmtBuilder]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 11/2/2006
-- Description:	Generates Client statements and Creditor Statements
-- =============================================
CREATE PROCEDURE [dbo].[stp_NewCStmtBuilder] 
-- Add the parameters for the stored procedure here
	@date1 smalldatetime = '12/1/2006', 
	@date2 smalldatetime = '12/15/2006'
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
-- declare variables for procedure here
--declare @date1 smalldatetime
--declare @date2 smalldatetime
--set @date1 = '10/31/2006'
--set @date2 = '12/1/2006'

declare @TDate smalldatetime
declare @T2Date smalldatetime
declare @day1 int
declare @day2 int
declare @AcctNo nvarchar(255)
declare @Name nvarchar(255)
declare @OrigAcctNo nvarchar(255)
declare @Status nvarchar(255)
declare @Balance money
declare @Amount money
declare @Level1Status int
declare @Level2Status int
declare @ClientId int
declare @Clientid2 int
declare @From smalldatetime
declare @To smalldatetime
declare @SDABalance money
declare @PFOBalance money
declare @cid int
    -- Insert statements for procedure here
set @day1 = DATENAME(DAY, @date1)
set @day2 = DATENAME(DAY, @date2)

--set @From = DATENAME(month, dateadd(Month,1,@date1)) +'/'+ CONVERT(VARCHAR, c.depositday) + '/' + CONVERT(VARCHAR,datepart(year, @date1))  --DATEADD(MONTH, -1, @date1)
--set @To = DATENAME(month, dateadd(Month,1,@date2)) +'/'+ CONVERT(VARCHAR, c.depositday) + '/' + CONVERT(VARCHAR,datepart(year, @date2))  --DATEADD(DAY, -1, @date1)

--Lets clean up the tblStatementResults before running
truncate table tblStatementResults

if EXISTS 
	(select * from INFORMATION_SCHEMA.tables where table_name = 'tblStatementPersonal')
	begin
		drop table tblStatementPersonal
	end
	
SELECT  c.clientid,
	c.accountnumber,
	CASE c.companyid WHEN '1' then '816' ELSE '801' END as [BaseCompany],
	p.firstname + ' ' + p.lastname as [Name],
	p.street + ' ' + isnull(p.street2,'') as [Street],
	p.city as [City],
	s.abbreviation as [ST],
	left(p.zipcode,5) as [Zip],
	'month range|last' as [period], /* period is the previous month i.e. 'From 04/01/2006 to 04/30/2006' */
	DATENAME(month, dateadd(Month,1,@date1)) +' '+ CONVERT(VARCHAR, c.depositday) + ', ' + CONVERT(VARCHAR,datepart(year, @date1)) AS  [DepDate],
	c.depositamount as [DepAmt],

	-ISNULL((
		select 
			sum(amount) 
		from 
			tblRegister INNER JOIN
			tblEntryType ON tblRegister.EntryTypeId=tblEntryType.EntryTypeId
		where 
			tblRegister.Clientid=c.ClientId AND
			tblEntryType.Fee=1)
	,0)
	-
	ISNULL((
		select 
			sum(tblregisterpayment.amount) 
		from 
			tblRegisterPayment INNER JOIN
			tblRegister ON tblRegisterPayment.FeeRegisterId=tblRegister.RegisterId		
		where 
			tblRegister.Clientid=c.ClientId)
	,0) as PFOBalance,

	CASE c.depositmethod WHEN 'ACH' THEN 'Y' ELSE 'N' END [ACH],
	CASE c.NoChecks WHEN 1 THEN 'Y' ELSE 'N' END [NoChecks],

	(select 'Payee' = case WHEN accountnumber > 6000000 THEN 'The Seideman Law Firm, P.C.'
		ELSE p.firstname + ' ' + p.lastname+ ' Acct # '+c.accountnumber
		END from tblClient c2 where c2.clientid = c.clientid) as Payee,

	'P.O. Box 1800' as [cslocation1],
	'Rancho Cucamonga, CA 91729-1800' as [cslocation2],
	'1-800-914-4832' as [desc1],
	'Monday thru Friday 8:00 am to 5:00 pm PST' as [desc2],
	' ' as desc3
INTO
	tblStatementPersonal
FROM
	tblClient c INNER JOIN
	tblPerson p on c.primarypersonid = p.personid LEFT JOIN
	tblState s on p.stateid = s.stateid
WHERE
	not c.currentclientstatusid in (15,17,18) 
	and not accountnumber is null
	and not accountnumber = ''
	and c.depositday > @day1
	and c.depositday < @day2

--Table Creditor

if EXISTS 
	(select * from INFORMATION_SCHEMA.tables where table_name = 'tblStatementCreditor')
	begin
		drop table tblStatementCreditor
	end
	
	create table tblStatementCreditor
		(
			Acct_No nvarchar(255),
			Cred_Name nvarchar(255),
			Orig_Acct_No nvarchar(255),
			Status nvarchar(255),
			Balance money
		)

declare cursor_Creditor cursor for

SELECT 
	c.accountnumber [ClntAcctNo],
	cr.name [Cred. Name],
	ciOrig.accountnumber [Acct #],
	isnull(s.code, '') [Status],
	ciOrig.amount [Balance]
FROM 
	tblAccount a
	INNER JOIN tblClient c on a.clientid = c.clientid
	INNER JOIN tblCreditorInstance ciOrig on ciOrig.CreditorInstanceID=
		(SELECT 
			TOP 1 CreditorInstanceId 
		FROM 
			tblCreditorInstance 
		WHERE 
			AccountID=a.AccountID 
		ORDER BY 
			Acquired ASC)
	INNER JOIN tblCreditor cr on ciOrig.creditorid = cr.creditorid
	LEFT OUTER JOIN tblAccountStatus s on a.accountStatusID = s.accountstatusid
WHERE
	c.clientid in (select clientid from tblStatementPersonal)

open cursor_Creditor

fetch next from cursor_Creditor into @AcctNo, @Name, @OrigAcctNo, @Status, @Balance

	while @@fetch_status = 0
	begin
		insert into tblStatementCreditor
		(
			Acct_No,
			Cred_Name,
			Orig_Acct_No,
			Status,
			Balance
		)
		Values
		(
			@AcctNo,
			@Name,
			@OrigAcctNo,
			@Status,
			@Balance
		)
		fetch next from cursor_Creditor into @AcctNo, @Name, @OrigAcctNo, @Status, @Balance
	end

--close up this cursor
close cursor_Creditor
deallocate cursor_Creditor

--Results table for the statements

declare cursor_statementRes cursor for
select ClientID
from tblStatementPersonal

open cursor_statementRes

fetch next from cursor_statementRes into @cid
while @@fetch_status = 0
begin
	print @cid
	exec stp_GetStatementForClient @cid
	fetch next from cursor_statementRes into @cid
end
close cursor_statementRes
deallocate cursor_statementRes
END
GO
/****** Object:  StoredProcedure [dbo].[stp_UnresolveDEForClient]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_UnresolveDEForClient]
	(
		@ClientId int
	)

as

exec stp_UnresolveUWForClient @clientid

delete from tblroadmap where clientstatusid in (10) and clientid=@clientid

select tbltask.taskid as taskid into #tmp2 from tbltask inner join tblclienttask on tbltask.taskid=tblclienttask.taskid where tblclienttask.clientid=@clientid and tasktypeid=4

delete from tblclienttask where taskid in(
	select taskid from #tmp2
)

delete from tbltask where taskid in (
	select taskid from #tmp2
)

update tblclient set vwderesolved=null,vwderesolvedby=null where clientid=@clientid

drop table #tmp2
GO
/****** Object:  StoredProcedure [dbo].[stp_IssueCommBatch]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--drop  procedure [dbo].[stp_IssueCommBatch]
create procedure [dbo].[stp_IssueCommBatch]

AS

/*
	History:
	9.22.08		jhernandez		Merged Cor's rewrite with CheckSite version.
	10.15.08	jhernandez		Removed Stonewall/Avert switch dates. Using multiple scenarios per agency now. 
	4.2.09		jhernandez		Delete neg batches logic now takes into consideration the parent. Affects recipients
								with batches from multiple parents (TSLF OA & Antilla), if one batch per scenario
								was negative neither would get batched until both parents could batch positive amounts.
	6.22.09		jhernandez		Batch items must be processed through the trust the payment originated
								through. View used to determine when clients were converted.
	8.26.09		ugreenridge		Added convert to Trsutid column for insert into @vtblComms
*/

set nocount on
set ansi_warnings off

declare @commscenid int
declare @commrecid int
declare @parentcommrecid int
declare @companyid int
declare @commbatchid int
declare @checkparents bit
declare @trustid int
declare @trustcommrec int


BEGIN TRY


create table #tblIssueCommBatch
(
	CompanyID int,
	TrustID int,
	CommScenID int,
	CommRecID int,
	ParentCommRecID int,
	[Order] int,
	Amount money
)

declare @vtblBatches table
(
	ID int identity(1,1),
	CompanyID int,
	TrustID int,
	CommScenID int,
	CommRecID int,
	ParentCommRecID int null,
	[Order] int,
	Amount money
)

declare @vtblComms table
(
	CompanyID int,
	TrustID int,
	ID int,
	[Type] varchar(14),
	CommScenID int,
	CommRecID int,
	ParentCommRecID int,
	[Order] int,
	Amount money
)


INSERT INTO
	@vtblComms
SELECT
	CompanyID,
	trustid,
	ID,
	[Type],
	CommScenID,
	CommRecID,
	ParentCommRecID,
	[Order],
	Amount
FROM
(
	SELECT
		cs.CompanyID,
		case when v.converted is null then c.TrustID
			 when v.converted > rp.paymentdate then v.OrigTrustID
			 else c.TrustID 
		end [TrustID],
		cp.CommPayID as ID,
		'CommPay' as [Type],
		cs.CommScenID,
		cs.CommRecID,
		cs.ParentCommRecID,
		cs.[Order],
		cp.Amount
	FROM
		tblCommPay as cp
		inner join tblRegisterPayment as rp on rp.RegisterPaymentID = cp.RegisterPaymentID
		inner join tblRegister as r on r.RegisterID = rp.FeeRegisterID
		inner join tblClient as c on c.ClientID = r.ClientID
		inner join tblCommStruct as cs on cs.CommStructID = cp.CommStructID
		left join vw_ClientTrustConvDate v on v.clientid = c.clientid
	WHERE
		cp.CommBatchID is null

	UNION ALL

	SELECT
		cs.CompanyID,
		case when v.converted is null then c.TrustID
			 when v.converted > rp.paymentdate then v.OrigTrustID
			 else c.TrustID 
		end [TrustID],
		cc.CommChargebackID as ID,
		'CommChargeback' as [Type],
		cs.CommScenID,
		cs.CommRecID,
		cs.ParentCommRecID,
		cs.[Order],
		-cc.Amount
	FROM
		tblCommChargeback as cc
		inner join tblRegisterPayment as rp on rp.RegisterPaymentID = cc.RegisterPaymentID
		inner join tblRegister as r on r.RegisterID = rp.FeeRegisterID
		inner join tblClient as c on c.ClientID = r.ClientID
		inner join tblCommStruct as cs on cs.CommStructID = cc.CommStructID
		left join vw_ClientTrustConvDate v on v.clientid = c.clientid
	WHERE
		cc.CommBatchID is null
) as drvComms



INSERT INTO
	@vtblBatches
SELECT
	CompanyID,
	TrustID,
	CommScenID,
	CommRecID,
	ParentCommRecID,
	[Order],
	sum(Amount) as Amount
FROM
	@vtblComms
GROUP BY
	CompanyID,
	TrustID,
	CommScenID,
	CommRecID,
	ParentCommRecID,
	[Order]



declare cursor_DeleteNegativeBatches cursor forward_only read_only for
	SELECT
		CompanyID,
		TrustID,
		CommScenID,
		CommRecID,
		ParentCommRecID
	FROM
		@vtblBatches
	WHERE
		Amount <= 0

open cursor_DeleteNegativeBatches

fetch next from cursor_DeleteNegativeBatches into @companyid, @trustid, @commscenid, @commrecid, @parentcommrecid

while @@fetch_status = 0
	begin
		delete @vtblComms where CompanyID = @companyid and TrustID = @trustid and CommScenID = @commscenid and CommRecID = @commrecid and ParentCommRecID = @ParentCommRecID
		delete @vtblBatches where CompanyID = @companyid and TrustID = @trustid and CommScenID = @commscenid and CommRecID = @commrecid and ParentCommRecID = @ParentCommRecID

		fetch next from cursor_DeleteNegativeBatches into @companyid, @trustid, @commscenid, @commrecid, @parentcommrecid
	end

close cursor_DeleteNegativeBatches
deallocate cursor_DeleteNegativeBatches



declare cursor_IssueCommBatch cursor forward_only read_only for
	SELECT DISTINCT
		CompanyID,
		TrustID,
		CommScenID
	FROM
		@vtblComms
	ORDER BY
		CompanyID,
		TrustID,
		CommScenID

open cursor_IssueCommBatch

fetch next from cursor_IssueCommBatch into @companyid, @trustid, @commscenid

while @@fetch_status = 0
  begin
		set @checkparents = 1

		SELECT TOP 1
			@trustcommrec = CommRecID
		FROM
			tblCommRec
		WHERE
			IsTrust = 1
			and CompanyID = @companyid 
			
		
        while @checkparents = 1
          begin
                if (SELECT count(DISTINCT ParentCommRecID) FROM @vtblBatches WHERE CommScenID = @commscenid and CompanyID = @companyid and not ParentCommRecID = @trustcommrec and TrustID = @trustid) > 0
				  begin
						declare cursor_ParentRec cursor forward_only read_only for
							SELECT DISTINCT
								ParentCommRecID
							FROM
								@vtblBatches
							WHERE
								CommScenID = @commscenid
								and CompanyID = @companyid
								and not ParentCommRecID = @trustcommrec
								and TrustID = @trustid

						open cursor_ParentRec

						fetch next from cursor_ParentRec into @parentcommrecid
				
                        while @@fetch_status = 0
							begin
								if (SELECT count(*) FROM @vtblBatches WHERE CommScenID = @commscenID and CompanyID = @companyid and CommRecID = @parentcommrecid and TrustID = @trustid) = 0
									begin
										INSERT INTO
											@vtblBatches
										SELECT
											CompanyID,
											@trustid,
											CommScenID,
											CommRecID,
											ParentCommRecID,
											[Order],
											0
										FROM
											tblCommStruct
										WHERE
											CommScenID = @commscenid
											and CompanyID = @companyid
											and CommRecID = @parentcommrecid

										set @checkparents = 1
									end
								else
									begin
										set @checkparents = 0
									end

								fetch next from cursor_ParentRec into @parentcommrecid
							end

						close cursor_ParentRec
						deallocate cursor_ParentRec
				  end
			else
				begin
					set @checkparents = 0
				end
		  end


		INSERT INTO
			tblCommBatch
		VALUES
		(
			@commscenid,
			getdate()
		)

		set @commbatchid = scope_identity()


		INSERT INTO
			#tblIssueCommBatch
		SELECT
			CompanyID,
			TrustID,
			CommScenID,
			CommRecID,
			ParentCommRecID,
			[Order],
			Amount
		FROM
			@vtblBatches

		exec stp_IssueCommBatchOut @commbatchid, @commscenid, @companyid, @trustcommrec, @trustid

		truncate table #tblIssueCommBatch

		UPDATE
			tblCommPay
		SET
			CommBatchID = @commbatchid
		WHERE
			CommPayID in
				(
					SELECT
						ID
					FROM
						@vtblComms
					WHERE
						[Type] = 'CommPay'
						and CommScenID = @commscenid
						and CompanyID = @companyid
						and TrustID = @trustid
				)

		UPDATE
			tblCommChargeback
		SET
			CommBatchID = @commbatchid
		WHERE
			CommChargebackID in
				(
					SELECT
						ID
					FROM
						@vtblComms
					WHERE
						[Type] = 'CommChargeback'
						and CommScenID = @commscenid
						and CompanyID = @companyid
						and TrustID = @trustid
				)

		fetch next from cursor_IssueCommBatch into @companyid, @trustid, @commscenid
	end

	close cursor_IssueCommBatch
	deallocate cursor_IssueCommBatch

	drop table #tblIssueCommBatch
END TRY
BEGIN CATCH
	close cursor_ParentRec
	deallocate cursor_ParentRec

	close cursor_IssueCommBatch
	deallocate cursor_IssueCommBatch

	drop table #tblIssueCommBatch

	declare @errorMessage nvarchar(MAX) set @errorMessage = ERROR_MESSAGE()
	declare @errorSeverity int set @errorSeverity = ERROR_SEVERITY()
	declare @errorState int set @errorState = ERROR_STATE()

	RAISERROR(@errorMessage, @errorSeverity, @errorState)
END CATCH
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Profile_DeleteProfiles]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Profile_DeleteProfiles]
    @ApplicationName        nvarchar(256),
    @UserNames              nvarchar(4000)
AS
BEGIN
    DECLARE @UserName     nvarchar(256)
    DECLARE @CurrentPos   int
    DECLARE @NextPos      int
    DECLARE @NumDeleted   int
    DECLARE @DeletedUser  int
    DECLARE @TranStarted  bit
    DECLARE @ErrorCode    int

    SET @ErrorCode = 0
    SET @CurrentPos = 1
    SET @NumDeleted = 0
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    WHILE (@CurrentPos <= LEN(@UserNames))
    BEGIN
        SELECT @NextPos = CHARINDEX(N',', @UserNames,  @CurrentPos)
        IF (@NextPos = 0 OR @NextPos IS NULL)
            SELECT @NextPos = LEN(@UserNames) + 1

        SELECT @UserName = SUBSTRING(@UserNames, @CurrentPos, @NextPos - @CurrentPos)
        SELECT @CurrentPos = @NextPos+1

        IF (LEN(@UserName) > 0)
        BEGIN
            SELECT @DeletedUser = 0
            EXEC dbo.aspnet_Users_DeleteUser @ApplicationName, @UserName, 4, @DeletedUser OUTPUT
            IF( @@ERROR <> 0 )
            BEGIN
                SET @ErrorCode = -1
                GOTO Cleanup
            END
            IF (@DeletedUser <> 0)
                SELECT @NumDeleted = @NumDeleted + 1
        END
    END
    SELECT @NumDeleted
    IF (@TranStarted = 1)
    BEGIN
    	SET @TranStarted = 0
    	COMMIT TRANSACTION
    END
    SET @TranStarted = 0

    RETURN 0

Cleanup:
    IF (@TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END
    RETURN @ErrorCode
END
GO
/****** Object:  StoredProcedure [dbo].[stp_AssignNewAccountNumber]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_AssignNewAccountNumber]
(
	@clientId int
)

AS

SET NOCOUNT ON

declare @newAccountNumber varchar(50)
declare @oldAccountNumber varchar(50)

set @oldAccountNumber = (select accountnumber from tblclient where clientid=@clientid)
exec @newAccountNumber = stp_GetAccountNumber

update 
	tblclient 
set 
	accountnumber = @newAccountNumber,
	trustid = (select top 1 trustid from tbltrust where [default] = 1)
where 
	clientid=@clientid

select 
	ClientID,
	accountNumber as NewAccountNumber,
	@oldaccountnumber as OldAccountNumber
from 
	tblclient 
where 
	clientid=@clientid
	
-- checking if this proc gets used
-- only place can find is in Clients\client\finances\sda\default.aspx.vb
insert _AssignNewAcctNumAudit (ClientID,OldAccountNumber,NewAccountNumber)
values (@clientid,@oldaccountnumber,@newAccountNumber)
GO
/****** Object:  StoredProcedure [dbo].[stp_RunningBalance2]    Script Date: 09/10/2010 18:33:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_RunningBalance2]
(
	@startdate datetime,
	@enddate datetime,
	@userid int
)
as
begin

declare 
	@date datetime, 
	@payments money, 
	@chargebacks money,
	@dailynet money, 
	@runningbal money,
	@checkbal bit,
	@commstructid int,
	@curcommstructid int

declare @vtblCal table (TransactionDate datetime)


create table #comms
(
	commstructid int,
	[date] varchar(20),
	payments money,
	chargebacks money,
	entrytypeid int
)

create table #temp2
(
	commstructid int,
	[date] datetime,
	payments money,
	chargebacks money,
	dailynet money default(0),
	runningbal money default(0)
)

create table #results
(
	commstructid int,
	[date] datetime,
	payments money,
	chargebacks money,
	dailynet money,
	calcdnet money,
	runningbal money,
	batched money
)

create table #startdates
(
	commstructid int,
	startdate datetime
);


-- fill calendar
with mycte as
(
	select @startdate [DateValue]
	union all
	select DateValue + 1
	from mycte    
	where DateValue + 1 <= @enddate
)

insert @vtblCal
select DateValue
from mycte
where datevalue between @startdate and @enddate order by datevalue desc
OPTION  (MAXRECURSION 0)


set @enddate = dateadd(day,1,@enddate)


-- startdate has to be a day that a batch went out which means the prev business day has a $0 running bal
insert #startdates (commstructid, startdate)
select cp.commstructid, cast(convert(char(10),max(b.batchdate),10) as datetime)
from tblcommpay cp
join tblcommbatch b on b.commbatchid = cp.commbatchid
join tblcommstruct cs on cs.commstructid = cp.commstructid
join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid
join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid 
where b.batchdate < dateadd(day,1,@startdate)
group by cp.commstructid


-- for new companys that may not have older batches
insert #startdates (commstructid, startdate)
select commstructid, startdate
from (
	select cs.commstructid, dateadd(day,-4,cast(convert(char(10),min(b.batchdate),10) as datetime)) [startdate] -- go 4 days back to account for weekends and holidays
	from tblcommbatchtransfer cbt
	join tblcommbatch b on b.commbatchid = cbt.commbatchid
	join tblcommscen s on s.commscenid = b.commscenid
	join tblcommstruct cs on cs.commscenid = s.commscenid and cs.commrecid = cbt.commrecid and cs.parentcommrecid = cbt.parentcommrecid and cs.companyid = cbt.companyid
	join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
	join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and uca.companyid = cbt.companyid
	where b.batchdate between @startdate and @enddate and cbt.companyid > 0
	group by cs.commstructid
) d 
where not exists (select 1 from #startdates s where s.commstructid = d.commstructid)
--select * from #startdates order by commstructid


-- payment acivity by paymentdate
insert
	#comms (commstructid, entrytypeid, date, payments)
select 
	d.commstructid, entrytypeid, convert(varchar(10),paymentdate,101) [date], sum(amount) [payments]
from (
	SELECT
		cs.commstructid,
		r.entrytypeid,
		case when datediff(day,rp.paymentdate,b.batchdate) = 2 then dateadd(dd,1,rp.paymentdate) else rp.paymentdate end [paymentdate],
		cp.amount	
	FROM
		tblCommPay as cp
		join tblRegisterPayment as rp on rp.RegisterPaymentID = cp.RegisterPaymentID 
		join tblRegister as r on r.RegisterID = rp.FeeRegisterID
		join tblClient as c on c.ClientID = r.ClientID
		join tblCommStruct as cs on cs.CommStructID = cp.CommStructID 
		join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
		join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid 
		join #startdates t on t.commstructid = cs.commstructid
		left join tblcommbatch b on b.commbatchid = cp.commbatchid
	WHERE
		rp.paymentdate between t.startdate and @enddate
) d
join #startdates t on t.commstructid = d.commstructid and paymentdate between t.startdate and @enddate -- needed to filter out dateadds that fall out of the date range
group by
	d.commstructid, entrytypeid, convert(varchar(10),paymentdate,101)


-- chargeback activity by day
insert
	#comms (commstructid, entrytypeid, [date], chargebacks)
select 
	d.commstructid, entrytypeid, convert(varchar(10),chargebackdate,101) [date], sum(amount) [chargebacks]
from (
	-- by chargeback date
	SELECT
		cs.commstructid, 
		r.entrytypeid,
		case when datediff(day,cc.chargebackdate,b.batchdate) = 0 then dateadd(dd,-1,cc.chargebackdate) else cc.chargebackdate end [chargebackdate], -- checksite chargebacks batched the same day need to be placed in the previous day's activity
		-cc.amount [amount]
	FROM
		tblCommChargeback as cc
		join tblRegisterPayment as rp on rp.RegisterPaymentID = cc.RegisterPaymentID
		join tblRegister as r on r.RegisterID = rp.FeeRegisterID
		join tblClient as c on c.ClientID = r.ClientID 
		join tblCommStruct as cs on cs.CommStructID = cc.CommStructID 
		join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
		join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid 
		join #startdates t on t.commstructid = cs.commstructid
		left join tblcommbatch b on b.commbatchid = cc.commbatchid
	WHERE
		cc.chargebackdate between t.startdate and @enddate
) d
join #startdates t on t.commstructid = d.commstructid and chargebackdate between t.startdate and @enddate -- needed to filter out dateadds that fall out of the date range
group by
	d.commstructid, entrytypeid, convert(varchar(10),chargebackdate,101)




insert #temp2 (commstructid, [date], payments, chargebacks)
select commstructid, cast([date] as datetime), isnull(sum(payments),0), isnull(sum(chargebacks),0)
from #comms
group by commstructid, [date]


set @curcommstructid = -1
--select commstructid, [date], payments, chargebacks from #temp2 where commstructid = 839 order by commstructid, [date]

declare cur cursor for 
	select commstructid, [date], payments, chargebacks from #temp2 order by commstructid, [date]

open cur
fetch next from cur into @commstructid, @date, @payments, @chargebacks
while @@fetch_status = 0 begin

	if @commstructid <> @curcommstructid begin
		set @runningbal = 0
		set @curcommstructid = @commstructid
	end	
	
	if @checkbal = 1 begin
		-- positive running bal, but if this is a weekend, carryover the running bal
		if not (datename(dw,@date) = 'Saturday' or datename(dw,@date) = 'Sunday') and not exists (select 1 from tblbankholiday where date = @date) begin
			set @runningbal = 0
		end
		set @checkbal = 0 -- reset
	end

	set @dailynet = @payments + @chargebacks + @runningbal

	if @dailynet > 0 begin
		-- pay them
		update #temp2 
		set dailynet = @dailynet, runningbal = @dailynet
		where date = @date 
		and commstructid = @commstructid

		set @checkbal = 1
	end
	else begin
		-- they have a running balance
		update #temp2 
		set dailynet = 0, runningbal = @dailynet
		where date = @date 
		and commstructid = @commstructid
	end
	
	set @runningbal = @dailynet

	fetch next from cur into @commstructid, @date, @payments, @chargebacks
end

close cur
deallocate cur


insert #results (commstructid, date, payments, chargebacks, dailynet, calcdnet, runningbal, batched)
select t.commstructid, v.transactiondate, isnull(t.Payments,0), isnull(t.Chargebacks,0), (isnull(t.Payments,0) + isnull(t.Chargebacks,0)), isnull(t.dailynet,0), isnull(t.RunningBal,0), isnull(b.amount,0)
from @vtblCal v
left join #temp2 t on t.date = v.transactiondate
left join 
(
	select cs.commstructid, convert(varchar(10),b.batchdate,101) [date], sum(cbt.transferamount) [amount]
	from tblcommbatchtransfer cbt
	join tblcommbatch b on b.commbatchid = cbt.commbatchid
	join tblcommscen s on s.commscenid = b.commscenid
	join tblcommstruct cs on cs.commscenid = s.commscenid and cs.commrecid = cbt.commrecid and cs.parentcommrecid = cbt.parentcommrecid and cs.companyid = cbt.companyid
	join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
	join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and uca.companyid = cbt.companyid
	where b.batchdate between @startdate and @enddate
	group by cs.commstructid, convert(varchar(10),b.batchdate,101)

) b on b.date = t.date and b.commstructid = t.commstructid
where t.commstructid > 0


-- pickup any dates where a batch was sent but there was no payment/chargeback activity
insert #results (commstructid, date, payments, chargebacks, dailynet, calcdnet, runningbal, batched)
select commstructid, date, payments, chargebacks, dailynet, calcdnet, runningbal, batched
from (
	select cs.commstructid, convert(varchar(10),b.batchdate,101) [date], 0 [payments], 0 [chargebacks], 0 [dailynet], 0 [calcdnet], 0 [runningbal], sum(cbt.transferamount) [batched]
	from tblcommbatchtransfer cbt
	join tblcommbatch b on b.commbatchid = cbt.commbatchid
	join tblcommscen s on s.commscenid = b.commscenid
	join tblcommstruct cs on cs.commscenid = s.commscenid and cs.commrecid = cbt.commrecid and cs.parentcommrecid = cbt.parentcommrecid and cs.companyid = cbt.companyid
	join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
	join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid and uca.companyid = cbt.companyid
	where b.batchdate between @startdate and @enddate
	group by cs.commstructid, convert(varchar(10),b.batchdate,101)
) b 
where not exists (
	select 1 from #results r where r.commstructid = b.commstructid and r.date = b.date)


-- ------------------------- OUTPUT -------------------------

select distinct date
from #results
order by date

select distinct cr.abbreviation + ' (' + cast(cr.commrecid as varchar(3)) + ') ' + a.importabbr + ' (' + cast(cs.commstructid as varchar(5)) + ')' [commrec]
from #results r
join tblcommstruct cs on cs.commstructid = r.commstructid
join tblcommrec cr on cr.commrecid = cs.commrecid
join tblcommscen s on s.commscenid = cs.commscenid
join tblagency a on a.agencyid = s.agencyid
order by commrec

select distinct c.name[company]
from #results r
join tblcommstruct cs on cs.commstructid = r.commstructid
join tblcompany c on c.companyid = cs.companyid
order by company

select cr.abbreviation + ' (' + cast(cr.commrecid as varchar(3)) + ') ' + a.importabbr + ' (' + cast(cs.commstructid as varchar(5)) + ')' [commrec], c.name[company], date, Payments, Chargebacks, dailynet [Daily Net], runningbal [Running Balance], Batched--, calcdnet [Calculated Net]
from #results r
join tblcommstruct cs on cs.commstructid = r.commstructid
join tblcommrec cr on cr.commrecid = cs.commrecid
join tblcompany c on c.companyid = cs.companyid
join tblcommscen s on s.commscenid = cs.commscenid
join tblagency a on a.agencyid = s.agencyid
order by commrec, company, date


-- payment detail
select
	cr.abbreviation + ' (' + cast(cr.commrecid as varchar(3)) + ') ' + a.importabbr + ' (' + cast(c.commstructid as varchar(5)) + ')' [commrec],
	comp.name [company],
	e.displayname [feetype],
	date,
	payments [amount]
from #comms c
join tblcommstruct cs on cs.commstructid = c.commstructid
join tblcompany comp on comp.companyid = cs.companyid
join tblentrytype e on e.entrytypeid = c.entrytypeid
join tblcommrec cr on cr.commrecid = cs.commrecid
join tblcommscen s on s.commscenid = cs.commscenid
join tblagency a on a.agencyid = s.agencyid
where c.payments is not null
order by commrec, company, feetype, date



-- chargeback detail
select 
	commrec,
	company,
	[date],
	detail,
	-amount[amount]
into
	#chargebackdetail
from (
	select 
		cr.abbreviation + ' (' + cast(cr.commrecid as varchar(3)) + ') ' + a.importabbr + ' (' + cast(d.commstructid as varchar(5)) + ')' [commrec],
		comp.name [company], 
		convert(varchar(10),chargebackdate,101) [date], 
		'BOUNCE - ' + isnull(br.bounceddescription,isnull(d.description,'Other')) [detail],
		-sum(amount) [amount]
	from (
		-- by chargeback date
		SELECT
			cs.commstructid, 
			r.entrytypeid,
			case when datediff(day,cc.chargebackdate,b.batchdate) = 0 then dateadd(dd,-1,cc.chargebackdate) else cc.chargebackdate end [chargebackdate], -- checksite chargebacks batched the same day need to be placed in the previous day's activity
			-cc.amount [amount],
			r.bouncedreason,
			r.description,
			cs.companyid
		FROM
			tblCommChargeback as cc
			join tblRegisterPayment as rp on rp.RegisterPaymentID = cc.RegisterPaymentID
			join tblregisterpaymentdeposit rpd on rpd.registerpaymentid = rp.registerpaymentid
			join tblRegister r on r.RegisterID = rpd.depositregisterid and r.bounce is not null
			join tblCommStruct as cs on cs.CommStructID = cc.CommStructID 
			join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
			join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid 
			join #startdates t on t.commstructid = cs.commstructid
			left join tblcommbatch b on b.commbatchid = cc.commbatchid
		WHERE
			cc.chargebackdate between t.startdate and @enddate
	) d
	join #startdates t on t.commstructid = d.commstructid and chargebackdate between t.startdate and @enddate -- needed to filter out dateadds that fall out of the date range
	join tblcompany comp on comp.companyid = d.companyid
	join tblcommstruct cs on cs.commstructid = d.commstructid
	join tblcommrec cr on cr.commrecid = cs.commrecid
	join tblcommscen s on s.commscenid = cs.commscenid
	join tblagency a on a.agencyid = s.agencyid
	left join tblbouncedreasons br on br.bouncedid = d.bouncedreason
	group by
		cr.abbreviation, cr.commrecid, a.importabbr, d.commstructid, comp.name, convert(varchar(10),d.chargebackdate,101), br.bounceddescription, d.description

	union all

	select 
		cr.abbreviation + ' (' + cast(cr.commrecid as varchar(3)) + ') ' + a.importabbr + ' (' + cast(d.commstructid as varchar(5)) + ')' [commrec],
		comp.name [company], 
		convert(varchar(10),chargebackdate,101) [date], 
		'VOID - ' + clientstatus [detail],
		-sum(amount) [amount]
	from (
		-- by chargeback date
		SELECT
			cs.commstructid, 
			r.entrytypeid,
			case when datediff(day,cc.chargebackdate,b.batchdate) = 0 then dateadd(dd,-1,cc.chargebackdate) else cc.chargebackdate end [chargebackdate], -- checksite chargebacks batched the same day need to be placed in the previous day's activity
			-cc.amount [amount],
			s.name [clientstatus],
			cs.companyid
		FROM
			tblCommChargeback as cc
			join tblRegisterPayment as rp on rp.RegisterPaymentID = cc.RegisterPaymentID and rp.voided = 1 and rp.bounced = 0
			join tblRegister as r on r.RegisterID = rp.feeregisterid
			join tblClient as c on c.ClientID = r.ClientID 
			join tblclientstatus s on s.clientstatusid = c.currentclientstatusid
			join tblCommStruct as cs on cs.CommStructID = cc.CommStructID 
			join tblusercommrecaccess ucra on ucra.commrecid = cs.commrecid and ucra.userid = @userid	
			join tblusercompanyaccess uca on uca.companyid = cs.companyid and uca.userid = ucra.userid 
			join #startdates t on t.commstructid = cs.commstructid
			left join tblcommbatch b on b.commbatchid = cc.commbatchid
		WHERE
			cc.chargebackdate between t.startdate and @enddate
	) d
	join #startdates t on t.commstructid = d.commstructid and chargebackdate between t.startdate and @enddate -- needed to filter out dateadds that fall out of the date range
	join tblcompany comp on comp.companyid = d.companyid
	join tblcommstruct cs on cs.commstructid = d.commstructid
	join tblcommrec cr on cr.commrecid = cs.commrecid
	join tblcommscen s on s.commscenid = cs.commscenid
	join tblagency a on a.agencyid = s.agencyid
	group by
		cr.abbreviation, cr.commrecid, a.importabbr, d.commstructid, comp.name, convert(varchar(10),d.chargebackdate,101), clientstatus

) d

select *
from #chargebackdetail
order by commrec, company, detail, [date]


select distinct e.displayname [feetype]
from #comms c
join tblentrytype e on e.entrytypeid = c.entrytypeid
order by feetype


select distinct detail
from #chargebackdetail
order by detail


drop table #comms
drop table #temp2
drop table #startdates
drop table #results
drop table #chargebackdetail


end
GO
/****** Object:  StoredProcedure [dbo].[stp_GetMultipleAchforDate]    Script Date: 09/10/2010 18:33:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_GetMultipleAchforDate]
@startDate datetime = null,
@days int = null
AS
Begin
--if start date is empty. Get Today's date
if @startDate is null Set @startDate = GetDate()

Set @startDate = Cast( convert(varchar, @startDate, 101) as DateTime)

--if start date is weekend or bank holiday. Get the previous collection date
While DateName(dw, @startDate) in ('Saturday', 'Sunday') or Exists(Select bankholidayid From tblBankHoliday Where Date = @startDate)
Begin
	Set @startDate = DateAdd(d, -1, @startDate)
End

--Create Report Table
Declare @reportDate datetime 
set @reportDate = GetDate()
--Create Collection Day table
Declare @collectionday table (ReportDate datetime, CollectionDate datetime, ScheduledDate datetime)
--if days is null or <= zero then use default days = 1
if (isnull(@days, 0) <= 0) Set @days = 1

Declare @dayCount int
Set @dayCount = 0
Declare @date datetime
Set @date = @startDate
Declare @colldate datetime 
--Set @colldate = @startDate

--fill the collection days
While @dayCount <= @days 
begin
	if DateName(dw, @date) not in ('Saturday', 'Sunday') and not Exists(Select bankholidayid From tblBankHoliday Where [Date] = @date)
	begin
		Set @colldate = @date
		Set @dayCount = @dayCount + 1
	end
	if @dayCount > @days BREAK
	--insert date	
	set @date = DateAdd(d,1, @date)
	Insert Into @collectionday(ReportDate, CollectionDate, ScheduledDate) Values (@reportDate, @colldate, @date)
end

--Create ClientDeposit Table
declare @deposits table (DepositId int identity(1,1) not null,
						 ClientId int,
						 ScheduledDate datetime,
						 DepositDay int,
						 Amount money,
						 ACHType varchar(50),
						 ACHId int,
						 MultiDepositClient bit,
						 RoutingNumber varchar(50),
						 BankAccountNumber varchar(50),
						 AdhocZeroDollarRule bit default 0)



declare @ScheduledDate datetime
--Select @ScheduledDate = @startdate
declare @lastDayofMonth bit

declare sched_days cursor for
select distinct ScheduledDate From @collectionday
order by ScheduledDate

Open sched_days

Fetch Next From sched_days Into @ScheduledDate

While @@FETCH_STATUS = 0
Begin
	Select @lastDayofMonth = Case When
		Day(@ScheduledDate) = 
		Day(DateAdd(d,-1, DateAdd(m,1,cast((convert(varchar,year(@ScheduledDate)) + '-' + convert(varchar,month(@ScheduledDate)) + '-' + '1') as datetime))))
		Then 1
		Else 0
	End

	--Insert ACH (single deposit)
	Insert Into @deposits(ClientId, ScheduledDate, DepositDay, Amount, ACHType, ACHId, MultiDepositClient, RoutingNumber, BankAccountNumber)
	SELECT
		c.ClientID,
		@ScheduledDate,
		c.DepositDay,
		c.DepositAmount,
		'ACH',
		c.clientId,
		c.MultiDeposit,
		c.BankRoutingNumber,
		c.BankAccountNumber
	FROM
		tblClient as c
	WHERE
		c.ClientID not in
		(	SELECT ClientID	FROM tblRuleACH
			WHERE StartDate <= @ScheduledDate and (EndDate is null or EndDate >= @ScheduledDate)
		) 
		and c.CurrentClientStatusID not in (15, 17, 18)
		and lower(c.DepositMethod) = 'ach'
		and	(c.DepositDay = day(@ScheduledDate) or (@lastdayofmonth = 1 and c.DepositDay >= day(@ScheduledDate)))
		and c.DepositStartDate is not null
		and c.DepositStartDate <= @ScheduledDate
		and c.DepositDay is not null
		and c.DepositDay > 0
		and c.MultiDeposit = 0
		--and c.clientid not in (SELECT clientid  FROM tblRegister WHERE ACHMonth = month(@ScheduledDate) and ACHYear = year(@ScheduledDate))
		
	--Insert ACH Rule(single deposit)
	Insert Into @deposits(ClientId, ScheduledDate, DepositDay, Amount, ACHType, AChId, MultiDepositClient, RoutingNumber, BankAccountNumber)
	SELECT
		c.ClientID,
		@ScheduledDate,
		r.DepositDay,
		r.DepositAmount,
		'ACH Rule',
		r.ruleachid,
		c.MultiDeposit,
		c.BankRoutingNumber,
		c.BankAccountNumber
	FROM
		tblRuleACH as r
		inner join tblClient as c on c.ClientID = r.ClientID
	WHERE
		r.RuleACHID in
		(SELECT
			min(RuleACHID)
		FROM
			tblRuleACH
		WHERE
			StartDate <= @ScheduledDate and	(EndDate is null or EndDate >= @ScheduledDate) 
			and	(r.DepositDay = day(@ScheduledDate) or (@lastdayofmonth = 1	and r.DepositDay >= day(@ScheduledDate)))
		GROUP BY
			ClientID
		)
	and c.CurrentClientStatusID not in (15, 17, 18)
	and lower(c.DepositMethod) = 'ach'
	and c.DepositStartDate <= @ScheduledDate
	and c.DepositStartDate is not null
	and c.DepositDay is not null
	and c.DepositDay > 0
	and c.MultiDeposit = 0
	--and c.clientid not in (SELECT clientid  FROM tblRegister WHERE ACHMonth = month(@ScheduledDate) and ACHYear = year(@ScheduledDate))

	--Insert ACH (MultiDeposit)
	Insert Into @deposits(ClientId, ScheduledDate, DepositDay, Amount, ACHType, AchId, MultiDepositClient, RoutingNumber, BankAccountNumber)
	SELECT
		c.ClientID,
		@ScheduledDate,
		d.DepositDay,
		d.DepositAmount,
		'ACH',
		d.ClientDepositId,
		c.MultiDeposit,
		ltrim(rtrim(b.RoutingNumber)),
		ltrim(rtrim(b.AccountNumber))
	FROM
		tblClient as c
		inner join tblClientDepositDay d on d.ClientID = c.ClientID
		left join tblClientBankAccount b on b.BankAccountID = d.BankAccountID
	WHERE
		d.ClientDepositID not in  
		(SELECT
				ClientDepositID
			FROM
				tblDepositRuleACH
			WHERE
				StartDate <= @ScheduledDate and	(EndDate is null or EndDate >= @ScheduledDate)
		) 
		and c.CurrentClientStatusID not in (15, 17, 18)
		and lower(d.DepositMethod) = 'ach'
		and	(d.DepositDay = day(@ScheduledDate) or (@lastdayofmonth = 1	and d.DepositDay >= day(@ScheduledDate)))
		and c.DepositStartDate is not null
		and c.DepositStartDate <= @ScheduledDate
		and c.MultiDeposit = 1
		and lower(d.Frequency) = 'month'
		and d.DeletedDate is null
		--and c.clientid not in (SELECT clientid  FROM tblRegister WHERE ACHMonth = month(@ScheduledDate) and ACHYear = year(@ScheduledDate))

	--Insert ACH Rule (MultiDeposit)
	Insert Into @deposits(ClientId, ScheduledDate, DepositDay, Amount, ACHType, AchId, MultiDepositClient, RoutingNumber, BankAccountNumber)
	SELECT
		c.ClientID,
		@ScheduledDate,
		r.DepositDay,
		r.DepositAmount,
		'ACH Rule',
		r.RuleAchId,
		c.MultiDeposit,
		ltrim(rtrim(b.RoutingNumber)),
		ltrim(rtrim(b.AccountNumber))
	FROM
		tblDepositRuleACH as r
		inner join tblClientDepositDay d on d.ClientDepositID = r.ClientDepositID
		left join tblClientBankAccount b on b.BankAccountID = r.BankAccountID
		inner join tblClient as c on c.ClientID = d.ClientID
	WHERE
		StartDate <= @ScheduledDate and	(EndDate is null or EndDate >= @ScheduledDate) 
		and	(r.DepositDay = day(@ScheduledDate) or (@lastdayofmonth = 1 and r.DepositDay >= day(@ScheduledDate)))
		and c.DepositStartDate <= @ScheduledDate
		and c.DepositStartDate is not null
		and c.CurrentClientStatusID not in (15, 17, 18)
		and c.MultiDeposit = 1
		and lower(d.Frequency) = 'month'
		and d.DeletedDate is null
		--and c.clientid not in (SELECT clientid  FROM tblRegister WHERE ACHMonth = month(@ScheduledDate) and ACHYear = year(@ScheduledDate))


	--Insert AdHoc
	Insert Into @deposits(ClientId, ScheduledDate, DepositDay, Amount, ACHType, AchId, MultiDepositClient, RoutingNumber, BankAccountNumber)
		SELECT
			a.ClientID,
			@ScheduledDate,
			day(@ScheduledDate),
			abs(a.DepositAmount),
			'Additional ACH',
			a.adhocachid,
			c.MultiDeposit,
			ltrim(rtrim(a.BankRoutingNumber)),
			ltrim(rtrim(a.BankAccountNumber))
		FROM
			tblAdHocACH as a
			inner join tblClient as c on c.ClientID = a.ClientID
		WHERE
			c.CurrentClientStatusID not in (15, 17, 18)
			and a.DepositDate = @ScheduledDate

	--Flag AdHocs if zero dollar rules
	Update @deposits Set
	AdhocZeroDollarRule = 1
	Where ACHType = 'Additional ACH'
	and MultiDepositClient = 0
	and ClientId in
	(select clientid from tblruleach 
	where depositamount = 0 
	and StartDate <= @ScheduledDate and	(EndDate is null or EndDate >= @ScheduledDate))

	Update @deposits Set
	AdhocZeroDollarRule = 1
	Where ACHType = 'Additional ACH'
	and MultiDepositClient = 1
	and ClientId in (select d.clientid from tbldepositruleach  r
					 inner join tblclientdepositday d on r.clientdepositid = d.clientdepositid
					 where r.depositamount = 0 
					 and r.StartDate <= @ScheduledDate and (r.EndDate is null or r.EndDate >= @ScheduledDate)
					 and d.deleteddate is null)

	Fetch Next From sched_days Into @ScheduledDate

End
Close sched_days
Deallocate sched_days

--Report Table

--Deposits Table
select * from @deposits

--Clients Table
Select Distinct c.Clientid, c.AccountNumber, p.FirstName + ' ' + p.LastName as ClientName, m.ShortCoName as SA, t.DisplayName as Trust, c.MultiDeposit As MultiDepositClient, @reportdate As ReportDate
from @deposits tmp --#t
inner join tblclient c on c.clientid = tmp.clientid
left join tblperson p on c.clientid = p.clientid and p.relationship = 'prime'
inner join tblcompany m on c.companyid = m.companyid
inner join tbltrust t on c.trustid = t.trustid
order by 3


Select Distinct ReportDate from @CollectionDay

--Table Collection Dates
Select Distinct ReportDate, CollectionDate from @CollectionDay
Order By CollectionDate

--Table Scheduled Dates
select c.ScheduledDate, c.CollectionDate, d.ProcBankDate,  b.[Name] as Holiday  from @collectionday c
inner join 
(Select Max(ScheduledDate) as ProcBankDate, CollectionDate from @collectionday group by CollectionDate) d on d.CollectionDate = c.CollectionDate
left join tblBankHoliday b on b.[Date] = c.ScheduledDate

--Exclude Items
delete from @deposits 
from @deposits d
inner join tblachwarning w 
on d.AchId = w.ItemId 
and d.AchType = w.ItemType 
and d.MultiDepositClient = w.MultiDeposit 
and d.ScheduledDate = w.Scheduled 

--Get clients with many achs in date range
Select  d.*, l.collectiondate
into #t
from @deposits d 
inner join @collectionday l on d.scheduleddate = l.scheduleddate 
left join
(Select d.clientid from @deposits d 
inner join @collectionday y on d.scheduleddate = y.scheduleddate
left join tblAchWarning w on d.AchId = w.ItemId and d.AchTYpe = w.ItemType and d.MultiDepositClient = w.MultiDeposit and d.ScheduledDate = w.Scheduled 
where d.amount > 0
and w.warningid is null
group by d.clientid 
having count(d.clientid) > 1) f on f.clientid = d.clientid
where (f.clientid is not null or d.AdhocZeroDollarRule = 1)
and d.amount > 0
order by d.clientid, l.collectiondate

--ACH Table
select * from #t

/*
select c.*, d.ProcBankDate, b.[Name] as Holiday  from @collectionday c
inner join 
(Select Max(ScheduledDate) as ProcBankDate, CollectionDate from @collectionday group by CollectionDate) d on d.CollectionDate = c.CollectionDate
left join tblBankHoliday b on b.[Date] = c.ScheduledDate


Select c.Clientid, c.AccountNumber, l.collectiondate, p.FirstName + ' ' + p.LastName as ClientName, m.ShortCoName as SA, t.DisplayName as Trust, d.* from @deposits d 
inner join tblclient c on c.clientid = d.clientid
left join tblperson p on c.clientid = p.clientid and p.relationship = 'prime'
inner join tblcompany m on c.companyid = m.companyid
inner join tbltrust t on c.trustid = t.trustid
inner join @collectionday l on d.scheduleddate = l.scheduleddate 
left join
(Select d.clientid from @deposits d --, c.collectiondate 
inner join @collectionday y on d.scheduleddate = y.scheduleddate 
where d.amount > 0
group by d.clientid --,c.collectiondate
having count(d.clientid) > 1) f on f.clientid = d.clientid
where (f.clientid is not null or d.AdhocZeroDollarRule = 1)
and d.amount > 0
order by f.clientid, l.collectiondate
*/

drop table #t

End
GO
/****** Object:  StoredProcedure [dbo].[stp_PopulateBankHolidays]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	This stored procedure populates the tblBankHoliday table
	with proposed holiday dates for a selected range of years 
*/
CREATE PROCEDURE [dbo].[stp_PopulateBankHolidays]
	@Year1 int,
	@Year2 int = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Validate Year
	
	SELECT @Year1 = DATEPART(year, CONVERT(datetime, CONVERT(varchar, @Year1) + '-01-01', 101))
	-- If Year2 is Null then use the current year
	SELECT @Year2 = DATEPART(year, CONVERT(datetime, CONVERT(varchar,isnull(@Year2, @Year1)) + '-01-01', 101))
	-- Year2 must be equal or greater than Year1 
	IF (@Year2 < @Year1)
	BEGIN
		RAISERROR('ERROR: INVALID YEAR RANGE', 10, 1)
		RETURN
	END
	
	-- Delete existing holidays for the date range
	DELETE FROM tblBankHoliday WHERE DATEPART(year, [date]) BETWEEN @Year1 AND @Year2
	
	-- Populate tables
	DECLARE @FixedDateHoliday Table([Month] int, [Day] int, [Name] varchar(32))
	DECLARE @VarDateHoliday Table([Month] int, [Weekday] int, [Position] int, [Name] varchar(32)) 
	
	-- New Years Day, January 1
	INSERT INTO @FixedDateHoliday([Month], [Day], [Name]) VALUES(1, 1, 'New Year’s Day')
	-- Independence Day    July 4  
	INSERT INTO @FixedDateHoliday([Month], [Day], [Name]) VALUES(7, 4, 'Independence Day')
	-- Veteran’s Day    November 11		 
	INSERT INTO @FixedDateHoliday([Month], [Day], [Name]) VALUES(11, 11, 'Veteran’s Day')
	-- Christmas Day   December 25   
	INSERT INTO @FixedDateHoliday([Month], [Day], [Name]) VALUES(12, 25, 'Christmas Day')
	
	-- Weekday 1-Sun 2-Mon 3-Tue 4-Wed 5-Thu 6-Fri 7-Sat  - Assuming SET DATEFIRST 7
	-- Position -1 Last
	-- Martin L King's Birthday     3rd Monday in January   
	INSERT INTO @VarDateHoliday([Month], [Weekday], [Position], [Name]) VALUES(1, 2, 3, 'Martin Luther King, Jr. Day')       
	-- President’s Day   3rd Monday in February  Monday 
	INSERT INTO @VarDateHoliday([Month], [Weekday], [Position], [Name]) VALUES(2, 2, 3, 'President’s Day')      
	-- Memorial Day   Last Monday in May - Since Position is -1 Set the Month to the next Month
    INSERT INTO @VarDateHoliday([Month], [Weekday], [Position], [Name]) VALUES(6, 2, -1, 'Memorial Day')    
	-- Labor Day   1st Monday in September		
	INSERT INTO @VarDateHoliday([Month], [Weekday], [Position], [Name]) VALUES(9, 2, 1, 'Labor Day') 
	-- Columbus Day   2nd Monday in October		 
	INSERT INTO @VarDateHoliday([Month], [Weekday], [Position], [Name]) VALUES(10, 2, 2, 'Columbus Day') 
	-- Thanksgiving Day    4th Thursday in November  
	INSERT INTO @VarDateHoliday([Month], [Weekday], [Position], [Name]) VALUES(11, 5, 4, 'Thanksgiving Day')

	DECLARE @CurrentYear int
	SELECT @CurrentYear = @Year1

	WHILE @CurrentYear <= @Year2
	BEGIN
		-- Calculate Dates
		-- If holiday is fixed on an exact day, and it is a Satudardy the banks are open the preceding Saturday 
		-- If holiday is fixed on an exact day, and it is a Sunday the banks are closed the following Monday
		INSERT INTO tblBankHoliday([Date], [Name])
		SELECT CASE DATEPART(weekday,
							CONVERT(datetime,
								CONVERT(varchar, @CurrentYear) + '-' +
								CONVERT(varchar, [Month]) + '-' +
								CONVERT(varchar, [Day]) 
							, 101))
					/*WHEN 7 THEN 
						-- Date is Saturday. Banks are open the preceding day so don't set Friday as a Holiday.
						DATEADD(day, -1, CONVERT(datetime,
								CONVERT(varchar, @CurrentYear) + '-' +
								CONVERT(varchar, [Month]) + '-' +
								CONVERT(varchar, [Day]) 
							, 101))*/
					WHEN 1 THEN
						-- Date is Sunday. Banks are closed the following day so set Monday as a holiday
						DATEADD(day, 1, CONVERT(datetime,
								CONVERT(varchar, @CurrentYear) + '-' +
								CONVERT(varchar, [Month]) + '-' +
								CONVERT(varchar, [Day]) 
							, 101))
					ELSE
						CONVERT(datetime,
								CONVERT(varchar,@CurrentYear) + '-' +
								CONVERT(varchar,[Month]) + '-' +
								CONVERT(varchar,[Day]) 
							, 101)
				END
			AS [Date],
			[Name] 
		FROM @FixedDateHoliday
		UNION
		SELECT 
			DATEADD(wk, 
			DATEDIFF(wk, ([Position] - 1) * (-6) , 
			DATEADD(dd, 8 - [Weekday] - 
			DATEPART(day, CONVERT(datetime, CONVERT(varchar, @CurrentYear) + '-' + CONVERT(varchar, [Month]) + '-01', 101)),
						  CONVERT(datetime, CONVERT(varchar, @CurrentYear) + '-' + CONVERT(varchar, [Month]) + '-01', 101))), [Weekday] - 2) 
		AS [Date],
		[Name]
		FROM @VarDateHoliday

		-- Increment Year
		SELECT @CurrentYear = @CurrentYear + 1
	END 
END
GO
/****** Object:  StoredProcedure [dbo].[get_IsBankHoliday]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[get_IsBankHoliday]
(
	@date datetime
)
AS

BEGIN

SET NOCOUNT ON

SELECT
	CAST(COUNT(BankHolidayId) AS int) AS IsBankHoliday
FROM
	tblBankHoliday
WHERE
	Year(@date) = Year(Date) AND
	Month(@date) = Month(Date) AND
	Day(@date) = Day(Date)

END
GO
/****** Object:  StoredProcedure [dbo].[stp_NachaCabinetDups]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NachaCabinetDups] as
begin

-- Colonial entries should have 2 entries per commbatchtransferid that offset eachother in tblnacharegister.
select [type], trustid, typeid, count(typeid) [cnt]
from tblnachacabinet
where [type] = 'CommbatchTransferID'
	and trustid = 20
	-- known dups, issues already been resolved. should not need to add to this list but can if needed
	and typeid not in (
		51001,
		51662,
		56185,
		56187,
		56186,
		50487)
group by typeid, [type], trustid
having count(typeid) <> 2

union all

-- Checksite entries should have only 1 entry per commbatchtransferid. (no offset in tblnacharegister2)
select [type], trustid, typeid, count(typeid) [cnt]
from tblnachacabinet
where [type] = 'CommbatchTransferID'
	and trustid = 22
group by typeid, [type], trustid
having count(typeid) <> 1

end
GO
/****** Object:  StoredProcedure [dbo].[_stp_PayCommission_TEST]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[_stp_PayCommission_TEST]
(
	@registerpaymentid int
)
as

declare @clientid int
declare @clientenrolled datetime
declare @agencyid int
declare @commscenid int

declare @percenttotal money
declare @amounttotal money
declare @amountpaid money
declare @amountleft money
declare @lastcommpayid int

declare @defaultcommscenid int
declare @defaultcommstructid int
declare @entrytypeid int
declare @percentleft money
declare @parentcommrecid int
declare @CompanyID int
declare @retention int

create table #tmpcommpay
(
	registerpaymentid int,
	commstructid int,
	[percent] money,
	amount money
)


-- (1) get client
select
	@clientid = clientid
from
	tblregisterpayment inner join
	tblregister on tblregisterpayment.feeregisterid = tblregister.registerid
where
	tblregisterpayment.registerpaymentid = @registerpaymentid


-- get created date for client
select
	@clientenrolled = created,
	@CompanyID = CompanyID,
	@agencyid = agencyid
from
	tblclient
where
	clientid = @clientid	


-- assuming a client was found...
if not @clientid is null
	begin
	
		select @retention = datediff(m,@clientenrolled,getdate())

		if (day(@clientenrolled) > day(getdate())) begin
			set @retention = @retention - 1
		end	

		-- assuming an agency was found for this client...
		if not @agencyid is null
			begin

				-- (2) get commission scenario
				select
					@commscenid = commscenid
				from
					tblcommscen
				where
					agencyid = @agencyid and
					startdate <= @clientenrolled and
					(
						enddate is null or
						enddate >= cast(convert(char(10), @clientenrolled, 101) as datetime)
					) and
					@retention between retentionfrom and retentionto

--				-- get default commission scenario if there is no commscen found for this client
--				if @commscenid is null
--					begin
--						select
--							@commscenid = commscenid
--						from
--							tblcommscen
--						where
--							[default] = 1
--							
--						-- Log
--						insert tblDefaultScenarioLog (ClientID,ClientEnrolled,AgencyID,RegisterPaymentID) values (@clientid,@clientenrolled,@agencyid,@registerpaymentid)
--					end

				-- assuming a commission scenario (or default commscen) was found for this client....
				if not @commscenid is null
					begin
						set @parentcommrecid = null
						
						select @parentcommrecid = r.commrecid
						from tblclient c 
						inner join tblcommrec r on r.companyid = c.companyid
						where c.clientid = @clientid and r.istrust = 1 and not c.companyid is null

						print 'Running _stp_PayCommissionRec_TEST..'

						-- (3) recursively loop recipients in the structure for this
						--     commission scenario and write out payments
						exec _stp_PayCommissionRec_TEST @registerpaymentid, @commscenid, @parentcommrecid, @CompanyID

					end -- comm scen exists
			end -- agency exists
	end -- client exists


-- (4) Check for unused overages
select
	@amounttotal = coalesce(amount, 0)
from
	tblregisterpayment
where
	registerpaymentid = @registerpaymentid

select
	@amountpaid = coalesce(sum(amount), 0)
from
	#tmpcommpay
where
	registerpaymentid = @registerpaymentid

if (@amounttotal = 0)
	begin
		print 'Error: Divide by zero!'
	end
else
begin
	set @amountleft = @amounttotal - @amountpaid
	set @percentleft = @amountleft / @amounttotal

	if @amountleft > 0
		begin
			print 'Amount left ' + cast(@amountleft as varchar(10))

--			-- (4.a) find and fill the entrytypeid of this payment
--			select
--				@entrytypeid = tblregister.entrytypeid
--			from
--				tblregisterpayment inner join
--				tblregister on tblregisterpayment.feeregisterid = tblregister.registerid
--			where
--				tblregisterpayment.registerpaymentid = @registerpaymentid
--
--
--			-- (4.b) find and fill total percent for this commscen and fee type
--			select
--				@percenttotal = isnull(sum(cf.[percent]), 0)
--			from
--				tblcommfee cf 
--				join tblcommstruct cs on cf.commstructid = cs.commstructid
--			where
--				cf.entrytypeid = @entrytypeid
--				and cs.commscenid = @commscenid
--				and cs.companyid = @companyid
--
--
--			-- (4.c) determine if total percent is 100% - meaning all should have gone to recipients
--			if @percenttotal = 1
--				begin
--
--					-- if any positive amount is left, give it to the last recipient for this payment
--					select top 1
--						@lastcommpayid = commpayid
--					from
--						tblcommpay
--					where
--						registerpaymentid = @registerpaymentid
--					order by
--						commpayid desc
--
--					update
--						tblcommpay
--					set
--						amount = amount + @amountleft
--					where
--						commpayid = @lastcommpayid
--
--				end
--			else -- (4.d)
--				begin
--
--					-- find and fill the default comm scenario
--					select
--						@defaultcommscenid = commscenid
--					from
--						tblcommscen
--					where
--						[default] = 1
--
--					if not @defaultcommscenid is null and not @entrytypeid is null
--						begin
--
--							-- linking from the default commscen, grab the first commstruct that has the same fee type of this payment
--							select
--								@defaultcommstructid = tblcommstruct.commstructid
--							from
--								tblcommfee
--								join tblcommstruct on tblcommfee.commstructid = tblcommstruct.commstructid
--								join tblcommscen on tblcommstruct.commscenid = tblcommscen.commscenid
--							where
--								tblcommscen.commscenid = @defaultcommscenid
--								and tblcommfee.entrytypeid = @entrytypeid
--								and tblcommstruct.companyid = @companyid
--
--
--							if not @defaultcommstructid is null
--								begin
--
--									-- write out payment
--									insert into tblcommpay
--									(
--										registerpaymentid,
--										commstructid,
--										[percent],
--										amount
--									)
--									values
--									(
--										@registerpaymentid,
--										@defaultcommstructid,
--										@percentleft,
--										@amountleft
--									)
--								end
--
--					end -- @defaultcommstructid is null
--				end -- not @percenttotal = 100
		end -- amountleft > 0

select * from #tmpcommpay
drop table #tmpcommpay

end
GO
/****** Object:  StoredProcedure [dbo].[stp_PayCommission]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayCommission]
(
	@registerpaymentid int
)
as


-------------------------------------------------------------------------------------------------------
-- LOGIC FOR COMMISSION PAYMENT:
-- (1) Find client for this payment
-- (2) Find commission scenario for client.  If commission scenario is not found, use
--     the default commission scenario
-- (3) In order (RLTD), loop through recipient recursively and fire off commissions to be paid
-- (4) After looping and handing out commissions, check to make sure that there isn't a small
--     overage left to be assigned
--     (a) find and fill the entrytypeid of this payment
--     (b) find and fill total percent for this commscen and fee type
--     (c) If the total percent used is 100, then all overages should be small (penny or two)
--         and should be assigned to the last recipient.
--     (d) If the total percent used is not equal to 100, then any overage is planned and
--         should go to the default commission structure
-------------------------------------------------------------------------------------------------------


-- discretionary variables
declare @clientid int
declare @clientenrolled datetime
declare @agencyid int
declare @commscenid int

declare @percenttotal money
declare @amounttotal money
declare @amountpaid money
declare @amountleft money
declare @lastcommpayid int

declare @defaultcommscenid int
declare @defaultcommstructid int
declare @entrytypeid int
declare @percentleft money
declare @parentcommrecid int
declare @CompanyID int
declare @retention int


-- (1) get client
select
	@clientid = clientid
from
	tblregisterpayment inner join
	tblregister on tblregisterpayment.feeregisterid = tblregister.registerid
where
	tblregisterpayment.registerpaymentid = @registerpaymentid


-- get created date for client
select
	@clientenrolled = created,
	@CompanyID = CompanyID,
	@agencyid = agencyid
from
	tblclient
where
	clientid = @clientid	


-- assuming a client was found...
if not @clientid is null
	begin
	
		select @retention = datediff(m,@clientenrolled,getdate())

		if (day(@clientenrolled) > day(getdate())) begin
			set @retention = @retention - 1
		end	

		-- assuming an agency was found for this client...
		if not @agencyid is null
			begin

				-- (2) get commission scenario
				select
					@commscenid = commscenid
				from
					tblcommscen
				where
					agencyid = @agencyid and
					startdate <= @clientenrolled and
					(
						enddate is null or
						enddate >= cast(convert(char(10), @clientenrolled, 101) as datetime)
					) and
					@retention between retentionfrom and retentionto

				-- get default commission scenario if there is no commscen found for this client
				if @commscenid is null
					begin
						select
							@commscenid = commscenid
						from
							tblcommscen
						where
							[default] = 1
							
						-- Log
						insert tblDefaultScenarioLog (ClientID,ClientEnrolled,AgencyID,RegisterPaymentID) values (@clientid,@clientenrolled,@agencyid,@registerpaymentid)
					end

				-- assuming a commission scenario (or default commscen) was found for this client....
				if not @commscenid is null
					begin
						set @parentcommrecid = null
						
						select @parentcommrecid = r.commrecid
						from tblclient c 
						inner join tblcommrec r on r.companyid = c.companyid
						where c.clientid = @clientid and r.istrust = 1 and not c.companyid is null

						-- (3) recursively loop recipients in the structure for this
						--     commission scenario and write out payments
						exec stp_PayCommissionRec @registerpaymentid, @commscenid, @parentcommrecid, @CompanyID

					end -- comm scen exists
			end -- agency exists
	end -- client exists


-- (4) Check for unused overages
select
	@amounttotal = coalesce(amount, 0)
from
	tblregisterpayment
where
	registerpaymentid = @registerpaymentid

select
	@amountpaid = coalesce(sum(amount), 0)
from
	tblcommpay
where
	registerpaymentid = @registerpaymentid

if (@amounttotal = 0)
begin
	declare @cmdtxt varchar(255)
	set @cmdtxt = 'echo ' + cast(getdate() as nvarchar(25)) + ' Error: Divide by Zero! Client: ' + cast(@clientid as nvarchar(25)) + ' >> \\Nas01\process\Service_Logs\PayFee_Log.log'
	exec master..xp_cmdshell @cmdtxt
	print 'Error: Divide by zero!'
end
else
begin
	set @amountleft = @amounttotal - @amountpaid
	set @percentleft = @amountleft / @amounttotal


	if @amountleft > 0
		begin

			-- (4.a) find and fill the entrytypeid of this payment
			select
				@entrytypeid = tblregister.entrytypeid
			from
				tblregisterpayment inner join
				tblregister on tblregisterpayment.feeregisterid = tblregister.registerid
			where
				tblregisterpayment.registerpaymentid = @registerpaymentid


			-- (4.b) find and fill total percent for this commscen and fee type
			select
				@percenttotal = isnull(sum(cf.[percent]), 0)
			from
				tblcommfee cf 
				join tblcommstruct cs on cf.commstructid = cs.commstructid
			where
				cf.entrytypeid = @entrytypeid
				and cs.commscenid = @commscenid
				and cs.companyid = @companyid


			-- (4.c) determine if total percent is 100% - meaning all should have gone to recipients
			if @percenttotal = 1
				begin

					-- if any positive amount is left, give it to the last recipient for this payment
					select top 1
						@lastcommpayid = commpayid
					from
						tblcommpay
					where
						registerpaymentid = @registerpaymentid
					order by
						commpayid desc

					update
						tblcommpay
					set
						amount = amount + @amountleft
					where
						commpayid = @lastcommpayid

				end
			else -- (4.d)
				begin

					-- find and fill the default comm scenario
					select
						@defaultcommscenid = commscenid
					from
						tblcommscen
					where
						[default] = 1

					if not @defaultcommscenid is null and not @entrytypeid is null
						begin

							-- linking from the default commscen, grab the first commstruct that has the same fee type of this payment
							select
								@defaultcommstructid = tblcommstruct.commstructid
							from
								tblcommfee
								join tblcommstruct on tblcommfee.commstructid = tblcommstruct.commstructid
								join tblcommscen on tblcommstruct.commscenid = tblcommscen.commscenid
							where
								tblcommscen.commscenid = @defaultcommscenid
								and tblcommfee.entrytypeid = @entrytypeid
								and tblcommstruct.companyid = @companyid


							if not @defaultcommstructid is null
								begin

									-- write out payment
									insert into tblcommpay
									(
										registerpaymentid,
										commstructid,
										[percent],
										amount
									)
									values
									(
										@registerpaymentid,
										@defaultcommstructid,
										@percentleft,
										@amountleft
									)
								end

					end -- @defaultcommstructid is null
				end -- not @percenttotal = 100
		end -- amountleft > 0

end
GO
/****** Object:  StoredProcedure [dbo].[stp_PayFeeAmount]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayFeeAmount]
(
	@registerid int,
	@amount money,
	@UserID int = 28
)

as


---------------------------------------------------------------------
-- LOGIC FOR TAKING AMOUNT:
-- (1) Insert register payment record against this fee
-- (2) Loop not-totally-used deposits, oldest first, for this
--      client; and insert register payment deposit records
--      finalizing each deposit that is completely used
--      (a) Do not use deposits marked VOID
--      (b) Do not use deposits marked BOUNCE
--      (c) deposits must be greater then 0
--      (d) deposits cannot be on hold
--      (e) records cannot have an adjustedrecordid (means record
--          is actually a fee adjustment record)
-- (3) Check fee, when finished, to determine if isfullypaid
--      should be set
-- (4) Pay commission
---------------------------------------------------------------------


-- discretionary variables
declare @clientid int
declare @registerpaymentid int
declare @trustid int

declare @depositid int
declare @depositneeded money
declare @deposittotal money
declare @depositalreadyused money
declare @deposithasleft money


-- (1) find and set client for this fee
select @clientid = r.clientid, @trustid = c.trustid from tblregister as r inner join tblclient as c on c.clientid = r.clientid where r.registerid = @registerid


-- (2) insert a register payment record against this fee for the full amount
insert into tblregisterpayment
(
	paymentdate,
	feeregisterid,
	amount,
	Created,
	Createdby,
	Modified,
	ModifiedBy
)
values
(
	getdate(),
	@registerid,
	@amount,
	getdate(),
	@UserID,
	getdate(),
	@UserID
)


-- (3) grab newly-inserted register payment
set @registerpaymentid = scope_identity()

if @trustid = 22
begin
	EXEC stp_InsertShadowFee @registerpaymentid
end


-- (4) reset deposit needed to entire amount
set @depositneeded = @amount


-- (5) while full amount has not been used by a deposit loop and get
while @depositneeded > 0
	begin

		-- (a) find the first not-totally-used deposit for this client in the register
		-- that isn't on hold, bounced or voided, or a fee adjustment
		select top 1 @depositid = registerid from tblregister
		where
			isfullypaid = 0 and
			void is null and
			bounce is null and
			clientid = @clientid and
			adjustedregisterid is null and
			amount > 0 and
			(
				hold is null or hold <= getdate() or [clear] <= getdate()
			)
		order by
			transactiondate, registerid

		if not @depositid is null -- found an available deposit
			begin

				-- (b) determine the original total amount of deposit
				select
					@deposittotal = coalesce(amount, 0)
				from
					tblregister
				where
					registerid = @depositid


				-- (c) determine how much deposit already spent and has left now
				--     but do not include any bounced or voided payment deposits
				select
					@depositalreadyused = coalesce(sum(amount), 0)
				from
					tblregisterpaymentdeposit
				where
					depositregisterid = @depositid and
					voided = 0 and
					bounced = 0


				set @deposithasleft = @deposittotal - @depositalreadyused

				-- (d) determine what deposit has in relation
				if @deposithasleft < @depositneeded -- too little, we need more
					begin

						-- insert payment deposit (taking only what was left)
						insert into tblregisterpaymentdeposit
						(
							registerpaymentid,
							depositregisterid,
							amount,
							Created,
							Createdby,
							Modified,
							ModifiedBy
						)
						values
						(
							@registerpaymentid,
							@depositid,
							@deposithasleft,
							getdate(),
							@UserID,
							getdate(),
							@UserID
						)

						-- subtract deposit used from needed
						set @depositneeded = @depositneeded - @deposithasleft

						-- set deposit as fully paid out
						update
							tblregister
						set
							isfullypaid = 1
						where
							registerid = @depositid

					end
				else if @deposithasleft = @depositneeded -- exactly enough
					begin

						-- insert payment deposit (taking everything left)
						insert into tblregisterpaymentdeposit
						(
							registerpaymentid,
							depositregisterid,
							amount,
							Created,
							Createdby,
							Modified,
							ModifiedBy
						)
						values
						(
							@registerpaymentid,
							@depositid,
							@deposithasleft,
							getdate(),
							@UserID,
							getdate(),
							@UserID
						)

						-- subtract deposit used from needed
						set @depositneeded = @depositneeded - @deposithasleft

						-- set deposit as fully paid out
						update
							tblregister
						set
							isfullypaid = 1
						where
							registerid = @depositid

					end
				else if @deposithasleft > @depositneeded -- too much, will have leftovers
					begin

						-- insert payment deposit (taking only deposit needed)
						insert into tblregisterpaymentdeposit
						(
							registerpaymentid,
							depositregisterid,
							amount,
							Created,
							Createdby,
							Modified,
							ModifiedBy
						)
						values
						(
							@registerpaymentid,
							@depositid,
							@depositneeded,
							getdate(),
							@UserID,
							getdate(),
							@UserID
						)

						-- subtract deposit used from needed
						set @depositneeded = @depositneeded - @depositneeded

					end
			end
		else -- did NOT find available deposit
			begin
				-- just exit loop (THIS SHOULD NEVER HAPPEN - there should always
				-- be enough deposit before getting here)
				break
			end

	end -- while loop


-- (6) Pay commission
--exec stp_PayCommission @registerpaymentid
GO
/****** Object:  StoredProcedure [dbo].[stp_CollectAdHocACHDeposits]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_CollectAdHocACHDeposits]
(
	@fordate datetime = null
)
as

/*

Modified By:	Gary Singh
Modified Date:	Jun-2010
Comments:		Excluded the views

*/

set nocount on
set ansi_warnings off

declare @adhocachid int
declare @clientid int
declare @companyid int
declare @trustid int
declare @acctnum varchar(50)
declare @display varchar(100)
declare @routingnumber varchar(9)
declare @accountnumber varchar(50)
declare @type varchar
declare @amount money
declare @initialdraftyn bit
declare @trustcommrecid int
declare @trustdisplay varchar(100)
declare @trustroutingnumber varchar(9)
declare @trustaccountnumber varchar(50)
declare @trusttype varchar
declare @trustispersonal bit

declare @registerid int
declare @nacharegisterid int
declare @hold datetime

declare @vtblAdHocDeposits table
(
	AdHocACHID int,
	ClientID int,
	CompanyID int,
	TrustID int,
	AcctNum varchar(50),
	Display varchar(100),
	RoutingNumber varchar(9),
	AccountNumber varchar(50),
	[Type] varchar,
	Amount money,
	InitialDraftYN bit,
	TrustCommRecID int,
	TrustDisplay varchar(100),
	TrustRoutingNumber varchar(9),
	TrustAccountNumber varchar(50),
	TrustType varchar,
	TrustIsPersonal bit
)


BEGIN TRY
	if @fordate is null
		begin
			set @fordate = dateadd(d, 1, getdate())
		end



	INSERT INTO
		@vtblAdHocDeposits
	SELECT
		a.AdHocACHID,
		a.ClientID,
		c.CompanyID,
		c.TrustID,
		c.AccountNumber as [AcctNum],
		ltrim(rtrim(p.FirstName)) + ' ' + ltrim(rtrim(p.LastName)) as [Display],
		a.BankRoutingNumber as RoutingNumber,
		a.BankAccountNumber as AccountNumber,
		isnull(a.BankType, 'C') as [Type],
		abs(a.DepositAmount) as Amount,
		a.InitialDraftYN,
		cr.CommRecID as TrustCommRecID,
		cr.Display as TrustDisplay,
		cr.RoutingNumber as TrustRoutingNumber,
		cr.AccountNumber as TrustAccountNumber,
		isnull(cr.[Type], 'C') as TrustType,
		~cr.IsCommercial as TrustIsPersonal
	FROM
		tblAdHocACH as a
		inner join tblClient as c on c.ClientID = a.ClientID
		inner join tblPerson as p on p.PersonID = c.PrimaryPersonID
		inner join tblCommRec as cr on cr.CompanyID = c.CompanyID and cr.IsTrust = 1
	WHERE
		c.CurrentClientStatusID not in (15, 17, 18, 22) -- Inactive, Cancelled, Completed, On Hold - Incorrect SDAA
		and cast(convert(varchar(10), a.DepositDate, 101) as datetime) = cast(convert(varchar(10), @fordate, 101) as datetime)
		and a.RegisterID is null
		--and a.ClientId not in (Select v.clientid from vw_ExcludeAchNo3PV v)

	declare cursor_CollectAdHocACHDeposits cursor forward_only read_only for
		SELECT
			AdHocACHID,
			ClientID,
			CompanyID,
			TrustID,
			AcctNum,
			Display,
			RoutingNumber,
			AccountNumber,
			[Type],
			Amount,
			InitialDraftYN,
			TrustCommRecID,
			TrustDisplay,
			TrustRoutingNumber,
			TrustAccountNumber,
			TrustType,
			TrustIsPersonal
		FROM
			@vtblAdHocDeposits

	open cursor_CollectAdHocACHDeposits

	fetch next from cursor_CollectAdHocACHDeposits into @adhocachid, @clientid, @companyid, @trustid, @acctnum, @display, @routingnumber, @accountnumber, @type, @amount, @initialdraftyn, @trustcommrecid, @trustdisplay, @trustroutingnumber, @trustaccountnumber, @trusttype, @trustispersonal

	while @@fetch_status = 0 
	begin

		if @trustid = 22 begin -- CheckSite
			set @hold = convert(datetime, convert(varchar (50), '1/1/2050', 101)) -- Hold until the deposit clears at CheckSite
		end else begin
			set @hold = convert(datetime, convert(varchar (50), @fordate, 101))
		end

		-- insert an sda deposit transaction (where the trandate and holddate are the process day)
		insert into tblregister
		(
			clientid,
			transactiondate,
			amount,
			entrytypeid,
			hold,
			holdby,
			InitialDraftYN
		)
		values
		(
			@clientid,
			cast(convert(varchar(50), @fordate, 101) as datetime),
			@amount,
			3, -- deposit
			@hold,
			24, -- importengine
			@initialdraftyn
		)

		set @registerid = scope_identity()


		if @trustid = 22 begin -- CheckSite
			-- write out debit against personal account
			insert into
				tblnacharegister2
				(
					[name],
					accountnumber,
					routingnumber,
					[type],
					amount,
					ispersonal,
					companyid,
					ShadowStoreId,
					RegisterId,
					ClientID,
					Flow
				)
			values
				(
					@display,
					@accountnumber,
					@routingnumber,
					@type,
					@amount,
					1, -- ispersonal
					@companyid,
					@acctnum,
					@registerid,
					@clientid,
					'credit' -- credit the shadow store
				)
		end
		else begin
			-- write out debit against personal account
			insert into tblnacharegister
			(
				[name],
				accountnumber,
				routingnumber,
				[type],
				amount,
				ispersonal,
				commrecid,
				companyid,
				clientid,
				RegisterID
			)
			values
			(
				@display + ' (' + cast(@clientID as varchar(15)) + ')',
				@accountnumber,
				@routingnumber,
				@type,
				-@amount,
				1,
				@trustcommrecid,
				@companyid,
				@clientid,
				@registerid
			)

			set @nacharegisterid = scope_identity()


			-- insert nacha cabinet records against this registerid
			insert into tblnachacabinet
			(
				nacharegisterid,
				[type],
				typeid,
				TrustID
			)
			values
			(
				@nacharegisterid,
				'RegisterID',
				@registerid,
				@trustid
			)


			-- write out credit for trust account
			insert into tblnacharegister
			(
				[name],
				accountnumber,
				routingnumber,
				[type],
				amount,
				ispersonal,
				commrecid,
				companyid
			)
			values
			(
				@trustdisplay,
				@trustaccountnumber,
				@trustroutingnumber,
				@trusttype,
				@amount,
				@trustispersonal,
				@trustcommrecid,
				@companyid
			)

			set @nacharegisterid = scope_identity()


			-- insert nacha cabinet records against this registerid
			insert into tblnachacabinet
			(
				nacharegisterid,
				[type],
				typeid,
				TrustID
			)
			values
			(
				@nacharegisterid,
				'RegisterID',
				@registerid,
				@trustid
			)
		
		end 


		-- update AdHoc ACH with new RegisterID
		update 
			tbladhocach 
		set
			registerid=@registerid
		where
			adhocachid=@adhocachid


		-- rebalance register for client
		-- don't do entire cleanup for client - that will do payments and auto-assign negogiation
		exec stp_DoRegisterRebalanceClient @clientid

		fetch next from cursor_CollectAdHocACHDeposits into @adhocachid, @clientid, @companyid, @trustid, @acctnum, @display, @routingnumber, @accountnumber, @type, @amount, @initialdraftyn, @trustcommrecid, @trustdisplay, @trustroutingnumber, @trustaccountnumber, @trusttype, @trustispersonal
	end

close cursor_CollectAdHocACHDeposits
deallocate cursor_CollectAdHocACHDeposits


if (SELECT count(*) FROM tblBankHoliday WHERE cast(convert(varchar(50), [Date], 101) as datetime) = cast(convert(varchar(50), @fordate, 101) as datetime)) > 0 or lower(datename(dw, @fordate)) = 'saturday' or lower(datename(dw, @fordate)) = 'sunday'
	begin
		declare @nextfordate datetime

		print cast(@fordate as nvarchar(25)) + ' is a NO BANK day, gathering next'

		set @nextfordate = dateadd(d, 1, @fordate)

		exec stp_CollectAdHocACHDeposits @nextfordate
	end
else
	begin
		print cast(@fordate as nvarchar(25)) + ' is a regular bank day'
	end
END TRY
BEGIN CATCH
	close cursor_CollectAdHocACHDeposits
	deallocate cursor_CollectAdHocACHDeposits

	declare @errorMessage nvarchar(MAX) set @errorMessage = ERROR_MESSAGE()
	declare @errorSeverity int set @errorSeverity = ERROR_SEVERITY()
	declare @errorState int set @errorState = ERROR_STATE()

	RAISERROR(@errorMessage, @errorSeverity, @errorState)
END CATCH
GO
/****** Object:  StoredProcedure [dbo].[stp_CollectACHDeposits]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_CollectACHDeposits]
(
	@fordate datetime = null
)

as

/*

Modified By:	Gary Singh
Modified Date:	Jun-2010
Comments:		Excluded the views

*/

set nocount on
set ansi_warnings off

declare @lastdayofmonth bit

declare @clientid int
declare @companyid int
declare @trustid int
declare @acctnum varchar(50)
declare @display varchar(100)
declare @routingnumber varchar(9)
declare @accountnumber varchar(50)
declare @type varchar
declare @amount money
declare @trustcommrecid int
declare @trustdisplay varchar(100)
declare @trustroutingnumber varchar(9)
declare @trustaccountnumber varchar(50)
declare @trusttype varchar
declare @trustispersonal bit

declare @registerid int
declare @nacharegisterid int
declare @hold datetime

declare @vtblDeposits table
(
	ClientID int,
	CompanyID int,
	TrustID int,
	AcctNum varchar(50),
	Display varchar(100),
	RoutingNumber varchar(9),
	AccountNumber varchar(50),
	[Type] varchar,
	Amount money,
	TrustCommRecID int,
	TrustDisplay varchar(100),
	TrustRoutingNumber varchar(9),
	TrustAccountNumber varchar(50),
	TrustType varchar,
	TrustIsPersonal bit
)
	

BEGIN TRY
	if @fordate is null
		begin
			set @fordate = dateadd(d, 1, getdate())
		end

	if @fordate = dateadd(dd, -(day(dateadd(mm, 1, @fordate))), dateadd(mm, 1, @fordate))
		begin
			set @lastdayofmonth = 1
		end
	else
		begin
			set @lastdayofmonth = 0
		end


	INSERT INTO
		@vtblDeposits
	SELECT
		drvDeposits.ClientID,
		drvDeposits.CompanyID,
		drvDeposits.TrustID,
		drvDeposits.AcctNum,
		drvDeposits.Display,
		drvDeposits.BankRoutingNumber as RoutingNumber,
		drvDeposits.BankAccountNumber as AccountNumber,
		isnull(drvDeposits.BankType, 'C') as [Type],
		abs(drvDeposits.DepositAmount) as Amount,
		trust.CommRecID as TrustCommRecID,
		trust.Display as TrustDisplay,
		trust.RoutingNumber as TrustRoutingNumber,
		trust.AccountNumber as TrustAccountNumber,
		isnull(trust.[Type], 'C') as TrustType,
		~trust.IsCommercial as TrustIsPersonal
	FROM
		(
			SELECT
				c.ClientID,
				c.CompanyID,
				c.TrustID,
				c.AccountNumber as AcctNum,
				p.FirstName + ' ' + p.LastName as Display,
				c.BankRoutingNumber,
				c.BankAccountNumber,
				c.BankType,
				c.DepositAmount,
				cr.CommRecID
			FROM
				tblClient as c
				inner join tblPerson as p on p.PersonID = c.PrimaryPersonID
				inner join tblCommRec as cr on cr.CompanyID = c.CompanyID and cr.IsTrust = 1
			WHERE
				c.ClientID not in
				(
					SELECT
						ClientID
					FROM
						tblRuleACH
					WHERE
						StartDate <= cast(convert(varchar(10), @fordate, 101) as datetime) and
						(
							EndDate is null
							or EndDate >= cast(convert(varchar(10), @fordate, 101) as datetime)
						)
				) and
				(
					c.DepositDay = day(@fordate) or
					(
						@lastdayofmonth = 1
						and c.DepositDay >= day(@fordate)
					)
				)
				and c.DepositStartDate <= cast(convert(varchar(10), @fordate, 101) as datetime)
				and c.CurrentClientStatusID not in (15, 17, 18, 22) -- Inactive, Cancelled, Completed, On Hold - Incorrect SDAA
				and lower(c.DepositMethod) = 'ach'
				and c.DepositDay is not null
				and c.DepositDay > 0
				and c.BankRoutingNumber is not null
				and c.BankAccountNumber is not null
				and len(c.BankRoutingNumber) > 0
				and len(c.BankAccountNumber) > 0
				and c.DepositStartDate is not null
				and c.MultiDeposit = 0
				--and c.ClientId not in (Select v.clientid from vw_ExcludeAchNo3PV v)

			UNION ALL

			SELECT
				c.ClientID,
				c.CompanyID,
				c.TrustID,
				c.AccountNumber as AcctNum,
				p.FirstName + ' ' + p.LastName as Display,
				r.BankRoutingNumber,
				r.BankAccountNumber,
				r.BankType,
				r.DepositAmount,
				cr.CommRecID
			FROM
				tblRuleACH as r
				inner join tblClient as c on c.ClientID = r.ClientID
				inner join tblPerson as p on PersonID = c.PrimaryPersonID
				inner join tblCommRec as cr on cr.CompanyID = c.CompanyID and cr.IsTrust = 1
			WHERE
				r.RuleACHID in
				(
					SELECT
						min(RuleACHID)
					FROM
						tblRuleACH
					WHERE
						StartDate <= cast(convert(varchar(10), @fordate, 101) as datetime) and
						(
							EndDate is null
							or EndDate >= cast(convert(varchar(10), @fordate, 101) as datetime)
						) and
						(
							r.DepositDay = day(@fordate) or
							(
								@lastdayofmonth = 1
								and r.DepositDay >= day(@fordate)
							)
						)
					GROUP BY
						ClientID
				)
				and c.DepositStartDate <= cast(convert(varchar(10), @fordate, 101) as datetime)
				and c.CurrentClientStatusID not in (15, 17, 18, 22) -- Inactive, Cancelled, Completed, On Hold - Incorrect SDAA
				and lower(c.DepositMethod) = 'ach'
				and c.DepositDay is not null
				and c.DepositDay > 0
				and c.BankRoutingNumber is not null
				and c.BankAccountNumber is not null
				and len(c.BankRoutingNumber) > 0
				and len(c.BankAccountNumber) > 0
				and c.DepositStartDate is not null
				and c.MultiDeposit = 0
				--and c.ClientId not in (Select v.clientid from vw_ExcludeAchNo3PV v)
				
		) as drvDeposits
		inner join tblCommRec as trust on trust.CommRecID = drvDeposits.CommRecID


	declare cursor_CollectACHDeposits cursor forward_only read_only for
		SELECT
			ClientID,
			CompanyID,
			TrustID,
			AcctNum,
			Display,
			RoutingNumber,
			AccountNumber,
			[Type],
			Amount,
			TrustCommRecID,
			TrustDisplay,
			TrustRoutingNumber,
			TrustAccountNumber,
			TrustType,
			TrustIsPersonal
		FROM
			@vtblDeposits
		WHERE
			Amount > 0

	open cursor_CollectACHDeposits

	fetch next from cursor_CollectACHDeposits into @clientid, @companyid, @trustid, @acctnum, @display, @routingnumber, @accountnumber, @type, @amount, @trustcommrecid, @trustdisplay, @trustroutingnumber, @trustaccountnumber, @trusttype, @trustispersonal

	while @@fetch_status = 0
	begin
		set @registerid = null

		SELECT
			@registerid = RegisterID
		FROM
			tblRegister
		WHERE
			ClientID = @clientid
			and ACHMonth = month(@fordate)
			and ACHYear = year(@fordate)

		if @registerid is null
		begin
				if @trustid = 22 begin -- CheckSite
					set @hold = convert(datetime, convert(varchar (50), '1/1/2050', 101)) -- Hold until the deposit clears at CheckSite
				end else begin
					set @hold = convert(datetime, convert(varchar (50), @fordate, 101))
				end

				-- insert an sda deposit transaction (where the trandate and holddate are the process day)
				insert into
					tblregister
					(
						clientid,
						transactiondate,
						amount,
						entrytypeid,
						hold,
						holdby,
						achmonth,
						achyear
					)
				values
					(
						@clientid,
						cast(convert(varchar(50), @fordate, 101) as datetime),
						@amount,
						3,
						@hold,
						24, -- import engine
						month(@fordate),
						year(@fordate)
					)

				set @registerid = scope_identity()


				if @trustid = 22 begin -- CheckSite
					-- write out debit against personal account
					insert into
						tblnacharegister2
						(
							[name],
							accountnumber,
							routingnumber,
							[type],
							amount,
							ispersonal,
							companyid,
							ShadowStoreId,
							RegisterId,
							ClientID,
							Flow
						)
					values
						(
							@display,
							@accountnumber,
							@routingnumber,
							@type,
							@amount,
							1, -- ispersonal
							@companyid,
							@acctnum,
							@registerid,
							@clientid,
							'credit' -- credit the shadow store
						)
				end
				else begin
					-- write out debit against personal account
					insert into
						tblnacharegister
						(
							[name],
							accountnumber,
							routingnumber,
							[type],
							amount,
							ispersonal,
							commrecid,
							companyid,
							clientid,
							registerid
						)
					values
						(
							@display + ' (' + cast(@clientID as varchar(15)) + ')',
							@accountnumber,
							@routingnumber,
							@type,
							-@amount,
							1, -- ispersonal
							@trustcommrecid,
							@companyid,
							@clientid,
							@registerid
						)

					set @nacharegisterid = scope_identity()


					-- insert nacha cabinet records against this registerid
					insert into tblnachacabinet
					(
						nacharegisterid,
						[type],
						typeid,
						TrustID
					)
					values
					(
						@nacharegisterid,
						'RegisterID',
						@registerid,
						@trustid
					)


					-- write out credit for trust account
					insert into tblnacharegister
					(
						[name],
						accountnumber,
						routingnumber,
						[type],
						amount,
						ispersonal,
						commrecid,
						companyid
					)
					values
					(
						@trustdisplay,
						@trustaccountnumber,
						@trustroutingnumber,
						@trusttype,
						@amount,
						@trustispersonal,
						@trustcommrecid,
						@companyid
					)

					set @nacharegisterid = scope_identity()

					-- insert nacha cabinet records against this registerid
					insert into tblnachacabinet
					(
						nacharegisterid,
						[type],
						typeid,
						TrustID
					)
					values
					(
						@nacharegisterid,
						'RegisterID',
						@registerid,
						@trustid
					)

				end

				-- rebalance register for client
				-- don't do entire cleanup for client - that will do payments and auto-assign negogiation
				exec stp_DoRegisterRebalanceClient @clientid
			end

		fetch next from cursor_CollectACHDeposits into @clientid, @companyid, @trustid, @acctnum, @display, @routingnumber, @accountnumber, @type, @amount, @trustcommrecid, @trustdisplay, @trustroutingnumber, @trustaccountnumber, @trusttype, @trustispersonal
	end
	
	close cursor_CollectACHDeposits
	deallocate cursor_CollectACHDeposits


	if (SELECT count(*) FROM tblBankHoliday WHERE cast(convert(varchar(50), [Date], 101) as datetime) = cast(convert(varchar(50), @fordate, 101) as datetime)) > 0 or lower(datename(dw, @fordate)) = 'saturday' or lower(datename(dw, @fordate)) = 'sunday'
		begin
			declare @nextfordate datetime

			print cast(@fordate as nvarchar(25)) + ' is a NO BANK day, gathering next'

			set @nextfordate = dateadd(d, 1, @fordate)

			exec stp_CollectACHDeposits @nextfordate
		end
	else
		begin
			print cast(@fordate as nvarchar(25)) + ' is a regular bank day'
		end
END TRY
BEGIN CATCH
	close cursor_CollectACHDeposits
	deallocate cursor_CollectACHDeposits

	declare @errorMessage nvarchar(MAX) set @errorMessage = ERROR_MESSAGE()
	declare @errorSeverity int set @errorSeverity = ERROR_SEVERITY()
	declare @errorState int set @errorState = ERROR_STATE()

	RAISERROR(@errorMessage, @errorSeverity, @errorState)
END CATCH
GO
/****** Object:  StoredProcedure [dbo].[stp_CollectACHMultiDeposits]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_CollectACHMultiDeposits]
(
	@fordate datetime = null
)

as

/*

Modified By:	Gary Singh
Modified Date:	Jun-2010
Comments:		Excluded the views

*/

set nocount on
set ansi_warnings off

declare @lastdayofmonth bit

declare @clientid int
declare @companyid int
declare @trustid int
declare @acctnum varchar(50)
declare @display varchar(100)
declare @routingnumber varchar(9)
declare @accountnumber varchar(50)
declare @type varchar
declare @amount money
declare @trustcommrecid int
declare @trustdisplay varchar(100)
declare @trustroutingnumber varchar(9)
declare @trustaccountnumber varchar(50)
declare @trusttype varchar
declare @trustispersonal bit
declare @clientdepositid int
declare @registerid int
declare @nacharegisterid int
declare @hold datetime

declare @vtblDeposits table
(
	ClientID int,
	CompanyID int,
	TrustID int,
	AcctNum varchar(50),
	Display varchar(100),
	RoutingNumber varchar(9),
	AccountNumber varchar(50),
	[Type] varchar,
	Amount money,
	TrustCommRecID int,
	TrustDisplay varchar(100),
	TrustRoutingNumber varchar(9),
	TrustAccountNumber varchar(50),
	TrustType varchar,
	TrustIsPersonal bit,
	ClientDepositID int
)
	

BEGIN TRY
	if @fordate is null
		begin
			set @fordate = dateadd(d, 1, getdate())
		end

	if @fordate = dateadd(dd, -(day(dateadd(mm, 1, @fordate))), dateadd(mm, 1, @fordate))
		begin
			set @lastdayofmonth = 1
		end
	else
		begin
			set @lastdayofmonth = 0
		end


	INSERT INTO
		@vtblDeposits
	SELECT
		drvDeposits.ClientID,
		drvDeposits.CompanyID,
		drvDeposits.TrustID,
		drvDeposits.AcctNum,
		drvDeposits.Display,
		drvDeposits.RoutingNumber,
		drvDeposits.AccountNumber,
		isnull(drvDeposits.BankType, 'C') as [Type],
		abs(drvDeposits.DepositAmount) as Amount,
		trust.CommRecID as TrustCommRecID,
		trust.Display as TrustDisplay,
		trust.RoutingNumber as TrustRoutingNumber,
		trust.AccountNumber as TrustAccountNumber,
		isnull(trust.[Type], 'C') as TrustType,
		~trust.IsCommercial as TrustIsPersonal,
		drvDeposits.ClientDepositID
	FROM
		(
			SELECT
				c.ClientID,
				c.CompanyID,
				c.TrustID,
				c.AccountNumber as AcctNum,
				p.FirstName + ' ' + p.LastName as Display,
				b.RoutingNumber,
				b.AccountNumber,
				b.BankType,
				d.DepositAmount,
				cr.CommRecID,
				d.ClientDepositID
			FROM
				tblClient as c
				inner join tblClientDepositDay d on d.ClientID = c.ClientID
				inner join tblClientBankAccount b on b.BankAccountID = d.BankAccountID
				inner join tblPerson as p on p.PersonID = c.PrimaryPersonID
				inner join tblCommRec as cr on cr.CompanyID = c.CompanyID and cr.IsTrust = 1
			WHERE
				d.ClientDepositID not in -- exclude deposits with active rules
				(
					SELECT
						ClientDepositID
					FROM
						tblDepositRuleACH
					WHERE
						StartDate <= cast(convert(varchar(10), @fordate, 101) as datetime) and
						(
							EndDate is null
							or EndDate >= cast(convert(varchar(10), @fordate, 101) as datetime)
						)
				) and
				(
					d.DepositDay = day(@fordate) or
					(
						@lastdayofmonth = 1
						and d.DepositDay >= day(@fordate)
					)
				)
				and c.DepositStartDate <= cast(convert(varchar(10), @fordate, 101) as datetime)
				and c.DepositStartDate is not null
				and c.CurrentClientStatusID not in (15, 17, 18, 22) -- Inactive, Cancelled, Completed, On Hold - Incorrect SDAA
				and c.MultiDeposit = 1
				and b.RoutingNumber is not null
				and b.AccountNumber is not null
				and len(b.RoutingNumber) > 0
				and len(b.AccountNumber) > 0
				and lower(d.Frequency) = 'month'
				and d.DeletedDate is null
				and lower(d.DepositMethod) = 'ach'
				--and c.ClientId not in (Select v.clientid from vw_ExcludeAchNo3PV v)

			UNION ALL

			SELECT
				c.ClientID,
				c.CompanyID,
				c.TrustID,
				c.AccountNumber as AcctNum,
				p.FirstName + ' ' + p.LastName as Display,
				b.RoutingNumber,
				b.AccountNumber,
				b.BankType,
				r.DepositAmount,
				cr.CommRecID,
				r.ClientDepositID
			FROM
				tblDepositRuleACH as r
				inner join tblClientDepositDay d on d.ClientDepositID = r.ClientDepositID
				inner join tblClientBankAccount b on b.BankAccountID = r.BankAccountID
				inner join tblClient as c on c.ClientID = d.ClientID
				inner join tblPerson as p on PersonID = c.PrimaryPersonID
				inner join tblCommRec as cr on cr.CompanyID = c.CompanyID and cr.IsTrust = 1
			WHERE
				StartDate <= cast(convert(varchar(10), @fordate, 101) as datetime) and
				(
					EndDate is null
					or EndDate >= cast(convert(varchar(10), @fordate, 101) as datetime)
				) and
				(
					r.DepositDay = day(@fordate) or
					(
						@lastdayofmonth = 1
						and r.DepositDay >= day(@fordate)
					)
				)
				and c.DepositStartDate <= cast(convert(varchar(10), @fordate, 101) as datetime)
				and c.DepositStartDate is not null
				and c.CurrentClientStatusID not in (15, 17, 18, 22) -- Inactive, Cancelled, Completed, On Hold - Incorrect SDAA
				and c.MultiDeposit = 1
				and b.RoutingNumber is not null
				and b.AccountNumber is not null
				and len(b.RoutingNumber) > 0
				and len(b.AccountNumber) > 0
				and lower(d.Frequency) = 'month'
				and d.DeletedDate is null
				--and c.ClientId not in (Select v.clientid from vw_ExcludeAchNo3PV v)

		) as drvDeposits
		inner join tblCommRec as trust on trust.CommRecID = drvDeposits.CommRecID


	declare cursor_CollectACHDeposits cursor forward_only read_only for
		SELECT
			ClientID,
			CompanyID,
			TrustID,
			AcctNum,
			Display,
			RoutingNumber,
			AccountNumber,
			[Type],
			Amount,
			TrustCommRecID,
			TrustDisplay,
			TrustRoutingNumber,
			TrustAccountNumber,
			TrustType,
			TrustIsPersonal,
			ClientDepositID
		FROM
			@vtblDeposits
		WHERE
			Amount > 0

	open cursor_CollectACHDeposits

	fetch next from cursor_CollectACHDeposits into @clientid, @companyid, @trustid, @acctnum, @display, @routingnumber, @accountnumber, @type, @amount, @trustcommrecid, @trustdisplay, @trustroutingnumber, @trustaccountnumber, @trusttype, @trustispersonal, @clientdepositid

	while @@fetch_status = 0
	begin
		set @registerid = null
		
		-- Each multi-deposit can only be drafted once a month
		SELECT
			@registerid = RegisterID
		FROM
			tblRegister
		WHERE
			ClientID = @clientid
			and ACHMonth = month(@fordate)
			and ACHYear = year(@fordate)
			and ClientDepositID = @clientdepositid

		if @registerid is null
		begin

			if @trustid = 22 begin -- CheckSite
				set @hold = convert(datetime, convert(varchar (50), '1/1/2050', 101)) -- Hold until the deposit clears at CheckSite
			end else begin
				set @hold = convert(datetime, convert(varchar (50), @fordate, 101))
			end

			-- insert an sda deposit transaction (where the trandate and holddate are the process day)
			insert into
				tblregister
				(
					clientid,
					transactiondate,
					amount,
					entrytypeid,
					hold,
					holdby,
					achmonth,
					achyear,
					clientdepositid
				)
			values
				(
					@clientid,
					cast(convert(varchar(50), @fordate, 101) as datetime),
					@amount,
					3,
					@hold,
					24, -- import engine
					month(@fordate),
					year(@fordate),
					@clientdepositid
				)

			set @registerid = scope_identity()


			if @trustid = 22 begin -- CheckSite
				-- write out debit against personal account
				insert into
					tblnacharegister2
					(
						[name],
						accountnumber,
						routingnumber,
						[type],
						amount,
						ispersonal,
						companyid,
						ShadowStoreId,
						RegisterId,
						ClientID,
						Flow
					)
				values
					(
						@display,
						@accountnumber,
						@routingnumber,
						@type,
						@amount,
						1, -- ispersonal
						@companyid,
						@acctnum,
						@registerid,
						@clientid,
						'credit' -- credit the shadow store
					)
			end
			else begin
				-- write out debit against personal account
				insert into
					tblnacharegister
					(
						[name],
						accountnumber,
						routingnumber,
						[type],
						amount,
						ispersonal,
						commrecid,
						companyid,
						clientid,
						registerid
					)
				values
					(
						@display + ' (' + cast(@clientID as varchar(15)) + ')',
						@accountnumber,
						@routingnumber,
						@type,
						-@amount,
						1, -- ispersonal
						@trustcommrecid,
						@companyid,
						@clientid,
						@registerid
					)

				set @nacharegisterid = scope_identity()


				-- insert nacha cabinet records against this registerid
				insert into tblnachacabinet
				(
					nacharegisterid,
					[type],
					typeid,
					TrustID
				)
				values
				(
					@nacharegisterid,
					'RegisterID',
					@registerid,
					@trustid
				)


				-- write out credit for trust account
				insert into tblnacharegister
				(
					[name],
					accountnumber,
					routingnumber,
					[type],
					amount,
					ispersonal,
					commrecid,
					companyid
				)
				values
				(
					@trustdisplay,
					@trustaccountnumber,
					@trustroutingnumber,
					@trusttype,
					@amount,
					@trustispersonal,
					@trustcommrecid,
					@companyid
				)

				set @nacharegisterid = scope_identity()

				-- insert nacha cabinet records against this registerid
				insert into tblnachacabinet
				(
					nacharegisterid,
					[type],
					typeid,
					TrustID
				)
				values
				(
					@nacharegisterid,
					'RegisterID',
					@registerid,
					@trustid
				)

			end

			-- rebalance register for client
			-- don't do entire cleanup for client - that will do payments and auto-assign negogiation
			exec stp_DoRegisterRebalanceClient @clientid
		end
		
		fetch next from cursor_CollectACHDeposits into @clientid, @companyid, @trustid, @acctnum, @display, @routingnumber, @accountnumber, @type, @amount, @trustcommrecid, @trustdisplay, @trustroutingnumber, @trustaccountnumber, @trusttype, @trustispersonal, @clientdepositid
	end
	
	close cursor_CollectACHDeposits
	deallocate cursor_CollectACHDeposits


	if (SELECT count(*) FROM tblBankHoliday WHERE cast(convert(varchar(50), [Date], 101) as datetime) = cast(convert(varchar(50), @fordate, 101) as datetime)) > 0 or lower(datename(dw, @fordate)) = 'saturday' or lower(datename(dw, @fordate)) = 'sunday'
		begin
			declare @nextfordate datetime

			print cast(@fordate as nvarchar(25)) + ' is a NO BANK day, gathering next'

			set @nextfordate = dateadd(d, 1, @fordate)

			exec stp_CollectACHMultiDeposits @nextfordate
		end
	else
		begin
			print cast(@fordate as nvarchar(25)) + ' is a regular bank day'
		end
END TRY
BEGIN CATCH
	close cursor_CollectACHDeposits
	deallocate cursor_CollectACHDeposits

	declare @errorMessage nvarchar(MAX) set @errorMessage = ERROR_MESSAGE()
	declare @errorSeverity int set @errorSeverity = ERROR_SEVERITY()
	declare @errorState int set @errorState = ERROR_STATE()

	RAISERROR(@errorMessage, @errorSeverity, @errorState)
END CATCH
GO
/****** Object:  StoredProcedure [dbo].[job_MorningRebalanceClients]    Script Date: 09/10/2010 18:32:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[job_MorningRebalanceClients]
	
AS

	DECLARE @ClientID INT
	DECLARE ClientCursor CURSOR LOCAL FAST_FORWARD FOR
	SELECT ClientID 
	FROM tblClient
	WHERE CurrentClientStatusID not in (15, 17, 18)

	OPEN ClientCursor
		FETCH NEXT FROM ClientCursor INTO @ClientID
		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC stp_DoRegisterRebalanceClient @ClientID
			FETCH NEXT FROM ClientCursor INTO @ClientID
		END
	CLOSE ClientCursor
	DEALLOCATE ClientCursor
GO
/****** Object:  StoredProcedure [dbo].[stp_Insert_CorrectRtrFeeAdjustment]    Script Date: 09/10/2010 18:33:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_Insert_CorrectRtrFeeAdjustment]
	(
		@AccountNumber NVARCHAR(50)
	)

AS

DECLARE @clientid INT
DECLARE @adjustedregisterid INT
DECLARE @amount MONEY
DECLARE @FeePct MONEY

SET @clientid = (SELECT clientid FROM tblclient WHERE accountnumber = @AccountNumber)
SET @FeePct = (SELECT [tblClient].[SetupFeePercentage] FROM [tblClient] WHERE [tblClient].[ClientID] = @ClientID)
IF @FeePct = 0.10 BEGIN SET @FeePct = 0.08 END

DECLARE @vtblAdjustments TABLE
(
	RetainerID INT,
	RetainerAdjustment MONEY
)

INSERT INTO
	@vtblAdjustments
SELECT
	RetainerID,
	RetainerAdjustment
FROM
	(
		SELECT
			(SELECT registerid FROM tblregister WHERE accountid = a.accountid AND entrytypeid = 2 AND void IS NULL) AS RetainerID,
			(-originalamount * @FeePct) - (SELECT amount FROM tblregister WHERE accountid = a.accountid AND entrytypeid = 2 AND void IS NULL) AS RetainerAdjustment
		FROM 
			tblaccount AS a
		WHERE
			clientid = @clientid

		UNION ALL

		SELECT
			(SELECT registerid FROM tblregister WHERE accountid = a.accountid AND entrytypeid = 42 AND void IS NULL) AS RetainerID,
			(-originalamount * 0.02) - (SELECT amount FROM tblregister WHERE accountid = a.accountid AND entrytypeid = 42 AND void IS NULL) AS RetainerAdjustment
		FROM 
			tblaccount AS a
		WHERE
			clientid = @clientid
	) AS derived
WHERE
	NOT RetainerAdjustment = 0
	AND RetainerID IS NOT NULL

DECLARE cursor_fix CURSOR FOR
	SELECT
		RetainerID,
		RetainerAdjustment
	FROM
		@vtblAdjustments
	WHERE
		ABS(RetainerAdjustment) > 0.1

OPEN cursor_fix

FETCH NEXT FROM cursor_fix INTO @adjustedregisterid, @amount

WHILE @@fetch_status = 0
BEGIN
	INSERT INTO tblregister (ClientId, TransactionDate, Amount, Balance, EntryTypeId, IsFullyPaid, Created, CreatedBy, AdjustedRegisterID, PFOBalance, SDABalance) VALUES (@clientid, GETDATE(), @amount,	0,	 -2,	0, GETDATE(), 531, @adjustedregisterid, 0.00, 0.00)

	EXEC stp_DoRegisterUpdateFeeAmount @adjustedregisterid

	FETCH NEXT FROM cursor_fix INTO @adjustedregisterid, @amount
END

CLOSE cursor_fix
DEALLOCATE cursor_fix

EXEC stp_doregisterrebalanceclient @clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_RebalanceChecksiteClients]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[stp_RebalanceChecksiteClients]
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ClientID INT	
	
	DECLARE ClientCursor CURSOR LOCAL FAST_FORWARD FOR
	SELECT ClientID 
	FROM tblClient
	WHERE TrustId = 22
	AND CurrentClientStatusID not in (15, 17, 18)

	OPEN ClientCursor
		FETCH NEXT FROM ClientCursor INTO @ClientID
		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC stp_DoRegisterRebalanceClient @ClientID
			FETCH NEXT FROM ClientCursor INTO @ClientID
		END
	CLOSE ClientCursor
	DEALLOCATE ClientCursor
END
GO
/****** Object:  StoredProcedure [dbo].[stp_RebalanceAllClients]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope
-- Create date: 05/01/2008
-- Description:	Rebalances all client transactions 
--              for all clients in one pass.
-- =============================================
CREATE PROCEDURE [dbo].[stp_RebalanceAllClients] 

AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ClientID INT	
	
	DECLARE ClientCursor CURSOR LOCAL FAST_FORWARD FOR
	SELECT ClientID 
	FROM tblClient
	WHERE CurrentClientStatusID not in (15, 17, 18)

	OPEN ClientCursor
		FETCH NEXT FROM ClientCursor INTO @ClientID
		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC stp_DoRegisterRebalanceClient @ClientID
			FETCH NEXT FROM ClientCursor INTO @ClientID
		END
	CLOSE ClientCursor
	DEALLOCATE ClientCursor
END
GO
/****** Object:  StoredProcedure [dbo].[stp_ClientImport]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_ClientImport]
(
	@companyid int,
	@agencyid int,
	@dbname nvarchar(100)
)

AS
/*
	History:
	05/30/08	jhernandez		Return @numclients and @importid. Used to open Shadow
										store accounts.
	07/14/2008	jhope				Added routine to check BankType and assign TrustIDs
										accordingly.
	09/13/2008 jhope				Modified code to accept new header names and added
										additional check on SSN without dashes in string for dup checkin
	04/07/2009 jhope				Modify to handle multiple deposits
	04/30/2009 jhope             Re-write spec change in layout
	08/03/2009 jhope				Capture depositday
	08/04/2009 jhope				Capture depositstartdate
	08/07/2009 jhope				If @1stDepositDay = 31 then change it to 30. Line 170
	10/27/2009 jhope				Added RemittName to client insert 'Bank of America NT & SA'
*/

declare @numclients int
declare @importid int
declare @importuserid int
declare @importdatetime datetime

set @importuserid = 24
set @importdatetime = getdate()
set @numclients = 0

declare @languageid int
declare @trustid int
declare @enrollmentid int
declare @clientid int
declare @personid int
declare @agencyname varchar (255)
declare @setupfeepercentage money
declare @settlementfeepercentage money
declare @monthlyfee money
declare @monthlyfeeday int
declare @additionalaccountfee money
declare @returnedcheckfee money
declare @overnightdeliveryfee money

BEGIN TRY
-- find and set the default language
select @languageid = languageid from tbllanguage where [default] = 1

-- find and set the default trust
select @trustid = trustid from tbltrust where [default] = 1

select @agencyname = [name] from tblagency where agencyid = @agencyid

set @setupfeepercentage = (select retainerfeepercent from tblagency where agencyid=@agencyid)
set @settlementfeepercentage = (select settlementfeepercent from tblagency where agencyid=@agencyid)
set @monthlyfee = (select maintenancefee from tblagency where agencyid=@agencyid)
set @monthlyfeeday = (select maintenancefeeday from tblagency where agencyid=@agencyid)
set @additionalaccountfee = (select additionalaccountfee from tblagency where agencyid=@agencyid)
set @returnedcheckfee = (select returnedcheckfee from tblagency where agencyid=@agencyid)
set @overnightdeliveryfee = (select overnightfee from tblagency where agencyid=@agencyid)

if @setupfeepercentage is null BEGIN select @setupfeepercentage = convert(money, value) from tblproperty where [name] = 'EnrollmentRetainerPercentage' end
if @settlementfeepercentage is null BEGIN select @settlementfeepercentage = convert(money, value) from tblproperty where [name] = 'EnrollmentSettlementPercentage' end
if @monthlyfee is null BEGIN select @monthlyfee = convert(money, value) from tblproperty where [name] = 'EnrollmentMonthlyFee' end
if @monthlyfeeday is null BEGIN select @monthlyfeeday = convert(int, value) from tblproperty where [name] = 'EnrollmentMonthlyFeeDay' end
if @additionalaccountfee is null BEGIN select @additionalaccountfee = convert(money, value) from tblproperty where [name] = 'EnrollmentAddAccountFee' end
if @returnedcheckfee is null BEGIN select @returnedcheckfee = convert(money, value) from tblproperty where [name] = 'EnrollmentReturnedCheckFee' end
if @overnightdeliveryfee is null BEGIN select @overnightdeliveryfee = convert(money, value) from tblproperty where [name] = 'EnrollmentOvernightFee' end

-- insert import record. *****Change the import file name to match the import file.
insert into tblimport
(
	imported,
	importedby,
	[database],
	[table],
	[description]
)
values
(
	@importdatetime,
	@importuserid,
	'DMS',
	@dbname,
	'New clients batch from agency ' + @agencyname
)

-- return freshly-inserted import record
set @importid = scope_identity()

-- loop the notes table and setup links
declare @first_name nvarchar (255)
declare @last_name nvarchar (255)
declare @debt_total money
declare @social_security_no nvarchar (255)
declare @date_received smalldatetime

--MultiDeposit variables all new
DECLARE @1stBankAccountId int
DECLARE @2ndBankAccountId int
DECLARE @3rdBankAccountId int
DECLARE @4thBankAccountId int
DECLARE @1stClientDepositId int
DECLARE @DraftRoutingNo nvarchar(255)
DECLARE @DraftAccountNo nvarchar(255)
DECLARE @DraftBankName nvarchar(255)
DECLARE @DraftDepositMethod nvarchar(255)
DECLARE @DraftCheckingSavings nvarchar(255)
DECLARE @1stCheckingSavings nvarchar(255)
DECLARE @1stDepositMethod nvarchar(255)
DECLARE @1stDepositDate smalldatetime
DECLARE @1stDepositDay int
DECLARE @1stDepositAmount money
DECLARE @2ndDepositDay int
DECLARE @2ndDepositAmount money
DECLARE @2ndRoutingNo nvarchar(255)
DECLARE @2ndAccountNo nvarchar(255)
DECLARE @2ndBankName nvarchar(255)
DECLARE @2ndDepositMethod nvarchar(255)
DECLARE @2ndCheckingSavings nvarchar(255)
DECLARE @3rdDepositDay int
DECLARE @3rdDepositAmount money
DECLARE @3rdRoutingNo nvarchar(255)
DECLARE @3rdAccountNo nvarchar(255)
DECLARE @3rdBankName nvarchar(255)
DECLARE @3rdDepositMethod nvarchar(255)
DECLARE @3rdCheckingSavings nvarchar(255)
DECLARE @4thDepositDay int
DECLARE @4thDepositAmount money
DECLARE @4thRoutingNo nvarchar(255)
DECLARE @4thAccountNo nvarchar(255)
DECLARE @4thBankName nvarchar(255)
DECLARE @4thDepositMethod nvarchar(255)
DECLARE @4thCheckingSavings nvarchar(255)
DECLARE @DuplicateBankAccount int

-- other saved "extra" fields
declare @lead_number nvarchar(255)
declare @date_sent smalldatetime
declare @missing_info nvarchar (255)
declare @DraftDate smalldatetime
declare @DraftAmount money
declare @1stBankRoutingNo nvarchar(255)
declare @1stBankAccountNo nvarchar(255)
declare @1stBankName nvarchar(255)
declare @AgentName nvarchar(255)
declare @InitialAgencyPercent money
declare @scenario int
DECLARE @comments nvarchar(255)
DECLARE @BankingType char(255)

EXEC ('declare cursor_a cursor for select [lead number], [Date Sent], [Date Received], [First Name], [Last Name], [Social Security No#], [1st Deposit Date], [1st Deposit Amount], [1st Bank Routing], [1st Bank Account], [1st Bank Name], [1st Deposit Method], [1st Checking Savings], [2nd Deposit Day], [2nd Deposit Amount], [2nd Bank Routing], [2nd Bank Account], [2nd Bank Name], [2nd Deposit Method], [2nd Checking Savings], [3rd Deposit Day], [3rd Deposit Amount], [3rd Bank Routing], [3rd Bank Account], [3rd Bank Name], [3rd Deposit Method], [3rd Checking Savings], [4th Deposit Day], [4th Deposit Amount], [4th Bank Routing], [4th Bank Account], [4th Bank Name], [4th Deposit Method], [4th Checking Savings], [Debt Total], [Missing Info], [Comments], [1st Draft Date], [1st Draft Amount], [1st Draft Routing No], [1st Draft Account No], [1st Draft Bank Name], [Draft Deposit Method], [Draft Checking Savings], [Agent Name], cast((cast(Retainer as int) * 1.0)/ 100 as decimal(5,2)) as [Retainer], [Banking Type] from DMSIMPORT..' + @dbname)
OPEN cursor_a
FETCH NEXT FROM cursor_a INTO @lead_number, @date_sent, @date_received, @first_name, @last_name, @social_security_no, @1stDepositDate, @1stDepositAmount, @1stBankRoutingNo, @1stBankAccountNo, @1stBankName, @1stDepositMethod, @1stCheckingSavings, @2ndDepositDay, @2ndDepositAmount, @2ndRoutingNo, @2ndAccountNo, @2ndBankName, @2ndDepositMethod, @2ndCheckingSavings, @3rdDepositDay, @3rdDepositAmount, @3rdRoutingNo, @3rdAccountNo, @3rdBankName, @3rdDepositMethod, @3rdCheckingSavings, @4thDepositDay, @4thDepositAmount, @4thRoutingNo, @4thAccountNo, @4thBankName, @4thDepositMethod, @4thCheckingSavings, @debt_total, @missing_info, @comments, @DraftDate, @DraftAmount, @DraftRoutingNo, @DraftAccountNo, @DraftBankName, @DraftDepositMethod, @DraftCheckingSavings, @agentname, @setupfeepercentage, @BankingType
WHILE @@FETCH_STATUS = 0 
	BEGIN
--Set the Initial Agency Percent to NULL
			SET @InitialAgencyPercent = NULL
--Set the first deposit day
			SET @1stDepositDay = datepart(day, @1stDepositDate)
			IF @1stDepositDay = 31 BEGIN SET @1stDepositDay = 30 END
-- Set the default deposit methods if none exist
		--IF @1stCheckingSavings IS NULL BEGIN SET @1stCheckingSavings = 'C' END 
		--IF @2ndCheckingSavings IS NULL 	BEGIN SET @2ndCheckingSavings = 'C' END 
		--IF @3rdCheckingSavings IS NULL BEGIN SET @3rdCheckingSavings = 'C' END 
		--IF @4thCheckingSavings IS NULL BEGIN SET @4thCheckingSavings = 'C' END 
		--IF @DraftCheckingSavings IS NULL BEGIN SET @DraftCheckingSavings = 'C' END 
				
-- Set the proper entry for SetupFeePercentage
		IF @setupfeepercentage IS NOT NULL 
			BEGIN 
				if @setupfeepercentage = 10 
					begin
						set @setupfeepercentage = 0.10
						set @InitialAgencyPercent = .02
					end
				if @setupfeepercentage = .10
					begin
						set @setupfeepercentage = 0.10
						set @InitialAgencyPercent = .02
					end
				if @setupfeepercentage = 0.10
					begin
						set @setupfeepercentage = 0.10
						set @InitialAgencyPercent = .02
					end
			END 
		if @setupfeepercentage is NULL BEGIN set @setupfeepercentage = 0.00 END
--********Banking type for trustID for client
--Seideman or Palmer only no matter what they are trustid's of 20
	if @CompanyID < 3 begin set @trustid = 20 end
--All other attorneys, make it an absolute not an else
	if @CompanyID > 2 begin set @trustid = 22 end  

-- insert new enrollment
		insert into tblenrollment
		(
			[name],
			totalunsecureddebt,
			qualified,
			[committed],
			deliverymethod,
			agencyid,
			companyid,
			created,
			createdby
		)
		values
		(
			@first_name + ' ' + @last_name,
			@debt_total,
			1,
			1,
			'MAIL',
			@agencyid,
			@companyid,
			coalesce(@date_received, @importdatetime),
			@importuserid
		)

-- return new enrollment id
		set @enrollmentid = scope_identity()

-- insert new client with this enrollment
		insert into tblclient
		(
			enrollmentid,
			trustid,
			depositmethod,
			depositamount,
			depositday,
			depositstartdate,
			BankName,
			BankRoutingNumber,
			BankAccountNumber,
			setupfeepercentage,
			settlementfeepercentage,
			monthlyfee,
			monthlyfeeday,
			additionalaccountfee,
			returnedcheckfee,
			overnightdeliveryfee,
			agencyid,
			companyid,
			created,
			createdby,
			lastmodified,
			lastmodifiedby,
			importid,
			InitialDraftDate,
			InitialDraftAmount,
			AgentName,
			MultiDeposit,
			RemittName
		)
		values
		(
			@enrollmentid,
			@trustid,
			@1stDepositMethod,
			@1stDepositAmount,
			@1stDepositDay,
			@1stDepositDate,
			@1stBankName,
			@1stBankRoutingNo,
			@1stBankAccountNo,
			@setupfeepercentage,
			@settlementfeepercentage,
			@monthlyfee,
			@monthlyfeeday,
			@additionalaccountfee,
			@returnedcheckfee,
			@overnightdeliveryfee,
			@agencyid,
			@companyid,
			coalesce(@date_received, @importdatetime),
			@importuserid,
			coalesce(@date_received, @importdatetime),
			@importuserid,
			@importid,
			@DraftDate,
			@DraftAmount,
			@AgentName,
			1,
			'Bank of America NT & SA'
		)
-- return new client id
		set @clientid = scope_identity()

--Add primary Bank info to multi deposit from 1st deposit stuff
		IF @1stBankRoutingNo IS NOT NULL
			BEGIN 
				INSERT INTO tblClientBankAccount
				(
					ClientID,
					RoutingNumber,
					AccountNumber,
					BankType,
					Created,
					CreatedBy,
					LastModified,
					LastModifiedBy,
					PrimaryAccount
				)
				VALUES 
				(
					@ClientID,
					@1stBankRoutingNo,
					@1stBankAccountNo,
					@1stCheckingSavings,
					getdate(),
					24,
					getdate(),
					24,
					1
				)
--return the new bank account id
				SET @1stBankAccountId = scope_identity()
			END 

--Add 1st deposit day to the mix
		IF @1stDepositDay IS NOT NULL 
			BEGIN 
				INSERT INTO tblClientDepositDay
				(
					ClientID,
					Frequency,
					DepositDay,
					Occurrence,
					DepositAmount,
					Created,
					CreatedBy,
					LastModified,
					LastModifiedBy,
					BankAccountId,
					DepositMethod
				)
					VALUES 
				(
					@ClientID,
					'month',
					@1stDepositDay,
					' ',
					@1stDepositAmount,
					getdate(),
					24,
					getdate(),
					24,
					@1stBankAccountId,
					@1stDepositMethod
				)	
--return the new client deposit id
				SET @1stClientDepositId = scope_identity()
				SET @1stBankAccountId = NULL 
			END

SET @DuplicateBankAccount = NULL 
--check the 2nd payment bank info for duplication if not add account to client bank account
		SET @DuplicateBankAccount = (SELECT TOP 1 BankAccountId 
		FROM tblClientBankAccount 
		WHERE  ClientID = @ClientID
	     AND (RoutingNumber+AccountNumber = @2ndRoutingNo + @2ndAccountNo))

		IF @DuplicateBankAccount IS NULL AND @2ndRoutingNo IS NOT NULL
			BEGIN
--Add 2nd Bank info to multi deposit from draft deposit stuff. 
						INSERT INTO tblClientBankAccount
						(
							ClientID,
							RoutingNumber,
							AccountNumber,
							BankType,
							Created,
							CreatedBy,
							LastModified,
							LastModifiedBy
						)
						VALUES 
						(
							@ClientID,
							@2ndRoutingNo,
							@2ndAccountNo,
							@2ndCheckingSavings,
							getdate(),
							24,
							getdate(),
							24
						)
				SET @2ndBankAccountId = scope_identity()
			END

		IF @2ndDepositDay IS NOT NULL
			BEGIN
--Add 2nd deposit day to the mix
					INSERT INTO tblClientDepositDay
					(
						ClientID,
						Frequency,
						DepositDay,
						Occurrence,
						DepositAmount,
						Created,
						CreatedBy,
						LastModified,
						LastModifiedBy,
						BankAccountId,
						DepositMethod
					)
						VALUES 
					(
						@ClientID,
						'month',
						@2ndDepositDay,
						' ',
						@2ndDepositAmount,
						getdate(),
						24,
						getdate(),
						24,
						CASE WHEN @DuplicateBankAccount IS NOT NULL THEN @DuplicateBankAccount ELSE @2ndBankAccountID END,
						@2ndDepositMethod
					)
				END 

		SET @2ndBankAccountId = NULL
		SET @DuplicateBankAccount = NULL 
--check the 3rd payment bank info for duplication if not add account to client bank account
		SET @DuplicateBankAccount = (SELECT TOP 1 BankAccountId 
		FROM tblClientBankAccount 
		WHERE  ClientID = @ClientID
	     AND ((RoutingNumber+AccountNumber = @3rdRoutingNo + @3rdAccountNo)
		OR (@2ndRoutingNo + @2ndAccountNo = @3rdRoutingNo + @3rdAccountNo)))

		IF @DuplicateBankAccount IS NULL AND @3rdRoutingNo IS NOT NULL
			BEGIN 
--Add 3rd Bank info to multi deposit from draft deposit stuff. 
						INSERT INTO tblClientBankAccount
						(
							ClientID,
							RoutingNumber,
							AccountNumber,
							BankType,
							Created,
							CreatedBy,
							LastModified,
							LastModifiedBy
						)
						VALUES 
						(
							@ClientID,
							@3rdRoutingNo,
							@3rdAccountNo,
							@3rdCheckingSavings,
							getdate(),
							24,
							getdate(),
							24
						)
				SET @3rdBankAccountId = scope_identity()
			END

		IF @3rdDepositDay IS NOT NULL
			BEGIN
--Add 3rd deposit day to the mix
					INSERT INTO tblClientDepositDay
					(
						ClientID,
						Frequency,
						DepositDay,
						Occurrence,
						DepositAmount,
						Created,
						CreatedBy,
						LastModified,
						LastModifiedBy,
						BankAccountId,
						DepositMethod
					)
						VALUES 
					(
						@ClientID,
						'month',
						@3rdDepositDay,
						' ',
						@3rdDepositAmount,
						getdate(),
						24,
						getdate(),
						24,
						CASE WHEN @DuplicateBankAccount IS NOT NULL THEN @DuplicateBankAccount ELSE @3rdBankAccountID END,
						@3rdDepositMethod
					)
				END
				
		SET @3rdBankAccountId =	null
		SET @DuplicateBankAccount = NULL 
--check the 4th payment bank info for duplication if not add account to client bank account
		SET @DuplicateBankAccount = (SELECT TOP 1 BankAccountId 
		FROM tblClientBankAccount 
		WHERE  ClientID = @ClientID
	     AND ((RoutingNumber+AccountNumber = @4thRoutingNo + @4thAccountNo)
		OR (@2ndRoutingNo + @2ndAccountNo = @4thRoutingNo + @4thAccountNo)
		OR (@3rdRoutingNo + @3rdAccountNo = @4thRoutingNo + @4thAccountNo)))

		IF @DuplicateBankAccount IS NULL AND @4thRoutingNo IS NOT NULL
			BEGIN 
--Add 4th Bank info to multi deposit from draft deposit stuff. 
						INSERT INTO tblClientBankAccount
						(
							ClientID,
							RoutingNumber,
							AccountNumber,
							BankType,
							Created,
							CreatedBy,
							LastModified,
							LastModifiedBy
						)
						VALUES 
						(
							@ClientID,
							@4thRoutingNo,
							@4thAccountNo,
							@4thCheckingSavings,
							getdate(),
							24,
							getdate(),
							24
						)
				SET @4thBankAccountId = scope_identity()
			END 
		IF @4thDepositDay IS NOT NULL 
			BEGIN 
--Add 4th deposit day to the mix
					INSERT INTO tblClientDepositDay
					(
						ClientID,
						Frequency,
						DepositDay,
						Occurrence,
						DepositAmount,
						Created,
						CreatedBy,
						LastModified,
						LastModifiedBy,
						BankAccountId,
						DepositMethod
					)
						VALUES 
					(
						@ClientID,
						'month',
						@4thDepositDay,
						' ',
						@4thDepositAmount,
						getdate(),
						24,
						getdate(),
						24,
						CASE WHEN @DuplicateBankAccount IS NOT NULL THEN @DuplicateBankAccount ELSE @4thBankAccountID END,
						@4thDepositMethod
					)	
				END

		SET @4thBankAccountId = NULL 
		SET @DuplicateBankAccount = NULL 
--check the Initial draft bank info for duplicate if not add account to client bank account
		SET @DuplicateBankAccount = (SELECT TOP 1 BankAccountId 
		FROM tblClientBankAccount 
		WHERE  ClientID = @ClientID
		AND (RoutingNumber+AccountNumber = @DraftRoutingNo + @DraftAccountNo))
	     --AND ((RoutingNumber+AccountNumber = @4thRoutingNo + @4thAccountNo)
		 --OR (@2ndRoutingNo + @2ndAccountNo = @4thRoutingNo + @4thAccountNo)
		 --OR (@3rdRoutingNo + @3rdAccountNo = @4thRoutingNo + @4thAccountNo)
		 --OR (@4thRoutingNo + @4thAccountNo = @DraftRoutingNo + @DraftAccountNo)))

		IF @DuplicateBankAccount IS NULL AND @DraftRoutingNo IS NOT NULL
			BEGIN 
--Add Draft Bank info to multi deposit from draft deposit stuff. Don't add deposit day it's a one time only deposit
						INSERT INTO tblClientBAnkAccount
						(
							ClientID,
							RoutingNumber,
							AccountNumber,
							BankType,
							Created,
							CreatedBy,
							LastModified,
							LastModifiedBy
						)
						VALUES 
						(
							@ClientID,
							@DraftRoutingNo,
							@DraftAccountNo,
							@DraftCheckingSavings,
							getdate(),
							24,
							getdate(),
							24
						)
				END

-- add extra fields
		insert into tblagencyextrafields01
		(
			clientid,
			leadnumber,
			datesent,
			datereceived,
			debttotal,
			missinginfo,
			created,
			createdby,
			lastmodified,
			lastmodifiedby
		)
		values
		(
			@clientid,
			@lead_number,
			@date_sent,
			@date_received,
			@debt_total,
			@missing_info,
			coalesce(@date_received, @importdatetime),
			@importuserid,
			coalesce(@date_received, @importdatetime),
			@importuserid
		)

-- update enrollment to have assigned client
		update
			tblenrollment
		set
			clientid = @clientid
		where
			enrollmentid = @enrollmentid

-- insert the new primary applicant
		insert into tblperson
		(
			clientid,
			firstname,
			lastname,
			ssn,
			languageid,
			relationship,
			canauthorize,
			created,
			createdby,
			lastmodified,
			lastmodifiedby
		)
		values
		(
			@clientid,
			@first_name,
			@last_name,
			@social_security_no,
			@languageid,
			'Prime',
			1,
			coalesce(@date_received, @importdatetime),
			@importuserid,
			coalesce(@date_received, @importdatetime),
			@importuserid
		)

-- return new person id
		set @personid = scope_identity()

-- set this person as primary on client
		update
			tblclient
		set
			primarypersonid = @personid
		where
			clientid = @clientid

-- load search records for this client
		exec stp_LoadClientSearch @clientid

-- insert "started enrollment" roadmap status for this client
		insert into tblroadmap
		(
			clientid,
			clientstatusid,
			created,
			createdby,
			lastmodified,
			lastmodifiedby
		)
		select
			clientid,
			2, -- clientstatusid: started enrollment
			coalesce(@date_received, @importdatetime),
			@importuserid,
			coalesce(@date_received, @importdatetime),
			@importuserid
		from
			tblclient
		where
			clientid = @clientid

-- insert "completed enrollment" roadmap status for this clients
		insert into tblroadmap
		(
			parentroadmapid,
			clientid,
			clientstatusid,
			created,
			createdby,
			lastmodified,
			lastmodifiedby
		)
		select
			(select roadmapid from tblroadmap where clientid = tblclient.clientid and clientstatusid = 2) as parentroadmapid,
			clientid,
			5, -- clientstatusid: completed enrollment
			coalesce(@date_received, @importdatetime),
			@importuserid,
			coalesce(@date_received, @importdatetime),
			@importuserid
		from
			tblclient
		where
			clientid = @clientid

-- insert "waiting for lsa and deposit" roadmap status for this clients
		insert into tblroadmap
		(
			parentroadmapid,
			clientid,
			clientstatusid,
			created,
			createdby,
			lastmodified,
			lastmodifiedby
		)
		select
			(select roadmapid from tblroadmap where clientid = tblclient.clientid and clientstatusid = 5) as parentroadmapid,
			clientid,
			6, -- clientstatusid: waiting for lsa and deposit
			coalesce(@date_received, @importdatetime),
			@importuserid,
			coalesce(@date_received, @importdatetime),
			@importuserid
		from
			tblclient
		where
			clientid = @clientid

-- insert Ad-Hoc ACH payment for first draft, if any
		if @DraftDate is not null and @DraftRoutingNo is not null and @DraftAccountNo is not null and @DraftAmount is not NULL AND @DraftBankName IS NOT NULL 
			begin
				insert into tblAdHocACH
				(
					ClientID,
					DepositDate,
					DepositAmount,
					BankName,
					BankRoutingNumber,
					BankAccountNumber,
					Created,
					CreatedBy,
					LastModified,
					LastModifiedBy,
					InitialDraftYN
				)
				values
				(
					@ClientID,
					@DraftDate,
					@DraftAmount,
					@DraftBankName,
					@DraftRoutingNo,
					@DraftAccountNo,
					coalesce(@date_received, @importdatetime),
					@importuserid,
					coalesce(@date_received, @importdatetime),
					@importuserid,
					1
				)
		end

--Assign account numbers to all new clients and percent if necessary

		declare @newAccountNumber varchar(50)

--exec @newAccountNumber = stp_GetAccountNumber
--trustid = (select top 1 trustid from tbltrust where [default] = 1), 'Belongs under set below
		DECLARE @tblTempAccount Table(AccountNum int)
        
            INSERT INTO @tblTempAccount
				exec stp_GetAccountNumber
            SELECT @newAccountNumber = AccountNum FROM @tblTempAccount
			
		update 
			tblclient 
		set 
			accountnumber = @newAccountNumber,
			trustid = @trustid,
			initialagencypercent = @InitialAgencyPercent
		where 
			clientid = @clientid

		set @numclients = @numclients + 1
		
	FETCH NEXT FROM cursor_a INTO @lead_number, @date_sent, @date_received, @first_name, @last_name, @social_security_no, @1stDepositDate, @1stDepositAmount, @1stBankRoutingNo, @1stBankAccountNo, @1stBankName, @1stDepositMethod, @1stCheckingSavings, @2ndDepositDay, @2ndDepositAmount, @2ndRoutingNo, @2ndAccountNo, @2ndBankName, @2ndDepositMethod, @2ndCheckingSavings, @3rdDepositDay, @3rdDepositAmount, @3rdRoutingNo, @3rdAccountNo, @3rdBankName, @3rdDepositMethod, @3rdCheckingSavings, @4thDepositDay, @4thDepositAmount, @4thRoutingNo, @4thAccountNo, @4thBankName, @4thDepositMethod, @4thCheckingSavings, @debt_total, @missing_info, @comments, @DraftDate, @DraftAmount, @DraftRoutingNo, @DraftAccountNo, @DraftBankName, @DraftDepositMethod, @DraftCheckingSavings, @agentname, @setupfeepercentage, @BankingType
END 
	
CLOSE cursor_a
DEALLOCATE cursor_a

--Temporary fix for Check deposits in multi deposit table.
UPDATE tblClientDepositDay SET DepositMethod = 'Check' WHERE DepositMethod = 'C' OR DepositMethod IS NULL 

select cast(@numclients as nvarchar(5)) + ' Clients Imported Successfully!', @numclients, @importid

END TRY
BEGIN CATCH
	SELECT ERROR_MESSAGE()
	CLOSE cursor_a
    DEALLOCATE cursor_a
END CATCH
GO
/****** Object:  StoredProcedure [dbo].[stp_CollectACHCommission]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_CollectACHCommission]

AS

set nocount on
set ansi_warnings off

declare @companyid int

declare @commrecid int
declare @recdisplay varchar(100)
declare @recispersonal bit
declare @recroutingnumber varchar(9)
declare @recaccountnumber varchar(25)
declare @recaccounttype varchar

declare @parcommrecid int
declare @pardisplay varchar(100)
declare @parispersonal bit
declare @parroutingnumber varchar(9)
declare @paraccountnumber varchar(25)
declare @paraccounttype varchar

declare @transferamount money
declare @nacharegisterid int
declare @trustid int

declare @vtblCommBatches table
(
	CompanyID int,
	TrustID int,
	CommBatchTransferID int,
	CommRecID int,
	RecDisplay varchar(100),
	RecIsPersonal bit,
	RecRoutingNumber varchar(9),
	RecAccountNumber varchar(25),
	RecAccountType varchar,
	ParentCommRecID int,
	ParDisplay varchar(100),
	ParIsPersonal bit,
	ParRoutingNumber varchar(9),
	ParAccountNumber varchar(25),
	ParAccountType varchar,
	TransferAmount money
)
	

BEGIN TRY

	INSERT INTO
		@vtblCommBatches
	SELECT
		cbt.CompanyID,
		cbt.TrustID,
		cbt.CommBatchTransferID,
		rec.CommRecID as CommRecID,
		rec.Display as RecDisplay,
		~rec.IsCommercial as RecIsPersonal,
		rec.RoutingNumber as RecRoutingNumber,
		rec.AccountNumber as RecAccountNumber,
		isnull(rec.[Type], 'C') as RecAccountType,
		par.CommRecID as ParentCommRecID,
		par.Display as ParDisplay,
		~par.IsCommercial as ParIsPersonal,
		par.RoutingNumber as ParRoutingNumber,
		par.AccountNumber as ParAccountNumber,
		isnull(par.[Type], 'C') as ParAccountType,
		round(cbt.TransferAmount, 2)
	FROM
		tblCommBatchTransfer as cbt
		inner join tblCommRec as rec on rec.CommRecID = cbt.CommRecID and rec.IsLocked = 0 and lower(rec.Method) = 'ach'
		left join tblCommRec as par on par.CommRecID = cbt.ParentCommRecID
	WHERE
		cbt.CheckDate is null
		and cbt.CheckNumber is null
		and cbt.CompanyID is not null
		and cbt.CommBatchTransferID not in
		(
			SELECT
				nc.TypeID
			FROM
				tblNachaCabinet as nc
				inner join tblNachaRegister as nr on nr.NachaRegisterID = nc.NachaRegisterID
			WHERE
				nr.IsDeclined = 0
				and lower(nc.Type) = 'commbatchtransferid'
				and nc.TrustID = 20 -- Colonial clients
				
			union all
			
			select
				nc.typeid
			from
				tblnachacabinet nc inner join
				tblnacharegister2 nr on nc.nacharegisterid = nr.nacharegisterid
			where
				lower(nc.Type) = 'commbatchtransferid'
				and nc.TrustID = 22 -- CheckSite clients				
		)


	declare cursor_CollectionACHCommission cursor forward_only read_only for
		SELECT
			CompanyID,
			TrustID,
			CommRecID,
			RecDisplay,
			RecIsPersonal,
			RecRoutingNumber,
			RecAccountNumber,
			RecAccountType,
			ParentCommRecID,
			ParDisplay,
			ParIsPersonal,
			ParRoutingNumber,
			ParAccountNumber,
			ParAccountType,
			sum(TransferAmount) as TransferAmount
		FROM
			@vtblCommBatches
		WHERE
			ParentCommRecID is not null
		GROUP BY
			CompanyID,
			TrustID,
			CommRecID,
			RecDisplay,
			RecIsPersonal,
			RecRoutingNumber,
			RecAccountNumber,
			RecAccountType,
			ParentCommRecID,
			ParDisplay,
			ParIsPersonal,
			ParRoutingNumber,
			ParAccountNumber,
			ParAccountType

	open cursor_CollectionACHCommission

	fetch next from cursor_CollectionACHCommission into @companyid, @trustid, @commrecid, @recdisplay, @recispersonal, @recroutingnumber, @recaccountnumber, @recaccounttype, @parcommrecid, @pardisplay, @parispersonal, @parroutingnumber, @paraccountnumber, @paraccounttype, @transferamount

	while @@fetch_status = 0
	begin
		
		if @trustid = 22 begin -- CheckSite
			if exists (select 1 from tblCommRec where CommRecID = @parcommrecid and IsGCA = 1) begin
				-- write out a credit to the recipient
				exec @nacharegisterid = stp_InsertShadowCommission @commrecid, @recdisplay, @recaccountnumber, @recroutingnumber, @recaccounttype, @transferamount, @recispersonal, @companyid, @trustid
				
				-- insert nacha cabinet records against all commbatchtransfers associated with this payment
				INSERT INTO
					tblNachaCabinet
					(
						NachaRegisterID,
						[Type],
						TypeID,
						TrustID
					)
				SELECT
					@nacharegisterid,
					'CommbatchTransferID',
					CommBatchTransferID,
					TrustID
				FROM
					@vtblCommBatches
				WHERE
					CompanyID = @companyid
					and CommRecID = @commrecid
					and ParentCommRecID = @parcommrecid
					and TrustID = @trustid
			end
		end
		else begin
			-- write out a debit against the parent recipient
			INSERT INTO
				tblNachaRegister
				(
					[Name],
					AccountNumber,
					RoutingNumber,
					[Type],
					Amount,
					IsPersonal,
					CommRecID,
					CompanyID
				)
			VALUES
				(
					@pardisplay,
					@paraccountnumber,
					@parroutingnumber,
					@paraccounttype,
					round(-@transferamount, 2),
					@parispersonal,
					@parcommrecid,
					@companyid
				)

			set @nacharegisterid = scope_identity()


			-- insert nacha cabinet records against all commbatchtransfers associated with this payment
			INSERT INTO
				tblNachaCabinet
				(
					NachaRegisterID,
					[Type],
					TypeID,
					TrustID
				)
			SELECT
				@nacharegisterid,
				'CommbatchTransferID',
				CommBatchTransferID,
				TrustID
			FROM
				@vtblCommBatches
			WHERE
				CompanyID = @companyid
				and CommRecID = @commrecid
				and ParentCommRecID = @parcommrecid
				and TrustID = @trustid
			
			
			-- write out a credit to the recipient
			INSERT INTO
				tblNachaRegister
				(
					[Name],
					AccountNumber,
					RoutingNumber,
					[Type],
					Amount,
					IsPersonal,
					CommRecID,
					CompanyID
				)
			VALUES
				(
					@recdisplay,
					@recaccountnumber,
					@recroutingnumber,
					@recaccounttype,
					round(@transferamount, 2),
					@recispersonal,
					@parcommrecid,
					@companyid
				)

			set @nacharegisterid = scope_identity()
		
			
			-- insert nacha cabinet records against all commbatchtransfers associated with this payment
			INSERT INTO
				tblNachaCabinet
				(
					NachaRegisterID,
					[Type],
					TypeID,
					TrustID
				)
			SELECT
				@nacharegisterid,
				'CommbatchTransferID',
				CommBatchTransferID,
				TrustID
			FROM
				@vtblCommBatches
			WHERE
				CompanyID = @companyid
				and CommRecID = @commrecid
				and ParentCommRecID = @parcommrecid	
				and TrustID = @trustid		
		end
					
		
		fetch next from cursor_CollectionACHCommission into @companyid, @trustid, @commrecid, @recdisplay, @recispersonal, @recroutingnumber, @recaccountnumber, @recaccounttype, @parcommrecid, @pardisplay, @parispersonal, @parroutingnumber, @paraccountnumber, @paraccounttype, @transferamount
	end

	close cursor_CollectionACHCommission
	deallocate cursor_CollectionACHCommission
END TRY
BEGIN CATCH
	close cursor_CollectionACHCommission
	deallocate cursor_CollectionACHCommission

	declare @errorMessage nvarchar(MAX) set @errorMessage = ERROR_MESSAGE()
	declare @errorSeverity int set @errorSeverity = ERROR_SEVERITY()
	declare @errorState int set @errorState = ERROR_STATE()

	RAISERROR(@errorMessage, @errorSeverity, @errorState)
END CATCH
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterResetAllForClient]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_DoRegisterResetAllForClient]
	(
		@clientid int
	)

as


----------------------------------------------------
-- LOGIC FOR RESETTING ALL REGISTERS FOR CLIENT
-- (1) cycle the clients registers and run
--     the reset register stored proc
----------------------------------------------------


-- (1) loop clients registers
declare @registerid int

declare cursor_DoRegisterResetAllForClient cursor for
	select
		registerid
	from
		tblregister
	where
		clientid = @clientid

open cursor_DoRegisterResetAllForClient

fetch next from cursor_DoRegisterResetAllForClient into @registerid
while @@fetch_status = 0

	begin

		exec stp_DoRegisterReset @registerid

		fetch next from cursor_DoRegisterResetAllForClient into @registerid

	end

close cursor_DoRegisterResetAllForClient
deallocate cursor_DoRegisterResetAllForClient
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterResetAll]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[stp_DoRegisterResetAll]

as


----------------------------------------------------
-- LOGIC FOR RESETTING ALL REGISTERS
-- (1) cycle the all registers and run
--     the reset register stored proc
----------------------------------------------------


-- (1) loop all registers
declare @registerid int

declare cursor_DoRegisterResetAll cursor for
	select
		registerid
	from
		tblregister

open cursor_DoRegisterResetAll

fetch next from cursor_DoRegisterResetAll into @registerid
while @@fetch_status = 0

	begin

		exec stp_DoRegisterReset @registerid

		fetch next from cursor_DoRegisterResetAll into @registerid

	end

close cursor_DoRegisterResetAll
deallocate cursor_DoRegisterResetAll
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterHierarchyUpdate]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author: Bereket S. Data
	Descriptions: Update AggregateClause field for a given criteria filter

*/

CREATE PROCEDURE [dbo].[stp_NegotiationFilterHierarchyUpdate]
@FilterId int,
@UserId int,
@AggregateClause varchar(Max)

AS
SET NOCOUNT ON

DECLARE @filterClause varchar(Max)
DECLARE @AggClause varchar(Max)
DECLARE @Filtertype varchar(20)

SELECT @FilterType = FilterType FROM tblNegotiationFilters WHERE FilterId = @FilterId
if (@FilterType = 'stem')
 BEGIN
		exec stp_NegotiationStemFilterUpdate @FilterId
 END
else
 BEGIN
  SELECT @filterClause = FilterClause FROM tblNegotiationFilters WHERE FilterId = @FilterId
  
  if len(rtrim(ltrim(@filterClause))) > 0
  begin
	SET @AggClause = '(' + @AggregateClause + ' ) AND ( ' + @filterClause + ')'
  end
  
  UPDATE tblNegotiationFilters 
  SET AggregateClause = @AggClause WHERE FilterId = @FilterId AND Deleted = '0'
 END
 exec stp_NegotiationFilterAuditLog @FilterId, @UserId, 'Updated'
GO
/****** Object:  StoredProcedure [dbo].[stp_PayChargeback]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayChargeback]
	(
		@registerid int
	)

as

------------------------------------------------------------------------------------------
-- LOGIC FOR PAYING CHARGEBACKS
-- (1) Prepare a table of register payments that were affected by this
--     register, including:
--     (a) payments related to this register as a deposit
--     (b) payment deposits related to this register as a deposit
--     (c) payments related to this register as a fee
--     (d) payment deposits related to this register as a fee
-- (2) Fill the temp table with all of the matching register payment ids from above
-- (3) Loop through list (uniquely) and execute the chargeback process
-- (4) Dispose the temp table
------------------------------------------------------------------------------------------


-- discretionary variables
declare @registerpaymentid int
declare @numcoms int


-- (1) prepare the temp table
create table #tbl ( registerpaymentid int )


-- (2) find and insert the payments that match
insert into
	#tbl
select
	registerpaymentid
from
	tblregisterpayment
where
	feeregisterid = @registerid

insert into
	#tbl
select
	registerpaymentid
from
	tblregisterpaymentdeposit
where
	depositregisterid = @registerid


-- (3) loop and enter chargebacks
declare cursor_PayChargeback cursor local for select distinct * from #tbl

open cursor_PayChargeback

fetch next from cursor_PayChargeback into @registerpaymentid

while @@fetch_status = 0
	begin

		-- reinitialize
		set @numcoms = null


		-- (3.1) determine if there are any commpay records issued for this payment already
		select
			@numcoms = count(commpayid)
		from
			tblcommpay
		where
			registerpaymentid = @registerpaymentid


		-- (3.2) if comms exist, chargeback those only, otherwise reevaluate the entire payment for chargeback
		if not @numcoms is null and @numcoms > 0
			begin
				exec stp_PayChargebackAmount @registerpaymentid
			end
		else
			begin
				exec stp_PayChargebackPayment @registerpaymentid
			end


		fetch next from cursor_PayChargeback into @registerpaymentid
	end

close cursor_PayChargeback
deallocate cursor_PayChargeback


-- (4) dispose the temp table
drop table #tbl
GO
/****** Object:  StoredProcedure [dbo].[stp_LoadClientSearch_All]    Script Date: 09/10/2010 18:33:03 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[stp_LoadClientSearch_All]

as


-- discretionary variables
declare @clientid int


declare a_cursor cursor for select clientid from tblclient

open a_cursor

fetch next from a_cursor into @clientid
while @@fetch_status = 0

	begin

		exec stp_LoadClientSearch @clientid

		fetch next from a_cursor into @clientid

	end

close a_cursor
deallocate a_cursor
GO
/****** Object:  StoredProcedure [dbo].[stp_NegotiationFilterDeleteMasterSubs]    Script Date: 09/10/2010 18:33:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_NegotiationFilterDeleteMasterSubs]
(
	@ParentFilterID int,
	@UserID int
)

AS

declare @filterid int

declare @vtblFilters table
(
	FilterID int
)

INSERT INTO
	@vtblFilters
EXEC
	stp_NegotiationFilterGetParentXref @ParentFilterID

declare cursor_filters cursor for
	SELECT
		FilterID
	FROM
		@vtblFilters

open cursor_filters

fetch next from cursor_filters into @filterid

while @@fetch_status = 0
begin
	exec stp_NegotiationFilterDelete @filterid, @UserID

	fetch next from cursor_filters into @filterid
end

close cursor_filters
deallocate cursor_filters

SELECT
	FilterID
FROM
	@vtblFilters
GO
/****** Object:  View [dbo].[vw_enrollment_Ver_complete]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vw_enrollment_Ver_complete] 
as
select LeadApplicantID, max(completed) [Completed]
from (
select l.LeadApplicantID, l.completed
from tblleadverification l
Union
Select vw.LeadApplicantID, v.enddate
from tblverificationcall v
inner join vw_LeadApplicant_Client vw on vw.clientid = v.clientid) l
group by leadapplicantid
GO
/****** Object:  StoredProcedure [dbo].[stp_PayFee]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayFee]
	(
		@registerid int,
		@hidemessages bit = 1,
		@UserID int = 28
	)

as


set nocount on
set ansi_warnings off

--------------------------------------------------------------------------
-- LOGIC FOR FEE PAYMENT:
-- (1) Pay for whole fee with oldest deposits first
-- (2) Pay for as much of fee as possible as one payment.  Do
--      not make multiple payments against same fee
-- (3) Do not attempt to pay fee if IsFullyPaid = 1
-- (4) After fee is completely paid, set IsFullyPaid = 1 but only
--      if fully paid
--------------------------------------------------------------------------


-- discretionary variables
declare @clientid int

declare @feetotal money
declare @feepaid as money
declare @feeremaining money
declare @feeisfullypaid bit

--declare @adjustmentstotal money

declare @deposittotal money
declare @depositused money
declare @nonefeedebits money
declare @depositavailable money


-- (1) find and fill fee variables
select
	@clientid = tblregister.clientid,
	@feetotal = coalesce(abs(tblregister.amount), 0),
	@feepaid = coalesce(sum(tblregisterpayment.amount), 0),
	@feeisfullypaid = tblregister.isfullypaid
from
	tblregister left join
	(
		select
			*
		from
			tblregisterpayment
		where
			voided = 0 and
			bounced = 0
	)
	tblregisterpayment on tblregister.registerid = tblregisterpayment.feeregisterid
where
	registerid = @registerid
group by
	tblregister.clientid,
	tblregister.amount,
	tblregister.isfullypaid

--
---- get total adjustments for this fee
--select
--	@adjustmentstotal = coalesce(sum(amount), 0)
--from
--	tblregister
--where
--	adjustedregisterid = @registerid
--	and clientid = @clientid
--	and bounce is null
--	and void is null
--
--
--if @adjustmentstotal < 0 -- adjustments made fee more
--	begin
--		set @feeremaining = @feetotal - @feepaid + abs(@adjustmentstotal)
--	end
--else -- adjustments made fee less
--	begin
--		set @feeremaining = @feetotal - @feepaid - @adjustmentstotal
--	end

set @feeremaining = @feetotal - @feepaid


-- (2) find and fill deposit variables
-- deposit total is every positive amount this client originally had minus
-- any deposits still on hold or deposits that were bounced or voided or have an adjustedregisterid
-- (adjustedregisterid means that the record is actually a fee adjustment)
select
	@deposittotal = coalesce(sum(amount), 0)
from
	tblregister
where
	amount > 0 and
	clientid = @clientid and
	(
		hold is null or hold <= getdate() or [clear] <= getdate()
	)
	and bounce is null
	and void is null
	and adjustedregisterid is null


-- deposit used is every amount used in the paymentdeposit table by this
-- client (which will include parts of deposits that are not fully paid)
-- DO NOT INCLUDE deposits that were bounced or voided as there presence
-- will still remain in the paymentdeposit table
select
	@depositused = coalesce(sum(amount), 0)
from
	tblregisterpaymentdeposit
where
	depositregisterid in
	(
		select
			registerid
		from
			tblregister
		where
			clientid = @clientid
	)
	and bounced = 0
	and voided = 0


-- none-fee debits must also be subtracted from the deposit total
select
	@nonefeedebits = coalesce(sum(abs(amount)), 0)
from
	tblregister inner join
	tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid
where
	clientid = @clientid and
	amount < 0 and
	tblentrytype.fee = 0 and
	void is null and
	bounce is null and
	adjustedregisterid is null


set @depositavailable = @deposittotal - @depositused - @nonefeedebits

if @hidemessages = 0
	begin
		print 'fee:' + convert(varchar(50), @feetotal) + ', paid:' + convert(varchar(50), @feepaid) + ', remaining:' + convert(varchar(50), @feeremaining) + ', non-fee debits:' + convert(varchar(50), @nonefeedebits) + ', deposits:' + convert(varchar(50), @deposittotal) + ', used:' + convert(varchar(50), @depositused) + ', available:' + convert(varchar(50), @depositavailable)
	end


-- (3) don't do anything if fee was already fully paid or if this client
-- doesn't have any available deposit
if @feeisfullypaid = 0 and @depositavailable > 0
	begin

		-- (4) determine state of fee remaining
		if @feeremaining > @depositavailable -- more fee then all deposit
			begin

				-- (a) take all available deposit for this payment
				exec stp_PayFeeAmount @registerid, @depositavailable, @UserID

				-- (b) do NOT set fee as fully paid

			end
		else if @feeremaining = @depositavailable -- fee equals all deposit,
			begin

				-- (a) take all deposit or all fee (which are the same thing)
				exec stp_PayFeeAmount @registerid, @feeremaining, @UserID

				-- (b) DO set fee as fully paid
				update tblregister set isfullypaid = 1 where registerid = @registerid

			end
		else if @feeremaining < @depositavailable -- less fee then all deposit
			begin

				-- (a) take only all fee
				exec stp_PayFeeAmount @registerid, @feeremaining, @UserID

				-- (b) DO set fee as fully paid
				update tblregister set isfullypaid = 1 where registerid = @registerid

			end

	end


set nocount off
set ansi_warnings on
GO
/****** Object:  View [dbo].[vw_ExcludeAchNo3PV]    Script Date: 09/10/2010 18:32:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Careful. this view affect nightly processes
CREATE View [dbo].[vw_ExcludeAchNo3PV] AS
select c.clientid, c.currentclientstatusid from tblclient c
inner join dbo.vw_LeadApplicant_Client a on a.clientid = c.clientid
left join vw_enrollment_Ver_complete v on v.leadapplicantid = a.leadapplicantid
inner join tblleadapplicant l on l.leadapplicantid = a.leadapplicantid
where c.serviceimportid is not null
and v.completed is null
and c.VWUWResolved is null
and l.statusid <> 7 --Do not include old clients
GO
/****** Object:  StoredProcedure [dbo].[stp_PayFees]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayFees]
	(
		@hidemessages bit = 1,
		@UserID int = 28
	)

as

set nocount on
set ansi_warnings off

---------------------------------------------------------------------------------------------------
-- LOGIC FOR ALL FEE COLLECTION:
-- (1) Grab all fees to be paid in the system.  Fees to be paid are:
--        (a) Must be negative (less than zero) amount
--        (b) Entry type must be marked as actual fee (fee=1)
--        (c) Cannot be marked as fully paid
--        (d) Cannot be marked as VOID
--        (e) Cannot be marked as BOUNCE
-- (2) Fees must be paid in order shown by client first, then entry
--      type, then transaction date.  This is important to remember
--      when returning the list of fees to be paid in step 1
---------------------------------------------------------------------------------------------------


-- discretionary variables
declare @registerid int
declare @CompanyID int
declare @marker datetime
declare @total int
declare @finished int
declare @percent money
declare @num int
declare @sum money


select
	@total = count(tblregister.registerid)
from
	tblregister inner join
	tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid
where
	tblentrytype.fee = 1
	and amount < 0 
	and tblentrytype.fee = 1 
	and isfullypaid = 0 
	and void is null 
	and bounce is null


set @marker = getdate()
set @finished = 0
set @percent = 0

print '(' + convert(varchar(50), getdate(), 13) + ') Analyzing ' + convert(varchar(50), @total) + ' fees for possible payment collection...'


-- (1) open and loop all oustanding fees
declare cursor_a cursor for
	select
		tblregister.registerid, tblClient.CompanyID
	from
		tblregister 
		inner join tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid
		inner join tblClient on tblRegister.ClientID = tblClient.ClientID
	where
	tblentrytype.fee = 1
	and amount < 0 
	and tblentrytype.fee = 1 
	and isfullypaid = 0 
	and void is null 
	and bounce is null
	order by
		tblregister.clientid desc, tblentrytype.[order], tblregister.transactiondate

open cursor_a

fetch next from cursor_a into @registerid, @CompanyID
while @@fetch_status = 0

	begin

		-- (2) run payment proc on each fee
		exec stp_payfee @registerid, @hidemessages, @UserID

		-- progress display
		set @finished = @finished + 1

		if ((convert(money, @finished) / convert(money, @total)) * convert(money, 100)) > (@percent + 1)
			begin

				set @percent = ((convert(money, @finished) / convert(money, @total)) * convert(money, 100))

				select
					@num = isnull(count(*), 0),
					@sum = isnull(sum(amount), 0)
				from
					tblregisterpayment
				where
					paymentdate >= @marker
				
				if (@CompanyID = 2)
					begin
						print ('PALMER CLIENT BELOW')
					end
				else
					begin
						print ('SEIDEMAN CLIENT BELOW')
					end				

				print '(' + convert(varchar(50), getdate(), 13) + ') Processed ' + convert(varchar(50), @finished) 
					+ ' fees (' + convert(varchar(50), @percent) + '%) and collected ' 
					+ convert(varchar(50), @num) + ' payments totalling $' + convert(varchar(50), @sum)

			end


		fetch next from cursor_a into @registerid, @CompanyID

	end

close cursor_a
deallocate cursor_a


set nocount off
set ansi_warnings on
GO
/****** Object:  StoredProcedure [dbo].[stp_PayFees_P]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayFees_P]
	(
		@hidemessages bit = 1
	)

as

set nocount on
set ansi_warnings off

---------------------------------------------------------------------------------------------------
-- LOGIC FOR ALL FEE COLLECTION:
-- (1) Grab all fees to be paid in the system.  Fees to be paid are:
--        (a) Must be negative (less than zero) amount
--        (b) Entry type must be marked as actual fee (fee=1)
--        (c) Cannot be marked as fully paid
--        (d) Cannot be marked as VOID
--        (e) Cannot be marked as BOUNCE
-- (2) Fees must be paid in order shown by client first, then entry
--      type, then transaction date.  This is important to remember
--      when returning the list of fees to be paid in step 1
---------------------------------------------------------------------------------------------------


-- discretionary variables
declare @registerid int
declare @marker datetime
declare @total int
declare @finished int
declare @percent money
declare @num int
declare @sum money


select
	@total = count(tblregister.registerid)
from
	tblregister inner join
	tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid inner join
	tblclient c on c.clientid = tblregister.clientid
where
	--tblregister.transactiondate > dateadd(d, -12, getdate())	and 
	tblentrytype.fee = 1
	and amount < 0 
	and tblentrytype.fee = 1 
	and isfullypaid = 0 
	and void is null 
	and bounce is null
	and c.companyid = 2


set @marker = getdate()
set @finished = 0
set @percent = 0

print '(' + convert(varchar(50), getdate(), 13) + ') Analyzing ' + convert(varchar(50), @total) + ' fees for possible payment collection...'


-- (1) open and loop all oustanding fees
declare cursor_a cursor for
	select
		tblregister.registerid
	from
		tblregister inner join
		tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid inner join
		tblclient c on c.clientid = tblregister.clientid
	where
	--tblregister.transactiondate > dateadd(d, -12, getdate()) 	and 
	tblentrytype.fee = 1
	and amount < 0 
	and tblentrytype.fee = 1 
	and isfullypaid = 0 
	and void is null 
	and bounce is null
	and c.companyid = 2
	order by
		tblregister.clientid, tblentrytype.[order], tblregister.transactiondate

open cursor_a

fetch next from cursor_a into @registerid
while @@fetch_status = 0

	begin

		-- (2) run payment proc on each fee
		exec stp_payfee @registerid, @hidemessages

		-- progress display
		set @finished = @finished + 1

		if ((convert(money, @finished) / convert(money, @total)) * convert(money, 100)) > (@percent + 1)
			begin

				set @percent = ((convert(money, @finished) / convert(money, @total)) * convert(money, 100))

				select
					@num = isnull(count(*), 0),
					@sum = isnull(sum(amount), 0)
				from
					tblregisterpayment
				where
					paymentdate >= @marker

				print '(' + convert(varchar(50), getdate(), 13) + ') Processed ' + convert(varchar(50), @finished) 
					+ ' fees (' + convert(varchar(50), @percent) + '%) and collected ' 
					+ convert(varchar(50), @num) + ' payments totalling $' + convert(varchar(50), @sum)

			end


		fetch next from cursor_a into @registerid

	end

close cursor_a
deallocate cursor_a


set nocount off
set ansi_warnings on
GO
/****** Object:  StoredProcedure [dbo].[stp_PayFeesNEW]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_PayFeesNEW]
(
	@hidemessages BIT = 1
)

AS

SET NOCOUNT ON
SET ANSI_WARNINGS OFF

---------------------------------------------------------------------------------------------------
-- LOGIC FOR ALL FEE COLLECTION:
-- (1) Grab all fees to be paid in the system.  Fees to be paid are:
--        (a) Must be negative (less than zero) amount
--        (b) Entry type must be marked as actual fee (fee=1)
--        (c) Cannot be marked as fully paid
--        (d) Cannot be marked as VOID
--        (e) Cannot be marked as BOUNCE
-- (2) Fees must be paid in order shown by client first, then entry
--      type, then transaction date.  This is important to remember
--      when returning the list of fees to be paid in step 1
---------------------------------------------------------------------------------------------------


-- discretionary variables
DECLARE @registerid INT
DECLARE @CompanyID INT
DECLARE @marker DATETIME
DECLARE @total INT
DECLARE @finished INT
DECLARE @percent MONEY
DECLARE @num INT
DECLARE @sum MONEY

DECLARE @vtbPayFees TABLE
(
	RegisterID INT,
	ClientID INT 
)

--Populate a payfees audit and start point in tblPayFees.
INSERT INTO tblPayFees
SELECT tblregister.registerid,
	   tblRegister.ClientId,
	   0,
	   CONVERT(VARCHAR(10), GETDATE(), 101)
FROM tblregister 
INNER JOIN tblentrytype ON tblregister.entrytypeid = tblentrytype.entrytypeid
INNER JOIN tblClient ON tblRegister.ClientID = tblClient.ClientID
WHERE tblClient.CurrentClientStatusID NOT IN (17,18)
AND tblentrytype.fee = 1
AND tblregister.amount < 0 
AND tblregister.isfullypaid = 0 
AND tblregister.void is null 
AND tblregister.bounce is null

--Load unprocessed register id's into variable table.

INSERT INTO @vtbPayFees
SELECT RegisterID,
	   ClientID
FROM tblPayFees 
WHERE FeeDate = CONVERT(VARCHAR(10), GETDATE(), 101)
AND Processed = 0

-- Set the total count of fees to process

SELECT @total = COUNT(RegisterID)
FROM @vtbPayFees

SET @marker = GETDATE()
SET @finished = 0
SET @percent = 0

PRINT '(' + CONVERT(VARCHAR(50), GETDATE(), 13) + ') Analyzing ' + CONVERT(VARCHAR(50), @total) + ' fees for possible payment collection...'

-- (1) open and loop all oustanding fees
DECLARE cursor_a CURSOR LOCAL FAST_FORWARD FOR
	SELECT RegisterID, 
		   ClientID
	FROM @vtbPayFees

OPEN cursor_a

FETCH NEXT FROM cursor_a INTO @registerid, 
							  @CompanyID
WHILE @@FETCH_STATUS = 0
	BEGIN 
		-- (2) run payment proc on each fee
		EXEC stp_payfee @registerid, @hidemessages

		-- progress display
		SET @finished = @finished + 1

		IF ((CONVERT(MONEY, @finished) / CONVERT(MONEY, @total)) * CONVERT(MONEY, 100)) > (@percent + 1)
			BEGIN
				SET @percent = ((CONVERT(MONEY, @finished) / CONVERT(MONEY, @total)) * CONVERT(MONEY, 100))
				SELECT @num = ISNULL(COUNT(*), 0),
					   @sum = ISNULL(SUM(amount), 0)
				FROM tblregisterpayment
				WHERE paymentdate >= @marker
				
				IF (@CompanyID = 2)
					BEGIN
						PRINT ('PALMER CLIENT BELOW')
					END
				ELSE
					BEGIN
						PRINT ('SEIDEMAN CLIENT BELOW')
					END				

				PRINT '(' + CONVERT(VARCHAR(50), GETDATE(), 13) + ') Processed ' + CONVERT(VARCHAR(50), @finished) 
					+ ' fees (' + CONVERT(VARCHAR(50), @percent) + '%) and collected ' 
					+ CONVERT(VARCHAR(50), @num) + ' payments totalling $' + CONVERT(VARCHAR(50), @sum)
			END
		UPDATE tblPayFees
		SET Processed = 1
		WHERE RegisterID = @registerid
		AND FeeDate = CONVERT(VARCHAR(10), GETDATE(), 101)		

		FETCH NEXT FROM cursor_a INTO @registerid, @CompanyID

	END

CLOSE cursor_a
DEALLOCATE cursor_a

SET NOCOUNT OFF
SET ANSI_WARNINGS ON
GO
/****** Object:  StoredProcedure [dbo].[stp_PayFees_PT]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayFees_PT]
	(
		@hidemessages bit = 1
	)

as

set nocount on
set ansi_warnings off

---------------------------------------------------------------------------------------------------
-- LOGIC FOR ALL FEE COLLECTION:
-- (1) Grab all fees to be paid in the system.  Fees to be paid are:
--        (a) Must be negative (less than zero) amount
--        (b) Entry type must be marked as actual fee (fee=1)
--        (c) Cannot be marked as fully paid
--        (d) Cannot be marked as VOID
--        (e) Cannot be marked as BOUNCE
-- (2) Fees must be paid in order shown by client first, then entry
--      type, then transaction date.  This is important to remember
--      when returning the list of fees to be paid in step 1
---------------------------------------------------------------------------------------------------


-- discretionary variables
declare @registerid int
declare @CompanyID int
declare @marker datetime
declare @total int
declare @finished int
declare @percent money
declare @num int
declare @sum money


select
	@total = count(tblregister.registerid)
	from
		tblregister 
		inner join tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid
		inner join tblClient on tblRegister.ClientID = tblClient.ClientID
	where tblentrytype.fee = 1
	and tblregister.FeeMonth = 7
	and tblregister.FeeYear = 2007
	and amount < 0 	
	and isfullypaid = 0 
	and void is null 
	and bounce is null


set @marker = getdate()
set @finished = 0
set @percent = 0

print '(' + convert(varchar(50), getdate(), 13) + ') Analyzing ' + convert(varchar(50), @total) + ' fees for possible payment collection...'


-- (1) open and loop all oustanding fees
declare cursor_a cursor for
	select
		tblregister.registerid, tblClient.CompanyID
	from
		tblregister 
		inner join tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid
		inner join tblClient on tblRegister.ClientID = tblClient.ClientID
	where tblentrytype.fee = 1
	and tblregister.FeeMonth = 7
	and tblregister.FeeYear = 2007
	and amount < 0 	
	and isfullypaid = 0 
	and void is null 
	and bounce is null
	order by
		tblregister.clientid desc, tblentrytype.[order], tblregister.transactiondate

open cursor_a

fetch next from cursor_a into @registerid, @CompanyID
while @@fetch_status = 0

	begin

		-- (2) run payment proc on each fee
		exec stp_payfee @registerid, @hidemessages

		-- progress display
		set @finished = @finished + 1

		if ((convert(money, @finished) / convert(money, @total)) * convert(money, 100)) > (@percent + 1)
			begin

				set @percent = ((convert(money, @finished) / convert(money, @total)) * convert(money, 100))

				select
					@num = isnull(count(*), 0),
					@sum = isnull(sum(amount), 0)
				from
					tblregisterpayment
				where
					paymentdate >= @marker
				
				if (@CompanyID = 2)
					begin
						print ('PALMER CLIENT BELOW')
					end
				else
					begin
						print ('SEIDEMAN CLIENT BELOW')
					end				

				print '(' + convert(varchar(50), getdate(), 13) + ') Processed ' + convert(varchar(50), @finished) 
					+ ' fees (' + convert(varchar(50), @percent) + '%) and collected ' 
					+ convert(varchar(50), @num) + ' payments totalling $' + convert(varchar(50), @sum)

			end


		fetch next from cursor_a into @registerid, @CompanyID

	end

close cursor_a
deallocate cursor_a


set nocount off
set ansi_warnings on
GO
/****** Object:  StoredProcedure [dbo].[stp_PayFeeForClient]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_PayFeeForClient]
	(
		@clientid int,
		@hidemessages bit = 1,
		@UserID int = 28
	)

as


--------------------------------------------------------------------------
-- LOGIC FOR CLIENT FEE PAYMENTS:
-- (1) Grab all fees to be paid for client.  Fees to be paid are:
--        (a) Only fees for this client
--        (b) Must be negative (less then zero) amount
--        (c) Entry type must be marked as actual fee (fee=1)
--        (d) Cannot be marked as fully paid
--        (d) Cannot be marked as VOID
--        (e) Cannot be marked as BOUNCED
--        (f) Order By entry type, then transactiondate
-- (2) Fees must be paid in order shown in entrytype table.  This
--      is important to remember when returning the list of fees 
--      to be paid in step 1
--------------------------------------------------------------------------


-- discretionary variables
declare @feeregisterid int
declare @adjustmentregisterid int


-- (1) open and loop the fees for this client
declare cursor_a cursor for
	select
		tblregister.registerid
	from
		tblregister inner join
		tblentrytype on tblregister.entrytypeid = tblentrytype.entrytypeid
	where
		clientid = @clientid and
		amount < 0 and
		tblentrytype.fee = 1 and
		isfullypaid = 0 and
		void is null and
		bounce is null
	order by
		tblentrytype.[order], tblregister.transactiondate, tblregister.registerid

open cursor_a

fetch next from cursor_a into @feeregisterid
while @@fetch_status = 0

	begin

		-- (2) run payment proc on fee
		exec stp_payfee @feeregisterid, @hidemessages, @UserID

		fetch next from cursor_a into @feeregisterid
	end
close cursor_a
deallocate cursor_a
GO
/****** Object:  StoredProcedure [dbo].[stp_DoFixSDA_PFO_WithPositiveBal]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jim Hope, Corwin Tanner
-- Create date: 04/02/2008
-- Description:	Clean up SDA and PFO both with balances
-- =============================================
CREATE PROCEDURE [dbo].[stp_DoFixSDA_PFO_WithPositiveBal] 
	@AccountNo int = 0, 
	@ClientID int = 0
AS
BEGIN
	SET NOCOUNT ON;

	IF @AccountNo <> 0
		--Get the ClientID if we have an Account Number		
		BEGIN
			SELECT @ClientID = ClientID
			FROM tblClient
			WHERE AccountNumber = @AccountNo
		END
	
	--Create the variable table to hold the data
	DECLARE @RegisterPaymentTbl TABLE
	(ClientID int,
	 RegisterPaymentDepositID int
	)

	IF @ClientID = 0
		--Process all clients
		BEGIN
			INSERT INTO
				@RegisterPaymentTbl
			SELECT r.clientid,
			rpd.registerpaymentdepositid
			FROM tblregister AS r 
			INNER JOIN tblregisterpayment AS rp ON rp.feeregisterid = r.registerid
			LEFT JOIN tblregisterpaymentdeposit AS rpd ON rpd.registerpaymentid = rp.registerpaymentid 
			WHERE rp.voided = 1
			AND rpd.voided = 0
			ORDER BY r.clientid, rpd.registerpaymentdepositid

			UPDATE tblregisterpaymentdeposit SET voided = 1 
			WHERE registerpaymentdepositid in (SELECT registerpaymentdepositid 
												FROM @RegisterPaymentTbl)

			DECLARE cursor_PayFees CURSOR FAST_FORWARD READ_ONLY FOR
				SELECT
					ClientID
				FROM
					@RegisterPaymentTbl
				ORDER BY ClientID
			OPEN cursor_PayFees
			FETCH NEXT FROM cursor_PayFees INTO @ClientID
			WHILE @@FETCH_STATUS = 0
			BEGIN
				EXEC stp_PayFeeForClient @ClientID
				FETCH NEXT FROM cursor_PayFees INTO @clientid
			END

			--Close the cursor
			CLOSE cursor_PayFees
			DEALLOCATE cursor_PayFees
		END
	IF @ClientID <> 0
		--Process one client
		BEGIN
			INSERT INTO
				@RegisterPaymentTbl
			SELECT r.clientid,
			rpd.registerpaymentdepositid
			FROM tblregister AS r 
			INNER JOIN tblregisterpayment AS rp ON rp.feeregisterid = r.registerid
			LEFT JOIN tblregisterpaymentdeposit AS rpd ON rpd.registerpaymentid = rp.registerpaymentid 
			WHERE r.Clientid = @ClientID
			AND rp.voided = 1
			AND rpd.voided = 0
			ORDER BY r.clientid, rpd.registerpaymentdepositid

			UPDATE tblregisterpaymentdeposit SET voided = 1 
			WHERE registerpaymentdepositid in (SELECT registerpaymentdepositid 
												FROM @RegisterPaymentTbl)
			EXEC stp_PayFeeForClient @ClientID
		END	
END
GO
/****** Object:  StoredProcedure [dbo].[stp_ReAssessMonthlyFeeForClient]    Script Date: 09/10/2010 18:33:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[stp_ReAssessMonthlyFeeForClient] 
	(
		@From datetime,
		@ToDate datetime = null,
		@ClientID int
	)

as

--select * from tblregister where entrytypeid = 1 and  clientid = 35778

----*******For Testing********
--Declare @From datetime
--Declare @ToDate datetime
--Declare @ClientID int
--
--Set @From = '05/01/2007'
--Set @ClientID = 35778 
----************************

DECLARE @TestDate datetime
DECLARE @fordate datetime
DECLARE @Bigcounter int

IF @ToDate IS NULL BEGIN
	SET @ToDate = getdate()
END
SET @Bigcounter = 0
SET @TestDate = @From 

declare @feeday int
declare @feemonth int
declare @feeyear int
declare @feemonthname varchar(50)
declare @lastdayinmonth int
declare @islastdayinmonth bit

--declare @clientid int
declare @monthlyfee money
declare @subsequentmaintfee money
declare	@submaintfeestart datetime
declare @maintenancefeecap money

WHILE @TestDate <= dateadd(month, -1, @ToDate)
BEGIN
 
	SET @testdate = dateadd(month, @BigCounter, @From)
	SET @fordate = @testdate
	SET @BigCounter = @BigCounter + 1

	SET @feeday = datepart(day,@fordate)
	SET @feemonth = datepart(month,@fordate)
	SET @feeyear = datepart(year,@fordate)
	SET @feemonthname=datename(mm, @fordate)
	SET @lastdayinmonth = datepart(day, dateadd(day, -1, dateadd(month, datediff(month, 0, @fordate)+1, 0)))
	SET @islastdayinmonth = case when @feeday=@lastdayinmonth then 1 else 0 end

select 
	clientid,
	monthlyfee,
	case  
		when monthlyfeeday=0 then 1
		else isnull(monthlyfeeday, 1)
	end as monthlyfeeday,--If monthlyfeeday is 0 or null, treat as 1
	subsequentmaintfee,
	submaintfeestart,
	maintenancefeecap
into 
	#tmpClients
from 
	tblclient 
where
	currentclientstatusid not in (15,17,18) and 
	(
		@fordate >= monthlyfeestartdate or
		monthlyfeestartdate is null
	)
	and not clientid in (select clientid from tblregister where feemonth=@feemonth and feeyear=@feeyear AND void IS NULL and clientid = @clientid)
		--and fee has not already been assessed for this month
	and not monthlyfee is null
	and not monthlyfee = 0
	and clientid = @clientid
	
declare @count int
set @count=(
	select 
		count(clientid)
	from 
		#tmpClients 
	where
		monthlyfeeday=@feeday
		or (@islastdayinmonth=1 and monthlyfeeday >= @feeday)
)

declare c cursor for 
	select 
		clientid,
		monthlyfee,
		subsequentmaintfee,
		submaintfeestart,
		maintenancefeecap
	from 
		#tmpClients 
	where
		monthlyfeeday=@feeday
		or (@islastdayinmonth=1 and monthlyfeeday >= @feeday)
		and clientid = @clientid
	--If today is last day of month, take everyone with feedays for >= today

open c
fetch next from c into @clientid,@monthlyfee,@subsequentmaintfee,@submaintfeestart,@maintenancefeecap

while @@fetch_status = 0
begin

	if @maintenancefeecap is not null and @maintenancefeecap <> 0
	begin
	
		select @monthlyfee = count(a.accountid) * @monthlyfee from tblaccount a
		where a.clientid = @clientid
		and a.accountstatusid <> 55
		and not (a.accountstatusid = 54 and exists(select r.registerid from tblregister r where r.entrytypeid = 4 and r.accountid = a.accountid and r.void is null and r.isfullypaid = 1))
		
		if @monthlyfee > @maintenancefeecap 
			select @monthlyfee = @maintenancefeecap
			
	end
	else if @subsequentmaintfee is not null and @subsequentmaintfee <> 0 and @submaintfeestart is not null and @fordate >= @submaintfeestart 
		select @monthlyfee = @subsequentmaintfee
	
	INSERT INTO tblRegister
	(
		ClientId,
		TransactionDate,
		Amount,
		EntryTypeId, 
		Description,
		FeeMonth,
		FeeYear
	)
	values
	(
		@clientid,
		getdate(),
		-@monthlyfee,
		1, 
		'Maintenance Fee for ' + @feemonthname + ' ' + convert(varchar, @feeyear),
		@feemonth,
		@feeyear
	)

	-- rebalance register for client
	-- don't do entire cleanup for client - that will do payments and auto-assign negogiation
	exec stp_PayFeeForClient @ClientID
	exec stp_DoRegisterRebalanceClient @ClientID

	fetch next from c into @clientid,@monthlyfee,@subsequentmaintfee,@submaintfeestart,@maintenancefeecap

end

close c
deallocate c

drop table #tmpClients

END
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterCleanup]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DoRegisterCleanup]
	(
		@clientid int,
		@UserID int = 28
	)


as


-- reset all isfullypaid values for this client
exec stp_DoRegisterResetAllForClient @clientid

-- run payment manager on client
exec stp_PayFeeForClient @clientid, @UserID

-- reset all balances for client
exec stp_DoRegisterRebalanceClient @clientid

-- assign negogiator
--exec stp_AssignNegotiator @clientid
GO
/****** Object:  StoredProcedure [dbo].[stp_DeleteRegisterPayment]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DeleteRegisterPayment]
	(
		@registerpaymentid int,
		@docleanup bit = 1
	)

as


-- discretionary variables
declare @registerpaymentdepositid int
declare @clientid int


-- find client now, before the register payment is deleted
select
	@clientid = r.clientid
from
	tblregisterpayment rp inner join
	tblregister r on rp.feeregisterid = r.registerid
where
	rp.registerpaymentid = @registerpaymentid


-- delete any commission payments
delete
from
	tblcommpay
where
	registerpaymentid = @registerpaymentid


-- delete any commission chargebacks
delete
from
	tblcommchargeback
where
	registerpaymentid = @registerpaymentid


-- delete any register payment deposits
delete
from
	tblregisterpaymentdeposit
where
	registerpaymentid = @registerpaymentid


-- delete all attachment relationships
exec stp_DeleteRelation 5, @registerpaymentid


-- delete the register payment
delete
from
	tblregisterpayment
where
	registerpaymentid = @registerpaymentid
	
	
-- if the payment was batched but not sent, its no longer needed so delete it
-- applies to checksite clients only
delete
from 
	tblnacharegister2
where
	nachafileid = -1
	and registerpaymentid = @registerpaymentid

	
-- or if the payment was already sent, credit the shadow store
insert tblNachaRegister2
	(NachaFileId, [Name], Amount, IsPersonal, CompanyID, ShadowStoreId, ClientID, TrustId, RegisterID, RegisterPaymentID, Created, Flow)
select 
	-1, [Name], Amount, IsPersonal, CompanyID, ShadowStoreId, ClientID, TrustId, RegisterID, -1, getdate(), 'credit'
from 
	tblnacharegister2
where
	nachafileid > 0
	and registerpaymentid = @registerpaymentid


if @docleanup = 1
	begin
		exec stp_DoRegisterCleanup @clientid
	end
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterBounce]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DoRegisterBounce] 
	(
		@registerid int,
		@by int = 28,
		@collectfee bit = 1,
		@when datetime = null,
		@docleanup bit = 1,
		@BouncedReason int = 0
	)

as

if @when is null
	begin
		set @when = getdate()
	end

----------------------------------------------------------------------------------
-- LOGIC FOR BOUNCING A REGISTER
-- (1) Mark register as bounced by updating fields
--     (a) Set bounce = @when value is passed in
--     (b) Set bounceby = @by value is passed in
--			(b1) Set BouncedReason (code) = @Reason value is passed in
--     (c) Set any fee adjustments as bounced if associated to this register fee
--     (d) Set any register payments and deposits as bounced if associated
--         through the payment deposit
--	   (e) If CheckSite client, credit their shadow store for payments made
--		   on this deposit
-- (2) If supose to, collect returned check fee
-- (3) check payments taken on this bounced deposits.  If any exist, issue
--     commission chargeback
----------------------------------------------------------------------------------


-- (1) bounce register
update
	tblregister
set
	bounce = @when,
	bounceby = @by,
	BouncedReason = @BouncedReason
where
	registerid = @registerid or
	adjustedregisterid = @registerid
	
	
-- (e) If CheckSite client, credit their shadow store for payments made on this deposit
insert tblNachaRegister2 ([Name],Amount,IsPersonal,CompanyID,ShadowStoreId,ClientID,TrustId,RegisterID,RegisterPaymentID,Flow)
select cp.ControlledAccountName,rp.Amount,0,c.CompanyID,c.AccountNumber,c.ClientID,c.TrustID,r.RegisterID,rp.RegisterPaymentId,'credit'
from tblRegisterPayment rp
join tblRegisterPaymentDeposit d on d.RegisterPaymentID = rp.RegisterPaymentID
	and d.DepositRegisterID = @registerid
join tblRegister r on r.RegisterID = rp.FeeRegisterID
join tblClient c on c.ClientID = r.ClientID and c.TrustId = 22
join tblCompany cp on cp.CompanyID = c.CompanyId 
Where rp.voided <> 1 and rp.bounced <> 1


-- bounce any associated register payments as related to any payment deposits
update
	tblregisterpayment
set
	bounced = 1,
	bouncedate = getdate(),
	modified = getdate(),
	modifiedby = @by
where
	registerpaymentid in
	(
		select
			registerpaymentid
		from
			tblregisterpaymentdeposit
		where
			depositregisterid = @registerid
	)


-- bounce any associated register payment deposits as related to any paymentd deposits
update
	tblregisterpaymentdeposit
set
	bounced = 1,
	bouncedate = getdate(),
	modified = getdate(),
	modifiedby = @by
where
	registerpaymentid in
	(
		select
			registerpaymentid
		from
			tblregisterpaymentdeposit
		where
			depositregisterid = @registerid
	)
	



-- (2) collect returned check fee
declare @clientid int
declare @returnedcheckfee money

-- find and set the client on this register
select
	@clientid = clientid
from
	tblregister
where
	registerid = @registerid

-- find and set fee amount for this client
select
	@returnedcheckfee = returnedcheckfee
from
	tblclient
where
	clientid = @clientid

if not @returnedcheckfee is null and @returnedcheckfee > 0 and @collectfee = 1
	begin

		-- insert the fee
		insert into tblregister
		(
			clientid,
			transactiondate,
			amount,
			entrytypeid
		)
		values
		(
			@clientid,
			@when,
			(@returnedcheckfee * -1),
			5 -- entrytypeid 5: returned check fee
		)

	end


-- (3) issue commission chargebacks
exec stp_PayChargeback @registerid


if @docleanup = 1
	begin
		exec stp_DoRegisterCleanup @clientid, @by
	end
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterPaymentVoid]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DoRegisterPaymentVoid]
	(
		@registerpaymentid int,
		@docleanup bit = 1,
		@UserID int = 28
	)

as
Begin
declare @clientid int
declare @numcoms int set @numcoms = null


-- find and set the client on this register payment
select
	@clientid = r.clientid
from
	tblregister r inner join
	tblregisterpayment rp on r.registerid = rp.feeregisterid
where
	rp.registerpaymentid = @registerpaymentid

-- (e) If CheckSite client, credit their shadow store for payments made on this payment
insert tblNachaRegister2 ([Name],Amount,IsPersonal,CompanyID,ShadowStoreId,ClientID,TrustId,RegisterID,RegisterPaymentID,Flow)
select cp.ControlledAccountName,rp.Amount,0,c.CompanyID,c.AccountNumber,c.ClientID,c.TrustID,r.RegisterID,rp.RegisterPaymentId,'credit'
from tblRegisterPayment rp
join tblRegister r on r.RegisterID = rp.FeeRegisterID
join tblClient c on c.ClientID = r.ClientID and c.TrustID = 22
join tblCompany cp on cp.CompanyId = c.CompanyId
Where rp.RegisterPaymentID = @registerpaymentid
and rp.Voided <> 1 and rp.Bounced <> 1

-- void the payment
update
	tblregisterpayment
set
	voided = 1,
	voiddate = getdate(),
	modified = getdate(),
	modifiedBy = @UserID
where
	registerpaymentid = @registerpaymentid
	and voided = 0

update
	tblregisterpaymentdeposit
set
	voided = 1,
	voiddate = getdate(),
	modified = getdate(),
	modifiedBy = @UserID
where
	registerpaymentid = @registerpaymentid
	
-- determine if there are any commpay records issued for this payment already
select
	@numcoms = count(commpayid)
from
	tblcommpay
where
	registerpaymentid = @registerpaymentid


-- if comms exist, chargeback those only, otherwise reevaluate the entire payment for chargeback
if not @numcoms is null and @numcoms > 0
	begin
		exec stp_PayChargebackAmount @registerpaymentid
	end
else
	begin
		exec stp_PayChargebackPayment @registerpaymentid
	end


if @docleanup = 1
	begin
		exec stp_DoRegisterCleanup @clientid
	end
end
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterClear]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DoRegisterClear]
	(
		@registerid int,
		@by int = 28,
		@when datetime = null,
		@docleanup bit = 1
	)

as

if @when is null
	begin
		set @when = getdate()
	end

----------------------------------------------------
-- LOGIC FOR CLEARING A REGISTER
-- (1) Mark register as clear by updating fields
--     (a) Set clear = @when value passed in
--     (b) Set clearby = @by value passed in
----------------------------------------------------


-- (1) clear register
update
	tblregister
set
	clear = @when,
	clearby = @by
where
	registerid = @registerid


if @docleanup = 1
	begin
		-- find and get the client on this register
		declare @clientid int

		select
			@clientid = clientid
		from
			tblregister
		where
			registerid = @registerid

		exec stp_DoRegisterCleanup @clientid, @by
	end
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterHold]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DoRegisterHold]
	(
		@registerid int,
		@by int = 28,
		@when datetime = null,
		@docleanup bit = 1
	)

as

if @when is null
	begin
		set @when = getdate()
	end

----------------------------------------------------
-- LOGIC FOR HOLDING A REGISTER
-- (1) Mark register as held by updating fields
--     (a) Set hold = @when value passed in
--     (b) Set holdby = @by value passed in
----------------------------------------------------


-- (1) hold register
update
	tblregister
set
	hold = @when,
	holdby = @by
where
	registerid = @registerid


if @docleanup = 1
	begin
		-- find and get the client on this register
		declare @clientid int

		select
			@clientid = clientid
		from
			tblregister
		where
			registerid = @registerid

		exec stp_DoRegisterCleanup @clientid, @by
	end
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterFixAdjustedFee]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DoRegisterFixAdjustedFee]
	(
		@registerid int,
		@docleanup bit = 1,
		@UserID int = 28
	)

as

declare @clientid int
declare @adjustedregisterid int

select
	@clientid = clientid,
	@adjustedregisterid = adjustedregisterid
from
	tblregister
where
	registerid = @registerid


if not @adjustedregisterid is null
	begin

		-- tweak new total amount (if not done first, reset sproc will not adjust flag properly)
		exec stp_DoRegisterUpdateFeeAmount @adjustedregisterid


		-- make sure the total fee amount was not reduced below total payments made
		declare @sumpayments as money
		declare @currentamount as money

		select
			@sumpayments = isnull(sum(amount), 0)
		from
			tblregisterpayment
		where
			feeregisterid = @adjustedregisterid

		select
			@currentamount = isnull(amount, 0)
		from
			tblregister
		where
			registerid = @adjustedregisterid


		if @sumpayments > @currentamount -- total payments are larger then total fee
			begin

				-- deterime if all payments for this fee can be deleted
				declare @atleastonefailed bit
				declare @registerpaymentid int

				set @atleastonefailed = 0

				declare cursor_fafa cursor local for select registerpaymentid from tblregisterpayment where feeregisterid = @adjustedregisterid
				open cursor_fafa

				fetch next from cursor_fafa into @registerpaymentid
				while @@fetch_status = 0
					begin

						if dbo.udf_CanDeleteRegisterPayment(@registerpaymentid) = 0
							begin
								set @atleastonefailed = 1
								break
							end

						fetch next from cursor_fafa into @registerpaymentid
					end
				close cursor_fafa
				deallocate cursor_fafa


				-- cycle again, but this time either delete or void
				declare cursor_fafb cursor local for select registerpaymentid from tblregisterpayment where feeregisterid = @adjustedregisterid
				open cursor_fafb

				fetch next from cursor_fafb into @registerpaymentid
				while @@fetch_status = 0
					begin

						if @atleastonefailed = 0 -- nothing failed, so delete them all
							begin
								exec stp_DeleteRegisterPayment @registerpaymentid, 0
							end
						else -- at least one failed, so void them all
							begin
								exec stp_DoRegisterPaymentVoid @registerpaymentid, 0, @UserID
							end

						fetch next from cursor_fafb into @registerpaymentid
					end
				close cursor_fafb
				deallocate cursor_fafb

			end


		if @docleanup = 1
			begin
				exec stp_DoRegisterCleanup @clientid
			end

	end
GO
/****** Object:  StoredProcedure [dbo].[stp_DeleteRegister]    Script Date: 09/10/2010 18:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DeleteRegister]
	(
		@registerid int,
		@docleanup bit = 1
	)

as


-- discretionary variables
declare @registerpaymentid int
declare @registerpaymentdepositid int
declare @clientid int


-- find client now, before the register is deleted
select
	@clientid = clientid
from
	tblregister
where
	registerid = @registerid


declare @ids table
	(
		registerpaymentid int not null
	)

-- get all register payments paid for this register as a fee
insert into
	@ids
select
	registerpaymentid
from
	tblregisterpayment
where
	feeregisterid = @registerid


-- get all register payments through any payments this register has paid
insert into
	@ids
select
	registerpaymentid
from
	tblregisterpaymentdeposit
where
	depositregisterid = @registerid


-- delete any register payments
declare cursor_a cursor local for select registerpaymentid from @ids

open cursor_a

fetch next from cursor_a into @registerpaymentid
while @@fetch_status = 0
	begin

		exec stp_DeleteRegisterPayment @registerpaymentid, 0

		fetch next from cursor_a into @registerpaymentid
	end
close cursor_a
deallocate cursor_a


-- delete all attachment relationships
exec stp_DeleteRelation 4, @registerid



-- delete the register and any adjustments to this register
delete
from
	tblregister
where
	registerid = @registerid or
	adjustedregisterid = @registerid
	
	
	
-- if an associated transaction was not sent, its no longer needed so delete it
-- applies to checksite clients only 
delete
from 
	tblnacharegister2
where
	nachafileid = -1
	and registerid = @registerid
	and registerpaymentid is null
	and flow = 'debit'
	
-- or if the transaction was already sent, credit the shadow store
insert tblNachaRegister2
	(NachaFileId, [Name], Amount, IsPersonal, CompanyID, ShadowStoreId, ClientID, TrustId, RegisterID, RegisterPaymentID, Created, Flow)
select 
	-1, [Name], Amount, IsPersonal, CompanyID, ShadowStoreId, ClientID, TrustId, RegisterID, -1, getdate(), 'credit'
from 
	tblnacharegister2
where
	nachafileid > 0
	and registerid = @registerid
	and registerpaymentid is null
	and flow = 'debit'
	


if @docleanup = 1
	begin
		exec stp_DoRegisterCleanup @clientid
	end
GO
/****** Object:  StoredProcedure [dbo].[stp_DoRegisterVoid]    Script Date: 09/10/2010 18:32:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[stp_DoRegisterVoid]
	(
		@registerid int,
		@by int = 28,
		@when datetime = null,
		@docleanup bit = 1
	)

as
Begin
if @when is null
	begin
		set @when = getdate()
	end

------------------------------------------------------------------------------------
-- LOGIC FOR VOIDING A REGISTER
-- (1) Mark register as void by updating fields
--     (a) Set void = @when value passed in
--     (b) Set voidby = @by value passed in
--     (c) Set any fee adjustments as bounced if associated to this register fee
--     (d) Set any register payments and deposits as voided if associated through 
--         the payment deposit or through the payment
--	   (e) If CheckSite client, credit their shadow store for payments made on this register entry
-- (2) Check payments taken on this bounced deposits.  If any exist, issue 
--     commission chargeback
------------------------------------------------------------------------------------


-- (1) void register
update
	tblregister
set
	void = @when,
	voidby = @by
where
	registerid = @registerid or
	adjustedregisterid = @registerid
	
	
-- (e) If CheckSite client, credit their shadow store for payments made on this deposit
insert tblNachaRegister2 ([Name],Amount,IsPersonal,CompanyID,ShadowStoreId,ClientID,TrustId,RegisterID,RegisterPaymentID,Flow)
select cp.ControlledAccountName,rp.Amount,0,c.CompanyID,c.AccountNumber,c.ClientID,c.TrustID,r.RegisterID,rp.RegisterPaymentId,'credit'
from tblRegisterPayment rp
join tblRegisterPaymentDeposit d on d.RegisterPaymentID = rp.RegisterPaymentID
	and d.DepositRegisterID = @registerid
join tblRegister r on r.RegisterID = rp.FeeRegisterID
join tblClient c on c.ClientID = r.ClientID and c.TrustID = 22
join tblCompany cp on cp.CompanyId = c.CompanyID
Where rp.Voided <> 1 and rp.Bounced <> 1


-- void any associated register payments as related to any payment deposits
update
	tblregisterpayment
set
	voided = 1,
	VoidDate = getdate(),
	Modified = getdate(),
	ModifiedBy = @by
where
	registerpaymentid in
	(
		select
			registerpaymentid
		from
			tblregisterpaymentdeposit
		where
			depositregisterid = @registerid
	)


-- void any associated register payment deposits as related to any payment deposits
update
	tblregisterpaymentdeposit
set
	voided = 1,
	VoidDate = getdate(),
	Modified = getdate(),
	ModifiedBy = @by
where
	registerpaymentid in
	(
		select
			registerpaymentid
		from
			tblregisterpaymentdeposit
		where
			depositregisterid = @registerid
	)
	
-- (e) If CheckSite client, credit their shadow store for payments made on this fee
insert tblNachaRegister2 ([Name],Amount,IsPersonal,CompanyID,ShadowStoreId,ClientID,TrustId,RegisterID,RegisterPaymentID,Flow)
select cp.ControlledAccountName,rp.Amount,0,c.CompanyID,c.AccountNumber,c.ClientID,c.TrustID,r.RegisterID,rp.RegisterPaymentId,'credit'
from tblRegisterPayment rp
join tblRegister r on r.RegisterID = rp.FeeRegisterID and rp.FeeRegisterID = @registerid
join tblClient c on c.ClientID = r.ClientID and c.TrustID = 22	
join tblCompany cp on cp.CompanyID = c.CompanyID
Where rp.Voided <> 1 and rp.Bounced <> 1



-- void any associated register payments as related to this register directly
update
	tblregisterpayment
set
	voided = 1,
	VoidDate = getdate(),
	Modified = getdate(),
	ModifiedBy = @by
where
	feeregisterid = @registerid


-- void any associated register payment deposits as related to any payment
update
	tblregisterpaymentdeposit
set
	voided = 1,
	VoidDate = getdate(),
	Modified = getdate(),
	ModifiedBy = @by
where
	registerpaymentid in
	(
		select
			registerpaymentid
		from
			tblregisterpayment
		where
			feeregisterid = @registerid
	)
	
	



-- (2) issue commission chargebacks
exec stp_PayChargeback @registerid


if @docleanup = 1
	begin
		-- find and set the client on this register
		declare @clientid int

		select
			@clientid = clientid
		from
			tblregister
		where
			registerid = @registerid

		exec stp_DoRegisterCleanup @clientid, @by
	end

if (select entrytypeid from tblregister where registerid = @registerid) = -2
	begin
		exec stp_DoRegisterFixAdjustedFee @registerid, @docleanup, @by
	end
end
GO
/****** Object:  ForeignKey [FK__tblLeadAf__Produ__60283922]    Script Date: 09/10/2010 18:32:56 ******/
ALTER TABLE [dbo].[tblLeadAffiliates]  WITH CHECK ADD FOREIGN KEY([ProductID])
REFERENCES [dbo].[tblLeadProducts] ([ProductID])
ON DELETE CASCADE
GO
/****** Object:  ForeignKey [FK__tblLeadAp__Affil__1F46DA62]    Script Date: 09/10/2010 18:32:56 ******/
ALTER TABLE [dbo].[tblLeadApplicant]  WITH CHECK ADD  CONSTRAINT [FK__tblLeadAp__Affil__1F46DA62] FOREIGN KEY([AffiliateID])
REFERENCES [dbo].[tblLeadAffiliates] ([AffiliateID])
GO
ALTER TABLE [dbo].[tblLeadApplicant] CHECK CONSTRAINT [FK__tblLeadAp__Affil__1F46DA62]
GO
/****** Object:  ForeignKey [FK__tblLeadAp__Produ__7B738E40]    Script Date: 09/10/2010 18:32:56 ******/
ALTER TABLE [dbo].[tblLeadApplicant]  WITH CHECK ADD  CONSTRAINT [FK__tblLeadAp__Produ__7B738E40] FOREIGN KEY([ProductID])
REFERENCES [dbo].[tblLeadProducts] ([ProductID])
GO
ALTER TABLE [dbo].[tblLeadApplicant] CHECK CONSTRAINT [FK__tblLeadAp__Produ__7B738E40]
GO
/****** Object:  ForeignKey [FK__tblLeadPr__Vendo__5C57A83E]    Script Date: 09/10/2010 18:32:56 ******/
ALTER TABLE [dbo].[tblLeadProducts]  WITH CHECK ADD FOREIGN KEY([VendorID])
REFERENCES [dbo].[tblLeadVendors] ([VendorID])
ON DELETE CASCADE
GO
/****** Object:  ForeignKey [FK__tblLeadVe__Categ__55AAAAAF]    Script Date: 09/10/2010 18:32:56 ******/
ALTER TABLE [dbo].[tblLeadVendors]  WITH CHECK ADD FOREIGN KEY([CategoryID])
REFERENCES [dbo].[tblLeadCategories] ([CategoryID])
ON DELETE CASCADE
GO
/****** Object:  ForeignKey [FK__tblLeadVe__LeadA__08AD8DCD]    Script Date: 09/10/2010 18:32:56 ******/
ALTER TABLE [dbo].[tblLeadVerification]  WITH CHECK ADD  CONSTRAINT [FK__tblLeadVe__LeadA__08AD8DCD] FOREIGN KEY([LeadApplicantID])
REFERENCES [dbo].[tblLeadApplicant] ([LeadApplicantID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[tblLeadVerification] CHECK CONSTRAINT [FK__tblLeadVe__LeadA__08AD8DCD]
GO

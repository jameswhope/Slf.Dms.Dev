Imports System.Collections.Generic
Imports System.Data
Imports System.Data.SqlClient

Imports DevExpress.Web.ASPxNavBar

Imports Drg.Util.DataAccess
Imports Drg.Util.DataHelpers
Imports Drg.Util.Helpers
Imports Slf.Dms.Records

Partial Class negotiation_NewDefault
    Inherits System.Web.UI.Page
    Private Const PageSize As Integer = 5
#Region "Fields"

    Public UserID As Integer

    Private hCompanyVer As New Hashtable
    Private hDatesVer As New Hashtable
    Private hRepsVer As New Hashtable

#End Region 'Fields

#Region "Methods"

    Public Sub LoadSearches()
        Dim ssql As String = String.Format("SELECT TOP 5 Terms, MAX(Search), MAX(UserSearchID) FROM tblUserSearch with(nolock) WHERE UserID = {0} group BY Terms ORDER BY MAX(Search) DESC, MAX(UserSearchID) DESC", UserID)

        Using dt As DataTable = SqlHelper.GetDataTable(ssql, CommandType.Text)
            nbSearch.Groups(1).Items.Clear()
            For Each search As DataRow In dt.Rows
                nbSearch.Groups(1).Items.Add(New NavBarItem(search("terms").ToString))
            Next
        End Using
    End Sub

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        UserID = DataHelper.Nz_int(Page.User.Identity.Name)
        Dim ugID As String = DataHelper.FieldLookup("tblUser", "UserGroupID", "UserID = " & Page.User.Identity.Name)

        If Session("UserID") Is Nothing Then
            Session("UserID") = UserID
        End If

        If Not Page.IsPostBack Then
            nbMain.Groups(5).Visible = PermissionHelperLite.HasPermission(UserID, "Home-Verification-Verification History")
            nbMain.Groups(4).Visible = SwitchGroupHelper.UserHasGroups(UserID)

            LoadSearches()

            LoadVisits()


        End If

        LoadStatisticRows()

        ShowActionRows(ugID)
      

    End Sub

    Protected Sub gvVerificationHistory_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs)
        If e.Row.RowType = DataControlRowType.DataRow Then
            e.Row.Attributes.Add("onmouseover", "this.style.backgroundColor = '#d3d3d3'; this.style.filter = 'alpha(opacity=75)';")
            e.Row.Attributes.Add("onmouseout", "this.style.backgroundColor = ''; this.style.filter = '';")

            Dim imgTreeDate As HtmlImage = TryCast(e.Row.Cells(0).FindControl("imgTreeDate"), HtmlImage)
            Dim imgTreeCompany As HtmlImage = TryCast(e.Row.FindControl("imgTreeCompany"), HtmlImage)
            Dim imgTreeRep As HtmlImage = TryCast(e.Row.FindControl("imgTreeRep"), HtmlImage)
            Dim row As System.Data.DataRowView = CType(e.Row.DataItem, Data.DataRowView)
            Dim transferred As String = CStr(row("completed")).Replace("/", "")
            Dim company As String = CStr(row("company"))
            Dim rep As String = CStr(row("rep"))

            If hDatesVer.Contains(transferred) Then
                If hCompanyVer.Contains(transferred & company) Then
                    If hRepsVer.Contains(transferred & company & rep) Then
                        e.Row.Attributes.Add("id", String.Format("tr_{0}_child{1}", transferred & company & rep, e.Row.RowIndex))
                        e.Row.Cells(5).Text = ""
                        e.Row.Cells(7).Text = ""
                        imgTreeRep.Visible = False
                    Else
                        hRepsVer.Add(transferred & company & rep, Nothing)
                        e.Row.Attributes.Add("id", String.Format("tr_{0}_child{1}", transferred & company, e.Row.RowIndex))
                        imgTreeRep.Attributes.Add("onclick", "toggleDocument('" & transferred & company & rep & "','" & sender.ClientID & "', 4, '" & String.Format("tr_{0}_child{1}", transferred & company, e.Row.RowIndex) & "');")
                    End If
                    e.Row.Cells(3).Text = ""
                    imgTreeCompany.Visible = False
                Else
                    hCompanyVer.Add(transferred & company, Nothing)
                    e.Row.Attributes.Add("id", String.Format("tr_{0}_child{1}", transferred, e.Row.RowIndex))
                    imgTreeCompany.Attributes.Add("onclick", "toggleDocument('" & transferred & company & "','" & sender.ClientID & "', 2, '" & String.Format("tr_{0}_child{1}", transferred, e.Row.RowIndex) & "');")
                    imgTreeRep.Visible = False
                End If
                e.Row.Style("display") = "none"
                e.Row.Cells(1).Text = ""
                imgTreeDate.Visible = False
            Else
                hDatesVer.Add(transferred, Nothing)
                e.Row.Attributes.Add("id", String.Format("tr_{0}_parent", transferred))
                imgTreeDate.Attributes.Add("onclick", "toggleDocument('" & transferred & "','" & sender.ClientID & "', 0, '" & String.Format("tr_{0}_parent", transferred) & "');")
                imgTreeCompany.Visible = False
                imgTreeRep.Visible = False
            End If
        End If
    End Sub

    Public Sub LoadStatisticRows()
        Dim iRejected As Integer = SqlHelper.ExecuteScalar(String.Format("select Count(*) from tblsettlements where createdby = {0} and status = 'r' and active = 1", UserID), CommandType.Text)
        Dim iAccepted As Integer = SqlHelper.ExecuteScalar(String.Format("select Count(*) from tblsettlements where createdby = {0} and active = 1 and status = 'a'", UserID), CommandType.Text)

        nbMain.Groups(2).Items.Clear()
        nbMain.Groups(2).Items.Add(New NavBarItem(String.Format("Settlements Rejected : {0}", iRejected)))
        nbMain.Groups(2).Items.Add(New NavBarItem(String.Format("Settlements Accepted : {0}", iAccepted)))

        nbMain.Groups(2).Items.Add(New NavBarItem(String.Format("Settlements Waiting on SIF         : {0}", getAttachSIFCount), "AttachSIF", Nothing, "attach/default.aspx"))
        nbMain.Groups(2).Items.Add(New NavBarItem(String.Format("Checks By Phone ready to Process   : {0}", getChecksByPhoneCount), "CheckByPhone", Nothing, "chkbyphone/default.aspx"))
        nbMain.Groups(2).Items.Add(New NavBarItem(String.Format("Settlements w/ Shortage            : {0}", getOversCount), "Shortage", Nothing, "managers/default.aspx"))
        nbMain.Groups(2).Items.Add(New NavBarItem(String.Format("Settlements w/ Client Stipulations : {0}", getStipulationsCount), "Stip", Nothing, "managers/default.aspx"))

        Dim ssql As String = String.Format("select  mc.MatterStatusCode, count(* )[Total] from tblsettlements s with(nolock) inner join tblmatter m with(nolock) on s.matterid = m.matterid inner join tblmatterstatuscode  mc with(nolock) on m.matterstatuscodeid = mc.matterstatuscodeid where s.createdby = {0} group by mc.MatterStatusCode order by mc.MatterStatusCode option (fast 100)", UserID)
        Using dt As DataTable = SqlHelper.GetDataTable(ssql, CommandType.Text)
            For Each row As DataRow In dt.Rows
                Dim statText As String = String.Format("{0}:{1}", row("MatterStatusCode").ToString, row("Total").ToString)
                nbMain.Groups(2).Items.Add(New NavBarItem(statText))
            Next
        End Using
    End Sub

    Public Sub LoadCalls()
        Dim dt As DataTable = DialerHelper.GetLastCalls(UserID)

        Dim rpt As Repeater = nbMain.FindControl("rptCalls")

        rpt.DataSource = dt
        rpt.DataBind()
        rpt.Visible = rpt.Items.Count > 0
        rpt.Visible = rpt.Items.Count = 0
    End Sub

    Public Sub LoadVisits()
        Dim ssql As String = String.Format("SELECT DISTINCT TOP 5 ucv.ClientID, p.FirstName + ' ' + p.LastName as [Name], MAX(ucv.VisitedOn) FROM tblUserClientVisit as ucv inner join tblClient as c on c.ClientID = ucv.ClientID inner join tblPerson as p on p.PersonID = c.PrimaryPersonID WHERE ucv.UserID = {0} GROUP BY ucv.ClientID, p.FirstName, p.LastName ORDER BY MAX(ucv.VisitedOn) DESC", UserID)
        Using dt As DataTable = SqlHelper.GetDataTable(ssql, CommandType.Text)
            nbSearch.Groups(2).Items.Clear()
            For Each search As DataRow In dt.Rows
                nbSearch.Groups(2).Items.Add(New NavBarItem(search("Name").ToString, "", "", String.Format("~/clients/client/?id={0}", search("clientid").ToString)))
            Next
        End Using
    End Sub

    Public Sub ShowActionRows(ByVal UserGroupID As Integer)
        Select Case UserGroupID
            Case 3, 4, 6, 11, 19
                nbMain.Groups(2).Items(2).Visible = True
                nbMain.Groups(2).Items(3).Visible = True
                nbMain.Groups(2).Items(4).Visible = True
                nbMain.Groups(2).Items(5).Visible = True
            Case Else
                nbMain.Groups(2).Items(2).Visible = False
                nbMain.Groups(2).Items(3).Visible = False
                nbMain.Groups(2).Items(4).Visible = False
                nbMain.Groups(2).Items(5).Visible = False
        End Select
    End Sub

    Public Function getAttachSIFCount() As Integer
        Dim myParams As New List(Of SqlParameter)
        myParams.Add(New SqlParameter("UserId", UserID))
        myParams.Add(New SqlParameter("SearchTerm", "%"))
        Using dt As DataTable = SqlHelper.GetDataTable("stp_NegotiationsSearchGetSettlementsWaitingOnSIF", Data.CommandType.StoredProcedure, myParams.ToArray)
            getAttachSIFCount = dt.Rows.Count
        End Using

        Return getAttachSIFCount
    End Function

    Public Function getChecksByPhoneCount() As Integer
        Dim myParams As New List(Of SqlParameter)
        myParams.Add(New SqlParameter("UserId", UserID))
        Using dt As DataTable = SqlHelper.GetDataTable("stp_GetCheckByPhoneProcessing", Data.CommandType.StoredProcedure, myParams.ToArray)
            getChecksByPhoneCount = dt.Rows.Count
        End Using

        Return getChecksByPhoneCount
    End Function

    Public Function getOversCount() As Integer
        Using dt As DataTable = SqlHelper.GetDataTable("stp_GetSettlementOvers", Data.CommandType.StoredProcedure)
            getOversCount = dt.Rows.Count
        End Using

        Return getOversCount
    End Function

    Public Function getStipulationsCount() As Integer
        Using dt As DataTable = SqlHelper.GetDataTable("stp_GetSettlementStipulations", Data.CommandType.StoredProcedure)
            getStipulationsCount = dt.Rows.Count
        End Using

        Return getStipulationsCount
    End Function

#End Region 'Methods
#Region "Other Events"
    Protected Sub grvResultsChild_RowCommand(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewCommandEventArgs)
        ''<%=ResolveUrl("~/negotiation/clients/") %>?cid=' + cid + '&crid=' + crid;

    End Sub
    Protected Sub grvResultsChild_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs)
        Select Case e.Row.RowType
            Case DataControlRowType.DataRow
                Dim rowView As DataRowView = CType(e.Row.DataItem, DataRowView)

                e.Row.Style("cursor") = "hand"
                e.Row.Attributes.Add("onmouseover", "this.style.backgroundColor = '#DADAFA'; this.style.filter = 'alpha(opacity=75)';")
                e.Row.Attributes.Add("onmouseout", "this.style.backgroundColor = ''; this.style.filter = '';")
                e.Row.Attributes.Add("onclick", Page.ClientScript.GetPostBackEventReference(sender, "Select$" + e.Row.RowIndex.ToString()))

                If (Not rowView("OriginalCreditorName") Is DBNull.Value) AndAlso (Not rowView("OriginalCreditorName").Equals(rowView("CurrentCreditorName"))) Then
                    Dim ph As PlaceHolder = TryCast(e.Row.FindControl("phCreditor"), PlaceHolder)
                    Dim lbl As New Label
                    lbl.Text = rowView("OriginalCreditorName").ToString
                    ph.Controls.Add(lbl)
                    ph.Controls.Add(New LiteralControl("<br/>"))
                    Dim img As New Image
                    img.ImageUrl = "images/rootend3.png"
                    ph.Controls.Add(img)
                    lbl = New Label
                    lbl.Text = rowView("CurrentCreditorName").ToString
                    ph.Controls.Add(lbl)

                Else
                    Dim ph As PlaceHolder = TryCast(e.Row.FindControl("phCreditor"), PlaceHolder)
                    Dim lbl As New Label
                    lbl.Text = rowView("CurrentCreditorName").ToString
                    ph.Controls.Add(lbl)
                End If

                e.Row.Cells(1).Text = LocalHelper.FormatPhone(rowView("CurrentCreditorPhone").ToString)
                e.Row.Cells(2).Text = "****" & Right(rowView("CurrentAccountNumber").ToString, 4)

        End Select
    End Sub
    Protected Sub grvResults_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs)
        Select Case e.Row.RowType
            Case DataControlRowType.DataRow
                Dim rowView As Slf.Dms.Records.ClientSearch = CType(e.Row.DataItem, Slf.Dms.Records.ClientSearch)
                'e.Row.Style("cursor") = "hand"
                'e.Row.Attributes.Add("onmouseover", "this.style.backgroundColor = '#DADAFA'; this.style.filter = 'alpha(opacity=75)';")
                'e.Row.Attributes.Add("onmouseout", "this.style.backgroundColor = ''; this.style.filter = '';")

                Dim ssql As String = "get_ClientAccountOverviewList"
                Dim params As New List(Of SqlParameter)
                params.Add(New SqlParameter("clientId", rowView.ClientID))

                Using dt As DataTable = SqlHelper.GetDataTable(ssql, CommandType.StoredProcedure, params.ToArray)
                    Dim pnl As Panel = TryCast(e.Row.FindControl("pnlContent"), Panel)
                    Dim gv As GridView = Nothing
                    For Each ctl As Control In pnl.Controls
                        If TypeOf ctl Is GridView Then
                            gv = TryCast(ctl, GridView)
                            AddHandler gv.RowDataBound, AddressOf grvResultsChild_RowDataBound
                            AddHandler gv.RowCommand, AddressOf grvResultsChild_RowCommand

                            gv.DataSource = dt
                            gv.DataBind()
                        End If
                    Next

                End Using

        End Select
    End Sub

    Protected Sub grvResults_PageIndexChanging(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewPageEventArgs)
        Requery(hdnSearch.Value, hdnDepth.Value, hdnOrder.Value, e.NewPageIndex)
    End Sub

    Protected Sub grvResults_Sorting(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewSortEventArgs)
        Requery(hdnSearch.Value, hdnDepth.Value, "ORDER BY " & e.SortExpression & " " & IIf(e.SortDirection = SortDirection.Ascending, "ASC", "DESC"))
    End Sub
#End Region
#Region "Utilities"
    Public Sub Requery(ByVal search As String, ByVal depth As String, ByVal order As String, Optional ByVal pageIndex As Integer = 0)
        If Not String.IsNullOrEmpty(search) Then
            Dim results As Integer = RequeryClients(StringHelper.SplitQuoted(search, " ", """").ToArray(GetType(String)), depth, order, pageIndex)

            UserHelper.StoreSearch(UserID, search, results, results, 0, 0, 0, 0, 0)
        End If

        hdnSearch.Value = search
        hdnDepth.Value = depth
        hdnOrder.Value = order
    End Sub

    Private Function RequeryClients(ByVal Values() As String, ByVal depth As String, ByVal orderBy As String, ByVal pageIndex As Integer) As Integer
        Dim Where As String = String.Empty

        Dim Section As String = String.Empty
        Dim Sections As New List(Of String)

        For Each Value As String In Values

            If Value.ToLower = "and" Then
                If Section.Length > 0 Then
                    Sections.Add("(" & Section & ")")
                End If

                Section = String.Empty
            Else
                If Section.Length > 0 Then
                    Section += " OR "
                End If

                Section &= "[Name] LIKE '%" & Value.Replace("'", "''") & "%' " _
                    & "OR [AccountNumber] LIKE '%" & Value.Replace("'", "''") & "%' " _
                    & "OR [SSN] LIKE '%" & Value.Replace("'", "''") & "%' " _
                    & "OR [Address] LIKE '%" & Value.Replace("'", "''") & "%' " _
                    & "OR [ContactNumber] LIKE '%" & Value.Replace("'", "''") & "%'"
            End If
        Next

        If Section.Length > 0 Then
            Sections.Add("(" & Section & ")")
        End If

        If Sections.Count > 0 Then
            Where = "WHERE (" & String.Join(" AND ", Sections.ToArray()) & ")"
        Else
            Where = "WHERE 0=1"
        End If

        Dim ClientSearches As New List(Of ClientSearch)
        Dim searchParams As New List(Of SqlParameter)
        searchParams.Add(New SqlParameter("where", Where))

        If Not String.IsNullOrEmpty(orderBy) Then
            searchParams.Add(New SqlParameter("orderby", orderBy))
        End If

        If depth = "assignments" Then
            searchParams.Add(New SqlParameter("ids", GetMyAssignments()))
        End If

        Using dt As DataTable = SqlHelper.GetDataTable("stp_NegotiationClientSearches", Data.CommandType.StoredProcedure, searchParams.ToArray)
            For Each reader As DataRow In dt.Rows
                ClientSearches.Add(New ClientSearch(reader("ClientID").ToString, _
                    reader("ClientStatus").ToString, _
                    reader("Type").ToString, _
                    reader("Name").ToString, _
                    reader("Address").ToString, _
                    reader("ContactType").ToString, _
                    reader("ContactNumber").ToString, ResolveUrl("~/")))
            Next
        End Using

        Dim gv As GridView = nbMain.Groups(1).Items(0).FindControl("grvResults")

        gv.PageIndex = pageIndex
        gv.PageSize = PageSize
        gv.DataSource = ClientSearches
        gv.DataBind()


        Return ClientSearches.Count
    End Function

    Private Function GetMyAssignments() As String
        Dim filterIDs As New List(Of String)
        Dim entityIDs As New List(Of String)

        filterIDs.Add("-1")

        Using cmd As New SqlCommand("SELECT DISTINCT NegotiationEntityID FROM tblNegotiationEntity WHERE Deleted = 0 and UserID = " & UserID, ConnectionFactory.Create())
            Using cmd.Connection
                cmd.Connection.Open()

                Using reader As SqlDataReader = cmd.ExecuteReader()
                    While reader.Read()
                        entityIDs.Add(reader("NegotiationEntityID"))
                    End While
                End Using
            End Using
        End Using

        For Each entityID As Integer In entityIDs
            filterIDs.Add(GetFilters(entityID))
        Next

        Return String.Join(", ", filterIDs.ToArray())
    End Function

    Private Function GetFilters(ByVal entityID As String) As String
        Dim list As New List(Of String)()

        list.Add("-1")

        Using cmd As New SqlCommand("SELECT isnull(FilterID, 0) as FilterID FROM tblNegotiationFilterXref WHERE Deleted = 0 and EntityID = " & entityID, ConnectionFactory.Create())
            Using cmd.Connection
                cmd.Connection.Open()

                Using reader As SqlDataReader = cmd.ExecuteReader()
                    While reader.Read()
                        list.Add(reader("FilterID"))
                    End While
                End Using
            End Using
        End Using

        AddChildFiltersRec(list, entityID)

        Return String.Join(",", list.ToArray())
    End Function

    Private Sub AddChildFiltersRec(ByRef list As List(Of String), ByVal entityID As String)
        Dim ids As New List(Of String)

        Using cmd As New SqlCommand("SELECT NegotiationEntityID FROM tblNegotiationEntity WHERE ParentNegotiationEntityID = " & entityID, ConnectionFactory.Create())
            Using cmd.Connection
                cmd.Connection.Open()

                Using reader As SqlDataReader = cmd.ExecuteReader()
                    While reader.Read()
                        ids.Add(reader("NegotiationEntityID"))
                    End While
                End Using
            End Using
        End Using

        If ids.Count > 0 Then
            Using cmd As New SqlCommand("SELECT isnull(xr.FilterID, 0) as FilterID FROM tblNegotiationFilterXref as xr inner join tblNegotiationFilters as nf on nf.FilterID = xr.FilterID WHERE xr.Deleted = 0 and nf.Deleted = 0 and nf.FilterType = 'leaf' and xr.EntityID in (" & String.Join(", ", ids.ToArray()) & ")", ConnectionFactory.Create())
                Using cmd.Connection
                    cmd.Connection.Open()

                    Using reader As SqlDataReader = cmd.ExecuteReader()
                        While reader.Read()
                            If Not list.Contains(reader("FilterID")) Then
                                list.Add(reader("FilterID"))
                            End If
                        End While
                    End Using
                End Using
            End Using

            For Each id As Integer In ids
                AddChildFiltersRec(list, id)
            Next
        End If
    End Sub

    Private Function GetClientAccountList(ByVal clientID As String) As String
        Dim table As New System.Text.StringBuilder

        Dim ssql As String = "get_ClientAccountOverviewList"
        Dim params As New List(Of SqlParameter)
        params.Add(New SqlParameter("clientId", clientID))

        Using dt As DataTable = SqlHelper.GetDataTable(ssql, CommandType.StoredProcedure, params.ToArray)
            If dt.Rows.Count = 0 Then
                Return "<div style='color:red'>No accounts exist for this client.</div>"
            End If
            table.Append("<table onmouseover='RowHover(this, true)' onmouseout='RowHover(this, false)' onselectstart = 'return false;' border='0' cellpadding='2' cellspacing='0' style='border: solid 1px #a0a0a0; width: 100%; background-color: #ffffff'>")
            table.Append("<thead>")
            table.Append(" <tr>")
            table.Append("  <th style='background-color:#c0c0c0; border-bottom: solid 1px #a0a0a0; padding-right:10px' align='left'>Creditor</th>")
            table.Append("  <th style='background-color:#c0c0c0; border-bottom: solid 1px #a0a0a0; padding-right:10px' align='left'>Phone</th>")
            table.Append("  <th style='background-color:#c0c0c0; border-bottom: solid 1px #a0a0a0; padding-right:10px' align='left'>Account #</th>")
            table.Append("  <th style='background-color:#c0c0c0; border-bottom: solid 1px #a0a0a0; padding-right:10px' align='center'>Status</th>")
            table.Append("  <th style='background-color:#c0c0c0; border-bottom: solid 1px #a0a0a0; padding-right:10px' align='right'>Original</th>")
            table.Append("  <th style='background-color:#c0c0c0; border-bottom: solid 1px #a0a0a0; padding-right:10px' align='right'>Current</th>")
            table.Append(" </tr>")
            table.Append("</thead>")
            table.Append("<tbody>")

            For Each row As DataRow In dt.Rows
                table.Append("<a>")
                table.Append("<tr style='cursor:hand' onclick='RowClick(" & clientID & "," & row("AccountID").ToString & ")'>")

                If (Not row("OriginalCreditorName") Is DBNull.Value) AndAlso (Not row("OriginalCreditorName").Equals(row("CurrentCreditorName"))) Then
                    table.Append("<td style='padding-right:10px; vertical-align: top'>" & row("OriginalCreditorName").ToString & "<br />" _
                        & "<img src='images/rootend3.png' style='margin:3 0 0 5;' align='absmiddle' border='0' />" & row("CurrentCreditorName").ToString & "</td>")
                    table.Append("<td style='padding-right:10px; vertical-align: top'>" & LocalHelper.FormatPhone(row("OriginalCreditorPhone").ToString) & "<br />" _
                        & LocalHelper.FormatPhone(row("CurrentCreditorPhone").ToString) & "</td>")
                Else
                    table.Append("<td style='padding-right:10px; vertical-align: top'>" & LocalHelper.FormatPhone(row("CurrentCreditorName").ToString) & "</td>")
                    table.Append("<td style='padding-right:10px; vertical-align: top'>" & LocalHelper.FormatPhone(row("CurrentCreditorPhone").ToString) & "</td>")
                End If

                table.Append("<td style='padding-right:10px; vertical-align: top'>" & "****" & Right(row("CurrentAccountNumber").ToString, 4) & "</td>")
                table.Append("<td style='padding-right:10px; vertical-align: top' align='center'>" & row("AccountStatusCode").ToString & "</td>")
                table.Append("<td style='padding-right:10px; vertical-align: top' align='right'>" & String.Format("{0:c}", Val(row("OriginalAmount"))) & "</td>")
                table.Append("<td style='padding-right:10px; vertical-align: top' align='right'>" & String.Format("{0:c}", Val(row("CurrentAmount"))) & "</td>")

                table.Append("</tr>")
                table.Append("</a>")
            Next
        End Using


        table.Append("</tbody>")
        table.Append("</table>")

        Return table.ToString
    End Function



#End Region

    Protected Sub lnkSearch_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        Dim txt As TextBox = nbSearch.Groups(0).Items(0).FindControl("txtSearch")
        Dim rbl As RadioButtonList = nbSearch.Groups(0).Items(0).FindControl("rblSearchType")
        If Not IsNothing(txt) AndAlso Not IsNothing(rbl) Then
            Requery(txt.Text, rbl.SelectedItem.Value, "")
        End If


    End Sub

    Protected Sub nbSearch_ItemClick(ByVal source As Object, ByVal e As DevExpress.Web.ASPxNavBar.NavBarItemEventArgs) Handles nbSearch.ItemClick
        Select e.Item.Group.Index
            Case 1
                Requery(e.Item.Text, "system", "")
                Dim txt As TextBox = nbSearch.Groups(0).Items(0).FindControl("txtSearch")
                txt.Text = e.Item.Text
            Case Else

        End Select

    End Sub

 
End Class